# File: `java.org.apache.commons.collections4.ArrayStack`

## Class: `java.org.apache.commons.collections4.ArrayStack` / `public class ArrayStack<E> extends ArrayList<E>`


        <!-- 6837a5a5-9f1d-11ea-8001-333445793454 <=< ACCEPT -->
        An implementation of the {@link java.util.Stack} API that is based on an
        <code>ArrayList</code> instead of a <code>Vector</code>, so it is not
        synchronized to protect against multi-threaded access.  The implementation
        is therefore operates faster in environments where you do not need to
        worry about multiple thread contention.
        <p>
        The removal order of an <code>ArrayStack</code> is based on insertion
        order: The most recently added element is removed first.  The iteration
        order is <i>not</i> the same as the removal order.  The iterator returns
        elements from the bottom up.
        <p>
        Unlike <code>Stack</code>, <code>ArrayStack</code> accepts null entries.
        <p>
        <b>Note:</b> From version 4.0 onwards, this class does not implement the
        removed {@code Buffer} interface anymore.
        @see java.util.Stack
        @since 1.0
        @version $Id$
        @deprecated use {@link java.util.ArrayDeque} instead (available from Java 1.6)
        <!-- ACCEPT >=> 6837a5a5-9f1d-11ea-8001-333445793454 -->



## Field: `java.org.apache.commons.collections4.ArrayStack` / `private static final long serialVersionUID`


        <!-- 6837a5a6-9f1d-11ea-8002-333445793454 <=< ACCEPT -->
        Ensure serialization compatibility
        <!-- ACCEPT >=> 6837a5a6-9f1d-11ea-8002-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.ArrayStack` / `public ArrayStack()`


        <!-- 6837a5a7-9f1d-11ea-8003-333445793454 <=< ACCEPT -->
        Constructs a new empty <code>ArrayStack</code>. The initial size
        is controlled by <code>ArrayList</code> and is currently 10.
        <!-- ACCEPT >=> 6837a5a7-9f1d-11ea-8003-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.ArrayStack` / `public ArrayStack(final int initialSize)`


        <!-- 6837a5a8-9f1d-11ea-8004-333445793454 <=< ACCEPT -->
        Constructs a new empty <code>ArrayStack</code> with an initial size.
        @param initialSize  the initial size to use
        @throws IllegalArgumentException  if the specified initial size
        is negative
        <!-- ACCEPT >=> 6837a5a8-9f1d-11ea-8004-333445793454 -->



## Method: `java.org.apache.commons.collections4.ArrayStack` / `public boolean empty()`


        <!-- 6837a5a9-9f1d-11ea-8005-333445793454 <=< ACCEPT -->
        Return <code>true</code> if this stack is currently empty.
        <p>
        This method exists for compatibility with <code>java.util.Stack</code>.
        New users of this class should use <code>isEmpty</code> instead.
        @return true if the stack is currently empty
        <!-- ACCEPT >=> 6837a5a9-9f1d-11ea-8005-333445793454 -->



## Method: `java.org.apache.commons.collections4.ArrayStack` / `public E peek() throws EmptyStackException`


        <!-- 6837a5aa-9f1d-11ea-8006-333445793454 <=< ACCEPT -->
        Returns the top item off of this stack without removing it.
        @return the top item on the stack
        @throws EmptyStackException  if the stack is empty
        <!-- ACCEPT >=> 6837a5aa-9f1d-11ea-8006-333445793454 -->



## Method: `java.org.apache.commons.collections4.ArrayStack` / `public E peek(final int n) throws EmptyStackException`


        <!-- 6837a5ab-9f1d-11ea-8007-333445793454 <=< ACCEPT -->
        Returns the n'th item down (zero-relative) from the top of this
        stack without removing it.
        @param n  the number of items down to go
        @return the n'th item on the stack, zero relative
        @throws EmptyStackException  if there are not enough items on the
        stack to satisfy this request
        <!-- ACCEPT >=> 6837a5ab-9f1d-11ea-8007-333445793454 -->



## Method: `java.org.apache.commons.collections4.ArrayStack` / `public E pop() throws EmptyStackException`


        <!-- 6837ccaf-9f1d-11ea-8008-333445793454 <=< ACCEPT -->
        Pops the top item off of this stack and return it.
        @return the top item on the stack
        @throws EmptyStackException  if the stack is empty
        <!-- ACCEPT >=> 6837ccaf-9f1d-11ea-8008-333445793454 -->



## Method: `java.org.apache.commons.collections4.ArrayStack` / `public E push(final E item)`


        <!-- 6837ccb0-9f1d-11ea-8009-333445793454 <=< ACCEPT -->
        Pushes a new item onto the top of this stack. The pushed item is also
        returned. This is equivalent to calling <code>add</code>.
        @param item  the item to be added
        @return the item just pushed
        <!-- ACCEPT >=> 6837ccb0-9f1d-11ea-8009-333445793454 -->



## Method: `java.org.apache.commons.collections4.ArrayStack` / `public int search(final Object object)`


        <!-- 6837ccb1-9f1d-11ea-800a-333445793454 <=< ACCEPT -->
        Returns the one-based position of the distance from the top that the
        specified object exists on this stack, where the top-most element is
        considered to be at distance <code>1</code>.  If the object is not
        present on the stack, return <code>-1</code> instead.  The
        <code>equals()</code> method is used to compare to the items
        in this stack.
        @param object  the object to be searched for
        @return the 1-based depth into the stack of the object, or -1 if not found
        <!-- ACCEPT >=> 6837ccb1-9f1d-11ea-800a-333445793454 -->



# File: `java.org.apache.commons.collections4.Bag`

## Interface: `java.org.apache.commons.collections4.Bag` / `public interface Bag<E> extends Collection<E>`


        <!-- 6837ccb2-9f1d-11ea-800b-333445793454 <=< ACCEPT -->
        Defines a collection that counts the number of times an object appears in
        the collection.
        <p>
        Suppose you have a Bag that contains <code>{a, a, b, c}</code>.
        Calling {@link #getCount(Object)} on <code>a</code> would return 2, while
        calling {@link #uniqueSet()} would return <code>{a, b, c}</code>.
        <p>
        <i>NOTE: This interface violates the {@link Collection} contract.</i>
        The behavior specified in many of these methods is <i>not</i> the same
        as the behavior specified by <code>Collection</code>.
        The noncompliant methods are clearly marked with "(Violation)".
        Exercise caution when using a bag as a <code>Collection</code>.
        <p>
        This violation resulted from the original specification of this interface.
        In an ideal world, the interface would be changed to fix the problems, however
        it has been decided to maintain backwards compatibility instead.
        @param <E> the type held in the bag
        @since 2.0
        @version $Id$
        <!-- ACCEPT >=> 6837ccb2-9f1d-11ea-800b-333445793454 -->



## Method: `java.org.apache.commons.collections4.Bag` / `int getCount(Object object)`


        <!-- 6837ccb3-9f1d-11ea-800c-333445793454 <=< ACCEPT -->
        Returns the number of occurrences (cardinality) of the given
        object currently in the bag. If the object does not exist in the
        bag, return 0.
        @param object  the object to search for
        @return the number of occurrences of the object, zero if not found
        <!-- ACCEPT >=> 6837ccb3-9f1d-11ea-800c-333445793454 -->



## Method: `java.org.apache.commons.collections4.Bag` / `boolean add(E object)`


        <!-- 6837ccb4-9f1d-11ea-800d-333445793454 <=< ACCEPT -->
        <i>(Violation)</i>
        Adds one copy of the specified object to the Bag.
        <p>
        If the object is already in the {@link #uniqueSet()} then increment its
        count as reported by {@link #getCount(Object)}. Otherwise add it to the
        {@link #uniqueSet()} and report its count as 1.
        <p>
        Since this method always increases the size of the bag,
        according to the {@link Collection#add(Object)} contract, it
        should always return <code>true</code>.  Since it sometimes returns
        <code>false</code>, this method violates the contract.
        @param object  the object to add
        @return <code>true</code> if the object was not already in the <code>uniqueSet</code>
        <!-- ACCEPT >=> 6837ccb4-9f1d-11ea-800d-333445793454 -->



## Method: `java.org.apache.commons.collections4.Bag` / `boolean add(E object, int nCopies)`


        <!-- 6837ccb5-9f1d-11ea-800e-333445793454 <=< ACCEPT -->
        Adds <code>nCopies</code> copies of the specified object to the Bag.
        <p>
        If the object is already in the {@link #uniqueSet()} then increment its
        count as reported by {@link #getCount(Object)}. Otherwise add it to the
        {@link #uniqueSet()} and report its count as <code>nCopies</code>.
        @param object  the object to add
        @param nCopies  the number of copies to add
        @return <code>true</code> if the object was not already in the <code>uniqueSet</code>
        <!-- ACCEPT >=> 6837ccb5-9f1d-11ea-800e-333445793454 -->



## Method: `java.org.apache.commons.collections4.Bag` / `boolean remove(Object object)`


        <!-- 6837ccb6-9f1d-11ea-800f-333445793454 <=< ACCEPT -->
        <i>(Violation)</i>
        Removes all occurrences of the given object from the bag.
        <p>
        This will also remove the object from the {@link #uniqueSet()}.
        <p>
        According to the {@link Collection#remove(Object)} method,
        this method should only remove the <i>first</i> occurrence of the
        given object, not <i>all</i> occurrences.
        @param object  the object to remove
        @return <code>true</code> if this call changed the collection
        <!-- ACCEPT >=> 6837ccb6-9f1d-11ea-800f-333445793454 -->



## Method: `java.org.apache.commons.collections4.Bag` / `boolean remove(Object object, int nCopies)`


        <!-- 6837ccb7-9f1d-11ea-8010-333445793454 <=< ACCEPT -->
        Removes <code>nCopies</code> copies of the specified object from the Bag.
        <p>
        If the number of copies to remove is greater than the actual number of
        copies in the Bag, no error is thrown.
        @param object  the object to remove
        @param nCopies  the number of copies to remove
        @return <code>true</code> if this call changed the collection
        <!-- ACCEPT >=> 6837ccb7-9f1d-11ea-8010-333445793454 -->



## Method: `java.org.apache.commons.collections4.Bag` / `Set<E> uniqueSet()`


        <!-- 6837ccb8-9f1d-11ea-8011-333445793454 <=< ACCEPT -->
        Returns a {@link Set} of unique elements in the Bag.
        <p>
        Uniqueness constraints are the same as those in {@link java.util.Set}.
        @return the Set of unique Bag elements
        <!-- ACCEPT >=> 6837ccb8-9f1d-11ea-8011-333445793454 -->



## Method: `java.org.apache.commons.collections4.Bag` / `int size()`


        <!-- 6837ccb9-9f1d-11ea-8012-333445793454 <=< ACCEPT -->
        Returns the total number of items in the bag across all types.
        @return the total size of the Bag
        <!-- ACCEPT >=> 6837ccb9-9f1d-11ea-8012-333445793454 -->



## Method: `java.org.apache.commons.collections4.Bag` / `boolean containsAll(Collection<?> coll)`


        <!-- 6837ccba-9f1d-11ea-8013-333445793454 <=< ACCEPT -->
        <i>(Violation)</i>
        Returns <code>true</code> if the bag contains all elements in
        the given collection, respecting cardinality.  That is, if the
        given collection <code>coll</code> contains <code>n</code> copies
        of a given object, calling {@link #getCount(Object)} on that object must
        be <code>&gt;= n</code> for all <code>n</code> in <code>coll</code>.
        <p>
        The {@link Collection#containsAll(Collection)} method specifies
        that cardinality should <i>not</i> be respected; this method should
        return true if the bag contains at least one of every object contained
        in the given collection.
        @param coll  the collection to check against
        @return <code>true</code> if the Bag contains all the collection
        <!-- ACCEPT >=> 6837ccba-9f1d-11ea-8013-333445793454 -->



## Method: `java.org.apache.commons.collections4.Bag` / `boolean removeAll(Collection<?> coll)`


        <!-- 6837ccbb-9f1d-11ea-8014-333445793454 <=< ACCEPT -->
        <i>(Violation)</i>
        Remove all elements represented in the given collection,
        respecting cardinality.  That is, if the given collection
        <code>coll</code> contains <code>n</code> copies of a given object,
        the bag will have <code>n</code> fewer copies, assuming the bag
        had at least <code>n</code> copies to begin with.
        <p>The {@link Collection#removeAll(Collection)} method specifies
        that cardinality should <i>not</i> be respected; this method should
        remove <i>all</i> occurrences of every object contained in the
        given collection.
        @param coll  the collection to remove
        @return <code>true</code> if this call changed the collection
        <!-- ACCEPT >=> 6837ccbb-9f1d-11ea-8014-333445793454 -->



## Method: `java.org.apache.commons.collections4.Bag` / `boolean retainAll(Collection<?> coll)`


        <!-- 6837ccbc-9f1d-11ea-8015-333445793454 <=< ACCEPT -->
        <i>(Violation)</i>
        Remove any members of the bag that are not in the given
        collection, respecting cardinality.  That is, if the given
        collection <code>coll</code> contains <code>n</code> copies of a
        given object and the bag has <code>m &gt; n</code> copies, then
        delete <code>m - n</code> copies from the bag.  In addition, if
        <code>e</code> is an object in the bag but
        <code>!coll.contains(e)</code>, then remove <code>e</code> and any
        of its copies.
        <p>The {@link Collection#retainAll(Collection)} method specifies
        that cardinality should <i>not</i> be respected; this method should
        keep <i>all</i> occurrences of every object contained in the
        given collection.
        @param coll  the collection to retain
        @return <code>true</code> if this call changed the collection
        <!-- ACCEPT >=> 6837ccbc-9f1d-11ea-8015-333445793454 -->



## Method: `java.org.apache.commons.collections4.Bag` / `Iterator<E> iterator()`


        <!-- 6837f3ba-9f1d-11ea-8016-333445793454 <=< ACCEPT -->
        Returns an {@link Iterator} over the entire set of members,
        including copies due to cardinality. This iterator is fail-fast
        and will not tolerate concurrent modifications.
        @return iterator over all elements in the Bag
        <!-- ACCEPT >=> 6837f3ba-9f1d-11ea-8016-333445793454 -->



# File: `java.org.apache.commons.collections4.BagUtils`

## Class: `java.org.apache.commons.collections4.BagUtils` / `public class BagUtils`


        <!-- 6837f3bb-9f1d-11ea-8017-333445793454 <=< ACCEPT -->
        Provides utility methods and decorators for {@link Bag} and {@link SortedBag} instances.
        @since 2.1
        @version $Id$
        <!-- ACCEPT >=> 6837f3bb-9f1d-11ea-8017-333445793454 -->



## Field: `java.org.apache.commons.collections4.BagUtils` / `public static final Bag EMPTY_BAG`


        <!-- 6837f3bc-9f1d-11ea-8018-333445793454 <=< ACCEPT -->
        An empty unmodifiable bag.
        <!-- ACCEPT >=> 6837f3bc-9f1d-11ea-8018-333445793454 -->



## Field: `java.org.apache.commons.collections4.BagUtils` / `public static final Bag EMPTY_SORTED_BAG`


        <!-- 6837f3bd-9f1d-11ea-8019-333445793454 <=< ACCEPT -->
        An empty unmodifiable sorted bag.
        <!-- ACCEPT >=> 6837f3bd-9f1d-11ea-8019-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.BagUtils` / `private BagUtils()`


        <!-- 6837f3be-9f1d-11ea-801a-333445793454 <=< ACCEPT -->
        Instantiation of BagUtils is not intended or required.
        <!-- ACCEPT >=> 6837f3be-9f1d-11ea-801a-333445793454 -->



## Method: `java.org.apache.commons.collections4.BagUtils` / `public static <E> Bag<E> synchronizedBag(final Bag<E> bag)`


        <!-- 6837f3bf-9f1d-11ea-801b-333445793454 <=< ACCEPT -->
        Returns a synchronized (thread-safe) bag backed by the given bag. In
        order to guarantee serial access, it is critical that all access to the
        backing bag is accomplished through the returned bag.
        <p>
        It is imperative that the user manually synchronize on the returned bag
        when iterating over it:
        <pre>
        Bag bag = BagUtils.synchronizedBag(new HashBag());
        ...
        synchronized(bag) {
        Iterator i = bag.iterator(); // Must be in synchronized block
        while (i.hasNext())
        foo(i.next());
        }
        }
        </pre>
        Failure to follow this advice may result in non-deterministic behavior.
        @param <E> the element type
        @param bag the bag to synchronize, must not be null
        @return a synchronized bag backed by that bag
        @throws NullPointerException if the Bag is null
        <!-- ACCEPT >=> 6837f3bf-9f1d-11ea-801b-333445793454 -->



## Method: `java.org.apache.commons.collections4.BagUtils` / `public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)`


        <!-- 6837f3c0-9f1d-11ea-801c-333445793454 <=< ACCEPT -->
        Returns an unmodifiable view of the given bag. Any modification attempts
        to the returned bag will raise an {@link UnsupportedOperationException}.
        @param <E> the element type
        @param bag the bag whose unmodifiable view is to be returned, must not be null
        @return an unmodifiable view of that bag
        @throws NullPointerException if the Bag is null
        <!-- ACCEPT >=> 6837f3c0-9f1d-11ea-801c-333445793454 -->



## Method: `java.org.apache.commons.collections4.BagUtils` / `public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)`


        <!-- 6837f3c1-9f1d-11ea-801d-333445793454 <=< ACCEPT -->
        Returns a predicated (validating) bag backed by the given bag.
        <p>
        Only objects that pass the test in the given predicate can be added to
        the bag. Trying to add an invalid object results in an
        IllegalArgumentException. It is important not to use the original bag
        after invoking this method, as it is a backdoor for adding invalid
        objects.
        @param <E> the element type
        @param bag the bag to predicate, must not be null
        @param predicate the predicate for the bag, must not be null
        @return a predicated bag backed by the given bag
        @throws NullPointerException if the Bag or Predicate is null
        <!-- ACCEPT >=> 6837f3c1-9f1d-11ea-801d-333445793454 -->



## Method: `java.org.apache.commons.collections4.BagUtils` / `public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)`


        <!-- 6837f3c2-9f1d-11ea-801e-333445793454 <=< ACCEPT -->
        Returns a transformed bag backed by the given bag.
        <p>
        Each object is passed through the transformer as it is added to the Bag.
        It is important not to use the original bag after invoking this method,
        as it is a backdoor for adding untransformed objects.
        <p>
        Existing entries in the specified bag will not be transformed.
        If you want that behaviour, see {@link TransformedBag#transformedBag(Bag, Transformer)}.
        @param <E> the element type
        @param bag the bag to predicate, must not be null
        @param transformer the transformer for the bag, must not be null
        @return a transformed bag backed by the given bag
        @throws NullPointerException if the Bag or Transformer is null
        <!-- ACCEPT >=> 6837f3c2-9f1d-11ea-801e-333445793454 -->



## Method: `java.org.apache.commons.collections4.BagUtils` / `public static <E> Bag<E> collectionBag(final Bag<E> bag)`


        <!-- 6837f3c3-9f1d-11ea-801f-333445793454 <=< ACCEPT -->
        Returns a bag that complies to the Collection contract, backed by the given bag.
        @param <E> the element type
        @param bag the bag to decorate, must not be null
        @return a Bag that complies to the Collection contract
        @throws NullPointerException if bag is null
        @since 4.0
        <!-- ACCEPT >=> 6837f3c3-9f1d-11ea-801f-333445793454 -->



## Method: `java.org.apache.commons.collections4.BagUtils` / `public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)`


        <!-- 6837f3c4-9f1d-11ea-8020-333445793454 <=< ACCEPT -->
        Returns a synchronized (thread-safe) sorted bag backed by the given
        sorted bag. In order to guarantee serial access, it is critical that all
        access to the backing bag is accomplished through the returned bag.
        <p>
        It is imperative that the user manually synchronize on the returned bag
        when iterating over it:
        <pre>
        SortedBag bag = BagUtils.synchronizedSortedBag(new TreeBag());
        ...
        synchronized(bag) {
        Iterator i = bag.iterator(); // Must be in synchronized block
        while (i.hasNext())
        foo(i.next());
        }
        }
        </pre>
        Failure to follow this advice may result in non-deterministic behavior.
        @param <E> the element type
        @param bag the bag to synchronize, must not be null
        @return a synchronized bag backed by that bag
        @throws NullPointerException if the SortedBag is null
        <!-- ACCEPT >=> 6837f3c4-9f1d-11ea-8020-333445793454 -->



## Method: `java.org.apache.commons.collections4.BagUtils` / `public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)`


        <!-- 6837f3c5-9f1d-11ea-8021-333445793454 <=< ACCEPT -->
        Returns an unmodifiable view of the given sorted bag. Any modification
        attempts to the returned bag will raise an
        {@link UnsupportedOperationException}.
        @param <E> the element type
        @param bag the bag whose unmodifiable view is to be returned, must not be null
        @return an unmodifiable view of that bag
        @throws NullPointerException if the SortedBag is null
        <!-- ACCEPT >=> 6837f3c5-9f1d-11ea-8021-333445793454 -->



## Method: `java.org.apache.commons.collections4.BagUtils` / `final Predicate<? super E> predicate)`


        <!-- 6837f3c6-9f1d-11ea-8022-333445793454 <=< ACCEPT -->
        Returns a predicated (validating) sorted bag backed by the given sorted
        bag.
        <p>
        Only objects that pass the test in the given predicate can be added to
        the bag. Trying to add an invalid object results in an
        IllegalArgumentException. It is important not to use the original bag
        after invoking this method, as it is a backdoor for adding invalid
        objects.
        @param <E> the element type
        @param bag the sorted bag to predicate, must not be null
        @param predicate the predicate for the bag, must not be null
        @return a predicated bag backed by the given bag
        @throws NullPointerException if the SortedBag or Predicate is null
        <!-- ACCEPT >=> 6837f3c6-9f1d-11ea-8022-333445793454 -->



## Method: `java.org.apache.commons.collections4.BagUtils` / `final Transformer<? super E, ? extends E> transformer)`


        <!-- 6837f3c7-9f1d-11ea-8023-333445793454 <=< ACCEPT -->
        Returns a transformed sorted bag backed by the given bag.
        <p>
        Each object is passed through the transformer as it is added to the Bag.
        It is important not to use the original bag after invoking this method,
        as it is a backdoor for adding untransformed objects.
        <p>
        Existing entries in the specified bag will not be transformed.
        If you want that behaviour, see
        {@link TransformedSortedBag#transformedSortedBag(SortedBag, Transformer)}.
        @param <E> the element type
        @param bag the bag to predicate, must not be null
        @param transformer the transformer for the bag, must not be null
        @return a transformed bag backed by the given bag
        @throws NullPointerException if the Bag or Transformer is null
        <!-- ACCEPT >=> 6837f3c7-9f1d-11ea-8023-333445793454 -->



## Method: `java.org.apache.commons.collections4.BagUtils` / `public static <E> Bag<E> emptyBag()`


        <!-- 6837f3c8-9f1d-11ea-8024-333445793454 <=< ACCEPT -->
        Get an empty <code>Bag</code>.
        @param <E> the element type
        @return an empty Bag
        <!-- ACCEPT >=> 6837f3c8-9f1d-11ea-8024-333445793454 -->



## Method: `java.org.apache.commons.collections4.BagUtils` / `public static <E> SortedBag<E> emptySortedBag()`


        <!-- 68381ac5-9f1d-11ea-8025-333445793454 <=< ACCEPT -->
        Get an empty <code>SortedBag</code>.
        @param <E> the element type
        @return an empty sorted Bag
        <!-- ACCEPT >=> 68381ac5-9f1d-11ea-8025-333445793454 -->



# File: `java.org.apache.commons.collections4.BidiMap`

## Interface: `java.org.apache.commons.collections4.BidiMap` / `public interface BidiMap<K, V> extends IterableMap<K, V>`


        <!-- 68381ac6-9f1d-11ea-8026-333445793454 <=< ACCEPT -->
        Defines a map that allows bidirectional lookup between key and values.
        <p>
        This extended <code>Map</code> represents a mapping where a key may
        lookup a value and a value may lookup a key with equal ease.
        This interface extends <code>Map</code> and so may be used anywhere a map
        is required. The interface provides an inverse map view, enabling
        full access to both directions of the <code>BidiMap</code>.
        <p>
        Implementations should allow a value to be looked up from a key and
        a key to be looked up from a value with equal performance.
        <p>
        This map enforces the restriction that there is a 1:1 relation between
        keys and values, meaning that multiple keys cannot map to the same value.
        This is required so that "inverting" the map results in a map without
        duplicate keys. See the {@link #put} method description for more information.
        @param <K> the type of the keys in the map
        @param <V> the type of the values in the map
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 68381ac6-9f1d-11ea-8026-333445793454 -->



## Method: `java.org.apache.commons.collections4.BidiMap` / `V put(K key, V value)`


        <!-- 68381ac7-9f1d-11ea-8027-333445793454 <=< ACCEPT -->
        Puts the key-value pair into the map, replacing any previous pair.
        <p>
        When adding a key-value pair, the value may already exist in the map
        against a different key. That mapping is removed, to ensure that the
        value only occurs once in the inverse map.
        <pre>
        BidiMap map1 = new DualHashBidiMap();
        map.put("A","B");  // contains A mapped to B, as per Map
        map.put("A","C");  // contains A mapped to C, as per Map
        BidiMap map2 = new DualHashBidiMap();
        map.put("A","B");  // contains A mapped to B, as per Map
        map.put("C","B");  // contains C mapped to B, key A is removed
        </pre>
        @param key  the key to store
        @param value  the value to store
        @return the previous value mapped to this key
        @throws UnsupportedOperationException if the <code>put</code> method is not supported
        @throws ClassCastException (optional) if the map limits the type of the
        value and the specified value is inappropriate
        @throws IllegalArgumentException (optional) if the map limits the values
        in some way and the value was invalid
        @throws NullPointerException (optional) if the map limits the values to
        non-null and null was specified
        <!-- ACCEPT >=> 68381ac7-9f1d-11ea-8027-333445793454 -->



## Method: `java.org.apache.commons.collections4.BidiMap` / `K getKey(Object value)`


        <!-- 68381ac8-9f1d-11ea-8028-333445793454 <=< ACCEPT -->
        Gets the key that is currently mapped to the specified value.
        <p>
        If the value is not contained in the map, <code>null</code> is returned.
        <p>
        Implementations should seek to make this method perform equally as well
        as <code>get(Object)</code>.
        @param value  the value to find the key for
        @return the mapped key, or <code>null</code> if not found
        @throws ClassCastException (optional) if the map limits the type of the
        value and the specified value is inappropriate
        @throws NullPointerException (optional) if the map limits the values to
        non-null and null was specified
        <!-- ACCEPT >=> 68381ac8-9f1d-11ea-8028-333445793454 -->



## Method: `java.org.apache.commons.collections4.BidiMap` / `K removeValue(Object value)`


        <!-- 68381ac9-9f1d-11ea-8029-333445793454 <=< ACCEPT -->
        Removes the key-value pair that is currently mapped to the specified
        value (optional operation).
        <p>
        If the value is not contained in the map, <code>null</code> is returned.
        <p>
        Implementations should seek to make this method perform equally as well
        as <code>remove(Object)</code>.
        @param value  the value to find the key-value pair for
        @return the key that was removed, <code>null</code> if nothing removed
        @throws ClassCastException (optional) if the map limits the type of the
        value and the specified value is inappropriate
        @throws NullPointerException (optional) if the map limits the values to
        non-null and null was specified
        @throws UnsupportedOperationException if this method is not supported
        by the implementation
        <!-- ACCEPT >=> 68381ac9-9f1d-11ea-8029-333445793454 -->



## Method: `java.org.apache.commons.collections4.BidiMap` / `BidiMap<V, K> inverseBidiMap()`


        <!-- 68381aca-9f1d-11ea-802a-333445793454 <=< ACCEPT -->
        Gets a view of this map where the keys and values are reversed.
        <p>
        Changes to one map will be visible in the other and vice versa.
        This enables both directions of the map to be accessed as a <code>Map</code>.
        <p>
        Implementations should seek to avoid creating a new object every time this
        method is called. See <code>AbstractMap.values()</code> etc. Calling this
        method on the inverse map should return the original.
        @return an inverted bidirectional map
        <!-- ACCEPT >=> 68381aca-9f1d-11ea-802a-333445793454 -->



## Method: `java.org.apache.commons.collections4.BidiMap` / `Set<V> values()`


        <!-- 68381acb-9f1d-11ea-802b-333445793454 <=< ACCEPT -->
        Returns a {@link Set} view of the values contained in this map.
        The set is backed by the map, so changes to the map are reflected
        in the set, and vice-versa.  If the map is modified while an iteration
        over the set is in progress (except through the iterator's own
        {@code remove} operation), the results of the iteration are undefined.
        The set supports element removal, which removes the corresponding
        mapping from the map, via the {@code Iterator.remove},
        {@code Collection.remove}, {@code removeAll},
        {@code retainAll} and {@code clear} operations.  It does not
        support the {@code add} or {@code addAll} operations.
        @return a set view of the values contained in this map
        <!-- ACCEPT >=> 68381acb-9f1d-11ea-802b-333445793454 -->



# File: `java.org.apache.commons.collections4.BoundedCollection`

## Interface: `java.org.apache.commons.collections4.BoundedCollection` / `public interface BoundedCollection<E> extends Collection<E>`


        <!-- 683841d3-9f1d-11ea-802c-333445793454 <=< ACCEPT -->
        Defines a collection that is bounded in size.
        <p>
        The size of the collection can vary, but it can never exceed a preset
        maximum number of elements. This interface allows the querying of details
        associated with the maximum number of elements.
        @see CollectionUtils#isFull
        @see CollectionUtils#maxSize
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 683841d3-9f1d-11ea-802c-333445793454 -->



## Method: `java.org.apache.commons.collections4.BoundedCollection` / `boolean isFull()`


        <!-- 683841d4-9f1d-11ea-802d-333445793454 <=< ACCEPT -->
        Returns true if this collection is full and no new elements can be added.
        @return <code>true</code> if the collection is full
        <!-- ACCEPT >=> 683841d4-9f1d-11ea-802d-333445793454 -->



## Method: `java.org.apache.commons.collections4.BoundedCollection` / `int maxSize()`


        <!-- 683841d5-9f1d-11ea-802e-333445793454 <=< ACCEPT -->
        Gets the maximum size of the collection (the bound).
        @return the maximum number of elements the collection can hold
        <!-- ACCEPT >=> 683841d5-9f1d-11ea-802e-333445793454 -->



# File: `java.org.apache.commons.collections4.BoundedMap`

## Interface: `java.org.apache.commons.collections4.BoundedMap` / `public interface BoundedMap<K, V> extends IterableMap<K, V>`


        <!-- 683841d6-9f1d-11ea-802f-333445793454 <=< ACCEPT -->
        Defines a map that is bounded in size.
        <p>
        The size of the map can vary, but it can never exceed a preset
        maximum number of elements. This interface allows the querying of details
        associated with the maximum number of elements.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 683841d6-9f1d-11ea-802f-333445793454 -->



## Method: `java.org.apache.commons.collections4.BoundedMap` / `boolean isFull()`


        <!-- 683841d7-9f1d-11ea-8030-333445793454 <=< ACCEPT -->
        Returns true if this map is full and no new elements can be added.
        @return <code>true</code> if the map is full
        <!-- ACCEPT >=> 683841d7-9f1d-11ea-8030-333445793454 -->



## Method: `java.org.apache.commons.collections4.BoundedMap` / `int maxSize()`


        <!-- 683841d8-9f1d-11ea-8031-333445793454 <=< ACCEPT -->
        Gets the maximum size of the map (the bound).
        @return the maximum number of elements the map can hold
        <!-- ACCEPT >=> 683841d8-9f1d-11ea-8031-333445793454 -->



# File: `java.org.apache.commons.collections4.Closure`

## Interface: `java.org.apache.commons.collections4.Closure` / `public interface Closure<T>`


        <!-- 683841d9-9f1d-11ea-8032-333445793454 <=< ACCEPT -->
        Defines a functor interface implemented by classes that do something.
        <p>
        A <code>Closure</code> represents a block of code which is executed from
        inside some block, function or iteration. It operates an input object.
        <p>
        Standard implementations of common closures are provided by
        {@link ClosureUtils}. These include method invocation and for/while loops.
        @param <T> the type that the closure acts on
        @since 1.0
        @version $Id$
        <!-- ACCEPT >=> 683841d9-9f1d-11ea-8032-333445793454 -->



## Method: `java.org.apache.commons.collections4.Closure` / `void execute(T input)`


        <!-- 683841da-9f1d-11ea-8033-333445793454 <=< ACCEPT -->
        Performs an action on the specified input object.
        @param input  the input to execute on
        @throws ClassCastException (runtime) if the input is the wrong class
        @throws IllegalArgumentException (runtime) if the input is invalid
        @throws FunctorException (runtime) if any other error occurs
        <!-- ACCEPT >=> 683841da-9f1d-11ea-8033-333445793454 -->



# File: `java.org.apache.commons.collections4.ClosureUtils`

## Class: `java.org.apache.commons.collections4.ClosureUtils` / `public class ClosureUtils`


        <!-- 683841db-9f1d-11ea-8034-333445793454 <=< ACCEPT -->
        <code>ClosureUtils</code> provides reference implementations and utilities
        for the Closure functor interface. The supplied closures are:
        <ul>
        <li>Invoker - invokes a method on the input object
        <li>For - repeatedly calls a closure for a fixed number of times
        <li>While - repeatedly calls a closure while a predicate is true
        <li>Chained - chains two or more closures together
        <li>If - calls one closure or another based on a predicate
        <li>Switch - calls one closure based on one or more predicates
        <li>SwitchMap - calls one closure looked up from a Map
        <li>Transformer - wraps a Transformer as a Closure
        <li>NOP - does nothing
        <li>Exception - always throws an exception
        </ul>
        <p>
        Since v4.1 only closures which are considered to be safe are
        Serializable. Closures considered to be unsafe for serialization are:
        <ul>
        <li>Invoker
        <li>For
        <li>While
        </ul>
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 683841db-9f1d-11ea-8034-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.ClosureUtils` / `private ClosureUtils()`


        <!-- 683841dc-9f1d-11ea-8035-333445793454 <=< ACCEPT -->
        This class is not normally instantiated.
        <!-- ACCEPT >=> 683841dc-9f1d-11ea-8035-333445793454 -->



## Method: `java.org.apache.commons.collections4.ClosureUtils` / `public static <E> Closure<E> exceptionClosure()`


        <!-- 683841dd-9f1d-11ea-8036-333445793454 <=< ACCEPT -->
        Gets a Closure that always throws an exception.
        This could be useful during testing as a placeholder.
        @see org.apache.commons.collections4.functors.ExceptionClosure
        @param <E>  the type that the closure acts on
        @return the closure
        <!-- ACCEPT >=> 683841dd-9f1d-11ea-8036-333445793454 -->



## Method: `java.org.apache.commons.collections4.ClosureUtils` / `public static <E> Closure<E> nopClosure()`


        <!-- 683841de-9f1d-11ea-8037-333445793454 <=< ACCEPT -->
        Gets a Closure that will do nothing.
        This could be useful during testing as a placeholder.
        @see org.apache.commons.collections4.functors.NOPClosure
        @param <E>  the type that the closure acts on
        @return the closure
        <!-- ACCEPT >=> 683841de-9f1d-11ea-8037-333445793454 -->



## Method: `java.org.apache.commons.collections4.ClosureUtils` / `public static <E> Closure<E> asClosure(final Transformer<? super E, ?> transformer)`


        <!-- 683841df-9f1d-11ea-8038-333445793454 <=< ACCEPT -->
        Creates a Closure that calls a Transformer each time it is called.
        The transformer will be called using the closure's input object.
        The transformer's result will be ignored.
        @see org.apache.commons.collections4.functors.TransformerClosure
        @param <E>  the type that the closure acts on
        @param transformer  the transformer to run each time in the closure, null means nop
        @return the closure
        <!-- ACCEPT >=> 683841df-9f1d-11ea-8038-333445793454 -->



## Method: `java.org.apache.commons.collections4.ClosureUtils` / `public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)`


        <!-- 683868dc-9f1d-11ea-8039-333445793454 <=< ACCEPT -->
        Creates a Closure that will call the closure <code>count</code> times.
        <p>
        A null closure or zero count returns the <code>NOPClosure</code>.
        @see org.apache.commons.collections4.functors.ForClosure
        @param <E>  the type that the closure acts on
        @param count  the number of times to loop
        @param closure  the closure to call repeatedly
        @return the <code>for</code> closure
        <!-- ACCEPT >=> 683868dc-9f1d-11ea-8039-333445793454 -->



## Method: `java.org.apache.commons.collections4.ClosureUtils` / `public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure)`


        <!-- 683868dd-9f1d-11ea-803a-333445793454 <=< ACCEPT -->
        Creates a Closure that will call the closure repeatedly until the
        predicate returns false.
        @see org.apache.commons.collections4.functors.WhileClosure
        @param <E>  the type that the closure acts on
        @param predicate  the predicate to use as an end of loop test, not null
        @param closure  the closure to call repeatedly, not null
        @return the <code>while</code> closure
        @throws NullPointerException if either argument is null
        <!-- ACCEPT >=> 683868dd-9f1d-11ea-803a-333445793454 -->



## Method: `java.org.apache.commons.collections4.ClosureUtils` / `final Predicate<? super E> predicate)`


        <!-- 683868de-9f1d-11ea-803b-333445793454 <=< ACCEPT -->
        Creates a Closure that will call the closure once and then repeatedly
        until the predicate returns false.
        @see org.apache.commons.collections4.functors.WhileClosure
        @param <E>  the type that the closure acts on
        @param closure  the closure to call repeatedly, not null
        @param predicate  the predicate to use as an end of loop test, not null
        @return the <code>do-while</code> closure
        @throws NullPointerException if either argument is null
        <!-- ACCEPT >=> 683868de-9f1d-11ea-803b-333445793454 -->



## Method: `java.org.apache.commons.collections4.ClosureUtils` / `public static <E> Closure<E> invokerClosure(final String methodName)`


        <!-- 683868df-9f1d-11ea-803c-333445793454 <=< ACCEPT -->
        Creates a Closure that will invoke a specific method on the closure's
        input object by reflection.
        @see org.apache.commons.collections4.functors.InvokerTransformer
        @see org.apache.commons.collections4.functors.TransformerClosure
        @param <E>  the type that the closure acts on
        @param methodName  the name of the method
        @return the <code>invoker</code> closure
        @throws NullPointerException if the method name is null
        <!-- ACCEPT >=> 683868df-9f1d-11ea-803c-333445793454 -->



## Method: `java.org.apache.commons.collections4.ClosureUtils` / `final Object[] args)`


        <!-- 683868e0-9f1d-11ea-803d-333445793454 <=< ACCEPT -->
        Creates a Closure that will invoke a specific method on the closure's
        input object by reflection.
        @see org.apache.commons.collections4.functors.InvokerTransformer
        @see org.apache.commons.collections4.functors.TransformerClosure
        @param <E>  the type that the closure acts on
        @param methodName  the name of the method
        @param paramTypes  the parameter types
        @param args  the arguments
        @return the <code>invoker</code> closure
        @throws NullPointerException if the method name is null
        @throws IllegalArgumentException if the paramTypes and args don't match
        <!-- ACCEPT >=> 683868e0-9f1d-11ea-803d-333445793454 -->



## Method: `java.org.apache.commons.collections4.ClosureUtils` / `public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)`


        <!-- 683868e1-9f1d-11ea-803e-333445793454 <=< ACCEPT -->
        Create a new Closure that calls each closure in turn, passing the
        result into the next closure.
        @see org.apache.commons.collections4.functors.ChainedClosure
        @param <E>  the type that the closure acts on
        @param closures  an array of closures to chain
        @return the <code>chained</code> closure
        @throws NullPointerException if the closures array is null
        @throws NullPointerException if any closure in the array is null
        <!-- ACCEPT >=> 683868e1-9f1d-11ea-803e-333445793454 -->



## Method: `java.org.apache.commons.collections4.ClosureUtils` / `public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)`


        <!-- 683868e2-9f1d-11ea-803f-333445793454 <=< ACCEPT -->
        Create a new Closure that calls each closure in turn, passing the
        result into the next closure. The ordering is that of the iterator()
        method on the collection.
        @see org.apache.commons.collections4.functors.ChainedClosure
        @param <E>  the type that the closure acts on
        @param closures  a collection of closures to chain
        @return the <code>chained</code> closure
        @throws NullPointerException if the closures collection is null
        @throws NullPointerException if any closure in the collection is null
        @throws IllegalArgumentException if the closures collection is empty
        <!-- ACCEPT >=> 683868e2-9f1d-11ea-803f-333445793454 -->



## Method: `java.org.apache.commons.collections4.ClosureUtils` / `final Closure<? super E> trueClosure)`


        <!-- 683868e3-9f1d-11ea-8040-333445793454 <=< ACCEPT -->
        Create a new Closure that calls another closure based on the
        result of the specified predicate.
        @see org.apache.commons.collections4.functors.IfClosure
        @param <E>  the type that the closure acts on
        @param predicate  the validating predicate
        @param trueClosure  the closure called if the predicate is true
        @return the <code>if</code> closure
        @throws NullPointerException if the predicate or closure is null
        @since 3.2
        <!-- ACCEPT >=> 683868e3-9f1d-11ea-8040-333445793454 -->



## Method: `java.org.apache.commons.collections4.ClosureUtils` / `final Closure<? super E> falseClosure)`


        <!-- 683868e4-9f1d-11ea-8041-333445793454 <=< ACCEPT -->
        Create a new Closure that calls one of two closures depending
        on the specified predicate.
        @see org.apache.commons.collections4.functors.IfClosure
        @param <E>  the type that the closure acts on
        @param predicate  the predicate to switch on
        @param trueClosure  the closure called if the predicate is true
        @param falseClosure  the closure called if the predicate is false
        @return the <code>switch</code> closure
        @throws NullPointerException if the predicate or either closure is null
        <!-- ACCEPT >=> 683868e4-9f1d-11ea-8041-333445793454 -->



## Method: `java.org.apache.commons.collections4.ClosureUtils` / `final Closure<? super E>[] closures)`


        <!-- 683868e5-9f1d-11ea-8042-333445793454 <=< ACCEPT -->
        Create a new Closure that calls one of the closures depending
        on the predicates.
        <p>
        The closure at array location 0 is called if the predicate at array
        location 0 returned true. Each predicate is evaluated
        until one returns true.
        @see org.apache.commons.collections4.functors.SwitchClosure
        @param <E>  the type that the closure acts on
        @param predicates  an array of predicates to check, not null
        @param closures  an array of closures to call, not null
        @return the <code>switch</code> closure
        @throws NullPointerException if the either array is null
        @throws NullPointerException if any element in the arrays is null
        @throws IllegalArgumentException if the arrays have different sizes
        <!-- ACCEPT >=> 683868e5-9f1d-11ea-8042-333445793454 -->



## Method: `java.org.apache.commons.collections4.ClosureUtils` / `final Closure<? super E> defaultClosure)`


        <!-- 683868e6-9f1d-11ea-8043-333445793454 <=< ACCEPT -->
        Create a new Closure that calls one of the closures depending
        on the predicates.
        <p>
        The closure at array location 0 is called if the predicate at array
        location 0 returned true. Each predicate is evaluated
        until one returns true. If no predicates evaluate to true, the default
        closure is called.
        @see org.apache.commons.collections4.functors.SwitchClosure
        @param <E>  the type that the closure acts on
        @param predicates  an array of predicates to check, not null
        @param closures  an array of closures to call, not null
        @param defaultClosure  the default to call if no predicate matches
        @return the <code>switch</code> closure
        @throws NullPointerException if the either array is null
        @throws NullPointerException if any element in the arrays is null
        @throws IllegalArgumentException if the arrays are different sizes
        <!-- ACCEPT >=> 683868e6-9f1d-11ea-8043-333445793454 -->



## Method: `java.org.apache.commons.collections4.ClosureUtils` / `public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)`


        <!-- 683868e7-9f1d-11ea-8044-333445793454 <=< ACCEPT -->
        Create a new Closure that calls one of the closures depending
        on the predicates.
        <p>
        The Map consists of Predicate keys and Closure values. A closure
        is called if its matching predicate returns true. Each predicate is evaluated
        until one returns true. If no predicates evaluate to true, the default
        closure is called. The default closure is set in the map with a
        null key. The ordering is that of the iterator() method on the entryset
        collection of the map.
        @see org.apache.commons.collections4.functors.SwitchClosure
        @param <E>  the type that the closure acts on
        @param predicatesAndClosures  a map of predicates to closures
        @return the <code>switch</code> closure
        @throws NullPointerException if the map is null
        @throws NullPointerException if any closure in the map is null
        @throws IllegalArgumentException if the map is empty
        @throws ClassCastException  if the map elements are of the wrong type
        <!-- ACCEPT >=> 683868e7-9f1d-11ea-8044-333445793454 -->



## Method: `java.org.apache.commons.collections4.ClosureUtils` / `public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures)`


        <!-- 683868e8-9f1d-11ea-8045-333445793454 <=< ACCEPT -->
        Create a new Closure that uses the input object as a key to find the
        closure to call.
        <p>
        The Map consists of object keys and Closure values. A closure
        is called if the input object equals the key. If there is no match, the
        default closure is called. The default closure is set in the map
        using a null key.
        @see org.apache.commons.collections4.functors.SwitchClosure
        @param <E>  the type that the closure acts on
        @param objectsAndClosures  a map of objects to closures
        @return the closure
        @throws NullPointerException if the map is null
        @throws NullPointerException if any closure in the map is null
        @throws IllegalArgumentException if the map is empty
        <!-- ACCEPT >=> 683868e8-9f1d-11ea-8045-333445793454 -->



# File: `java.org.apache.commons.collections4.CollectionUtils`

## Class: `java.org.apache.commons.collections4.CollectionUtils` / `public class CollectionUtils`


        <!-- 683868e9-9f1d-11ea-8046-333445793454 <=< ACCEPT -->
        Provides utility methods and decorators for {@link Collection} instances.
        <p>
        Various utility methods might put the input objects into a Set/Map/Bag. In case
        the input objects override {@link Object#equals(Object)}, it is mandatory that
        the general contract of the {@link Object#hashCode()} method is maintained.
        <p>
        NOTE: From 4.0, method parameters will take {@link Iterable} objects when possible.
        @since 1.0
        @version $Id$
        <!-- ACCEPT >=> 683868e9-9f1d-11ea-8046-333445793454 -->



## Class: `java.org.apache.commons.collections4.CollectionUtils` / `private static class CardinalityHelper<O>`


        <!-- 68388ffe-9f1d-11ea-8047-333445793454 <=< ACCEPT -->
        Helper class to easily access cardinality properties of two collections.
        @param <O>  the element type
        <!-- ACCEPT >=> 68388ffe-9f1d-11ea-8047-333445793454 -->



## Field: `java.org.apache.commons.collections4.CollectionUtils` / `final Map<O, Integer> cardinalityA`


        <!-- 68388fff-9f1d-11ea-8048-333445793454 <=< ACCEPT -->
        Contains the cardinality for each object in collection A.
        <!-- ACCEPT >=> 68388fff-9f1d-11ea-8048-333445793454 -->



## Field: `java.org.apache.commons.collections4.CollectionUtils` / `final Map<O, Integer> cardinalityB`


        <!-- 68389000-9f1d-11ea-8049-333445793454 <=< ACCEPT -->
        Contains the cardinality for each object in collection B.
        <!-- ACCEPT >=> 68389000-9f1d-11ea-8049-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.CollectionUtils` / `public CardinalityHelper(final Iterable<? extends O> a, final Iterable<? extends O> b)`


        <!-- 68389001-9f1d-11ea-804a-333445793454 <=< ACCEPT -->
        Create a new CardinalityHelper for two collections.
        @param a  the first collection
        @param b  the second collection
        <!-- ACCEPT >=> 68389001-9f1d-11ea-804a-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `public final int max(final Object obj)`


        <!-- 68389002-9f1d-11ea-804b-333445793454 <=< ACCEPT -->
        Returns the maximum frequency of an object.
        @param obj  the object
        @return the maximum frequency of the object
        <!-- ACCEPT >=> 68389002-9f1d-11ea-804b-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `public final int min(final Object obj)`


        <!-- 68389003-9f1d-11ea-804c-333445793454 <=< ACCEPT -->
        Returns the minimum frequency of an object.
        @param obj  the object
        @return the minimum frequency of the object
        <!-- ACCEPT >=> 68389003-9f1d-11ea-804c-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `public int freqA(final Object obj)`


        <!-- 68389004-9f1d-11ea-804d-333445793454 <=< ACCEPT -->
        Returns the frequency of this object in collection A.
        @param obj  the object
        @return the frequency of the object in collection A
        <!-- ACCEPT >=> 68389004-9f1d-11ea-804d-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `public int freqB(final Object obj)`


        <!-- 68389005-9f1d-11ea-804e-333445793454 <=< ACCEPT -->
        Returns the frequency of this object in collection B.
        @param obj  the object
        @return the frequency of the object in collection B
        <!-- ACCEPT >=> 68389005-9f1d-11ea-804e-333445793454 -->



## Class: `java.org.apache.commons.collections4.CollectionUtils` / `private static class SetOperationCardinalityHelper<O> extends CardinalityHelper<O> implements Iterable<O>`


        <!-- 68389006-9f1d-11ea-804f-333445793454 <=< ACCEPT -->
        Helper class for set-related operations, e.g. union, subtract, intersection.
        @param <O>  the element type
        <!-- ACCEPT >=> 68389006-9f1d-11ea-804f-333445793454 -->



## Field: `java.org.apache.commons.collections4.CollectionUtils` / `private final Set<O> elements`


        <!-- 68389007-9f1d-11ea-8050-333445793454 <=< ACCEPT -->
        Contains the unique elements of the two collections.
        <!-- ACCEPT >=> 68389007-9f1d-11ea-8050-333445793454 -->



## Field: `java.org.apache.commons.collections4.CollectionUtils` / `private final List<O> newList`


        <!-- 68389008-9f1d-11ea-8051-333445793454 <=< ACCEPT -->
        Output collection.
        <!-- ACCEPT >=> 68389008-9f1d-11ea-8051-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.CollectionUtils` / `public SetOperationCardinalityHelper(final Iterable<? extends O> a, final Iterable<? extends O> b)`


        <!-- 68389009-9f1d-11ea-8052-333445793454 <=< ACCEPT -->
        Create a new set operation helper from the two collections.
        @param a  the first collection
        @param b  the second collection
        <!-- ACCEPT >=> 68389009-9f1d-11ea-8052-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `public void setCardinality(final O obj, final int count)`


        <!-- 6838900a-9f1d-11ea-8053-333445793454 <=< ACCEPT -->
        Add the object {@code count} times to the result collection.
        @param obj  the object to add
        @param count  the count
        <!-- ACCEPT >=> 6838900a-9f1d-11ea-8053-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `public Collection<O> list()`


        <!-- 6838900b-9f1d-11ea-8054-333445793454 <=< ACCEPT -->
        Returns the resulting collection.
        @return the result
        <!-- ACCEPT >=> 6838900b-9f1d-11ea-8054-333445793454 -->



## Field: `java.org.apache.commons.collections4.CollectionUtils` / `public static final Collection EMPTY_COLLECTION`


        <!-- 6838900c-9f1d-11ea-8055-333445793454 <=< ACCEPT -->
        An empty unmodifiable collection.
        The JDK provides empty Set and List implementations which could be used for
        this purpose. However they could be cast to Set or List which might be
        undesirable. This implementation only implements Collection.
        <!-- ACCEPT >=> 6838900c-9f1d-11ea-8055-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.CollectionUtils` / `private CollectionUtils()`


        <!-- 6838900d-9f1d-11ea-8056-333445793454 <=< ACCEPT -->
        <code>CollectionUtils</code> should not normally be instantiated.
        <!-- ACCEPT >=> 6838900d-9f1d-11ea-8056-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `public static <T> Collection<T> emptyCollection()`


        <!-- 6838900e-9f1d-11ea-8057-333445793454 <=< ACCEPT -->
        Returns the immutable EMPTY_COLLECTION with generic type safety.
        @see #EMPTY_COLLECTION
        @since 4.0
        @param <T> the element type
        @return immutable empty collection
        <!-- ACCEPT >=> 6838900e-9f1d-11ea-8057-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `public static <T> Collection<T> emptyIfNull(final Collection<T> collection)`


        <!-- 6838900f-9f1d-11ea-8058-333445793454 <=< ACCEPT -->
        Returns an immutable empty collection if the argument is <code>null</code>,
        or the argument itself otherwise.
        @param <T> the element type
        @param collection the collection, possibly <code>null</code>
        @return an empty collection if the argument is <code>null</code>
        <!-- ACCEPT >=> 6838900f-9f1d-11ea-8058-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b)`


        <!-- 68389010-9f1d-11ea-8059-333445793454 <=< ACCEPT -->
        Returns a {@link Collection} containing the union of the given
        {@link Iterable}s.
        <p>
        The cardinality of each element in the returned {@link Collection} will
        be equal to the maximum of the cardinality of that element in the two
        given {@link Iterable}s.
        @param a the first collection, must not be null
        @param b the second collection, must not be null
        @param <O> the generic type that is able to represent the types contained
        in both input collections.
        @return the union of the two collections
        @see Collection#addAll
        <!-- ACCEPT >=> 68389010-9f1d-11ea-8059-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b)`


        <!-- 68389011-9f1d-11ea-805a-333445793454 <=< ACCEPT -->
        Returns a {@link Collection} containing the intersection of the given
        {@link Iterable}s.
        <p>
        The cardinality of each element in the returned {@link Collection} will
        be equal to the minimum of the cardinality of that element in the two
        given {@link Iterable}s.
        @param a the first collection, must not be null
        @param b the second collection, must not be null
        @param <O> the generic type that is able to represent the types contained
        in both input collections.
        @return the intersection of the two collections
        @see Collection#retainAll
        @see #containsAny
        <!-- ACCEPT >=> 68389011-9f1d-11ea-805a-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b)`


        <!-- 68389012-9f1d-11ea-805b-333445793454 <=< ACCEPT -->
        Returns a {@link Collection} containing the exclusive disjunction
        (symmetric difference) of the given {@link Iterable}s.
        <p>
        The cardinality of each element <i>e</i> in the returned
        {@link Collection} will be equal to
        <tt>max(cardinality(<i>e</i>,<i>a</i>),cardinality(<i>e</i>,<i>b</i>)) - min(cardinality(<i>e</i>,<i>a</i>),
        cardinality(<i>e</i>,<i>b</i>))</tt>.
        <p>
        This is equivalent to
        {@code {@link #subtract subtract}({@link #union union(a,b)},{@link #intersection intersection(a,b)})}
        or
        {@code {@link #union union}({@link #subtract subtract(a,b)},{@link #subtract subtract(b,a)})}.
        @param a the first collection, must not be null
        @param b the second collection, must not be null
        @param <O> the generic type that is able to represent the types contained
        in both input collections.
        @return the symmetric difference of the two collections
        <!-- ACCEPT >=> 68389012-9f1d-11ea-805b-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b)`


        <!-- 68389013-9f1d-11ea-805c-333445793454 <=< ACCEPT -->
        Returns a new {@link Collection} containing {@code <i>a</i> - <i>b</i>}.
        The cardinality of each element <i>e</i> in the returned {@link Collection}
        will be the cardinality of <i>e</i> in <i>a</i> minus the cardinality
        of <i>e</i> in <i>b</i>, or zero, whichever is greater.
        @param a  the collection to subtract from, must not be null
        @param b  the collection to subtract, must not be null
        @param <O> the generic type that is able to represent the types contained
        in both input collections.
        @return a new collection with the results
        @see Collection#removeAll
        <!-- ACCEPT >=> 68389013-9f1d-11ea-805c-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `final Predicate<O> p)`


        <!-- 6838b706-9f1d-11ea-805d-333445793454 <=< ACCEPT -->
        Returns a new {@link Collection} containing <i>a</i> minus a subset of
        <i>b</i>.  Only the elements of <i>b</i> that satisfy the predicate
        condition, <i>p</i> are subtracted from <i>a</i>.
        <p>The cardinality of each element <i>e</i> in the returned {@link Collection}
        that satisfies the predicate condition will be the cardinality of <i>e</i> in <i>a</i>
        minus the cardinality of <i>e</i> in <i>b</i>, or zero, whichever is greater.</p>
        <p>The cardinality of each element <i>e</i> in the returned {@link Collection} that does <b>not</b>
        satisfy the predicate condition will be equal to the cardinality of <i>e</i> in <i>a</i>.</p>
        @param a  the collection to subtract from, must not be null
        @param b  the collection to subtract, must not be null
        @param p  the condition used to determine which elements of <i>b</i> are
        subtracted.
        @param <O> the generic type that is able to represent the types contained
        in both input collections.
        @return a new collection with the results
        @since 4.0
        @see Collection#removeAll
        <!-- ACCEPT >=> 6838b706-9f1d-11ea-805d-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2)`


        <!-- 6838b707-9f1d-11ea-805e-333445793454 <=< ACCEPT -->
        Returns <code>true</code> iff all elements of {@code coll2} are also contained
        in {@code coll1}. The cardinality of values in {@code coll2} is not taken into account,
        which is the same behavior as {@link Collection#containsAll(Collection)}.
        <p>
        In other words, this method returns <code>true</code> iff the
        {@link #intersection} of <i>coll1</i> and <i>coll2</i> has the same cardinality as
        the set of unique values from {@code coll2}. In case {@code coll2} is empty, {@code true}
        will be returned.
        <p>
        This method is intended as a replacement for {@link Collection#containsAll(Collection)}
        with a guaranteed runtime complexity of {@code O(n + m)}. Depending on the type of
        {@link Collection} provided, this method will be much faster than calling
        {@link Collection#containsAll(Collection)} instead, though this will come at the
        cost of an additional space complexity O(n).
        @param coll1  the first collection, must not be null
        @param coll2  the second collection, must not be null
        @return <code>true</code> iff the intersection of the collections has the same cardinality
        as the set of unique elements from the second collection
        @since 4.0
        <!-- ACCEPT >=> 6838b707-9f1d-11ea-805e-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2)`


        <!-- 6838b708-9f1d-11ea-805f-333445793454 <=< ACCEPT -->
        Returns <code>true</code> iff at least one element is in both collections.
        <p>
        In other words, this method returns <code>true</code> iff the
        {@link #intersection} of <i>coll1</i> and <i>coll2</i> is not empty.
        @param coll1  the first collection, must not be null
        @param coll2  the second collection, must not be null
        @return <code>true</code> iff the intersection of the collections is non-empty
        @since 2.1
        @see #intersection
        <!-- ACCEPT >=> 6838b708-9f1d-11ea-805f-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll)`


        <!-- 6838b709-9f1d-11ea-8060-333445793454 <=< ACCEPT -->
        Returns a {@link Map} mapping each unique element in the given
        {@link Collection} to an {@link Integer} representing the number
        of occurrences of that element in the {@link Collection}.
        <p>
        Only those elements present in the collection will appear as
        keys in the map.
        @param <O>  the type of object in the returned {@link Map}. This is a super type of <I>.
        @param coll  the collection to get the cardinality map for, must not be null
        @return the populated cardinality map
        <!-- ACCEPT >=> 6838b709-9f1d-11ea-8060-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `public static boolean isSubCollection(final Collection<?> a, final Collection<?> b)`


        <!-- 6838b70a-9f1d-11ea-8061-333445793454 <=< ACCEPT -->
        Returns {@code true} iff <i>a</i> is a sub-collection of <i>b</i>,
        that is, iff the cardinality of <i>e</i> in <i>a</i> is less than or
        equal to the cardinality of <i>e</i> in <i>b</i>, for each element <i>e</i>
        in <i>a</i>.
        @param a the first (sub?) collection, must not be null
        @param b the second (super?) collection, must not be null
        @return <code>true</code> iff <i>a</i> is a sub-collection of <i>b</i>
        @see #isProperSubCollection
        @see Collection#containsAll
        <!-- ACCEPT >=> 6838b70a-9f1d-11ea-8061-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b)`


        <!-- 6838b70b-9f1d-11ea-8062-333445793454 <=< ACCEPT -->
        Returns {@code true} iff <i>a</i> is a <i>proper</i> sub-collection of <i>b</i>,
        that is, iff the cardinality of <i>e</i> in <i>a</i> is less
        than or equal to the cardinality of <i>e</i> in <i>b</i>,
        for each element <i>e</i> in <i>a</i>, and there is at least one
        element <i>f</i> such that the cardinality of <i>f</i> in <i>b</i>
        is strictly greater than the cardinality of <i>f</i> in <i>a</i>.
        <p>
        The implementation assumes
        <ul>
        <li><code>a.size()</code> and <code>b.size()</code> represent the
        total cardinality of <i>a</i> and <i>b</i>, resp. </li>
        <li><code>a.size() < Integer.MAXVALUE</code></li>
        </ul>
        @param a  the first (sub?) collection, must not be null
        @param b  the second (super?) collection, must not be null
        @return <code>true</code> iff <i>a</i> is a <i>proper</i> sub-collection of <i>b</i>
        @see #isSubCollection
        @see Collection#containsAll
        <!-- ACCEPT >=> 6838b70b-9f1d-11ea-8062-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b)`


        <!-- 6838b70c-9f1d-11ea-8063-333445793454 <=< ACCEPT -->
        Returns {@code true} iff the given {@link Collection}s contain
        exactly the same elements with exactly the same cardinalities.
        <p>
        That is, iff the cardinality of <i>e</i> in <i>a</i> is
        equal to the cardinality of <i>e</i> in <i>b</i>,
        for each element <i>e</i> in <i>a</i> or <i>b</i>.
        @param a  the first collection, must not be null
        @param b  the second collection, must not be null
        @return <code>true</code> iff the collections contain the same elements with the same cardinalities.
        <!-- ACCEPT >=> 6838b70c-9f1d-11ea-8063-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `final Equator<? super E> equator)`


        <!-- 6838b70d-9f1d-11ea-8064-333445793454 <=< ACCEPT -->
        Returns {@code true} iff the given {@link Collection}s contain
        exactly the same elements with exactly the same cardinalities.
        <p>
        That is, iff the cardinality of <i>e</i> in <i>a</i> is
        equal to the cardinality of <i>e</i> in <i>b</i>,
        for each element <i>e</i> in <i>a</i> or <i>b</i>.
        <p>
        <b>Note:</b> from version 4.1 onwards this method requires the input
        collections and equator to be of compatible type (using bounded wildcards).
        Providing incompatible arguments (e.g. by casting to their rawtypes)
        will result in a {@code ClassCastException} thrown at runtime.
        @param <E>  the element type
        @param a  the first collection, must not be null
        @param b  the second collection, must not be null
        @param equator  the Equator used for testing equality
        @return <code>true</code> iff the collections contain the same elements with the same cardinalities.
        @throws NullPointerException if the equator is null
        @since 4.0
        <!-- ACCEPT >=> 6838b70d-9f1d-11ea-8064-333445793454 -->



## Class: `java.org.apache.commons.collections4.CollectionUtils` / `private static class EquatorWrapper<O>`


        <!-- 6838b70e-9f1d-11ea-8065-333445793454 <=< ACCEPT -->
        Wraps another object and uses the provided Equator to implement
        {@link #equals(Object)} and {@link #hashCode()}.
        <p>
        This class can be used to store objects into a Map.
        @param <O>  the element type
        @since 4.0
        <!-- ACCEPT >=> 6838b70e-9f1d-11ea-8065-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `public static <O> int cardinality(final O obj, final Iterable<? super O> coll)`


        <!-- 6838b70f-9f1d-11ea-8066-333445793454 <=< ACCEPT -->
        Returns the number of occurrences of <i>obj</i> in <i>coll</i>.
        @param obj the object to find the cardinality of
        @param coll the {@link Iterable} to search
        @param <O> the type of object that the {@link Iterable} may contain.
        @return the the number of occurrences of obj in coll
        @throws NullPointerException if coll is null
        @deprecated since 4.1, use {@link IterableUtils#frequency(Iterable, Object)} instead.
        Be aware that the order of parameters has changed.
        <!-- ACCEPT >=> 6838b70f-9f1d-11ea-8066-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate)`


        <!-- 6838b710-9f1d-11ea-8067-333445793454 <=< ACCEPT -->
        Finds the first element in the given collection which matches the given predicate.
        <p>
        If the input collection or predicate is null, or no element of the collection
        matches the predicate, null is returned.
        @param <T>  the type of object the {@link Iterable} contains
        @param collection  the collection to search, may be null
        @param predicate  the predicate to use, may be null
        @return the first element of the collection which matches the predicate or null if none could be found
        @deprecated since 4.1, use {@link IterableUtils#find(Iterable, Predicate)} instead
        <!-- ACCEPT >=> 6838b710-9f1d-11ea-8067-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure)`


        <!-- 6838b711-9f1d-11ea-8068-333445793454 <=< ACCEPT -->
        Executes the given closure on each element in the collection.
        <p>
        If the input collection or closure is null, there is no change made.
        @param <T>  the type of object the {@link Iterable} contains
        @param <C>  the closure type
        @param collection  the collection to get the input from, may be null
        @param closure  the closure to perform, may be null
        @return closure
        @deprecated since 4.1, use {@link IterableUtils#forEach(Iterable, Closure)} instead
        <!-- ACCEPT >=> 6838b711-9f1d-11ea-8068-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure)`


        <!-- 6838de11-9f1d-11ea-8069-333445793454 <=< ACCEPT -->
        Executes the given closure on each element in the collection.
        <p>
        If the input collection or closure is null, there is no change made.
        @param <T>  the type of object the {@link Iterator} contains
        @param <C>  the closure type
        @param iterator  the iterator to get the input from, may be null
        @param closure  the closure to perform, may be null
        @return closure
        @since 4.0
        @deprecated since 4.1, use {@link IteratorUtils#forEach(Iterator, Closure)} instead
        <!-- ACCEPT >=> 6838de11-9f1d-11ea-8069-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `final C closure)`


        <!-- 6838de12-9f1d-11ea-806a-333445793454 <=< ACCEPT -->
        Executes the given closure on each but the last element in the collection.
        <p>
        If the input collection or closure is null, there is no change made.
        @param <T>  the type of object the {@link Iterable} contains
        @param <C>  the closure type
        @param collection  the collection to get the input from, may be null
        @param closure  the closure to perform, may be null
        @return the last element in the collection, or null if either collection or closure is null
        @since 4.0
        @deprecated since 4.1, use {@link IterableUtils#forEachButLast(Iterable, Closure)} instead
        <!-- ACCEPT >=> 6838de12-9f1d-11ea-806a-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure)`


        <!-- 6838de13-9f1d-11ea-806b-333445793454 <=< ACCEPT -->
        Executes the given closure on each but the last element in the collection.
        <p>
        If the input collection or closure is null, there is no change made.
        @param <T>  the type of object the {@link Collection} contains
        @param <C>  the closure type
        @param iterator  the iterator to get the input from, may be null
        @param closure  the closure to perform, may be null
        @return the last element in the collection, or null if either iterator or closure is null
        @since 4.0
        @deprecated since 4.1, use {@link IteratorUtils#forEachButLast(Iterator, Closure)} instead
        <!-- ACCEPT >=> 6838de13-9f1d-11ea-806b-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate)`


        <!-- 6838de14-9f1d-11ea-806c-333445793454 <=< ACCEPT -->
        Filter the collection by applying a Predicate to each element. If the
        predicate returns false, remove the element.
        <p>
        If the input collection or predicate is null, there is no change made.
        @param <T>  the type of object the {@link Iterable} contains
        @param collection  the collection to get the input from, may be null
        @param predicate  the predicate to use as a filter, may be null
        @return true if the collection is modified by this call, false otherwise.
        <!-- ACCEPT >=> 6838de14-9f1d-11ea-806c-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate)`


        <!-- 6838de15-9f1d-11ea-806d-333445793454 <=< ACCEPT -->
        Filter the collection by applying a Predicate to each element. If the
        predicate returns true, remove the element.
        <p>
        This is equivalent to <pre>filter(collection, PredicateUtils.notPredicate(predicate))</pre>
        if predicate is != null.
        <p>
        If the input collection or predicate is null, there is no change made.
        @param <T>  the type of object the {@link Iterable} contains
        @param collection  the collection to get the input from, may be null
        @param predicate  the predicate to use as a filter, may be null
        @return true if the collection is modified by this call, false otherwise.
        <!-- ACCEPT >=> 6838de15-9f1d-11ea-806d-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `final Transformer<? super C, ? extends C> transformer)`


        <!-- 6838de16-9f1d-11ea-806e-333445793454 <=< ACCEPT -->
        Transform the collection by applying a Transformer to each element.
        <p>
        If the input collection or transformer is null, there is no change made.
        <p>
        This routine is best for Lists, for which set() is used to do the
        transformations "in place." For other Collections, clear() and addAll()
        are used to replace elements.
        <p>
        If the input collection controls its input, such as a Set, and the
        Transformer creates duplicates (or are otherwise invalid), the collection
        may reduce in size due to calling this method.
        @param <C>  the type of object the {@link Collection} contains
        @param collection  the {@link Collection} to get the input from, may be null
        @param transformer  the transformer to perform, may be null
        <!-- ACCEPT >=> 6838de16-9f1d-11ea-806e-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate)`


        <!-- 6838de17-9f1d-11ea-806f-333445793454 <=< ACCEPT -->
        Counts the number of elements in the input collection that match the
        predicate.
        <p>
        A <code>null</code> collection or predicate matches no elements.
        @param <C>  the type of object the {@link Iterable} contains
        @param input  the {@link Iterable} to get the input from, may be null
        @param predicate  the predicate to use, may be null
        @return the number of matches for the predicate in the collection
        @deprecated since 4.1, use {@link IterableUtils#countMatches(Iterable, Predicate)} instead
        <!-- ACCEPT >=> 6838de17-9f1d-11ea-806f-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate)`


        <!-- 6838de18-9f1d-11ea-8070-333445793454 <=< ACCEPT -->
        Answers true if a predicate is true for at least one element of a
        collection.
        <p>
        A <code>null</code> collection or predicate returns false.
        @param <C>  the type of object the {@link Iterable} contains
        @param input  the {@link Iterable} to get the input from, may be null
        @param predicate  the predicate to use, may be null
        @return true if at least one element of the collection matches the predicate
        @deprecated since 4.1, use {@link IterableUtils#matchesAny(Iterable, Predicate)} instead
        <!-- ACCEPT >=> 6838de18-9f1d-11ea-8070-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate)`


        <!-- 6838de19-9f1d-11ea-8071-333445793454 <=< ACCEPT -->
        Answers true if a predicate is true for every element of a
        collection.
        <p>
        A <code>null</code> predicate returns false.<br/>
        A <code>null</code> or empty collection returns true.
        @param <C>  the type of object the {@link Iterable} contains
        @param input  the {@link Iterable} to get the input from, may be null
        @param predicate  the predicate to use, may be null
        @return true if every element of the collection matches the predicate or if the
        collection is empty, false otherwise
        @since 4.0
        @deprecated since 4.1, use {@link IterableUtils#matchesAll(Iterable, Predicate)} instead
        <!-- ACCEPT >=> 6838de19-9f1d-11ea-8071-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `final Predicate<? super O> predicate)`


        <!-- 6838de1a-9f1d-11ea-8072-333445793454 <=< ACCEPT -->
        Selects all elements from input collection which match the given
        predicate into an output collection.
        <p>
        A <code>null</code> predicate matches no elements.
        @param <O>  the type of object the {@link Iterable} contains
        @param inputCollection  the collection to get the input from, may not be null
        @param predicate  the predicate to use, may be null
        @return the elements matching the predicate (new list)
        @throws NullPointerException if the input collection is null
        <!-- ACCEPT >=> 6838de1a-9f1d-11ea-8072-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `final Predicate<? super O> predicate, final R outputCollection)`


        <!-- 6838de1b-9f1d-11ea-8073-333445793454 <=< ACCEPT -->
        Selects all elements from input collection which match the given
        predicate and adds them to outputCollection.
        <p>
        If the input collection or predicate is null, there is no change to the
        output collection.
        @param <O>  the type of object the {@link Iterable} contains
        @param <R>  the type of the output {@link Collection}
        @param inputCollection  the collection to get the input from, may be null
        @param predicate  the predicate to use, may be null
        @param outputCollection  the collection to output into, may not be null if the inputCollection
        and predicate or not null
        @return the outputCollection
        <!-- ACCEPT >=> 6838de1b-9f1d-11ea-8073-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `final Predicate<? super O> predicate, R outputCollection, R rejectedCollection)`


        <!-- 6838de1c-9f1d-11ea-8074-333445793454 <=< ACCEPT -->
        Selects all elements from inputCollection into an output and rejected collection,
        based on the evaluation of the given predicate.
        <p>
        Elements matching the predicate are added to the <code>outputCollection</code>,
        all other elements are added to the <code>rejectedCollection</code>.
        <p>
        If the input predicate is <code>null</code>, no elements are added to
        <code>outputCollection</code> or <code>rejectedCollection</code>.
        <p>
        Note: calling the method is equivalent to the following code snippet:
        <pre>
        select(inputCollection, predicate, outputCollection);
        selectRejected(inputCollection, predicate, rejectedCollection);
        </pre>
        @param <O>  the type of object the {@link Iterable} contains
        @param <R>  the type of the output {@link Collection}
        @param inputCollection  the collection to get the input from, may be null
        @param predicate  the predicate to use, may be null
        @param outputCollection  the collection to output selected elements into, may not be null if the
        inputCollection and predicate are not null
        @param rejectedCollection  the collection to output rejected elements into, may not be null if the
        inputCollection or predicate are not null
        @return the outputCollection
        @since 4.1
        <!-- ACCEPT >=> 6838de1c-9f1d-11ea-8074-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `final Predicate<? super O> predicate)`


        <!-- 6838de1d-9f1d-11ea-8075-333445793454 <=< ACCEPT -->
        Selects all elements from inputCollection which don't match the given
        predicate into an output collection.
        <p>
        If the input predicate is <code>null</code>, the result is an empty
        list.
        @param <O>  the type of object the {@link Iterable} contains
        @param inputCollection  the collection to get the input from, may not be null
        @param predicate  the predicate to use, may be null
        @return the elements <b>not</b> matching the predicate (new list)
        @throws NullPointerException if the input collection is null
        <!-- ACCEPT >=> 6838de1d-9f1d-11ea-8075-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `final Predicate<? super O> predicate, final R outputCollection)`


        <!-- 6838de1e-9f1d-11ea-8076-333445793454 <=< ACCEPT -->
        Selects all elements from inputCollection which don't match the given
        predicate and adds them to outputCollection.
        <p>
        If the input predicate is <code>null</code>, no elements are added to
        <code>outputCollection</code>.
        @param <O>  the type of object the {@link Iterable} contains
        @param <R>  the type of the output {@link Collection}
        @param inputCollection  the collection to get the input from, may be null
        @param predicate  the predicate to use, may be null
        @param outputCollection  the collection to output into, may not be null if the inputCollection
        and predicate or not null
        @return outputCollection
        <!-- ACCEPT >=> 6838de1e-9f1d-11ea-8076-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `final Transformer<? super I, ? extends O> transformer)`


        <!-- 6839051f-9f1d-11ea-8077-333445793454 <=< ACCEPT -->
        Returns a new Collection containing all elements of the input collection
        transformed by the given transformer.
        <p>
        If the input collection or transformer is null, the result is an empty list.
        @param <I>  the type of object in the input collection
        @param <O>  the type of object in the output collection
        @param inputCollection  the collection to get the input from, may not be null
        @param transformer  the transformer to use, may be null
        @return the transformed result (new list)
        @throws NullPointerException if the input collection is null
        <!-- ACCEPT >=> 6839051f-9f1d-11ea-8077-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `final Transformer<? super I, ? extends O> transformer)`


        <!-- 68390520-9f1d-11ea-8078-333445793454 <=< ACCEPT -->
        Transforms all elements from the input iterator with the given transformer
        and adds them to the output collection.
        <p>
        If the input iterator or transformer is null, the result is an empty list.
        @param <I>  the type of object in the input collection
        @param <O>  the type of object in the output collection
        @param inputIterator  the iterator to get the input from, may be null
        @param transformer  the transformer to use, may be null
        @return the transformed result (new list)
        <!-- ACCEPT >=> 68390520-9f1d-11ea-8078-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `final Transformer<? super I, ? extends O> transformer, final R outputCollection)`


        <!-- 68390521-9f1d-11ea-8079-333445793454 <=< ACCEPT -->
        Transforms all elements from input collection with the given transformer
        and adds them to the output collection.
        <p>
        If the input collection or transformer is null, there is no change to the
        output collection.
        @param <I>  the type of object in the input collection
        @param <O>  the type of object in the output collection
        @param <R>  the type of the output collection
        @param inputCollection  the collection to get the input from, may be null
        @param transformer  the transformer to use, may be null
        @param outputCollection  the collection to output into, may not be null if inputCollection
        and transformer are not null
        @return the output collection with the transformed input added
        @throws NullPointerException if the outputCollection is null and both, inputCollection and
        transformer are not null
        <!-- ACCEPT >=> 68390521-9f1d-11ea-8079-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `final Transformer<? super I, ? extends O> transformer, final R outputCollection)`


        <!-- 68390522-9f1d-11ea-807a-333445793454 <=< ACCEPT -->
        Transforms all elements from the input iterator with the given transformer
        and adds them to the output collection.
        <p>
        If the input iterator or transformer is null, there is no change to the
        output collection.
        @param <I>  the type of object in the input collection
        @param <O>  the type of object in the output collection
        @param <R>  the type of the output collection
        @param inputIterator  the iterator to get the input from, may be null
        @param transformer  the transformer to use, may be null
        @param outputCollection  the collection to output into, may not be null if inputIterator
        and transformer are not null
        @return the outputCollection with the transformed input added
        @throws NullPointerException if the output collection is null and both, inputIterator and
        transformer are not null
        <!-- ACCEPT >=> 68390522-9f1d-11ea-807a-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object)`


        <!-- 68390523-9f1d-11ea-807b-333445793454 <=< ACCEPT -->
        Adds an element to the collection unless the element is null.
        @param <T>  the type of object the {@link Collection} contains
        @param collection  the collection to add to, must not be null
        @param object  the object to add, if null it will not be added
        @return true if the collection changed
        @throws NullPointerException if the collection is null
        @since 3.2
        <!-- ACCEPT >=> 68390523-9f1d-11ea-807b-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable)`


        <!-- 68390524-9f1d-11ea-807c-333445793454 <=< ACCEPT -->
        Adds all elements in the {@link Iterable} to the given collection. If the
        {@link Iterable} is a {@link Collection} then it is cast and will be
        added using {@link Collection#addAll(Collection)} instead of iterating.
        @param <C>  the type of object the {@link Collection} contains
        @param collection  the collection to add to, must not be null
        @param iterable  the iterable of elements to add, must not be null
        @return a boolean indicating whether the collection has changed or not.
        @throws NullPointerException if the collection or iterator is null
        <!-- ACCEPT >=> 68390524-9f1d-11ea-807c-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator)`


        <!-- 68390525-9f1d-11ea-807d-333445793454 <=< ACCEPT -->
        Adds all elements in the iteration to the given collection.
        @param <C>  the type of object the {@link Collection} contains
        @param collection  the collection to add to, must not be null
        @param iterator  the iterator of elements to add, must not be null
        @return a boolean indicating whether the collection has changed or not.
        @throws NullPointerException if the collection or iterator is null
        <!-- ACCEPT >=> 68390525-9f1d-11ea-807d-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration)`


        <!-- 68390526-9f1d-11ea-807e-333445793454 <=< ACCEPT -->
        Adds all elements in the enumeration to the given collection.
        @param <C>  the type of object the {@link Collection} contains
        @param collection  the collection to add to, must not be null
        @param enumeration  the enumeration of elements to add, must not be null
        @return {@code true} if the collections was changed, {@code false} otherwise
        @throws NullPointerException if the collection or enumeration is null
        <!-- ACCEPT >=> 68390526-9f1d-11ea-807e-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `public static <C> boolean addAll(final Collection<C> collection, final C[] elements)`


        <!-- 68390527-9f1d-11ea-807f-333445793454 <=< ACCEPT -->
        Adds all elements in the array to the given collection.
        @param <C>  the type of object the {@link Collection} contains
        @param collection  the collection to add to, must not be null
        @param elements  the array of elements to add, must not be null
        @return {@code true} if the collection was changed, {@code false} otherwise
        @throws NullPointerException if the collection or array is null
        <!-- ACCEPT >=> 68390527-9f1d-11ea-807f-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `public static <T> T get(final Iterator<T> iterator, final int index)`


        <!-- 68390528-9f1d-11ea-8080-333445793454 <=< ACCEPT -->
        Returns the <code>index</code>-th value in {@link Iterator}, throwing
        <code>IndexOutOfBoundsException</code> if there is no such element.
        <p>
        The Iterator is advanced to <code>index</code> (or to the end, if
        <code>index</code> exceeds the number of entries) as a side effect of this method.
        @param iterator  the iterator to get a value from
        @param index  the index to get
        @param <T> the type of object in the {@link Iterator}
        @return the object at the specified index
        @throws IndexOutOfBoundsException if the index is invalid
        @throws IllegalArgumentException if the object type is invalid
        @deprecated since 4.1, use {@code IteratorUtils.get(Iterator, int)} instead
        <!-- ACCEPT >=> 68390528-9f1d-11ea-8080-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `static void checkIndexBounds(final int index)`


        <!-- 68390529-9f1d-11ea-8081-333445793454 <=< ACCEPT -->
        Ensures an index is not negative.
        @param index the index to check.
        @throws IndexOutOfBoundsException if the index is negative.
        <!-- ACCEPT >=> 68390529-9f1d-11ea-8081-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `public static <T> T get(final Iterable<T> iterable, final int index)`


        <!-- 6839052a-9f1d-11ea-8082-333445793454 <=< ACCEPT -->
        Returns the <code>index</code>-th value in the <code>iterable</code>'s {@link Iterator}, throwing
        <code>IndexOutOfBoundsException</code> if there is no such element.
        <p>
        If the {@link Iterable} is a {@link List}, then it will use {@link List#get(int)}.
        @param iterable  the {@link Iterable} to get a value from
        @param index  the index to get
        @param <T> the type of object in the {@link Iterable}.
        @return the object at the specified index
        @throws IndexOutOfBoundsException if the index is invalid
        @deprecated since 4.1, use {@code IterableUtils.get(Iterable, int)} instead
        <!-- ACCEPT >=> 6839052a-9f1d-11ea-8082-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `public static Object get(final Object object, final int index)`


        <!-- 6839052b-9f1d-11ea-8083-333445793454 <=< ACCEPT -->
        Returns the <code>index</code>-th value in <code>object</code>, throwing
        <code>IndexOutOfBoundsException</code> if there is no such element or
        <code>IllegalArgumentException</code> if <code>object</code> is not an
        instance of one of the supported types.
        <p>
        The supported types, and associated semantics are:
        <ul>
        <li> Map -- the value returned is the <code>Map.Entry</code> in position
        <code>index</code> in the map's <code>entrySet</code> iterator,
        if there is such an entry.</li>
        <li> List -- this method is equivalent to the list's get method.</li>
        <li> Array -- the <code>index</code>-th array entry is returned,
        if there is such an entry; otherwise an <code>IndexOutOfBoundsException</code>
        is thrown.</li>
        <li> Collection -- the value returned is the <code>index</code>-th object
        returned by the collection's default iterator, if there is such an element.</li>
        <li> Iterator or Enumeration -- the value returned is the
        <code>index</code>-th object in the Iterator/Enumeration, if there
        is such an element.  The Iterator/Enumeration is advanced to
        <code>index</code> (or to the end, if <code>index</code> exceeds the
        number of entries) as a side effect of this method.</li>
        </ul>
        @param object  the object to get a value from
        @param index  the index to get
        @return the object at the specified index
        @throws IndexOutOfBoundsException if the index is invalid
        @throws IllegalArgumentException if the object type is invalid
        <!-- ACCEPT >=> 6839052b-9f1d-11ea-8083-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `public static <K,V> Map.Entry<K, V> get(final Map<K,V> map, final int index)`


        <!-- 68392c26-9f1d-11ea-8084-333445793454 <=< ACCEPT -->
        Returns the <code>index</code>-th <code>Map.Entry</code> in the <code>map</code>'s <code>entrySet</code>,
        throwing <code>IndexOutOfBoundsException</code> if there is no such element.
        @param <K>  the key type in the {@link Map}
        @param <V>  the key type in the {@link Map}
        @param map  the object to get a value from
        @param index  the index to get
        @return the object at the specified index
        @throws IndexOutOfBoundsException if the index is invalid
        <!-- ACCEPT >=> 68392c26-9f1d-11ea-8084-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `public static int size(final Object object)`


        <!-- 68392c27-9f1d-11ea-8085-333445793454 <=< ACCEPT -->
        Gets the size of the collection/iterator specified.
        <p>
        This method can handles objects as follows
        <ul>
        <li>Collection - the collection size
        <li>Map - the map size
        <li>Array - the array size
        <li>Iterator - the number of elements remaining in the iterator
        <li>Enumeration - the number of elements remaining in the enumeration
        </ul>
        @param object  the object to get the size of, may be null
        @return the size of the specified collection or 0 if the object was null
        @throws IllegalArgumentException thrown if object is not recognised
        @since 3.1
        <!-- ACCEPT >=> 68392c27-9f1d-11ea-8085-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `public static boolean sizeIsEmpty(final Object object)`


        <!-- 68392c28-9f1d-11ea-8086-333445793454 <=< ACCEPT -->
        Checks if the specified collection/array/iterator is empty.
        <p>
        This method can handles objects as follows
        <ul>
        <li>Collection - via collection isEmpty
        <li>Map - via map isEmpty
        <li>Array - using array size
        <li>Iterator - via hasNext
        <li>Enumeration - via hasMoreElements
        </ul>
        <p>
        Note: This method is named to avoid clashing with
        {@link #isEmpty(Collection)}.
        @param object  the object to get the size of, may be null
        @return true if empty or null
        @throws IllegalArgumentException thrown if object is not recognised
        @since 3.2
        <!-- ACCEPT >=> 68392c28-9f1d-11ea-8086-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `public static boolean isEmpty(final Collection<?> coll)`


        <!-- 68392c29-9f1d-11ea-8087-333445793454 <=< ACCEPT -->
        Null-safe check if the specified collection is empty.
        <p>
        Null returns true.
        @param coll  the collection to check, may be null
        @return true if empty or null
        @since 3.2
        <!-- ACCEPT >=> 68392c29-9f1d-11ea-8087-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `public static boolean isNotEmpty(final Collection<?> coll)`


        <!-- 68392c2a-9f1d-11ea-8088-333445793454 <=< ACCEPT -->
        Null-safe check if the specified collection is not empty.
        <p>
        Null returns false.
        @param coll  the collection to check, may be null
        @return true if non-null and non-empty
        @since 3.2
        <!-- ACCEPT >=> 68392c2a-9f1d-11ea-8088-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `public static void reverseArray(final Object[] array)`


        <!-- 68392c2b-9f1d-11ea-8089-333445793454 <=< ACCEPT -->
        Reverses the order of the given array.
        @param array  the array to reverse
        <!-- ACCEPT >=> 68392c2b-9f1d-11ea-8089-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `public static boolean isFull(final Collection<? extends Object> coll)`


        <!-- 68392c2c-9f1d-11ea-808a-333445793454 <=< ACCEPT -->
        Returns true if no more elements can be added to the Collection.
        <p>
        This method uses the {@link BoundedCollection} interface to determine the
        full status. If the collection does not implement this interface then
        false is returned.
        <p>
        The collection does not have to implement this interface directly.
        If the collection has been decorated using the decorators subpackage
        then these will be removed to access the BoundedCollection.
        @param coll  the collection to check
        @return true if the BoundedCollection is full
        @throws NullPointerException if the collection is null
        <!-- ACCEPT >=> 68392c2c-9f1d-11ea-808a-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `public static int maxSize(final Collection<? extends Object> coll)`


        <!-- 68392c2d-9f1d-11ea-808b-333445793454 <=< ACCEPT -->
        Get the maximum number of elements that the Collection can contain.
        <p>
        This method uses the {@link BoundedCollection} interface to determine the
        maximum size. If the collection does not implement this interface then
        -1 is returned.
        <p>
        The collection does not have to implement this interface directly.
        If the collection has been decorated using the decorators subpackage
        then these will be removed to access the BoundedCollection.
        @param coll  the collection to check
        @return the maximum size of the BoundedCollection, -1 if no maximum size
        @throws NullPointerException if the collection is null
        <!-- ACCEPT >=> 68392c2d-9f1d-11ea-808b-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `Iterable<? extends O> b)`


        <!-- 68392c2e-9f1d-11ea-808c-333445793454 <=< ACCEPT -->
        Merges two sorted Collections, a and b, into a single, sorted List
        such that the natural ordering of the elements is retained.
        <p>
        Uses the standard O(n) merge algorithm for combining two sorted lists.
        @param <O>  the element type
        @param a  the first collection, must not be null
        @param b  the second collection, must not be null
        @return a new sorted List, containing the elements of Collection a and b
        @throws NullPointerException if either collection is null
        @since 4.0
        <!-- ACCEPT >=> 68392c2e-9f1d-11ea-808c-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `final boolean includeDuplicates)`


        <!-- 68392c2f-9f1d-11ea-808d-333445793454 <=< ACCEPT -->
        Merges two sorted Collections, a and b, into a single, sorted List
        such that the natural ordering of the elements is retained.
        <p>
        Uses the standard O(n) merge algorithm for combining two sorted lists.
        @param <O>  the element type
        @param a  the first collection, must not be null
        @param b  the second collection, must not be null
        @param includeDuplicates  if {@code true} duplicate elements will be retained, otherwise
        they will be removed in the output collection
        @return a new sorted List, containing the elements of Collection a and b
        @throws NullPointerException if either collection is null
        @since 4.0
        <!-- ACCEPT >=> 68392c2f-9f1d-11ea-808d-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `final Comparator<? super O> c)`


        <!-- 68392c30-9f1d-11ea-808e-333445793454 <=< ACCEPT -->
        Merges two sorted Collections, a and b, into a single, sorted List
        such that the ordering of the elements according to Comparator c is retained.
        <p>
        Uses the standard O(n) merge algorithm for combining two sorted lists.
        @param <O>  the element type
        @param a  the first collection, must not be null
        @param b  the second collection, must not be null
        @param c  the comparator to use for the merge.
        @return a new sorted List, containing the elements of Collection a and b
        @throws NullPointerException if either collection or the comparator is null
        @since 4.0
        <!-- ACCEPT >=> 68392c30-9f1d-11ea-808e-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `final Comparator<? super O> c, final boolean includeDuplicates)`


        <!-- 68392c31-9f1d-11ea-808f-333445793454 <=< ACCEPT -->
        Merges two sorted Collections, a and b, into a single, sorted List
        such that the ordering of the elements according to Comparator c is retained.
        <p>
        Uses the standard O(n) merge algorithm for combining two sorted lists.
        @param <O>  the element type
        @param a  the first collection, must not be null
        @param b  the second collection, must not be null
        @param c  the comparator to use for the merge.
        @param includeDuplicates  if {@code true} duplicate elements will be retained, otherwise
        they will be removed in the output collection
        @return a new sorted List, containing the elements of Collection a and b
        @throws NullPointerException if either collection or the comparator is null
        @since 4.0
        <!-- ACCEPT >=> 68392c31-9f1d-11ea-808f-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `public static <E> Collection<List<E>> permutations(final Collection<E> collection)`


        <!-- 68392c32-9f1d-11ea-8090-333445793454 <=< ACCEPT -->
        Returns a {@link Collection} of all the permutations of the input collection.
        <p>
        NOTE: the number of permutations of a given collection is equal to n!, where
        n is the size of the collection. Thus, the resulting collection will become
        <b>very</b> large for collections &gt; 10 (e.g. 10! = 3628800, 15! = 1307674368000).
        <p>
        For larger collections it is advised to use a {@link PermutationIterator} to
        iterate over all permutations.
        @see PermutationIterator
        @param <E>  the element type
        @param collection  the collection to create permutations for, may not be null
        @return an unordered collection of all permutations of the input collection
        @throws NullPointerException if collection is null
        @since 4.0
        <!-- ACCEPT >=> 68392c32-9f1d-11ea-8090-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain)`


        <!-- 68392c33-9f1d-11ea-8091-333445793454 <=< ACCEPT -->
        Returns a collection containing all the elements in <code>collection</code>
        that are also in <code>retain</code>. The cardinality of an element <code>e</code>
        in the returned collection is the same as the cardinality of <code>e</code>
        in <code>collection</code> unless <code>retain</code> does not contain <code>e</code>, in which
        case the cardinality is zero. This method is useful if you do not wish to modify
        the collection <code>c</code> and thus cannot call <code>c.retainAll(retain);</code>.
        <p>
        This implementation iterates over <code>collection</code>, checking each element in
        turn to see if it's contained in <code>retain</code>. If it's contained, it's added
        to the returned list. As a consequence, it is advised to use a collection type for
        <code>retain</code> that provides a fast (e.g. O(1)) implementation of
        {@link Collection#contains(Object)}.
        @param <C>  the type of object the {@link Collection} contains
        @param collection  the collection whose contents are the target of the #retailAll operation
        @param retain  the collection containing the elements to be retained in the returned collection
        @return a <code>Collection</code> containing all the elements of <code>collection</code>
        that occur at least once in <code>retain</code>.
        @throws NullPointerException if either parameter is null
        @since 3.2
        <!-- ACCEPT >=> 68392c33-9f1d-11ea-8091-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `final Equator<? super E> equator)`


        <!-- 6839532f-9f1d-11ea-8092-333445793454 <=< ACCEPT -->
        Returns a collection containing all the elements in
        <code>collection</code> that are also in <code>retain</code>. The
        cardinality of an element <code>e</code> in the returned collection is
        the same as the cardinality of <code>e</code> in <code>collection</code>
        unless <code>retain</code> does not contain <code>e</code>, in which case
        the cardinality is zero. This method is useful if you do not wish to
        modify the collection <code>c</code> and thus cannot call
        <code>c.retainAll(retain);</code>.
        <p>
        Moreover this method uses an {@link Equator} instead of
        {@link Object#equals(Object)} to determine the equality of the elements
        in <code>collection</code> and <code>retain</code>. Hence this method is
        useful in cases where the equals behavior of an object needs to be
        modified without changing the object itself.
        @param <E> the type of object the {@link Collection} contains
        @param collection the collection whose contents are the target of the {@code retainAll} operation
        @param retain the collection containing the elements to be retained in the returned collection
        @param equator the Equator used for testing equality
        @return a <code>Collection</code> containing all the elements of <code>collection</code>
        that occur at least once in <code>retain</code> according to the <code>equator</code>
        @throws NullPointerException if any of the parameters is null
        @since 4.1
        <!-- ACCEPT >=> 6839532f-9f1d-11ea-8092-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove)`


        <!-- 68395330-9f1d-11ea-8093-333445793454 <=< ACCEPT -->
        Removes the elements in <code>remove</code> from <code>collection</code>. That is, this
        method returns a collection containing all the elements in <code>c</code>
        that are not in <code>remove</code>. The cardinality of an element <code>e</code>
        in the returned collection is the same as the cardinality of <code>e</code>
        in <code>collection</code> unless <code>remove</code> contains <code>e</code>, in which
        case the cardinality is zero. This method is useful if you do not wish to modify
        the collection <code>c</code> and thus cannot call <code>collection.removeAll(remove);</code>.
        <p>
        This implementation iterates over <code>collection</code>, checking each element in
        turn to see if it's contained in <code>remove</code>. If it's not contained, it's added
        to the returned list. As a consequence, it is advised to use a collection type for
        <code>remove</code> that provides a fast (e.g. O(1)) implementation of
        {@link Collection#contains(Object)}.
        @param <E>  the type of object the {@link Collection} contains
        @param collection  the collection from which items are removed (in the returned collection)
        @param remove  the items to be removed from the returned <code>collection</code>
        @return a <code>Collection</code> containing all the elements of <code>collection</code> except
        any elements that also occur in <code>remove</code>.
        @throws NullPointerException if either parameter is null
        @since 4.0 (method existed in 3.2 but was completely broken)
        <!-- ACCEPT >=> 68395330-9f1d-11ea-8093-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `final Equator<? super E> equator)`


        <!-- 68395331-9f1d-11ea-8094-333445793454 <=< ACCEPT -->
        Removes all elements in <code>remove</code> from <code>collection</code>.
        That is, this method returns a collection containing all the elements in
        <code>collection</code> that are not in <code>remove</code>. The
        cardinality of an element <code>e</code> in the returned collection is
        the same as the cardinality of <code>e</code> in <code>collection</code>
        unless <code>remove</code> contains <code>e</code>, in which case the
        cardinality is zero. This method is useful if you do not wish to modify
        the collection <code>c</code> and thus cannot call
        <code>collection.removeAll(remove)</code>.
        <p>
        Moreover this method uses an {@link Equator} instead of
        {@link Object#equals(Object)} to determine the equality of the elements
        in <code>collection</code> and <code>remove</code>. Hence this method is
        useful in cases where the equals behavior of an object needs to be
        modified without changing the object itself.
        @param <E> the type of object the {@link Collection} contains
        @param collection the collection from which items are removed (in the returned collection)
        @param remove the items to be removed from the returned collection
        @param equator the Equator used for testing equality
        @return a <code>Collection</code> containing all the elements of <code>collection</code>
        except any element that if equal according to the <code>equator</code>
        @throws NullPointerException if any of the parameters is null
        @since 4.1
        <!-- ACCEPT >=> 68395331-9f1d-11ea-8094-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `public static <C> Collection<C> synchronizedCollection(final Collection<C> collection)`


        <!-- 68395332-9f1d-11ea-8095-333445793454 <=< ACCEPT -->
        Returns a synchronized collection backed by the given collection.
        <p>
        You must manually synchronize on the returned buffer's iterator to
        avoid non-deterministic behavior:
        <pre>
        Collection c = CollectionUtils.synchronizedCollection(myCollection);
        synchronized (c) {
        Iterator i = c.iterator();
        while (i.hasNext()) {
        process (i.next());
        }
        }
        </pre>
        This method uses the implementation in the decorators subpackage.
        @param <C>  the type of object the {@link Collection} contains
        @param collection  the collection to synchronize, must not be null
        @return a synchronized collection backed by the given collection
        @throws NullPointerException if the collection is null
        @deprecated since 4.1, use {@link java.util.Collections#synchronizedCollection(Collection)} instead
        <!-- ACCEPT >=> 68395332-9f1d-11ea-8095-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection)`


        <!-- 68395333-9f1d-11ea-8096-333445793454 <=< ACCEPT -->
        Returns an unmodifiable collection backed by the given collection.
        <p>
        This method uses the implementation in the decorators subpackage.
        @param <C>  the type of object the {@link Collection} contains
        @param collection  the collection to make unmodifiable, must not be null
        @return an unmodifiable collection backed by the given collection
        @throws NullPointerException if the collection is null
        @deprecated since 4.1, use {@link java.util.Collections#unmodifiableCollection(Collection)} instead
        <!-- ACCEPT >=> 68395333-9f1d-11ea-8096-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `final Predicate<? super C> predicate)`


        <!-- 68395334-9f1d-11ea-8097-333445793454 <=< ACCEPT -->
        Returns a predicated (validating) collection backed by the given collection.
        <p>
        Only objects that pass the test in the given predicate can be added to the collection.
        Trying to add an invalid object results in an IllegalArgumentException.
        It is important not to use the original collection after invoking this method,
        as it is a backdoor for adding invalid objects.
        @param <C> the type of objects in the Collection.
        @param collection  the collection to predicate, must not be null
        @param predicate  the predicate for the collection, must not be null
        @return a predicated collection backed by the given collection
        @throws NullPointerException if the Collection is null
        <!-- ACCEPT >=> 68395334-9f1d-11ea-8097-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `final Transformer<? super E, ? extends E> transformer)`


        <!-- 68395335-9f1d-11ea-8098-333445793454 <=< ACCEPT -->
        Returns a transformed bag backed by the given collection.
        <p>
        Each object is passed through the transformer as it is added to the
        Collection. It is important not to use the original collection after invoking this
        method, as it is a backdoor for adding untransformed objects.
        <p>
        Existing entries in the specified collection will not be transformed.
        If you want that behaviour, see {@link TransformedCollection#transformedCollection}.
        @param <E> the type of object the {@link Collection} contains
        @param collection  the collection to predicate, must not be null
        @param transformer  the transformer for the collection, must not be null
        @return a transformed collection backed by the given collection
        @throws NullPointerException if the Collection or Transformer is null
        <!-- ACCEPT >=> 68395335-9f1d-11ea-8098-333445793454 -->



## Method: `java.org.apache.commons.collections4.CollectionUtils` / `public static <E> E extractSingleton(final Collection<E> collection)`


        <!-- 68395336-9f1d-11ea-8099-333445793454 <=< ACCEPT -->
        Extract the lone element of the specified Collection.
        @param <E> collection type
        @param collection to read
        @return sole member of collection
        @throws NullPointerException if collection is null
        @throws IllegalArgumentException if collection is empty or contains more than one element
        @since 4.0
        <!-- ACCEPT >=> 68395336-9f1d-11ea-8099-333445793454 -->



# File: `java.org.apache.commons.collections4.ComparatorUtils`

## Class: `java.org.apache.commons.collections4.ComparatorUtils` / `public class ComparatorUtils`


        <!-- 68395337-9f1d-11ea-809a-333445793454 <=< ACCEPT -->
        Provides convenient static utility methods for <Code>Comparator</Code>
        objects.
        <p>
        Most of the functionality in this class can also be found in the
        <code>comparators</code> package. This class merely provides a
        convenient central place if you have use for more than one class
        in the <code>comparators</code> subpackage.
        @since 2.1
        @version $Id$
        <!-- ACCEPT >=> 68395337-9f1d-11ea-809a-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.ComparatorUtils` / `private ComparatorUtils()`


        <!-- 68395338-9f1d-11ea-809b-333445793454 <=< ACCEPT -->
        ComparatorUtils should not normally be instantiated.
        <!-- ACCEPT >=> 68395338-9f1d-11ea-809b-333445793454 -->



## Field: `java.org.apache.commons.collections4.ComparatorUtils` / `public static final Comparator NATURAL_COMPARATOR`


        <!-- 68395339-9f1d-11ea-809c-333445793454 <=< ACCEPT -->
        Comparator for natural sort order.
        @see ComparableComparator#comparableComparator()
        <!-- ACCEPT >=> 68395339-9f1d-11ea-809c-333445793454 -->



## Method: `java.org.apache.commons.collections4.ComparatorUtils` / `public static <E extends Comparable<? super E>> Comparator<E> naturalComparator()`


        <!-- 6839533a-9f1d-11ea-809d-333445793454 <=< ACCEPT -->
        Gets a comparator that uses the natural order of the objects.
        @param <E>  the object type to compare
        @return  a comparator which uses natural order
        <!-- ACCEPT >=> 6839533a-9f1d-11ea-809d-333445793454 -->



## Method: `java.org.apache.commons.collections4.ComparatorUtils` / `public static <E> Comparator<E> chainedComparator(final Comparator<E>... comparators)`


        <!-- 68397a23-9f1d-11ea-809e-333445793454 <=< ACCEPT -->
        Gets a comparator that compares using an array of {@link Comparator}s, applied
        in sequence until one returns not equal or the array is exhausted.
        @param <E>  the object type to compare
        @param comparators  the comparators to use, not null or empty or containing nulls
        @return a {@link ComparatorChain} formed from the input comparators
        @throws NullPointerException if comparators array is null or contains a null
        @see ComparatorChain
        <!-- ACCEPT >=> 68397a23-9f1d-11ea-809e-333445793454 -->



## Method: `java.org.apache.commons.collections4.ComparatorUtils` / `public static <E> Comparator<E> chainedComparator(final Collection<Comparator<E>> comparators)`


        <!-- 68397a24-9f1d-11ea-809f-333445793454 <=< ACCEPT -->
        Gets a comparator that compares using a collection of {@link Comparator}s,
        applied in (default iterator) sequence until one returns not equal or the
        collection is exhausted.
        @param <E>  the object type to compare
        @param comparators  the comparators to use, not null or empty or containing nulls
        @return a {@link ComparatorChain} formed from the input comparators
        @throws NullPointerException if comparators collection is null or contains a null
        @throws ClassCastException if the comparators collection contains the wrong object type
        @see ComparatorChain
        <!-- ACCEPT >=> 68397a24-9f1d-11ea-809f-333445793454 -->



## Method: `java.org.apache.commons.collections4.ComparatorUtils` / `public static <E> Comparator<E> reversedComparator(final Comparator<E> comparator)`


        <!-- 68397a25-9f1d-11ea-80a0-333445793454 <=< ACCEPT -->
        Gets a comparator that reverses the order of the given comparator.
        @param <E>  the object type to compare
        @param comparator  the comparator to reverse
        @return  a comparator that reverses the order of the input comparator
        @see ReverseComparator
        <!-- ACCEPT >=> 68397a25-9f1d-11ea-80a0-333445793454 -->



## Method: `java.org.apache.commons.collections4.ComparatorUtils` / `public static Comparator<Boolean> booleanComparator(final boolean trueFirst)`


        <!-- 68397a26-9f1d-11ea-80a1-333445793454 <=< ACCEPT -->
        Gets a Comparator that can sort Boolean objects.
        <p>
        The parameter specifies whether true or false is sorted first.
        <p>
        The comparator throws NullPointerException if a null value is compared.
        @param trueFirst  when <code>true</code>, sort
        <code>true</code> {@link Boolean}s before
        <code>false</code> {@link Boolean}s.
        @return  a comparator that sorts booleans
        <!-- ACCEPT >=> 68397a26-9f1d-11ea-80a1-333445793454 -->



## Method: `java.org.apache.commons.collections4.ComparatorUtils` / `public static <E> Comparator<E> nullLowComparator(Comparator<E> comparator)`


        <!-- 68397a27-9f1d-11ea-80a2-333445793454 <=< ACCEPT -->
        Gets a Comparator that controls the comparison of <code>null</code> values.
        <p>
        The returned comparator will consider a null value to be less than
        any nonnull value, and equal to any other null value.  Two nonnull
        values will be evaluated with the given comparator.
        @param <E>  the object type to compare
        @param comparator the comparator that wants to allow nulls
        @return  a version of that comparator that allows nulls
        @see NullComparator
        <!-- ACCEPT >=> 68397a27-9f1d-11ea-80a2-333445793454 -->



## Method: `java.org.apache.commons.collections4.ComparatorUtils` / `public static <E> Comparator<E> nullHighComparator(Comparator<E> comparator)`


        <!-- 68397a28-9f1d-11ea-80a3-333445793454 <=< ACCEPT -->
        Gets a Comparator that controls the comparison of <code>null</code> values.
        <p>
        The returned comparator will consider a null value to be greater than
        any nonnull value, and equal to any other null value.  Two nonnull
        values will be evaluated with the given comparator.
        @param <E>  the object type to compare
        @param comparator the comparator that wants to allow nulls
        @return  a version of that comparator that allows nulls
        @see NullComparator
        <!-- ACCEPT >=> 68397a28-9f1d-11ea-80a3-333445793454 -->



## Method: `java.org.apache.commons.collections4.ComparatorUtils` / `final Transformer<? super I, ? extends O> transformer)`


        <!-- 68397a29-9f1d-11ea-80a4-333445793454 <=< ACCEPT -->
        Gets a Comparator that passes transformed objects to the given comparator.
        <p>
        Objects passed to the returned comparator will first be transformed
        by the given transformer before they are compared by the given
        comparator.
        @param <I>  the input object type of the transformed comparator
        @param <O>  the object type of the decorated comparator
        @param comparator  the sort order to use
        @param transformer  the transformer to use
        @return  a comparator that transforms its input objects before comparing them
        @see  TransformingComparator
        <!-- ACCEPT >=> 68397a29-9f1d-11ea-80a4-333445793454 -->



## Method: `java.org.apache.commons.collections4.ComparatorUtils` / `public static <E> E min(final E o1, final E o2, Comparator<E> comparator)`


        <!-- 68397a2a-9f1d-11ea-80a5-333445793454 <=< ACCEPT -->
        Returns the smaller of the given objects according to the given
        comparator, returning the second object if the comparator
        returns equal.
        @param <E>  the object type to compare
        @param o1  the first object to compare
        @param o2  the second object to compare
        @param comparator  the sort order to use
        @return  the smaller of the two objects
        <!-- ACCEPT >=> 68397a2a-9f1d-11ea-80a5-333445793454 -->



## Method: `java.org.apache.commons.collections4.ComparatorUtils` / `public static <E> E max(final E o1, final E o2, Comparator<E> comparator)`


        <!-- 68397a2b-9f1d-11ea-80a6-333445793454 <=< ACCEPT -->
        Returns the larger of the given objects according to the given
        comparator, returning the second object if the comparator
        returns equal.
        @param <E>  the object type to compare
        @param o1  the first object to compare
        @param o2  the second object to compare
        @param comparator  the sort order to use
        @return  the larger of the two objects
        <!-- ACCEPT >=> 68397a2b-9f1d-11ea-80a6-333445793454 -->



# File: `java.org.apache.commons.collections4.EnumerationUtils`

## Class: `java.org.apache.commons.collections4.EnumerationUtils` / `public class EnumerationUtils`


        <!-- 68397a2c-9f1d-11ea-80a7-333445793454 <=< ACCEPT -->
        Provides utility methods for {@link Enumeration} instances.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 68397a2c-9f1d-11ea-80a7-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.EnumerationUtils` / `private EnumerationUtils()`


        <!-- 68397a2d-9f1d-11ea-80a8-333445793454 <=< ACCEPT -->
        EnumerationUtils is not normally instantiated.
        <!-- ACCEPT >=> 68397a2d-9f1d-11ea-80a8-333445793454 -->



## Method: `java.org.apache.commons.collections4.EnumerationUtils` / `public static <T> T get(final Enumeration<T> e, final int index)`


        <!-- 68397a2e-9f1d-11ea-80a9-333445793454 <=< ACCEPT -->
        Returns the <code>index</code>-th value in the {@link Enumeration}, throwing
        <code>IndexOutOfBoundsException</code> if there is no such element.
        <p>
        The Enumeration is advanced to <code>index</code> (or to the end, if
        <code>index</code> exceeds the number of entries) as a side effect of this method.
        @param e  the enumeration to get a value from
        @param index  the index to get
        @param <T> the type of object in the {@link Enumeration}
        @return the object at the specified index
        @throws IndexOutOfBoundsException if the index is invalid
        @throws IllegalArgumentException if the object type is invalid
        @since 4.1
        <!-- ACCEPT >=> 68397a2e-9f1d-11ea-80a9-333445793454 -->



## Method: `java.org.apache.commons.collections4.EnumerationUtils` / `public static <E> List<E> toList(final Enumeration<? extends E> enumeration)`


        <!-- 68397a2f-9f1d-11ea-80aa-333445793454 <=< ACCEPT -->
        Creates a list based on an enumeration.
        <p>As the enumeration is traversed, an ArrayList of its values is
        created. The new list is returned.</p>
        @param <E> the element type
        @param enumeration  the enumeration to traverse, which should not be <code>null</code>.
        @return a list containing all elements of the given enumeration
        @throws NullPointerException if the enumeration parameter is <code>null</code>.
        <!-- ACCEPT >=> 68397a2f-9f1d-11ea-80aa-333445793454 -->



## Method: `java.org.apache.commons.collections4.EnumerationUtils` / `public static List<String> toList(final StringTokenizer stringTokenizer)`


        <!-- 68397a30-9f1d-11ea-80ab-333445793454 <=< ACCEPT -->
        Override toList(Enumeration) for StringTokenizer as it implements Enumeration&lt;Object&gt;
        for the sake of backward compatibility.
        @param stringTokenizer  the tokenizer to convert to a {@link List}&lt;{@link String}&gt;
        @return a list containing all tokens of the given StringTokenizer
        <!-- ACCEPT >=> 68397a30-9f1d-11ea-80ab-333445793454 -->



# File: `java.org.apache.commons.collections4.Equator`

## Interface: `java.org.apache.commons.collections4.Equator` / `public interface Equator<T>`


        <!-- 68397a31-9f1d-11ea-80ac-333445793454 <=< ACCEPT -->
        An equation function, which determines equality between objects of type T.
        <p>
        It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
        {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
        @param <T> the types of object this {@link Equator} can evaluate.
        @since 4.0
        @version $Id$
        <!-- ACCEPT >=> 68397a31-9f1d-11ea-80ac-333445793454 -->



## Method: `java.org.apache.commons.collections4.Equator` / `boolean equate(T o1, T o2)`


        <!-- 68397a32-9f1d-11ea-80ad-333445793454 <=< ACCEPT -->
        Evaluates the two arguments for their equality.
        @param o1 the first object to be equated.
        @param o2 the second object to be equated.
        @return whether the two objects are equal.
        <!-- ACCEPT >=> 68397a32-9f1d-11ea-80ad-333445793454 -->



## Method: `java.org.apache.commons.collections4.Equator` / `int hash(T o)`


        <!-- 6839a12a-9f1d-11ea-80ae-333445793454 <=< ACCEPT -->
        Calculates the hash for the object, based on the method of equality used in the equate
        method. This is used for classes that delegate their {@link Object#equals(Object) equals(Object)} method to an
        Equator (and so must also delegate their {@link Object#hashCode() hashCode()} method), or for implementations
        of {@link org.apache.commons.collections4.map.HashedMap} that use an Equator for the key objects.
        @param o the object to calculate the hash for.
        @return the hash of the object.
        <!-- ACCEPT >=> 6839a12a-9f1d-11ea-80ae-333445793454 -->



# File: `java.org.apache.commons.collections4.Factory`

## Interface: `java.org.apache.commons.collections4.Factory` / `public interface Factory<T>`


        <!-- 6839a12b-9f1d-11ea-80af-333445793454 <=< ACCEPT -->
        Defines a functor interface implemented by classes that create objects.
        <p>
        A <code>Factory</code> creates an object without using an input parameter.
        If an input parameter is required, then {@link Transformer} is more appropriate.
        <p>
        Standard implementations of common factories are provided by
        {@link FactoryUtils}. These include factories that return a constant,
        a copy of a prototype or a new instance.
        @param <T> the type that the factory creates
        @since 2.1
        @version $Id$
        <!-- ACCEPT >=> 6839a12b-9f1d-11ea-80af-333445793454 -->



## Method: `java.org.apache.commons.collections4.Factory` / `T create()`


        <!-- 6839a12c-9f1d-11ea-80b0-333445793454 <=< ACCEPT -->
        Create a new object.
        @return a new object
        @throws FunctorException (runtime) if the factory cannot create an object
        <!-- ACCEPT >=> 6839a12c-9f1d-11ea-80b0-333445793454 -->



# File: `java.org.apache.commons.collections4.FactoryUtils`

## Class: `java.org.apache.commons.collections4.FactoryUtils` / `public class FactoryUtils`


        <!-- 6839a12d-9f1d-11ea-80b1-333445793454 <=< ACCEPT -->
        <code>FactoryUtils</code> provides reference implementations and utilities
        for the Factory functor interface. The supplied factories are:
        <ul>
        <li>Prototype - clones a specified object
        <li>Instantiate - creates objects using reflection
        <li>Constant - always returns the same object
        <li>Null - always returns null
        <li>Exception - always throws an exception
        </ul>
        <p>
        Since v4.1 only factories which are considered to be safe are
        Serializable. Factories considered to be unsafe for serialization are:
        <ul>
        <li>Prototype
        <li>Instantiate
        </ul>
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 6839a12d-9f1d-11ea-80b1-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.FactoryUtils` / `private FactoryUtils()`


        <!-- 6839a12e-9f1d-11ea-80b2-333445793454 <=< ACCEPT -->
        This class is not normally instantiated.
        <!-- ACCEPT >=> 6839a12e-9f1d-11ea-80b2-333445793454 -->



## Method: `java.org.apache.commons.collections4.FactoryUtils` / `public static <T> Factory<T> exceptionFactory()`


        <!-- 6839a12f-9f1d-11ea-80b3-333445793454 <=< ACCEPT -->
        Gets a Factory that always throws an exception.
        This could be useful during testing as a placeholder.
        @see org.apache.commons.collections4.functors.ExceptionFactory
        @param <T> the type that the factory creates
        @return the factory
        <!-- ACCEPT >=> 6839a12f-9f1d-11ea-80b3-333445793454 -->



## Method: `java.org.apache.commons.collections4.FactoryUtils` / `public static <T> Factory<T> nullFactory()`


        <!-- 6839a130-9f1d-11ea-80b4-333445793454 <=< ACCEPT -->
        Gets a Factory that will return null each time the factory is used.
        This could be useful during testing as a placeholder.
        @see org.apache.commons.collections4.functors.ConstantFactory
        @param <T> the "type" of null object the factory should return.
        @return the factory
        <!-- ACCEPT >=> 6839a130-9f1d-11ea-80b4-333445793454 -->



## Method: `java.org.apache.commons.collections4.FactoryUtils` / `public static <T> Factory<T> constantFactory(final T constantToReturn)`


        <!-- 6839a131-9f1d-11ea-80b5-333445793454 <=< ACCEPT -->
        Creates a Factory that will return the same object each time the factory
        is used. No check is made that the object is immutable. In general, only
        immutable objects should use the constant factory. Mutable objects should
        use the prototype factory.
        @see org.apache.commons.collections4.functors.ConstantFactory
        @param <T> the type that the factory creates
        @param constantToReturn  the constant object to return each time in the factory
        @return the <code>constant</code> factory.
        <!-- ACCEPT >=> 6839a131-9f1d-11ea-80b5-333445793454 -->



## Method: `java.org.apache.commons.collections4.FactoryUtils` / `public static <T> Factory<T> prototypeFactory(final T prototype)`


        <!-- 6839a132-9f1d-11ea-80b6-333445793454 <=< ACCEPT -->
        Creates a Factory that will return a clone of the same prototype object
        each time the factory is used. The prototype will be cloned using one of these
        techniques (in order):
        <ul>
        <li>public clone method
        <li>public copy constructor
        <li>serialization clone
        <ul>
        @see org.apache.commons.collections4.functors.PrototypeFactory
        @param <T> the type that the factory creates
        @param prototype  the object to clone each time in the factory
        @return the <code>prototype</code> factory, or a {@link ConstantFactory#NULL_INSTANCE} if
        the {@code prototype} is {@code null}
        @throws IllegalArgumentException if the prototype cannot be cloned
        <!-- ACCEPT >=> 6839a132-9f1d-11ea-80b6-333445793454 -->



## Method: `java.org.apache.commons.collections4.FactoryUtils` / `public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate)`


        <!-- 6839a133-9f1d-11ea-80b7-333445793454 <=< ACCEPT -->
        Creates a Factory that can create objects of a specific type using
        a no-args constructor.
        @see org.apache.commons.collections4.functors.InstantiateFactory
        @param <T> the type that the factory creates
        @param classToInstantiate  the Class to instantiate each time in the factory
        @return the <code>reflection</code> factory
        @throws NullPointerException if the classToInstantiate is null
        <!-- ACCEPT >=> 6839a133-9f1d-11ea-80b7-333445793454 -->



## Method: `java.org.apache.commons.collections4.FactoryUtils` / `final Object[] args)`


        <!-- 6839a134-9f1d-11ea-80b8-333445793454 <=< ACCEPT -->
        Creates a Factory that can create objects of a specific type using
        the arguments specified to this method.
        @see org.apache.commons.collections4.functors.InstantiateFactory
        @param <T> the type that the factory creates
        @param classToInstantiate  the Class to instantiate each time in the factory
        @param paramTypes  parameter types for the constructor, can be null
        @param args  the arguments to pass to the constructor, can be null
        @return the <code>reflection</code> factory
        @throws NullPointerException if the classToInstantiate is null
        @throws IllegalArgumentException if the paramTypes and args don't match
        @throws IllegalArgumentException if the constructor doesn't exist
        <!-- ACCEPT >=> 6839a134-9f1d-11ea-80b8-333445793454 -->



# File: `java.org.apache.commons.collections4.FluentIterable`

## Class: `java.org.apache.commons.collections4.FluentIterable` / `public class FluentIterable<E> implements Iterable<E>`


        <!-- 6839a135-9f1d-11ea-80b9-333445793454 <=< ACCEPT -->
        A FluentIterable provides a powerful yet simple API for manipulating
        Iterable instances in a fluent manner.
        <p>
        A FluentIterable can be created either from an Iterable or from a set
        of elements. The following types of methods are provided:
        <ul>
        <li>fluent methods which return a new {@code FluentIterable} instance,
        providing a view of the original iterable (e.g. filter(Predicate));
        <li>conversion methods which copy the FluentIterable's contents into a
        new collection or array (e.g. toList());
        <li>utility methods which answer questions about the FluentIterable's
        contents (e.g. size(), anyMatch(Predicate)).
        <li>
        </ul>
        <p>
        The following example outputs the first 3 even numbers in the range [1, 10]
        into a list:
        <pre>
        List&lt;String&gt; result =
        FluentIterable
        .of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
        .filter(new Predicate<Integer>() {
        public boolean evaluate(Integer number) {
        return number % 2 == 0;
        }
        )
        .transform(TransformerUtils.stringValueTransformer())
        .limit(3)
        .toList();
        </pre>
        The resulting list will contain the following elements:
        <pre>[2, 4, 6]</pre>
        @param <E>  the element type
        @since 4.1
        @version $Id$
        <!-- ACCEPT >=> 6839a135-9f1d-11ea-80b9-333445793454 -->



## Field: `java.org.apache.commons.collections4.FluentIterable` / `private final Iterable<E> iterable`


        <!-- 6839a136-9f1d-11ea-80ba-333445793454 <=< ACCEPT -->
        A reference to the wrapped iterable.
        <!-- ACCEPT >=> 6839a136-9f1d-11ea-80ba-333445793454 -->



## Method: `java.org.apache.commons.collections4.FluentIterable` / `public static <T> FluentIterable<T> empty()`


        <!-- 6839a137-9f1d-11ea-80bb-333445793454 <=< ACCEPT -->
        Creates a new empty FluentIterable.
        @param <T>  the element type
        @return a new empty FluentIterable
        <!-- ACCEPT >=> 6839a137-9f1d-11ea-80bb-333445793454 -->



## Method: `java.org.apache.commons.collections4.FluentIterable` / `public static <T> FluentIterable<T> of(final T singleton)`


        <!-- 6839a138-9f1d-11ea-80bc-333445793454 <=< ACCEPT -->
        Creates a new FluentIterable of the single provided element.
        <p>
        The returned iterable's iterator does not support {@code remove()}.
        @param <T>  the element type
        @param singleton  the singleton element
        @return a new FluentIterable containing the singleton
        <!-- ACCEPT >=> 6839a138-9f1d-11ea-80bc-333445793454 -->



## Method: `java.org.apache.commons.collections4.FluentIterable` / `public static <T> FluentIterable<T> of(final T... elements)`


        <!-- 6839c830-9f1d-11ea-80bd-333445793454 <=< ACCEPT -->
        Creates a new FluentIterable from the provided elements.
        <p>
        The returned iterable's iterator does not support {@code remove()}.
        @param <T>  the element type
        @param elements  the elements to be contained in the FluentIterable
        @return a new FluentIterable containing the provided elements
        <!-- ACCEPT >=> 6839c830-9f1d-11ea-80bd-333445793454 -->



## Method: `java.org.apache.commons.collections4.FluentIterable` / `public static <T> FluentIterable<T> of(final Iterable<T> iterable)`


        <!-- 6839c831-9f1d-11ea-80be-333445793454 <=< ACCEPT -->
        Construct a new FluentIterable from the provided iterable. If the
        iterable is already an instance of FluentIterable, the instance
        will be returned instead.
        <p>
        The returned iterable's iterator supports {@code remove()} when the
        corresponding input iterator supports it.
        @param <T>  the element type
        @param iterable  the iterable to wrap into a FluentIterable, may not be null
        @return a new FluentIterable wrapping the provided iterable
        @throws NullPointerException if iterable is null
        <!-- ACCEPT >=> 6839c831-9f1d-11ea-80be-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.FluentIterable` / `FluentIterable()`


        <!-- 6839c832-9f1d-11ea-80bf-333445793454 <=< ACCEPT -->
        Package-private constructor, used by IterableUtils.
        <!-- ACCEPT >=> 6839c832-9f1d-11ea-80bf-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.FluentIterable` / `private FluentIterable(final Iterable<E> iterable)`


        <!-- 6839c833-9f1d-11ea-80c0-333445793454 <=< ACCEPT -->
        Create a new FluentIterable by wrapping the provided iterable.
        @param iterable  the iterable to wrap
        <!-- ACCEPT >=> 6839c833-9f1d-11ea-80c0-333445793454 -->



## Method: `java.org.apache.commons.collections4.FluentIterable` / `public FluentIterable<E> append(final E... elements)`


        <!-- 6839c834-9f1d-11ea-80c1-333445793454 <=< ACCEPT -->
        Returns a new FluentIterable whose iterator will first traverse
        the elements of the current iterable, followed by the provided
        elements.
        @param elements  the elements to append to the iterable
        @return a new iterable, combining this iterable with the elements
        <!-- ACCEPT >=> 6839c834-9f1d-11ea-80c1-333445793454 -->



## Method: `java.org.apache.commons.collections4.FluentIterable` / `public FluentIterable<E> append(final Iterable<? extends E> other)`


        <!-- 6839c835-9f1d-11ea-80c2-333445793454 <=< ACCEPT -->
        Returns a new FluentIterable whose iterator will first traverse
        the elements of the current iterable, followed by the elements
        of the provided iterable.
        @param other  the other iterable to combine, may not be null
        @return a new iterable, combining this iterable with other
        @throws NullPointerException if other is null
        <!-- ACCEPT >=> 6839c835-9f1d-11ea-80c2-333445793454 -->



## Method: `java.org.apache.commons.collections4.FluentIterable` / `public FluentIterable<E> collate(final Iterable<? extends E> other)`


        <!-- 6839c836-9f1d-11ea-80c3-333445793454 <=< ACCEPT -->
        Returns a new FluentIterable whose iterator will traverse the
        elements of the current and provided iterable in natural order.
        <p>
        Example: natural ordering
        <ul>
        <li>this contains elements [1, 3, 5, 7]
        <li>other contains elements [2, 4, 6, 8]
        </ul>
        <p>
        The returned iterable will traverse the elements in the following
        order: [1, 2, 3, 4, 5, 6, 7, 8]
        @param other  the other iterable to collate, may not be null
        @return a new iterable, collating this iterable with the other in natural order
        @throws NullPointerException if other is null
        @see {@link org.apache.commons.collections4.iterators.CollatingIterator CollatingIterator}
        <!-- ACCEPT >=> 6839c836-9f1d-11ea-80c3-333445793454 -->



## Method: `java.org.apache.commons.collections4.FluentIterable` / `final Comparator<? super E> comparator)`


        <!-- 6839c837-9f1d-11ea-80c4-333445793454 <=< ACCEPT -->
        Returns a new FluentIterable whose iterator will traverse the
        elements of the current and provided iterable according to the
        ordering defined by an comparator.
        <p>
        Example: descending order
        <ul>
        <li>this contains elements [7, 5, 3, 1]
        <li>other contains elements [8, 6, 4, 2]
        </ul>
        <p>
        The returned iterable will traverse the elements in the following
        order: [8, 7, 6, 5, 4, 3, 2, 1]
        @param comparator  the comparator to define an ordering, may be null,
        in which case natural ordering will be used
        @param other  the other iterable to collate, may not be null
        @return a new iterable, collating this iterable with the other in natural order
        @throws NullPointerException if other is null
        @see {@link org.apache.commons.collections4.iterators.CollatingIterator CollatingIterator}
        <!-- ACCEPT >=> 6839c837-9f1d-11ea-80c4-333445793454 -->



## Method: `java.org.apache.commons.collections4.FluentIterable` / `public FluentIterable<E> eval()`


        <!-- 6839c838-9f1d-11ea-80c5-333445793454 <=< ACCEPT -->
        This method fully traverses an iterator of this iterable and returns
        a new iterable with the same contents, but without any reference
        to the originating iterables and/or iterators.
        <p>
        Calling this method is equivalent to:
        <pre>
        FluentIterable<E> someIterable = ...;
        FluentIterable.of(someIterable.toList());
        </pre>
        @return a new iterable with the same contents as this iterable
        <!-- ACCEPT >=> 6839c838-9f1d-11ea-80c5-333445793454 -->



## Method: `java.org.apache.commons.collections4.FluentIterable` / `public FluentIterable<E> filter(final Predicate<? super E> predicate)`


        <!-- 6839c839-9f1d-11ea-80c6-333445793454 <=< ACCEPT -->
        Returns a new FluentIterable whose iterator will only return
        elements from this iterable matching the provided predicate.
        @param predicate  the predicate used to filter elements
        @return a new iterable, providing a filtered view of this iterable
        @throws NullPointerException if predicate is null
        <!-- ACCEPT >=> 6839c839-9f1d-11ea-80c6-333445793454 -->



## Method: `java.org.apache.commons.collections4.FluentIterable` / `public FluentIterable<E> limit(final long maxSize)`


        <!-- 6839c83a-9f1d-11ea-80c7-333445793454 <=< ACCEPT -->
        Returns a new FluentIterable whose iterator will return at most
        the provided maximum number of elements from this iterable.
        @param maxSize  the maximum number of elements
        @return a new iterable, providing a bounded view of this iterable
        @throws IllegalArgumentException if maxSize is negative
        <!-- ACCEPT >=> 6839c83a-9f1d-11ea-80c7-333445793454 -->



## Method: `java.org.apache.commons.collections4.FluentIterable` / `public FluentIterable<E> loop()`


        <!-- 6839c83b-9f1d-11ea-80c8-333445793454 <=< ACCEPT -->
        Returns a new FluentIterable whose iterator will loop infinitely
        over the elements from this iterable.
        @return a new iterable, providing a looping view of this iterable
        <!-- ACCEPT >=> 6839c83b-9f1d-11ea-80c8-333445793454 -->



## Method: `java.org.apache.commons.collections4.FluentIterable` / `public FluentIterable<E> reverse()`


        <!-- 6839c83c-9f1d-11ea-80c9-333445793454 <=< ACCEPT -->
        Returns a new FluentIterable whose iterator will traverse the
        elements from this iterable in reverse order.
        @return a new iterable, providing a reversed view of this iterable
        <!-- ACCEPT >=> 6839c83c-9f1d-11ea-80c9-333445793454 -->



## Method: `java.org.apache.commons.collections4.FluentIterable` / `public FluentIterable<E> skip(final long elementsToSkip)`


        <!-- 6839c83d-9f1d-11ea-80ca-333445793454 <=< ACCEPT -->
        Returns a new FluentIterable whose iterator will skip the first
        N elements from this iterable.
        @param elementsToSkip  the number of elements to skip
        @return a new iterable, providing a view of this iterable by skipping
        the first N elements
        @throws IllegalArgumentException if elementsToSkip is negative
        <!-- ACCEPT >=> 6839c83d-9f1d-11ea-80ca-333445793454 -->



## Method: `java.org.apache.commons.collections4.FluentIterable` / `public <O> FluentIterable<O> transform(final Transformer<? super E, ? extends O> transformer)`


        <!-- 6839c83e-9f1d-11ea-80cb-333445793454 <=< ACCEPT -->
        Returns a new FluentIterable whose iterator will return all elements
        of this iterable transformed by the provided transformer.
        @param <O>  the output element type
        @param transformer  the transformer applied to each element
        @return a new iterable, providing a transformed view of this iterable
        @throws NullPointerException if transformer is null
        <!-- ACCEPT >=> 6839c83e-9f1d-11ea-80cb-333445793454 -->



## Method: `java.org.apache.commons.collections4.FluentIterable` / `public FluentIterable<E> unique()`


        <!-- 6839c83f-9f1d-11ea-80cc-333445793454 <=< ACCEPT -->
        Returns a new FluentIterable whose iterator will return a unique view
        of this iterable.
        @return a new iterable, providing a unique view of this iterable
        <!-- ACCEPT >=> 6839c83f-9f1d-11ea-80cc-333445793454 -->



## Method: `java.org.apache.commons.collections4.FluentIterable` / `public FluentIterable<E> unmodifiable()`


        <!-- 6839c840-9f1d-11ea-80cd-333445793454 <=< ACCEPT -->
        Returns a new FluentIterable whose iterator will return an unmodifiable
        view of this iterable.
        @return a new iterable, providing an unmodifiable view of this iterable
        <!-- ACCEPT >=> 6839c840-9f1d-11ea-80cd-333445793454 -->



## Method: `java.org.apache.commons.collections4.FluentIterable` / `public FluentIterable<E> zip(final Iterable<? extends E> other)`


        <!-- 6839c841-9f1d-11ea-80ce-333445793454 <=< ACCEPT -->
        Returns a new FluentIterable whose iterator will traverse
        the elements of this iterable and the other iterable in
        alternating order.
        @param other  the other iterable to interleave, may not be null
        @return a new iterable, interleaving this iterable with others
        @throws NullPointerException if other is null
        <!-- ACCEPT >=> 6839c841-9f1d-11ea-80ce-333445793454 -->



## Method: `java.org.apache.commons.collections4.FluentIterable` / `public FluentIterable<E> zip(final Iterable<? extends E>... others)`


        <!-- 6839ef3a-9f1d-11ea-80cf-333445793454 <=< ACCEPT -->
        Returns a new FluentIterable whose iterator will traverse
        the elements of this iterable and the other iterables in
        alternating order.
        @param others  the iterables to interleave, may not be null
        @return a new iterable, interleaving this iterable with others
        @throws NullPointerException if either of the provided iterables is null
        <!-- ACCEPT >=> 6839ef3a-9f1d-11ea-80cf-333445793454 -->



## Method: `java.org.apache.commons.collections4.FluentIterable` / `public Iterator<E> iterator()`


        <!-- 6839ef3b-9f1d-11ea-80d0-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <!-- ACCEPT >=> 6839ef3b-9f1d-11ea-80d0-333445793454 -->



## Method: `java.org.apache.commons.collections4.FluentIterable` / `public Enumeration<E> asEnumeration()`


        <!-- 6839ef3c-9f1d-11ea-80d1-333445793454 <=< ACCEPT -->
        Returns an Enumeration that will enumerate all elements contained
        in this iterable.
        @return an Enumeration over the elements of this iterable
        <!-- ACCEPT >=> 6839ef3c-9f1d-11ea-80d1-333445793454 -->



## Method: `java.org.apache.commons.collections4.FluentIterable` / `public boolean allMatch(final Predicate<? super E> predicate)`


        <!-- 6839ef3d-9f1d-11ea-80d2-333445793454 <=< ACCEPT -->
        Checks if all elements contained in this iterable are matching the
        provided predicate.
        <p>
        A <code>null</code> or empty iterable returns true.
        @param predicate  the predicate to use, may not be null
        @return true if all elements contained in this iterable match the predicate,
        false otherwise
        @throws NullPointerException if predicate is null
        <!-- ACCEPT >=> 6839ef3d-9f1d-11ea-80d2-333445793454 -->



## Method: `java.org.apache.commons.collections4.FluentIterable` / `public boolean anyMatch(final Predicate<? super E> predicate)`


        <!-- 6839ef3e-9f1d-11ea-80d3-333445793454 <=< ACCEPT -->
        Checks if this iterable contains any element matching the provided predicate.
        <p>
        A <code>null</code> or empty iterable returns false.
        @param predicate  the predicate to use, may not be null
        @return true if at least one element contained in this iterable matches the predicate,
        false otherwise
        @throws NullPointerException if predicate is null
        <!-- ACCEPT >=> 6839ef3e-9f1d-11ea-80d3-333445793454 -->



## Method: `java.org.apache.commons.collections4.FluentIterable` / `public boolean isEmpty()`


        <!-- 6839ef3f-9f1d-11ea-80d4-333445793454 <=< ACCEPT -->
        Checks if this iterable is empty.
        @return true if this iterable does not contain any elements, false otherwise
        <!-- ACCEPT >=> 6839ef3f-9f1d-11ea-80d4-333445793454 -->



## Method: `java.org.apache.commons.collections4.FluentIterable` / `public boolean contains(final Object object)`


        <!-- 6839ef40-9f1d-11ea-80d5-333445793454 <=< ACCEPT -->
        Checks if the object is contained in this iterable.
        @param object  the object to check
        @return true if the object is contained in this iterable, false otherwise
        <!-- ACCEPT >=> 6839ef40-9f1d-11ea-80d5-333445793454 -->



## Method: `java.org.apache.commons.collections4.FluentIterable` / `public void forEach(final Closure<? super E> closure)`


        <!-- 6839ef41-9f1d-11ea-80d6-333445793454 <=< ACCEPT -->
        Applies the closure to all elements contained in this iterable.
        @param closure  the closure to apply to each element, may not be null
        @throws NullPointerException if closure is null
        <!-- ACCEPT >=> 6839ef41-9f1d-11ea-80d6-333445793454 -->



## Method: `java.org.apache.commons.collections4.FluentIterable` / `public E get(final int position)`


        <!-- 6839ef42-9f1d-11ea-80d7-333445793454 <=< ACCEPT -->
        Returns the element at the provided position in this iterable.
        In order to return the element, an iterator needs to be traversed
        up to the requested position.
        @param position  the position of the element to return
        @return the element
        @throws IndexOutOfBoundsException if the provided position is outside the
        valid range of this iterable: [0, size)
        <!-- ACCEPT >=> 6839ef42-9f1d-11ea-80d7-333445793454 -->



## Method: `java.org.apache.commons.collections4.FluentIterable` / `public int size()`


        <!-- 6839ef43-9f1d-11ea-80d8-333445793454 <=< ACCEPT -->
        Returns the number of elements that are contained in this iterable.
        In order to determine the size, an iterator needs to be traversed.
        @return the size of this iterable
        <!-- ACCEPT >=> 6839ef43-9f1d-11ea-80d8-333445793454 -->



## Method: `java.org.apache.commons.collections4.FluentIterable` / `public void copyInto(final Collection<? super E> collection)`


        <!-- 6839ef44-9f1d-11ea-80d9-333445793454 <=< ACCEPT -->
        Traverses an iterator of this iterable and adds all elements
        to the provided collection.
        @param collection  the collection to add the elements
        @throws NullPointerException if collection is null
        <!-- ACCEPT >=> 6839ef44-9f1d-11ea-80d9-333445793454 -->



## Method: `java.org.apache.commons.collections4.FluentIterable` / `public E[] toArray(final Class<E> arrayClass)`


        <!-- 6839ef45-9f1d-11ea-80da-333445793454 <=< ACCEPT -->
        Returns an array containing all elements of this iterable by traversing
        its iterator.
        @param arrayClass  the class of array to create
        @return an array of the iterable contents
        @throws ArrayStoreException if arrayClass is invalid
        <!-- ACCEPT >=> 6839ef45-9f1d-11ea-80da-333445793454 -->



## Method: `java.org.apache.commons.collections4.FluentIterable` / `public List<E> toList()`


        <!-- 6839ef46-9f1d-11ea-80db-333445793454 <=< ACCEPT -->
        Returns a mutable list containing all elements of this iterable
        by traversing its iterator.
        <p>
        The returned list is guaranteed to be mutable.
        @return a list of the iterable contents
        <!-- ACCEPT >=> 6839ef46-9f1d-11ea-80db-333445793454 -->



## Method: `java.org.apache.commons.collections4.FluentIterable` / `public String toString()`


        <!-- 683a164c-9f1d-11ea-80dc-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <!-- ACCEPT >=> 683a164c-9f1d-11ea-80dc-333445793454 -->



# File: `java.org.apache.commons.collections4.FunctorException`

## Class: `java.org.apache.commons.collections4.FunctorException` / `public class FunctorException extends RuntimeException`


        <!-- 683a164d-9f1d-11ea-80dd-333445793454 <=< ACCEPT -->
        Runtime exception thrown from functors.
        If required, a root cause error can be wrapped within this one.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 683a164d-9f1d-11ea-80dd-333445793454 -->



## Field: `java.org.apache.commons.collections4.FunctorException` / `private static final long serialVersionUID`


        <!-- 683a164e-9f1d-11ea-80de-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 683a164e-9f1d-11ea-80de-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.FunctorException` / `public FunctorException()`


        <!-- 683a164f-9f1d-11ea-80df-333445793454 <=< ACCEPT -->
        Constructs a new <code>FunctorException</code> without specified
        detail message.
        <!-- ACCEPT >=> 683a164f-9f1d-11ea-80df-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.FunctorException` / `public FunctorException(final String msg)`


        <!-- 683a1650-9f1d-11ea-80e0-333445793454 <=< ACCEPT -->
        Constructs a new <code>FunctorException</code> with specified
        detail message.
        @param msg  the error message.
        <!-- ACCEPT >=> 683a1650-9f1d-11ea-80e0-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.FunctorException` / `public FunctorException(final Throwable rootCause)`


        <!-- 683a1651-9f1d-11ea-80e1-333445793454 <=< ACCEPT -->
        Constructs a new <code>FunctorException</code> with specified
        nested <code>Throwable</code> root cause.
        @param rootCause  the exception or error that caused this exception
        to be thrown.
        <!-- ACCEPT >=> 683a1651-9f1d-11ea-80e1-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.FunctorException` / `public FunctorException(final String msg, final Throwable rootCause)`


        <!-- 683a1652-9f1d-11ea-80e2-333445793454 <=< ACCEPT -->
        Constructs a new <code>FunctorException</code> with specified
        detail message and nested <code>Throwable</code> root cause.
        @param msg        the error message.
        @param rootCause  the exception or error that caused this exception
        to be thrown.
        <!-- ACCEPT >=> 683a1652-9f1d-11ea-80e2-333445793454 -->



# File: `java.org.apache.commons.collections4.Get`

## Interface: `java.org.apache.commons.collections4.Get` / `public interface Get<K, V>`


        <!-- 683a1653-9f1d-11ea-80e3-333445793454 <=< ACCEPT -->
        The "read" subset of the {@link java.util.Map} interface.
        @since 4.0
        @version $Id$
        @see Put
        <!-- ACCEPT >=> 683a1653-9f1d-11ea-80e3-333445793454 -->



## Method: `java.org.apache.commons.collections4.Get` / `boolean containsKey(Object key)`


        <!-- 683a1654-9f1d-11ea-80e4-333445793454 <=< ACCEPT -->
        @see java.util.Map#containsKey(Object)
        <!-- ACCEPT >=> 683a1654-9f1d-11ea-80e4-333445793454 -->



## Method: `java.org.apache.commons.collections4.Get` / `boolean containsValue(Object value)`


        <!-- 683a1655-9f1d-11ea-80e5-333445793454 <=< ACCEPT -->
        @see java.util.Map#containsValue(Object)
        <!-- ACCEPT >=> 683a1655-9f1d-11ea-80e5-333445793454 -->



## Method: `java.org.apache.commons.collections4.Get` / `Set<java.util.Map.Entry<K, V>> entrySet()`


        <!-- 683a1656-9f1d-11ea-80e6-333445793454 <=< ACCEPT -->
        @see java.util.Map#entrySet()
        <!-- ACCEPT >=> 683a1656-9f1d-11ea-80e6-333445793454 -->



## Method: `java.org.apache.commons.collections4.Get` / `V get(Object key)`


        <!-- 683a1657-9f1d-11ea-80e7-333445793454 <=< ACCEPT -->
        @see java.util.Map#get(Object)
        <!-- ACCEPT >=> 683a1657-9f1d-11ea-80e7-333445793454 -->



## Method: `java.org.apache.commons.collections4.Get` / `V remove(Object key)`


        <!-- 683a1658-9f1d-11ea-80e8-333445793454 <=< ACCEPT -->
        @see java.util.Map#remove(Object)
        <!-- ACCEPT >=> 683a1658-9f1d-11ea-80e8-333445793454 -->



## Method: `java.org.apache.commons.collections4.Get` / `boolean isEmpty()`


        <!-- 683a1659-9f1d-11ea-80e9-333445793454 <=< ACCEPT -->
        @see java.util.Map#isEmpty()
        <!-- ACCEPT >=> 683a1659-9f1d-11ea-80e9-333445793454 -->



## Method: `java.org.apache.commons.collections4.Get` / `Set<K> keySet()`


        <!-- 683a165a-9f1d-11ea-80ea-333445793454 <=< ACCEPT -->
        @see java.util.Map#keySet()
        <!-- ACCEPT >=> 683a165a-9f1d-11ea-80ea-333445793454 -->



## Method: `java.org.apache.commons.collections4.Get` / `int size()`


        <!-- 683a3d51-9f1d-11ea-80eb-333445793454 <=< ACCEPT -->
        @see java.util.Map#size()
        <!-- ACCEPT >=> 683a3d51-9f1d-11ea-80eb-333445793454 -->



## Method: `java.org.apache.commons.collections4.Get` / `Collection<V> values()`


        <!-- 683a3d52-9f1d-11ea-80ec-333445793454 <=< ACCEPT -->
        @see java.util.Map#values()
        <!-- ACCEPT >=> 683a3d52-9f1d-11ea-80ec-333445793454 -->



# File: `java.org.apache.commons.collections4.IterableGet`

## Interface: `java.org.apache.commons.collections4.IterableGet` / `public interface IterableGet<K, V> extends Get<K, V>`


        <!-- 683a3d53-9f1d-11ea-80ed-333445793454 <=< ACCEPT -->
        The "read" subset of the {@link java.util.Map} interface.
        @since 4.0
        @version $Id$
        @see Put
        <!-- ACCEPT >=> 683a3d53-9f1d-11ea-80ed-333445793454 -->



## Method: `java.org.apache.commons.collections4.IterableGet` / `MapIterator<K, V> mapIterator()`


        <!-- 683a3d54-9f1d-11ea-80ee-333445793454 <=< ACCEPT -->
        Obtains a <code>MapIterator</code> over the map.
        <p>
        A map iterator is an efficient way of iterating over maps.
        There is no need to access the entry set or use Map Entry objects.
        <pre>
        IterableMap<String,Integer> map = new HashedMap<String,Integer>();
        MapIterator<String,Integer> it = map.mapIterator();
        while (it.hasNext()) {
        String key = it.next();
        Integer value = it.getValue();
        it.setValue(value + 1);
        }
        </pre>
        @return a map iterator
        <!-- ACCEPT >=> 683a3d54-9f1d-11ea-80ee-333445793454 -->



# File: `java.org.apache.commons.collections4.IterableMap`

## Interface: `java.org.apache.commons.collections4.IterableMap` / `public interface IterableMap<K, V> extends Map<K, V>, Put<K, V>, IterableGet<K, V>`


        <!-- 683a3d55-9f1d-11ea-80ef-333445793454 <=< ACCEPT -->
        Defines a map that can be iterated directly without needing to create an entry set.
        <p>
        A map iterator is an efficient way of iterating over maps.
        There is no need to access the entry set or use Map Entry objects.
        <pre>
        IterableMap<String,Integer> map = new HashedMap<String,Integer>();
        MapIterator<String,Integer> it = map.mapIterator();
        while (it.hasNext()) {
        String key = it.next();
        Integer value = it.getValue();
        it.setValue(value + 1);
        }
        </pre>
        @param <K> the type of the keys in the map
        @param <V> the type of the values in the map
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 683a3d55-9f1d-11ea-80ef-333445793454 -->



# File: `java.org.apache.commons.collections4.IterableSortedMap`

## Interface: `java.org.apache.commons.collections4.IterableSortedMap` / `public interface IterableSortedMap<K, V> extends SortedMap<K, V>, OrderedMap<K, V>`


        <!-- 683a3d56-9f1d-11ea-80f0-333445793454 <=< ACCEPT -->
        {@link SortedMap} + {@link OrderedMap}.
        @param <K> the type of the keys in the map
        @param <V> the type of the values in the map
        @since 4.0
        @version $Id$
        <!-- ACCEPT >=> 683a3d56-9f1d-11ea-80f0-333445793454 -->



# File: `java.org.apache.commons.collections4.IterableUtils`

## Class: `java.org.apache.commons.collections4.IterableUtils` / `public class IterableUtils`


        <!-- 683a3d57-9f1d-11ea-80f1-333445793454 <=< ACCEPT -->
        Provides utility methods and decorators for {@link Iterable} instances.
        <p>
        <b>Note</b>: this util class has been designed for fail-fast argument checking.
        <ul>
        <li>
        all decorator methods are <b>NOT</b> null-safe wrt the provided Iterable argument, i.e.
        they will throw a {@link NullPointerException} if a null Iterable is passed as argument.
        <li>
        all other utility methods are null-safe wrt the provided Iterable argument, i.e. they will
        treat a null Iterable the same way as an empty one. Other arguments which are null,
        e.g. a {@link Predicate}, will result in a {@link NullPointerException}. Exception: passing
        a null {@link Comparator} is equivalent to a Comparator with natural ordering.
        </ul>
        @since 4.1
        @version $Id$
        <!-- ACCEPT >=> 683a3d57-9f1d-11ea-80f1-333445793454 -->



## Field: `java.org.apache.commons.collections4.IterableUtils` / `static final FluentIterable EMPTY_ITERABLE`


        <!-- 683a3d58-9f1d-11ea-80f2-333445793454 <=< ACCEPT -->
        An empty iterable.
        <!-- ACCEPT >=> 683a3d58-9f1d-11ea-80f2-333445793454 -->



## Method: `java.org.apache.commons.collections4.IterableUtils` / `public static <E> Iterable<E> emptyIterable()`


        <!-- 683a3d59-9f1d-11ea-80f3-333445793454 <=< ACCEPT -->
        Gets an empty iterable.
        <p>
        This iterable does not contain any elements.
        @param <E> the element type
        @return an empty iterable
        <!-- ACCEPT >=> 683a3d59-9f1d-11ea-80f3-333445793454 -->



## Method: `java.org.apache.commons.collections4.IterableUtils` / `final Iterable<? extends E> b)`


        <!-- 683a3d5a-9f1d-11ea-80f4-333445793454 <=< ACCEPT -->
        Combines two iterables into a single iterable.
        <p>
        The returned iterable has an iterator that traverses the elements in {@code a},
        followed by the elements in {@code b}. The source iterators are not polled until
        necessary.
        <p>
        The returned iterable's iterator supports {@code remove()} when the corresponding
        input iterator supports it.
        @param <E> the element type
        @param a  the first iterable, may not be null
        @param b  the second iterable, may not be null
        @return a new iterable, combining the provided iterables
        @throws NullPointerException if either a or b is null
        <!-- ACCEPT >=> 683a3d5a-9f1d-11ea-80f4-333445793454 -->



## Method: `java.org.apache.commons.collections4.IterableUtils` / `final Iterable<? extends E> c)`


        <!-- 683a6460-9f1d-11ea-80f5-333445793454 <=< ACCEPT -->
        Combines three iterables into a single iterable.
        <p>
        The returned iterable has an iterator that traverses the elements in {@code a},
        followed by the elements in {@code b} and {@code c}. The source iterators are
        not polled until necessary.
        <p>
        The returned iterable's iterator supports {@code remove()} when the corresponding
        input iterator supports it.
        @param <E> the element type
        @param a  the first iterable, may not be null
        @param b  the second iterable, may not be null
        @param c  the third iterable, may not be null
        @return a new iterable, combining the provided iterables
        @throws NullPointerException if either of the provided iterables is null
        <!-- ACCEPT >=> 683a6460-9f1d-11ea-80f5-333445793454 -->



## Method: `java.org.apache.commons.collections4.IterableUtils` / `final Iterable<? extends E> d)`


        <!-- 683a6461-9f1d-11ea-80f6-333445793454 <=< ACCEPT -->
        Combines four iterables into a single iterable.
        <p>
        The returned iterable has an iterator that traverses the elements in {@code a},
        followed by the elements in {@code b}, {@code c} and {@code d}. The source
        iterators are not polled until necessary.
        <p>
        The returned iterable's iterator supports {@code remove()} when the corresponding
        input iterator supports it.
        @param <E> the element type
        @param a  the first iterable, may not be null
        @param b  the second iterable, may not be null
        @param c  the third iterable, may not be null
        @param d  the fourth iterable, may not be null
        @return a new iterable, combining the provided iterables
        @throws NullPointerException if either of the provided iterables is null
        <!-- ACCEPT >=> 683a6461-9f1d-11ea-80f6-333445793454 -->



## Method: `java.org.apache.commons.collections4.IterableUtils` / `public static <E> Iterable<E> chainedIterable(final Iterable<? extends E>... iterables)`


        <!-- 683a6462-9f1d-11ea-80f7-333445793454 <=< ACCEPT -->
        Combines the provided iterables into a single iterable.
        <p>
        The returned iterable has an iterator that traverses the elements in the order
        of the arguments, i.e. iterables[0], iterables[1], .... The source iterators
        are not polled until necessary.
        <p>
        The returned iterable's iterator supports {@code remove()} when the corresponding
        input iterator supports it.
        @param <E> the element type
        @param iterables  the iterables to combine, may not be null
        @return a new iterable, combining the provided iterables
        @throws NullPointerException if either of the provided iterables is null
        <!-- ACCEPT >=> 683a6462-9f1d-11ea-80f7-333445793454 -->



## Method: `java.org.apache.commons.collections4.IterableUtils` / `final Iterable<? extends E> b)`


        <!-- 683a6463-9f1d-11ea-80f8-333445793454 <=< ACCEPT -->
        Combines the two provided iterables into an ordered iterable using
        natural ordering.
        <p>
        The returned iterable's iterator supports {@code remove()} when the
        corresponding input iterator supports it.
        @param <E> the element type
        @param a  the first iterable, may not be null
        @param b  the second iterable, may not be null
        @return a filtered view on the specified iterable
        @throws NullPointerException if either of the provided iterables is null
        <!-- ACCEPT >=> 683a6463-9f1d-11ea-80f8-333445793454 -->



## Method: `java.org.apache.commons.collections4.IterableUtils` / `final Iterable<? extends E> b)`


        <!-- 683a6464-9f1d-11ea-80f9-333445793454 <=< ACCEPT -->
        Combines the two provided iterables into an ordered iterable using the
        provided comparator. If the comparator is null, natural ordering will be
        used.
        <p>
        The returned iterable's iterator supports {@code remove()} when the
        corresponding input iterator supports it.
        @param <E> the element type
        @param comparator  the comparator defining an ordering over the elements,
        may be null, in which case natural ordering will be used
        @param a  the first iterable, may not be null
        @param b  the second iterable, may not be null
        @return a filtered view on the specified iterable
        @throws NullPointerException if either of the provided iterables is null
        <!-- ACCEPT >=> 683a6464-9f1d-11ea-80f9-333445793454 -->



## Method: `java.org.apache.commons.collections4.IterableUtils` / `final Predicate<? super E> predicate)`


        <!-- 683a6465-9f1d-11ea-80fa-333445793454 <=< ACCEPT -->
        Returns a view of the given iterable that only contains elements matching
        the provided predicate.
        <p>
        The returned iterable's iterator supports {@code remove()} when the
        corresponding input iterator supports it.
        @param <E> the element type
        @param iterable  the iterable to filter, may not be null
        @param predicate  the predicate used to filter elements, may not be null
        @return a filtered view on the specified iterable
        @throws NullPointerException if either iterable or predicate is null
        <!-- ACCEPT >=> 683a6465-9f1d-11ea-80fa-333445793454 -->



## Method: `java.org.apache.commons.collections4.IterableUtils` / `public static <E> Iterable<E> boundedIterable(final Iterable<E> iterable, final long maxSize)`


        <!-- 683a6466-9f1d-11ea-80fb-333445793454 <=< ACCEPT -->
        Returns a view of the given iterable that contains at most the given number
        of elements.
        <p>
        The returned iterable's iterator supports {@code remove()} when the corresponding
        input iterator supports it.
        @param <E> the element type
        @param iterable  the iterable to limit, may not be null
        @param maxSize  the maximum number of elements, must not be negative
        @return a bounded view on the specified iterable
        @throws IllegalArgumentException if maxSize is negative
        @throws NullPointerException if iterable is null
        <!-- ACCEPT >=> 683a6466-9f1d-11ea-80fb-333445793454 -->



## Method: `java.org.apache.commons.collections4.IterableUtils` / `public static <E> Iterable<E> loopingIterable(final Iterable<E> iterable)`


        <!-- 683a6467-9f1d-11ea-80fc-333445793454 <=< ACCEPT -->
        Returns a view of the given iterable which will cycle infinitely over
        its elements.
        <p>
        The returned iterable's iterator supports {@code remove()} if
        {@code iterable.iterator()} does. After {@code remove()} is called, subsequent
        cycles omit the removed element, which is no longer in {@code iterable}. The
        iterator's {@code hasNext()} method returns {@code true} until {@code iterable}
        is empty.
        @param <E> the element type
        @param iterable  the iterable to loop, may not be null
        @return a view of the iterable, providing an infinite loop over its elements
        @throws NullPointerException if iterable is null
        <!-- ACCEPT >=> 683a6467-9f1d-11ea-80fc-333445793454 -->



## Method: `java.org.apache.commons.collections4.IterableUtils` / `public static <E> Iterable<E> reversedIterable(final Iterable<E> iterable)`


        <!-- 683a8b90-9f1d-11ea-80fd-333445793454 <=< ACCEPT -->
        Returns a reversed view of the given iterable.
        <p>
        In case the provided iterable is a {@link List} instance, a
        {@link ReverseListIterator} will be used to reverse the traversal
        order, otherwise an intermediate {@link List} needs to be created.
        <p>
        The returned iterable's iterator supports {@code remove()} if the
        provided iterable is a {@link List} instance.
        @param <E> the element type
        @param iterable  the iterable to use, may not be null
        @return a reversed view of the specified iterable
        @throws NullPointerException if iterable is null
        @see ReverseListIterator
        <!-- ACCEPT >=> 683a8b90-9f1d-11ea-80fd-333445793454 -->



## Method: `java.org.apache.commons.collections4.IterableUtils` / `public static <E> Iterable<E> skippingIterable(final Iterable<E> iterable, final long elementsToSkip)`


        <!-- 683a8b91-9f1d-11ea-80fe-333445793454 <=< ACCEPT -->
        Returns a view of the given iterable that skips the first N elements.
        <p>
        The returned iterable's iterator supports {@code remove()} when the corresponding
        input iterator supports it.
        @param <E> the element type
        @param iterable  the iterable to use, may not be null
        @param elementsToSkip  the number of elements to skip from the start, must not be negative
        @return a view of the specified iterable, skipping the first N elements
        @throws IllegalArgumentException if elementsToSkip is negative
        @throws NullPointerException if iterable is null
        <!-- ACCEPT >=> 683a8b91-9f1d-11ea-80fe-333445793454 -->



## Method: `java.org.apache.commons.collections4.IterableUtils` / `final Transformer<? super I, ? extends O> transformer)`


        <!-- 683a8b92-9f1d-11ea-80ff-333445793454 <=< ACCEPT -->
        Returns a transformed view of the given iterable where all of its elements
        have been transformed by the provided transformer.
        <p>
        The returned iterable's iterator supports {@code remove()} when the corresponding
        input iterator supports it.
        @param <I>  the input element type
        @param <O>  the output element type
        @param iterable  the iterable to transform, may not be null
        @param transformer  the transformer, must not be null
        @return a transformed view of the specified iterable
        @throws NullPointerException if either iterable or transformer is null
        <!-- ACCEPT >=> 683a8b92-9f1d-11ea-80ff-333445793454 -->



## Method: `java.org.apache.commons.collections4.IterableUtils` / `public static <E> Iterable<E> uniqueIterable(final Iterable<E> iterable)`


        <!-- 683a8b93-9f1d-11ea-8100-333445793454 <=< ACCEPT -->
        Returns a unique view of the given iterable.
        <p>
        The returned iterable's iterator supports {@code remove()} when the
        corresponding input iterator supports it. Calling {@code remove()}
        will only remove a single element from the underlying iterator.
        @param <E> the element type
        @param iterable  the iterable to use, may not be null
        @return a unique view of the specified iterable
        @throws NullPointerException if iterable is null
        <!-- ACCEPT >=> 683a8b93-9f1d-11ea-8100-333445793454 -->



## Method: `java.org.apache.commons.collections4.IterableUtils` / `public static <E> Iterable<E> unmodifiableIterable(final Iterable<E> iterable)`


        <!-- 683a8b94-9f1d-11ea-8101-333445793454 <=< ACCEPT -->
        Returns an unmodifiable view of the given iterable.
        <p>
        The returned iterable's iterator does not support {@code remove()}.
        @param <E> the element type
        @param iterable  the iterable to use, may not be null
        @return an unmodifiable view of the specified iterable
        @throws NullPointerException if iterable is null
        <!-- ACCEPT >=> 683a8b94-9f1d-11ea-8101-333445793454 -->



## Class: `java.org.apache.commons.collections4.IterableUtils` / `private static final class UnmodifiableIterable<E> extends FluentIterable<E>`


        <!-- 683a8b95-9f1d-11ea-8102-333445793454 <=< ACCEPT -->
        Inner class to distinguish unmodifiable instances.
        <!-- ACCEPT >=> 683a8b95-9f1d-11ea-8102-333445793454 -->



## Method: `java.org.apache.commons.collections4.IterableUtils` / `final Iterable<? extends E> b)`


        <!-- 683a8b96-9f1d-11ea-8103-333445793454 <=< ACCEPT -->
        Interleaves two iterables into a single iterable.
        <p>
        The returned iterable has an iterator that traverses the elements in {@code a}
        and {@code b} in alternating order. The source iterators are not polled until
        necessary.
        <p>
        The returned iterable's iterator supports {@code remove()} when the corresponding
        input iterator supports it.
        @param <E> the element type
        @param a  the first iterable, may not be null
        @param b  the second iterable, may not be null
        @return a new iterable, interleaving the provided iterables
        @throws NullPointerException if either a or b is null
        <!-- ACCEPT >=> 683a8b96-9f1d-11ea-8103-333445793454 -->



## Method: `java.org.apache.commons.collections4.IterableUtils` / `final Iterable<? extends E>... others)`


        <!-- 683a8b97-9f1d-11ea-8104-333445793454 <=< ACCEPT -->
        Interleaves two iterables into a single iterable.
        <p>
        The returned iterable has an iterator that traverses the elements in {@code a}
        and {@code b} in alternating order. The source iterators are not polled until
        necessary.
        <p>
        The returned iterable's iterator supports {@code remove()} when the corresponding
        input iterator supports it.
        @param <E> the element type
        @param first  the first iterable, may not be null
        @param others  the array of iterables to interleave, may not be null
        @return a new iterable, interleaving the provided iterables
        @throws NullPointerException if either of the provided iterables is null
        <!-- ACCEPT >=> 683a8b97-9f1d-11ea-8104-333445793454 -->



## Method: `java.org.apache.commons.collections4.IterableUtils` / `public static <E> Iterable<E> emptyIfNull(final Iterable<E> iterable)`


        <!-- 683ab271-9f1d-11ea-8105-333445793454 <=< ACCEPT -->
        Returns an immutable empty iterable if the argument is null,
        or the argument itself otherwise.
        @param <E> the element type
        @param iterable  the iterable, may be null
        @return an empty iterable if the argument is null
        <!-- ACCEPT >=> 683ab271-9f1d-11ea-8105-333445793454 -->



## Method: `java.org.apache.commons.collections4.IterableUtils` / `public static <E> void forEach(final Iterable<E> iterable, final Closure<? super E> closure)`


        <!-- 683ab272-9f1d-11ea-8106-333445793454 <=< ACCEPT -->
        Applies the closure to each element of the provided iterable.
        @param <E> the element type
        @param iterable  the iterator to use, may be null
        @param closure  the closure to apply to each element, may not be null
        @throws NullPointerException if closure is null
        <!-- ACCEPT >=> 683ab272-9f1d-11ea-8106-333445793454 -->



## Method: `java.org.apache.commons.collections4.IterableUtils` / `public static <E> E forEachButLast(final Iterable<E> iterable, final Closure<? super E> closure)`


        <!-- 683ab273-9f1d-11ea-8107-333445793454 <=< ACCEPT -->
        Executes the given closure on each but the last element in the iterable.
        <p>
        If the input iterable is null no change is made.
        @param <E> the type of object the {@link Iterable} contains
        @param iterable  the iterable to get the input from, may be null
        @param closure  the closure to perform, may not be null
        @return the last element in the iterable, or null if iterable is null or empty
        <!-- ACCEPT >=> 683ab273-9f1d-11ea-8107-333445793454 -->



## Method: `java.org.apache.commons.collections4.IterableUtils` / `public static <E> E find(final Iterable<E> iterable, final Predicate<? super E> predicate)`


        <!-- 683ab274-9f1d-11ea-8108-333445793454 <=< ACCEPT -->
        Finds the first element in the given iterable which matches the given predicate.
        <p>
        A <code>null</code> or empty iterator returns null.
        @param <E> the element type
        @param iterable  the iterable to search, may be null
        @param predicate  the predicate to use, may not be null
        @return the first element of the iterable which matches the predicate or null if none could be found
        @throws NullPointerException if predicate is null
        <!-- ACCEPT >=> 683ab274-9f1d-11ea-8108-333445793454 -->



## Method: `java.org.apache.commons.collections4.IterableUtils` / `public static <E> int indexOf(final Iterable<E> iterable, final Predicate<? super E> predicate)`


        <!-- 683ab275-9f1d-11ea-8109-333445793454 <=< ACCEPT -->
        Returns the index of the first element in the specified iterable that
        matches the given predicate.
        <p>
        A <code>null</code> or empty iterable returns -1.
        @param <E> the element type
        @param iterable  the iterable to search, may be null
        @param predicate  the predicate to use, may not be null
        @return the index of the first element which matches the predicate or -1 if none matches
        @throws NullPointerException if predicate is null
        <!-- ACCEPT >=> 683ab275-9f1d-11ea-8109-333445793454 -->



## Method: `java.org.apache.commons.collections4.IterableUtils` / `public static <E> boolean matchesAll(final Iterable<E> iterable, final Predicate<? super E> predicate)`


        <!-- 683ab276-9f1d-11ea-810a-333445793454 <=< ACCEPT -->
        Answers true if a predicate is true for every element of an iterable.
        <p>
        A <code>null</code> or empty iterable returns true.
        @param <E> the type of object the {@link Iterable} contains
        @param iterable  the {@link Iterable} to use, may be null
        @param predicate  the predicate to use, may not be null
        @return true if every element of the collection matches the predicate or if the
        collection is empty, false otherwise
        @throws NullPointerException if predicate is null
        <!-- ACCEPT >=> 683ab276-9f1d-11ea-810a-333445793454 -->



## Method: `java.org.apache.commons.collections4.IterableUtils` / `public static <E> boolean matchesAny(final Iterable<E> iterable, final Predicate<? super E> predicate)`


        <!-- 683ab277-9f1d-11ea-810b-333445793454 <=< ACCEPT -->
        Answers true if a predicate is true for any element of the iterable.
        <p>
        A <code>null</code> or empty iterable returns false.
        @param <E> the type of object the {@link Iterable} contains
        @param iterable  the {@link Iterable} to use, may be null
        @param predicate  the predicate to use, may not be null
        @return true if any element of the collection matches the predicate, false otherwise
        @throws NullPointerException if predicate is null
        <!-- ACCEPT >=> 683ab277-9f1d-11ea-810b-333445793454 -->



## Method: `java.org.apache.commons.collections4.IterableUtils` / `public static <E> long countMatches(final Iterable<E> input, final Predicate<? super E> predicate)`


        <!-- 683ab278-9f1d-11ea-810c-333445793454 <=< ACCEPT -->
        Counts the number of elements in the input iterable that match the predicate.
        <p>
        A <code>null</code> iterable matches no elements.
        @param <E> the type of object the {@link Iterable} contains
        @param input  the {@link Iterable} to get the input from, may be null
        @param predicate  the predicate to use, may not be null
        @return the number of matches for the predicate in the collection
        @throws NullPointerException if predicate is null
        <!-- ACCEPT >=> 683ab278-9f1d-11ea-810c-333445793454 -->



## Method: `java.org.apache.commons.collections4.IterableUtils` / `public static boolean isEmpty(final Iterable<?> iterable)`


        <!-- 683ab279-9f1d-11ea-810d-333445793454 <=< ACCEPT -->
        Answers true if the provided iterable is empty.
        <p>
        A <code>null</code> iterable returns true.
        @param iterable  the {@link Iterable to use}, may be null
        @return true if the iterable is null or empty, false otherwise
        <!-- ACCEPT >=> 683ab279-9f1d-11ea-810d-333445793454 -->



## Method: `java.org.apache.commons.collections4.IterableUtils` / `public static <E> boolean contains(final Iterable<E> iterable, final Object object)`


        <!-- 683ab27a-9f1d-11ea-810e-333445793454 <=< ACCEPT -->
        Checks if the object is contained in the given iterable.
        <p>
        A <code>null</code> or empty iterable returns false.
        @param <E> the type of object the {@link Iterable} contains
        @param iterable  the iterable to check, may be null
        @param object  the object to check
        @return true if the object is contained in the iterable, false otherwise
        <!-- ACCEPT >=> 683ab27a-9f1d-11ea-810e-333445793454 -->



## Method: `java.org.apache.commons.collections4.IterableUtils` / `final Equator<? super E> equator)`


        <!-- 683ad97e-9f1d-11ea-810f-333445793454 <=< ACCEPT -->
        Checks if the object is contained in the given iterable. Object equality
        is tested with an {@code equator} unlike {@link #contains(Iterable, Object)}
        which uses {@link Object#equals(Object)}.
        <p>
        A <code>null</code> or empty iterable returns false.
        A <code>null</code> object will not be passed to the equator, instead a
        {@link org.apache.commons.collections4.functors.NullPredicate NullPredicate}
        will be used.
        @param <E> the type of object the {@link Iterable} contains
        @param iterable  the iterable to check, may be null
        @param object  the object to check
        @param equator  the equator to use to check, may not be null
        @return true if the object is contained in the iterable, false otherwise
        @throws NullPointerException if equator is null
        <!-- ACCEPT >=> 683ad97e-9f1d-11ea-810f-333445793454 -->



## Method: `java.org.apache.commons.collections4.IterableUtils` / `public static <E, T extends E> int frequency(final Iterable<E> iterable, final T obj)`


        <!-- 683ad97f-9f1d-11ea-8110-333445793454 <=< ACCEPT -->
        Returns the number of occurrences of the provided object in the iterable.
        @param <E> the element type that the {@link Iterable} may contain
        @param <T> the element type of the object to find
        @param iterable  the {@link Iterable} to search
        @param obj  the object to find the cardinality of
        @return the the number of occurrences of obj in iterable
        <!-- ACCEPT >=> 683ad97f-9f1d-11ea-8110-333445793454 -->



## Method: `java.org.apache.commons.collections4.IterableUtils` / `public static <T> T get(final Iterable<T> iterable, final int index)`


        <!-- 683ad980-9f1d-11ea-8111-333445793454 <=< ACCEPT -->
        Returns the <code>index</code>-th value in the <code>iterable</code>'s {@link Iterator}, throwing
        <code>IndexOutOfBoundsException</code> if there is no such element.
        <p>
        If the {@link Iterable} is a {@link List}, then it will use {@link List#get(int)}.
        @param <T> the type of object in the {@link Iterable}.
        @param iterable  the {@link Iterable} to get a value from, may be null
        @param index  the index to get
        @return the object at the specified index
        @throws IndexOutOfBoundsException if the index is invalid
        <!-- ACCEPT >=> 683ad980-9f1d-11ea-8111-333445793454 -->



## Method: `java.org.apache.commons.collections4.IterableUtils` / `public static int size(final Iterable<?> iterable)`


        <!-- 683ad981-9f1d-11ea-8112-333445793454 <=< ACCEPT -->
        Returns the number of elements contained in the given iterator.
        <p>
        A <code>null</code> or empty iterator returns {@code 0}.
        @param iterable  the iterable to check, may be null
        @return the number of elements contained in the iterable
        <!-- ACCEPT >=> 683ad981-9f1d-11ea-8112-333445793454 -->



## Method: `java.org.apache.commons.collections4.IterableUtils` / `final Predicate<? super O> predicate)`


        <!-- 683ad982-9f1d-11ea-8113-333445793454 <=< ACCEPT -->
        Partitions all elements from iterable into separate output collections,
        based on the evaluation of the given predicate.
        <p>
        For each predicate, the result will contain a list holding all elements of the
        input iterable matching the predicate. The last list will hold all elements
        which didn't match any predicate:
        <pre>
        [C1, R] = partition(I, P1) with
        I = input
        P1 = first predicate
        C1 = collection of elements matching P1
        R = collection of elements rejected by all predicates
        </pre>
        <p>
        If the input iterable is <code>null</code>, the same is returned as for an
        empty iterable.
        <p>
        Example: for an input list [1, 2, 3, 4, 5] calling partition with a predicate [x &lt; 3]
        will result in the following output: [[1, 2], [3, 4, 5]].
        @param <O>  the type of object the {@link Iterable} contains
        @param iterable  the iterable to partition, may be null
        @param predicate  the predicate to use, may not be null
        @return a list containing the output collections
        @throws NullPointerException if predicate is null
        <!-- ACCEPT >=> 683ad982-9f1d-11ea-8113-333445793454 -->



## Method: `java.org.apache.commons.collections4.IterableUtils` / `final Predicate<? super O>... predicates)`


        <!-- 683ad983-9f1d-11ea-8114-333445793454 <=< ACCEPT -->
        Partitions all elements from iterable into separate output collections,
        based on the evaluation of the given predicates.
        <p>
        For each predicate, the result will contain a list holding all elements of the
        input iterable matching the predicate. The last list will hold all elements
        which didn't match any predicate:
        <pre>
        [C1, C2, R] = partition(I, P1, P2) with
        I = input
        P1 = first predicate
        P2 = second predicate
        C1 = collection of elements matching P1
        C2 = collection of elements matching P2
        R = collection of elements rejected by all predicates
        </pre>
        <p>
        <b>Note</b>: elements are only added to the output collection of the first matching
        predicate, determined by the order of arguments.
        <p>
        If the input iterable is <code>null</code>, the same is returned as for an
        empty iterable.
        <p>
        Example: for an input list [1, 2, 3, 4, 5] calling partition with predicates [x &lt; 3]
        and [x &lt; 5] will result in the following output: [[1, 2], [3, 4], [5]].
        @param <O>  the type of object the {@link Iterable} contains
        @param iterable  the collection to get the input from, may be null
        @param predicates  the predicates to use, may not be null
        @return a list containing the output collections
        @throws NullPointerException if any predicate is null
        <!-- ACCEPT >=> 683ad983-9f1d-11ea-8114-333445793454 -->



## Method: `java.org.apache.commons.collections4.IterableUtils` / `final Factory<R> partitionFactory, final Predicate<? super O>... predicates)`


        <!-- 683ad984-9f1d-11ea-8115-333445793454 <=< ACCEPT -->
        Partitions all elements from iterable into separate output collections,
        based on the evaluation of the given predicates.
        <p>
        For each predicate, the returned list will contain a collection holding
        all elements of the input iterable matching the predicate. The last collection
        contained in the list will hold all elements which didn't match any predicate:
        <pre>
        [C1, C2, R] = partition(I, P1, P2) with
        I = input
        P1 = first predicate
        P2 = second predicate
        C1 = collection of elements matching P1
        C2 = collection of elements matching P2
        R = collection of elements rejected by all predicates
        </pre>
        <p>
        <b>Note</b>: elements are only added to the output collection of the first matching
        predicate, determined by the order of arguments.
        <p>
        If the input iterable is <code>null</code>, the same is returned as for an
        empty iterable.
        If no predicates have been provided, all elements of the input collection
        will be added to the rejected collection.
        <p>
        Example: for an input list [1, 2, 3, 4, 5] calling partition with predicates [x &lt; 3]
        and [x &lt; 5] will result in the following output: [[1, 2], [3, 4], [5]].
        @param <O>  the type of object the {@link Iterable} contains
        @param <R>  the type of the output {@link Collection}
        @param iterable  the collection to get the input from, may be null
        @param partitionFactory  the factory used to create the output collections
        @param predicates  the predicates to use, may not be null
        @return a list containing the output collections
        @throws NullPointerException if any predicate is null
        <!-- ACCEPT >=> 683ad984-9f1d-11ea-8115-333445793454 -->



## Method: `java.org.apache.commons.collections4.IterableUtils` / `public static <E> List<E> toList(final Iterable<E> iterable)`


        <!-- 683ad985-9f1d-11ea-8116-333445793454 <=< ACCEPT -->
        Gets a new list with the contents of the provided iterable.
        @param <E> the element type
        @param iterable  the iterable to use, may be null
        @return a list of the iterator contents
        <!-- ACCEPT >=> 683ad985-9f1d-11ea-8116-333445793454 -->



## Method: `java.org.apache.commons.collections4.IterableUtils` / `public static <E> String toString(final Iterable<E> iterable)`


        <!-- 683ad986-9f1d-11ea-8117-333445793454 <=< ACCEPT -->
        Returns a string representation of the elements of the specified iterable.
        <p>
        The string representation consists of a list of the iterable's elements,
        enclosed in square brackets ({@code "[]"}). Adjacent elements are separated
        by the characters {@code ", "} (a comma followed by a space). Elements are
        converted to strings as by {@code String.valueOf(Object)}.
        @param <E> the element type
        @param iterable  the iterable to convert to a string, may be null
        @return a string representation of {@code iterable}
        <!-- ACCEPT >=> 683ad986-9f1d-11ea-8117-333445793454 -->



## Method: `java.org.apache.commons.collections4.IterableUtils` / `final Transformer<? super E, String> transformer)`


        <!-- 683ad987-9f1d-11ea-8118-333445793454 <=< ACCEPT -->
        Returns a string representation of the elements of the specified iterable.
        <p>
        The string representation consists of a list of the iterable's elements,
        enclosed in square brackets ({@code "[]"}). Adjacent elements are separated
        by the characters {@code ", "} (a comma followed by a space). Elements are
        converted to strings as by using the provided {@code transformer}.
        @param <E> the element type
        @param iterable  the iterable to convert to a string, may be null
        @param transformer  the transformer used to get a string representation of an element
        @return a string representation of {@code iterable}
        @throws NullPointerException if {@code transformer} is null
        <!-- ACCEPT >=> 683ad987-9f1d-11ea-8118-333445793454 -->



## Method: `java.org.apache.commons.collections4.IterableUtils` / `final String suffix)`


        <!-- 683ad988-9f1d-11ea-8119-333445793454 <=< ACCEPT -->
        Returns a string representation of the elements of the specified iterable.
        <p>
        The string representation consists of a list of the iterable's elements,
        enclosed by the provided {@code prefix} and {@code suffix}. Adjacent elements
        are separated by the provided {@code delimiter}. Elements are converted to
        strings as by using the provided {@code transformer}.
        @param <E> the element type
        @param iterable  the iterable to convert to a string, may be null
        @param transformer  the transformer used to get a string representation of an element
        @param delimiter  the string to delimit elements
        @param prefix  the prefix, prepended to the string representation
        @param suffix  the suffix, appended to the string representation
        @return a string representation of {@code iterable}
        @throws NullPointerException if either transformer, delimiter, prefix or suffix is null
        <!-- ACCEPT >=> 683ad988-9f1d-11ea-8119-333445793454 -->



## Method: `java.org.apache.commons.collections4.IterableUtils` / `static void checkNotNull(final Iterable<?> iterable)`


        <!-- 683b008f-9f1d-11ea-811a-333445793454 <=< ACCEPT -->
        Fail-fast check for null arguments.
        @param iterable  the iterable to check
        @throws NullPointerException if iterable is null
        <!-- ACCEPT >=> 683b008f-9f1d-11ea-811a-333445793454 -->



## Method: `java.org.apache.commons.collections4.IterableUtils` / `static void checkNotNull(final Iterable<?>... iterables)`


        <!-- 683b0090-9f1d-11ea-811b-333445793454 <=< ACCEPT -->
        Fail-fast check for null arguments.
        @param iterable  the iterable to check
        @throws NullPointerException if the argument or any of its contents is null
        <!-- ACCEPT >=> 683b0090-9f1d-11ea-811b-333445793454 -->



## Method: `java.org.apache.commons.collections4.IterableUtils` / `private static <E> Iterator<E> emptyIteratorIfNull(final Iterable<E> iterable)`


        <!-- 683b0091-9f1d-11ea-811c-333445793454 <=< ACCEPT -->
        Returns an empty iterator if the argument is <code>null</code>,
        or {@code iterable.iterator()} otherwise.
        @param <E> the element type
        @param iterable  the iterable, possibly <code>null</code>
        @return an empty iterator if the argument is <code>null</code>
        <!-- ACCEPT >=> 683b0091-9f1d-11ea-811c-333445793454 -->



# File: `java.org.apache.commons.collections4.IteratorUtils`

## Class: `java.org.apache.commons.collections4.IteratorUtils` / `public class IteratorUtils`


        <!-- 683b0092-9f1d-11ea-811d-333445793454 <=< ACCEPT -->
        Provides static utility methods and decorators for {@link Iterator}
        instances. The implementations are provided in the iterators subpackage.
        @since 2.1
        @version $Id$
        <!-- ACCEPT >=> 683b0092-9f1d-11ea-811d-333445793454 -->



## Field: `java.org.apache.commons.collections4.IteratorUtils` / `public static final ResettableIterator EMPTY_ITERATOR`


        <!-- 683b0093-9f1d-11ea-811e-333445793454 <=< ACCEPT -->
        An iterator over no elements.
        <!-- ACCEPT >=> 683b0093-9f1d-11ea-811e-333445793454 -->



## Field: `java.org.apache.commons.collections4.IteratorUtils` / `public static final ResettableListIterator EMPTY_LIST_ITERATOR`


        <!-- 683b0094-9f1d-11ea-811f-333445793454 <=< ACCEPT -->
        A list iterator over no elements.
        <!-- ACCEPT >=> 683b0094-9f1d-11ea-811f-333445793454 -->



## Field: `java.org.apache.commons.collections4.IteratorUtils` / `public static final OrderedIterator EMPTY_ORDERED_ITERATOR`


        <!-- 683b0095-9f1d-11ea-8120-333445793454 <=< ACCEPT -->
        An ordered iterator over no elements.
        <!-- ACCEPT >=> 683b0095-9f1d-11ea-8120-333445793454 -->



## Field: `java.org.apache.commons.collections4.IteratorUtils` / `public static final MapIterator EMPTY_MAP_ITERATOR`


        <!-- 683b0096-9f1d-11ea-8121-333445793454 <=< ACCEPT -->
        A map iterator over no elements.
        <!-- ACCEPT >=> 683b0096-9f1d-11ea-8121-333445793454 -->



## Field: `java.org.apache.commons.collections4.IteratorUtils` / `public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR`


        <!-- 683b0097-9f1d-11ea-8122-333445793454 <=< ACCEPT -->
        An ordered map iterator over no elements.
        <!-- ACCEPT >=> 683b0097-9f1d-11ea-8122-333445793454 -->



## Field: `java.org.apache.commons.collections4.IteratorUtils` / `private static final String DEFAULT_TOSTRING_PREFIX`


        <!-- 683b0098-9f1d-11ea-8123-333445793454 <=< ACCEPT -->
        Default prefix used while converting an Iterator to its String representation.
        <!-- ACCEPT >=> 683b0098-9f1d-11ea-8123-333445793454 -->



## Field: `java.org.apache.commons.collections4.IteratorUtils` / `private static final String DEFAULT_TOSTRING_SUFFIX`


        <!-- 683b0099-9f1d-11ea-8124-333445793454 <=< ACCEPT -->
        Default suffix used while converting an Iterator to its String representation.
        <!-- ACCEPT >=> 683b0099-9f1d-11ea-8124-333445793454 -->



## Field: `java.org.apache.commons.collections4.IteratorUtils` / `private static final String DEFAULT_TOSTRING_DELIMITER`


        <!-- 683b009a-9f1d-11ea-8125-333445793454 <=< ACCEPT -->
        Default delimiter used to delimit elements while converting an Iterator
        to its String representation.
        <!-- ACCEPT >=> 683b009a-9f1d-11ea-8125-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.IteratorUtils` / `private IteratorUtils()`


        <!-- 683b009b-9f1d-11ea-8126-333445793454 <=< ACCEPT -->
        IteratorUtils is not normally instantiated.
        <!-- ACCEPT >=> 683b009b-9f1d-11ea-8126-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `public static <E> ResettableIterator<E> emptyIterator()`


        <!-- 683b009c-9f1d-11ea-8127-333445793454 <=< ACCEPT -->
        Gets an empty iterator.
        <p>
        This iterator is a valid iterator object that will iterate over nothing.
        @param <E> the element type
        @return an iterator over nothing
        <!-- ACCEPT >=> 683b009c-9f1d-11ea-8127-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `public static <E> ResettableListIterator<E> emptyListIterator()`


        <!-- 683b009d-9f1d-11ea-8128-333445793454 <=< ACCEPT -->
        Gets an empty list iterator.
        <p>
        This iterator is a valid list iterator object that will iterate
        over nothing.
        @param <E> the element type
        @return a list iterator over nothing
        <!-- ACCEPT >=> 683b009d-9f1d-11ea-8128-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `public static <E> OrderedIterator<E> emptyOrderedIterator()`


        <!-- 683b009e-9f1d-11ea-8129-333445793454 <=< ACCEPT -->
        Gets an empty ordered iterator.
        <p>
        This iterator is a valid iterator object that will iterate
        over nothing.
        @param <E> the element type
        @return an ordered iterator over nothing
        <!-- ACCEPT >=> 683b009e-9f1d-11ea-8129-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `public static <K, V> MapIterator<K, V> emptyMapIterator()`


        <!-- 683b009f-9f1d-11ea-812a-333445793454 <=< ACCEPT -->
        Gets an empty map iterator.
        <p>
        This iterator is a valid map iterator object that will iterate
        over nothing.
        @param <K> the key type
        @param <V> the value type
        @return a map iterator over nothing
        <!-- ACCEPT >=> 683b009f-9f1d-11ea-812a-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()`


        <!-- 683b00a0-9f1d-11ea-812b-333445793454 <=< ACCEPT -->
        Gets an empty ordered map iterator.
        <p>
        This iterator is a valid map iterator object that will iterate
        over nothing.
        @param <K> the key type
        @param <V> the value type
        @return a map iterator over nothing
        <!-- ACCEPT >=> 683b00a0-9f1d-11ea-812b-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `public static <E> ResettableIterator<E> singletonIterator(final E object)`


        <!-- 683b00a1-9f1d-11ea-812c-333445793454 <=< ACCEPT -->
        Gets a singleton iterator.
        <p>
        This iterator is a valid iterator object that will iterate over
        the specified object.
        @param <E> the element type
        @param object  the single object over which to iterate
        @return a singleton iterator over the object
        <!-- ACCEPT >=> 683b00a1-9f1d-11ea-812c-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `public static <E> ListIterator<E> singletonListIterator(final E object)`


        <!-- 683b00a2-9f1d-11ea-812d-333445793454 <=< ACCEPT -->
        Gets a singleton list iterator.
        <p>
        This iterator is a valid list iterator object that will iterate over
        the specified object.
        @param <E> the element type
        @param object  the single object over which to iterate
        @return a singleton list iterator over the object
        <!-- ACCEPT >=> 683b00a2-9f1d-11ea-812d-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `public static <E> ResettableIterator<E> arrayIterator(final E... array)`


        <!-- 683b00a3-9f1d-11ea-812e-333445793454 <=< ACCEPT -->
        Gets an iterator over an object array.
        @param <E> the element type
        @param array  the array over which to iterate
        @return an iterator over the array
        @throws NullPointerException if array is null
        <!-- ACCEPT >=> 683b00a3-9f1d-11ea-812e-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `public static <E> ResettableIterator<E> arrayIterator(final Object array)`


        <!-- 683b2794-9f1d-11ea-812f-333445793454 <=< ACCEPT -->
        Gets an iterator over an object or primitive array.
        <p>
        This method will handle primitive arrays as well as object arrays.
        The primitives will be wrapped in the appropriate wrapper class.
        @param <E> the element type
        @param array  the array over which to iterate
        @return an iterator over the array
        @throws IllegalArgumentException if the array is not an array
        @throws NullPointerException if array is null
        <!-- ACCEPT >=> 683b2794-9f1d-11ea-812f-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start)`


        <!-- 683b2795-9f1d-11ea-8130-333445793454 <=< ACCEPT -->
        Gets an iterator over the end part of an object array.
        @param <E> the element type
        @param array  the array over which to iterate
        @param start  the index to start iterating at
        @return an iterator over part of the array
        @throws IndexOutOfBoundsException if start is less than zero or greater
        than the length of the array
        @throws NullPointerException if array is null
        <!-- ACCEPT >=> 683b2795-9f1d-11ea-8130-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start)`


        <!-- 683b2796-9f1d-11ea-8131-333445793454 <=< ACCEPT -->
        Gets an iterator over the end part of an object or primitive array.
        <p>
        This method will handle primitive arrays as well as object arrays.
        The primitives will be wrapped in the appropriate wrapper class.
        @param <E> the element type
        @param array  the array over which to iterate
        @param start  the index to start iterating at
        @return an iterator over part of the array
        @throws IllegalArgumentException if the array is not an array
        @throws IndexOutOfBoundsException if start is less than zero or greater
        than the length of the array
        @throws NullPointerException if array is null
        <!-- ACCEPT >=> 683b2796-9f1d-11ea-8131-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end)`


        <!-- 683b2797-9f1d-11ea-8132-333445793454 <=< ACCEPT -->
        Gets an iterator over part of an object array.
        @param <E> the element type
        @param array  the array over which to iterate
        @param start  the index to start iterating at
        @param end  the index to finish iterating at
        @return an iterator over part of the array
        @throws IndexOutOfBoundsException if array bounds are invalid
        @throws IllegalArgumentException if end is before start
        @throws NullPointerException if array is null
        <!-- ACCEPT >=> 683b2797-9f1d-11ea-8132-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end)`


        <!-- 683b2798-9f1d-11ea-8133-333445793454 <=< ACCEPT -->
        Gets an iterator over part of an object or primitive array.
        <p>
        This method will handle primitive arrays as well as object arrays.
        The primitives will be wrapped in the appropriate wrapper class.
        @param <E> the element type
        @param array  the array over which to iterate
        @param start  the index to start iterating at
        @param end  the index to finish iterating at
        @return an iterator over part of the array
        @throws IllegalArgumentException if the array is not an array or end is before start
        @throws IndexOutOfBoundsException if array bounds are invalid
        @throws NullPointerException if array is null
        <!-- ACCEPT >=> 683b2798-9f1d-11ea-8133-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `public static <E> ResettableListIterator<E> arrayListIterator(final E... array)`


        <!-- 683b2799-9f1d-11ea-8134-333445793454 <=< ACCEPT -->
        Gets a list iterator over an object array.
        @param <E> the element type
        @param array  the array over which to iterate
        @return a list iterator over the array
        @throws NullPointerException if array is null
        <!-- ACCEPT >=> 683b2799-9f1d-11ea-8134-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `public static <E> ResettableListIterator<E> arrayListIterator(final Object array)`


        <!-- 683b279a-9f1d-11ea-8135-333445793454 <=< ACCEPT -->
        Gets a list iterator over an object or primitive array.
        <p>
        This method will handle primitive arrays as well as object arrays.
        The primitives will be wrapped in the appropriate wrapper class.
        @param <E> the element type
        @param array  the array over which to iterate
        @return a list iterator over the array
        @throws IllegalArgumentException if the array is not an array
        @throws NullPointerException if array is null
        <!-- ACCEPT >=> 683b279a-9f1d-11ea-8135-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start)`


        <!-- 683b279b-9f1d-11ea-8136-333445793454 <=< ACCEPT -->
        Gets a list iterator over the end part of an object array.
        @param <E> the element type
        @param array  the array over which to iterate
        @param start  the index to start iterating at
        @return a list iterator over part of the array
        @throws IndexOutOfBoundsException if start is less than zero
        @throws NullPointerException if array is null
        <!-- ACCEPT >=> 683b279b-9f1d-11ea-8136-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start)`


        <!-- 683b279c-9f1d-11ea-8137-333445793454 <=< ACCEPT -->
        Gets a list iterator over the end part of an object or primitive array.
        <p>
        This method will handle primitive arrays as well as object arrays.
        The primitives will be wrapped in the appropriate wrapper class.
        @param <E> the element type
        @param array  the array over which to iterate
        @param start  the index to start iterating at
        @return a list iterator over part of the array
        @throws IllegalArgumentException if the array is not an array
        @throws IndexOutOfBoundsException if start is less than zero
        @throws NullPointerException if array is null
        <!-- ACCEPT >=> 683b279c-9f1d-11ea-8137-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end)`


        <!-- 683b279d-9f1d-11ea-8138-333445793454 <=< ACCEPT -->
        Gets a list iterator over part of an object array.
        @param <E> the element type
        @param array  the array over which to iterate
        @param start  the index to start iterating at
        @param end  the index to finish iterating at
        @return a list iterator over part of the array
        @throws IndexOutOfBoundsException if array bounds are invalid
        @throws IllegalArgumentException if end is before start
        @throws NullPointerException if array is null
        <!-- ACCEPT >=> 683b279d-9f1d-11ea-8138-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end)`


        <!-- 683b279e-9f1d-11ea-8139-333445793454 <=< ACCEPT -->
        Gets a list iterator over part of an object or primitive array.
        <p>
        This method will handle primitive arrays as well as object arrays.
        The primitives will be wrapped in the appropriate wrapper class.
        @param <E> the element type
        @param array  the array over which to iterate
        @param start  the index to start iterating at
        @param end  the index to finish iterating at
        @return a list iterator over part of the array
        @throws IllegalArgumentException if the array is not an array or end is before start
        @throws IndexOutOfBoundsException if array bounds are invalid
        @throws NullPointerException if array is null
        <!-- ACCEPT >=> 683b279e-9f1d-11ea-8139-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max)`


        <!-- 683b279f-9f1d-11ea-813a-333445793454 <=< ACCEPT -->
        Decorates the specified iterator to return at most the given number
        of elements.
        @param <E> the element type
        @param iterator  the iterator to decorate
        @param max  the maximum number of elements returned by this iterator
        @return a new bounded iterator
        @throws NullPointerException if the iterator is null
        @throws IllegalArgumentException if max is negative
        @since 4.1
        <!-- ACCEPT >=> 683b279f-9f1d-11ea-813a-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `long offset, long max)`


        <!-- 683b27a0-9f1d-11ea-813b-333445793454 <=< ACCEPT -->
        Decorates the specified iterator to return at most the given number
        of elements, skipping all elements until the iterator reaches the
        position at {@code offset}.
        <p>
        The iterator is immediately advanced until it reaches the position at
        {@code offset}, incurring O(n) time.
        @param <E> the element type
        @param iterator  the iterator to decorate
        @param offset  the index of the first element of the decorated iterator to return
        @param max  the maximum number of elements returned by this iterator
        @return a new bounded iterator
        @throws NullPointerException if the iterator is null
        @throws IllegalArgumentException if either offset or max is negative
        @since 4.1
        <!-- ACCEPT >=> 683b27a0-9f1d-11ea-813b-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator)`


        <!-- 683b27a1-9f1d-11ea-813c-333445793454 <=< ACCEPT -->
        Gets an immutable version of an {@link Iterator}. The returned object
        will always throw an {@link UnsupportedOperationException} for
        the {@link Iterator#remove} method.
        @param <E> the element type
        @param iterator  the iterator to make immutable
        @return an immutable version of the iterator
        <!-- ACCEPT >=> 683b27a1-9f1d-11ea-813c-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator)`


        <!-- 683b27a2-9f1d-11ea-813d-333445793454 <=< ACCEPT -->
        Gets an immutable version of a {@link ListIterator}. The returned object
        will always throw an {@link UnsupportedOperationException} for
        the {@link Iterator#remove}, {@link ListIterator#add} and
        {@link ListIterator#set} methods.
        @param <E> the element type
        @param listIterator  the iterator to make immutable
        @return an immutable version of the iterator
        <!-- ACCEPT >=> 683b27a2-9f1d-11ea-813d-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator)`


        <!-- 683b4e94-9f1d-11ea-813e-333445793454 <=< ACCEPT -->
        Gets an immutable version of a {@link MapIterator}. The returned object
        will always throw an {@link UnsupportedOperationException} for
        the {@link Iterator#remove}, {@link MapIterator#setValue(Object)} methods.
        @param <K> the key type
        @param <V> the value type
        @param mapIterator  the iterator to make immutable
        @return an immutable version of the iterator
        <!-- ACCEPT >=> 683b4e94-9f1d-11ea-813e-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `final Iterator<? extends E> iterator2)`


        <!-- 683b4e95-9f1d-11ea-813f-333445793454 <=< ACCEPT -->
        Gets an iterator that iterates through two {@link Iterator}s
        one after another.
        @param <E> the element type
        @param iterator1  the first iterator to use, not null
        @param iterator2  the second iterator to use, not null
        @return a combination iterator over the iterators
        @throws NullPointerException if either iterator is null
        <!-- ACCEPT >=> 683b4e95-9f1d-11ea-813f-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators)`


        <!-- 683b4e96-9f1d-11ea-8140-333445793454 <=< ACCEPT -->
        Gets an iterator that iterates through an array of {@link Iterator}s
        one after another.
        @param <E> the element type
        @param iterators  the iterators to use, not null or empty or contain nulls
        @return a combination iterator over the iterators
        @throws NullPointerException if iterators array is null or contains a null
        <!-- ACCEPT >=> 683b4e96-9f1d-11ea-8140-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators)`


        <!-- 683b4e97-9f1d-11ea-8141-333445793454 <=< ACCEPT -->
        Gets an iterator that iterates through a collections of {@link Iterator}s
        one after another.
        @param <E> the element type
        @param iterators  the iterators to use, not null or empty or contain nulls
        @return a combination iterator over the iterators
        @throws NullPointerException if iterators collection is null or contains a null
        @throws ClassCastException if the iterators collection contains the wrong object type
        <!-- ACCEPT >=> 683b4e97-9f1d-11ea-8141-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `final Iterator<? extends E> iterator2)`


        <!-- 683b4e98-9f1d-11ea-8142-333445793454 <=< ACCEPT -->
        Gets an iterator that provides an ordered iteration over the elements
        contained in a collection of ordered {@link Iterator}s.
        <p>
        Given two ordered {@link Iterator}s <code>A</code> and <code>B</code>,
        the {@link Iterator#next()} method will return the lesser of
        <code>A.next()</code> and <code>B.next()</code>.
        <p>
        The comparator is optional. If null is specified then natural order is used.
        @param <E> the element type
        @param comparator  the comparator to use, may be null for natural order
        @param iterator1  the first iterators to use, not null
        @param iterator2  the first iterators to use, not null
        @return a combination iterator over the iterators
        @throws NullPointerException if either iterator is null
        <!-- ACCEPT >=> 683b4e98-9f1d-11ea-8142-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `final Iterator<? extends E>... iterators)`


        <!-- 683b4e99-9f1d-11ea-8143-333445793454 <=< ACCEPT -->
        Gets an iterator that provides an ordered iteration over the elements
        contained in an array of {@link Iterator}s.
        <p>
        Given two ordered {@link Iterator}s <code>A</code> and <code>B</code>,
        the {@link Iterator#next()} method will return the lesser of
        <code>A.next()</code> and <code>B.next()</code> and so on.
        <p>
        The comparator is optional. If null is specified then natural order is used.
        @param <E> the element type
        @param comparator  the comparator to use, may be null for natural order
        @param iterators  the iterators to use, not null or empty or contain nulls
        @return a combination iterator over the iterators
        @throws NullPointerException if iterators array is null or contains a null value
        <!-- ACCEPT >=> 683b4e99-9f1d-11ea-8143-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `final Collection<Iterator<? extends E>> iterators)`


        <!-- 683b4e9a-9f1d-11ea-8144-333445793454 <=< ACCEPT -->
        Gets an iterator that provides an ordered iteration over the elements
        contained in a collection of {@link Iterator}s.
        <p>
        Given two ordered {@link Iterator}s <code>A</code> and <code>B</code>,
        the {@link Iterator#next()} method will return the lesser of
        <code>A.next()</code> and <code>B.next()</code> and so on.
        <p>
        The comparator is optional. If null is specified then natural order is used.
        @param <E> the element type
        @param comparator  the comparator to use, may be null for natural order
        @param iterators  the iterators to use, not null or empty or contain nulls
        @return a combination iterator over the iterators
        @throws NullPointerException if iterators collection is null or contains a null
        @throws ClassCastException if the iterators collection contains the wrong object type
        <!-- ACCEPT >=> 683b4e9a-9f1d-11ea-8144-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `final Transformer<? super E, ? extends E> transformer)`


        <!-- 683b4e9b-9f1d-11ea-8145-333445793454 <=< ACCEPT -->
        Gets an iterator that operates over an object graph.
        <p>
        This iterator can extract multiple objects from a complex tree-like object graph.
        The iteration starts from a single root object.
        It uses a <code>Transformer</code> to extract the iterators and elements.
        Its main benefit is that no intermediate <code>List</code> is created.
        <p>
        For example, consider an object graph:
        <pre>
        |- Branch -- Leaf
        |         \- Leaf
        |- Tree |         /- Leaf
        |       |- Branch -- Leaf
        Forest |                 \- Leaf
        |       |- Branch -- Leaf
        |       |         \- Leaf
        |- Tree |         /- Leaf
        |- Branch -- Leaf
        |- Branch -- Leaf</pre>
        The following <code>Transformer</code>, used in this class, will extract all
        the Leaf objects without creating a combined intermediate list:
        <pre>
        public Object transform(Object input) {
        if (input instanceof Forest) {
        return ((Forest) input).treeIterator();
        }
        if (input instanceof Tree) {
        return ((Tree) input).branchIterator();
        }
        if (input instanceof Branch) {
        return ((Branch) input).leafIterator();
        }
        if (input instanceof Leaf) {
        return input;
        }
        throw new ClassCastException();
        }</pre>
        <p>
        Internally, iteration starts from the root object. When next is called,
        the transformer is called to examine the object. The transformer will return
        either an iterator or an object. If the object is an Iterator, the next element
        from that iterator is obtained and the process repeats. If the element is an object
        it is returned.
        <p>
        Under many circumstances, linking Iterators together in this manner is
        more efficient (and convenient) than using nested for loops to extract a list.
        @param <E> the element type
        @param root  the root object to start iterating from, null results in an empty iterator
        @param transformer  the transformer to use, see above, null uses no effect transformer
        @return a new object graph iterator
        @since 3.1
        <!-- ACCEPT >=> 683b4e9b-9f1d-11ea-8145-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `final Transformer<? super I, ? extends O> transform)`


        <!-- 683b4e9c-9f1d-11ea-8146-333445793454 <=< ACCEPT -->
        Gets an iterator that transforms the elements of another iterator.
        <p>
        The transformation occurs during the next() method and the underlying
        iterator is unaffected by the transformation.
        @param <I> the input type
        @param <O> the output type
        @param iterator  the iterator to use, not null
        @param transform  the transform to use, not null
        @return a new transforming iterator
        @throws NullPointerException if either parameter is null
        <!-- ACCEPT >=> 683b4e9c-9f1d-11ea-8146-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `final Predicate<? super E> predicate)`


        <!-- 683b4e9d-9f1d-11ea-8147-333445793454 <=< ACCEPT -->
        Gets an iterator that filters another iterator.
        <p>
        The returned iterator will only return objects that match the specified
        filtering predicate.
        @param <E> the element type
        @param iterator  the iterator to use, not null
        @param predicate  the predicate to use as a filter, not null
        @return a new filtered iterator
        @throws NullPointerException if either parameter is null
        <!-- ACCEPT >=> 683b4e9d-9f1d-11ea-8147-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `final Predicate<? super E> predicate)`


        <!-- 683b4e9e-9f1d-11ea-8148-333445793454 <=< ACCEPT -->
        Gets a list iterator that filters another list iterator.
        <p>
        The returned iterator will only return objects that match the specified
        filtering predicate.
        @param <E> the element type
        @param listIterator  the list iterator to use, not null
        @param predicate  the predicate to use as a filter, not null
        @return a new filtered iterator
        @throws NullPointerException if either parameter is null
        <!-- ACCEPT >=> 683b4e9e-9f1d-11ea-8148-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll)`


        <!-- 683b4e9f-9f1d-11ea-8149-333445793454 <=< ACCEPT -->
        Gets an iterator that loops continuously over the supplied collection.
        <p>
        The iterator will only stop looping if the remove method is called
        enough times to empty the collection, or if the collection is empty
        to start with.
        @param <E> the element type
        @param coll  the collection to iterate over, not null
        @return a new looping iterator
        @throws NullPointerException if the collection is null
        <!-- ACCEPT >=> 683b4e9f-9f1d-11ea-8149-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list)`


        <!-- 683b4ea0-9f1d-11ea-814a-333445793454 <=< ACCEPT -->
        Gets an iterator that loops continuously over the supplied list.
        <p>
        The iterator will only stop looping if the remove method is called
        enough times to empty the list, or if the list is empty to start with.
        @param <E> the element type
        @param list  the list to iterate over, not null
        @return a new looping iterator
        @throws NullPointerException if the list is null
        @since 3.2
        <!-- ACCEPT >=> 683b4ea0-9f1d-11ea-814a-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `public static NodeListIterator nodeListIterator(final NodeList nodeList)`


        <!-- 683b759f-9f1d-11ea-814b-333445793454 <=< ACCEPT -->
        Gets an {@link Iterator} that wraps the specified {@link NodeList}.
        The returned {@link Iterator} can be used for a single iteration.
        @param nodeList  the node list to use, may not be null
        @return a new, single use {@link Iterator}
        @throws NullPointerException if nodeList is null
        @since 4.0
        <!-- ACCEPT >=> 683b759f-9f1d-11ea-814b-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `public static NodeListIterator nodeListIterator(final Node node)`


        <!-- 683b75a0-9f1d-11ea-814c-333445793454 <=< ACCEPT -->
        Gets an {@link Iterator} that wraps the specified node's childNodes.
        The returned {@link Iterator} can be used for a single iteration.
        <p>
        Convenience method, allows easy iteration over NodeLists:
        <pre>
        Iterator&lt;Node&gt; iterator = IteratorUtils.nodeListIterator(node);
        for(Node childNode : IteratorUtils.asIterable(iterator)) {
        ...
        }
        </pre>
        @param node  the node to use, may not be null
        @return a new, single use {@link Iterator}
        @throws NullPointerException if node is null
        @since 4.0
        <!-- ACCEPT >=> 683b75a0-9f1d-11ea-814c-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator)`


        <!-- 683b75a1-9f1d-11ea-814d-333445793454 <=< ACCEPT -->
        Gets an iterator that supports one-element lookahead.
        @param <E> the element type
        @param iterator  the iterator to decorate, not null
        @return a peeking iterator
        @throws NullPointerException if the iterator is null
        @since 4.0
        <!-- ACCEPT >=> 683b75a1-9f1d-11ea-814d-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator)`


        <!-- 683b75a2-9f1d-11ea-814e-333445793454 <=< ACCEPT -->
        Gets an iterator that supports pushback of elements.
        @param <E> the element type
        @param iterator  the iterator to decorate, not null
        @return a pushback iterator
        @throws NullPointerException if the iterator is null
        @since 4.0
        <!-- ACCEPT >=> 683b75a2-9f1d-11ea-814e-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset)`


        <!-- 683b75a3-9f1d-11ea-814f-333445793454 <=< ACCEPT -->
        Decorates the specified iterator to skip the first N elements.
        @param <E> the element type
        @param iterator  the iterator to decorate
        @param offset  the first number of elements to skip
        @return a new skipping iterator
        @throws NullPointerException if the iterator is null
        @throws IllegalArgumentException if offset is negative
        @since 4.1
        <!-- ACCEPT >=> 683b75a3-9f1d-11ea-814f-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `final Iterator<? extends E> b)`


        <!-- 683b75a4-9f1d-11ea-8150-333445793454 <=< ACCEPT -->
        Returns an iterator that interleaves elements from the decorated iterators.
        @param <E> the element type
        @param a  the first iterator to interleave
        @param b  the second iterator to interleave
        @return an iterator, interleaving the decorated iterators
        @throws NullPointerException if any iterator is null
        @since 4.1
        <!-- ACCEPT >=> 683b75a4-9f1d-11ea-8150-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `final Iterator<? extends E> c)`


        <!-- 683b75a5-9f1d-11ea-8151-333445793454 <=< ACCEPT -->
        Returns an iterator that interleaves elements from the decorated iterators.
        @param <E> the element type
        @param a  the first iterator to interleave
        @param b  the second iterator to interleave
        @param c  the third iterator to interleave
        @return an iterator, interleaving the decorated iterators
        @throws NullPointerException if any iterator is null
        @since 4.1
        <!-- ACCEPT >=> 683b75a5-9f1d-11ea-8151-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators)`


        <!-- 683b75a6-9f1d-11ea-8152-333445793454 <=< ACCEPT -->
        Returns an iterator that interleaves elements from the decorated iterators.
        @param <E> the element type
        @param iterators  the array of iterators to interleave
        @return an iterator, interleaving the decorated iterators
        @throws NullPointerException if any iterator is null
        @since 4.1
        <!-- ACCEPT >=> 683b75a6-9f1d-11ea-8152-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration)`


        <!-- 683b75a7-9f1d-11ea-8153-333445793454 <=< ACCEPT -->
        Gets an iterator that provides an iterator view of the given enumeration.
        @param <E> the element type
        @param enumeration  the enumeration to use, may not be null
        @return a new iterator
        @throws NullPointerException if enumeration is null
        <!-- ACCEPT >=> 683b75a7-9f1d-11ea-8153-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `final Collection<? super E> removeCollection)`


        <!-- 683b75a8-9f1d-11ea-8154-333445793454 <=< ACCEPT -->
        Gets an iterator that provides an iterator view of the given enumeration
        that will remove elements from the specified collection.
        @param <E> the element type
        @param enumeration  the enumeration to use, may not be null
        @param removeCollection  the collection to remove elements from, may not be null
        @return a new iterator
        @throws NullPointerException if enumeration or removeCollection is null
        <!-- ACCEPT >=> 683b75a8-9f1d-11ea-8154-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator)`


        <!-- 683b75a9-9f1d-11ea-8155-333445793454 <=< ACCEPT -->
        Gets an enumeration that wraps an iterator.
        @param <E> the element type
        @param iterator  the iterator to use, may not be null
        @return a new enumeration
        @throws NullPointerException if iterator is null
        <!-- ACCEPT >=> 683b75a9-9f1d-11ea-8155-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator)`


        <!-- 683b75aa-9f1d-11ea-8156-333445793454 <=< ACCEPT -->
        Gets an {@link Iterable} that wraps an iterator.  The returned {@link Iterable} can be
        used for a single iteration.
        @param <E> the element type
        @param iterator  the iterator to use, may not be null
        @return a new, single use {@link Iterable}
        @throws NullPointerException if iterator is null
        <!-- ACCEPT >=> 683b75aa-9f1d-11ea-8156-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator)`


        <!-- 683b75ab-9f1d-11ea-8157-333445793454 <=< ACCEPT -->
        Gets an iterable that wraps an iterator.  The returned iterable can be
        used for multiple iterations.
        @param <E> the element type
        @param iterator  the iterator to use, may not be null
        @return a new, multiple use iterable
        @throws NullPointerException if iterator is null
        <!-- ACCEPT >=> 683b75ab-9f1d-11ea-8157-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator)`


        <!-- 683b75ac-9f1d-11ea-8158-333445793454 <=< ACCEPT -->
        Gets a list iterator based on a simple iterator.
        <p>
        As the wrapped Iterator is traversed, a LinkedList of its values is
        cached, permitting all required operations of ListIterator.
        @param <E> the element type
        @param iterator  the iterator to use, may not be null
        @return a new iterator
        @throws NullPointerException if iterator parameter is null
        <!-- ACCEPT >=> 683b75ac-9f1d-11ea-8158-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `public static Object[] toArray(final Iterator<?> iterator)`


        <!-- 683b75ad-9f1d-11ea-8159-333445793454 <=< ACCEPT -->
        Gets an array based on an iterator.
        <p>
        As the wrapped Iterator is traversed, an ArrayList of its values is
        created. At the end, this is converted to an array.
        @param iterator  the iterator to use, not null
        @return an array of the iterator contents
        @throws NullPointerException if iterator parameter is null
        <!-- ACCEPT >=> 683b75ad-9f1d-11ea-8159-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass)`


        <!-- 683b75ae-9f1d-11ea-815a-333445793454 <=< ACCEPT -->
        Gets an array based on an iterator.
        <p>
        As the wrapped Iterator is traversed, an ArrayList of its values is
        created. At the end, this is converted to an array.
        @param <E> the element type
        @param iterator  the iterator to use, not null
        @param arrayClass  the class of array to create
        @return an array of the iterator contents
        @throws NullPointerException if iterator parameter or arrayClass is null
        @throws ArrayStoreException if the arrayClass is invalid
        <!-- ACCEPT >=> 683b75ae-9f1d-11ea-815a-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `public static <E> List<E> toList(final Iterator<? extends E> iterator)`


        <!-- 683b75af-9f1d-11ea-815b-333445793454 <=< ACCEPT -->
        Gets a list based on an iterator.
        <p>
        As the wrapped Iterator is traversed, an ArrayList of its values is
        created. At the end, the list is returned.
        @param <E> the element type
        @param iterator  the iterator to use, not null
        @return a list of the iterator contents
        @throws NullPointerException if iterator parameter is null
        <!-- ACCEPT >=> 683b75af-9f1d-11ea-815b-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize)`


        <!-- 683b9ca8-9f1d-11ea-815c-333445793454 <=< ACCEPT -->
        Gets a list based on an iterator.
        <p>
        As the wrapped Iterator is traversed, an ArrayList of its values is
        created. At the end, the list is returned.
        @param <E> the element type
        @param iterator  the iterator to use, not null
        @param estimatedSize  the initial size of the ArrayList
        @return a list of the iterator contents
        @throws NullPointerException if iterator parameter is null
        @throws IllegalArgumentException if the size is less than 1
        <!-- ACCEPT >=> 683b9ca8-9f1d-11ea-815c-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `public static Iterator<?> getIterator(final Object obj)`


        <!-- 683b9ca9-9f1d-11ea-815d-333445793454 <=< ACCEPT -->
        Gets a suitable Iterator for the given object.
        <p>
        This method can handle objects as follows
        <ul>
        <li>null - empty iterator
        <li>Iterator - returned directly
        <li>Enumeration - wrapped
        <li>Collection - iterator from collection returned
        <li>Map - values iterator returned
        <li>Dictionary - values (elements) enumeration returned as iterator
        <li>array - iterator over array returned
        <li>object with iterator() public method accessed by reflection
        <li>object - singleton iterator
        <li>NodeList - iterator over the list
        <li>Node - iterator over the child nodes
        </ul>
        @param obj  the object to convert to an iterator
        @return a suitable iterator, never null
        <!-- ACCEPT >=> 683b9ca9-9f1d-11ea-815d-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `public static <E> void forEach(final Iterator<E> iterator, final Closure<? super E> closure)`


        <!-- 683b9caa-9f1d-11ea-815e-333445793454 <=< ACCEPT -->
        Applies the closure to each element of the provided iterator.
        @param <E> the element type
        @param iterator  the iterator to use, may be null
        @param closure  the closure to apply to each element, may not be null
        @throws NullPointerException if closure is null
        @since 4.1
        <!-- ACCEPT >=> 683b9caa-9f1d-11ea-815e-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `public static <E> E forEachButLast(final Iterator<E> iterator, final Closure<? super E> closure)`


        <!-- 683b9cab-9f1d-11ea-815f-333445793454 <=< ACCEPT -->
        Executes the given closure on each but the last element in the iterator.
        <p>
        If the input iterator is null no change is made.
        @param <E> the type of object the {@link Iterator} contains
        @param iterator  the iterator to get the input from, may be null
        @param closure  the closure to perform, may not be null
        @return the last element in the iterator, or null if iterator is null or empty
        @throws NullPointerException if closure is null
        @since 4.1
        <!-- ACCEPT >=> 683b9cab-9f1d-11ea-815f-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate)`


        <!-- 683b9cac-9f1d-11ea-8160-333445793454 <=< ACCEPT -->
        Finds the first element in the given iterator which matches the given predicate.
        <p>
        A <code>null</code> or empty iterator returns null.
        @param <E> the element type
        @param iterator  the iterator to search, may be null
        @param predicate  the predicate to use, may not be null
        @return the first element of the iterator which matches the predicate or null if none could be found
        @throws NullPointerException if predicate is null
        @since 4.1
        <!-- ACCEPT >=> 683b9cac-9f1d-11ea-8160-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `public static <E> int indexOf(final Iterator<E> iterator, final Predicate<? super E> predicate)`


        <!-- 683b9cad-9f1d-11ea-8161-333445793454 <=< ACCEPT -->
        Returns the index of the first element in the specified iterator that
        matches the given predicate.
        <p>
        A <code>null</code> or empty iterator returns -1.
        @param <E> the element type
        @param iterator  the iterator to search, may be null
        @param predicate  the predicate to use, may not be null
        @return the index of the first element which matches the predicate or -1 if none matches
        @throws NullPointerException if predicate is null
        @since 4.1
        <!-- ACCEPT >=> 683b9cad-9f1d-11ea-8161-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate)`


        <!-- 683b9cae-9f1d-11ea-8162-333445793454 <=< ACCEPT -->
        Answers true if a predicate is true for any element of the iterator.
        <p>
        A <code>null</code> or empty iterator returns false.
        @param <E> the type of object the {@link Iterator} contains
        @param iterator  the {@link Iterator} to use, may be null
        @param predicate  the predicate to use, may not be null
        @return true if any element of the collection matches the predicate, false otherwise
        @throws NullPointerException if predicate is null
        @since 4.1
        <!-- ACCEPT >=> 683b9cae-9f1d-11ea-8162-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate)`


        <!-- 683b9caf-9f1d-11ea-8163-333445793454 <=< ACCEPT -->
        Answers true if a predicate is true for every element of an iterator.
        <p>
        A <code>null</code> or empty iterator returns true.
        @param <E> the type of object the {@link Iterator} contains
        @param iterator  the {@link Iterator} to use, may be null
        @param predicate  the predicate to use, may not be null
        @return true if every element of the collection matches the predicate or if the
        collection is empty, false otherwise
        @throws NullPointerException if predicate is null
        @since 4.1
        <!-- ACCEPT >=> 683b9caf-9f1d-11ea-8163-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `public static boolean isEmpty(final Iterator<?> iterator)`


        <!-- 683b9cb0-9f1d-11ea-8164-333445793454 <=< ACCEPT -->
        Checks if the given iterator is empty.
        <p>
        A <code>null</code> or empty iterator returns true.
        @param iterator  the {@link Iterator} to use, may be null
        @return true if the iterator is exhausted or null, false otherwise
        @since 4.1
        <!-- ACCEPT >=> 683b9cb0-9f1d-11ea-8164-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `public static <E> boolean contains(final Iterator<E> iterator, final Object object)`


        <!-- 683b9cb1-9f1d-11ea-8165-333445793454 <=< ACCEPT -->
        Checks if the object is contained in the given iterator.
        <p>
        A <code>null</code> or empty iterator returns false.
        @param <E> the type of object the {@link Iterator} contains
        @param iterator  the iterator to check, may be null
        @param object  the object to check
        @return true if the object is contained in the iterator, false otherwise
        @since 4.1
        <!-- ACCEPT >=> 683b9cb1-9f1d-11ea-8165-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `public static <E> E get(final Iterator<E> iterator, final int index)`


        <!-- 683b9cb2-9f1d-11ea-8166-333445793454 <=< ACCEPT -->
        Returns the <code>index</code>-th value in {@link Iterator}, throwing
        <code>IndexOutOfBoundsException</code> if there is no such element.
        <p>
        The Iterator is advanced to <code>index</code> (or to the end, if
        <code>index</code> exceeds the number of entries) as a side effect of this method.
        @param <E> the type of object in the {@link Iterator}
        @param iterator  the iterator to get a value from
        @param index  the index to get
        @return the object at the specified index
        @throws IndexOutOfBoundsException if the index is invalid
        @since 4.1
        <!-- ACCEPT >=> 683b9cb2-9f1d-11ea-8166-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `public static int size(final Iterator<?> iterator)`


        <!-- 683b9cb3-9f1d-11ea-8167-333445793454 <=< ACCEPT -->
        Returns the number of elements contained in the given iterator.
        <p>
        A <code>null</code> or empty iterator returns {@code 0}.
        @param iterator  the iterator to check, may be null
        @return the number of elements contained in the iterator
        @since 4.1
        <!-- ACCEPT >=> 683b9cb3-9f1d-11ea-8167-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `public static <E> String toString(final Iterator<E> iterator)`


        <!-- 683b9cb4-9f1d-11ea-8168-333445793454 <=< ACCEPT -->
        Returns a string representation of the elements of the specified iterator.
        <p>
        The string representation consists of a list of the iterator's elements,
        enclosed in square brackets ({@code "[]"}). Adjacent elements are separated
        by the characters {@code ", "} (a comma followed by a space). Elements are
        converted to strings as by {@code String.valueOf(Object)}.
        @param <E> the element type
        @param iterator  the iterator to convert to a string, may be null
        @return a string representation of {@code iterator}
        @since 4.1
        <!-- ACCEPT >=> 683b9cb4-9f1d-11ea-8168-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `final Transformer<? super E, String> transformer)`


        <!-- 683b9cb5-9f1d-11ea-8169-333445793454 <=< ACCEPT -->
        Returns a string representation of the elements of the specified iterator.
        <p>
        The string representation consists of a list of the iterable's elements,
        enclosed in square brackets ({@code "[]"}). Adjacent elements are separated
        by the characters {@code ", "} (a comma followed by a space). Elements are
        converted to strings as by using the provided {@code transformer}.
        @param <E> the element type
        @param iterator  the iterator to convert to a string, may be null
        @param transformer  the transformer used to get a string representation of an element
        @return a string representation of {@code iterator}
        @throws NullPointerException if {@code transformer} is null
        @since 4.1
        <!-- ACCEPT >=> 683b9cb5-9f1d-11ea-8169-333445793454 -->



## Method: `java.org.apache.commons.collections4.IteratorUtils` / `final String suffix)`


        <!-- 683b9cb6-9f1d-11ea-816a-333445793454 <=< ACCEPT -->
        Returns a string representation of the elements of the specified iterator.
        <p>
        The string representation consists of a list of the iterator's elements,
        enclosed by the provided {@code prefix} and {@code suffix}. Adjacent elements
        are separated by the provided {@code delimiter}. Elements are converted to
        strings as by using the provided {@code transformer}.
        @param <E> the element type
        @param iterator  the iterator to convert to a string, may be null
        @param transformer  the transformer used to get a string representation of an element
        @param delimiter  the string to delimit elements
        @param prefix  the prefix, prepended to the string representation
        @param suffix  the suffix, appended to the string representation
        @return a string representation of {@code iterator}
        @throws NullPointerException if either transformer, delimiter, prefix or suffix is null
        @since 4.1
        <!-- ACCEPT >=> 683b9cb6-9f1d-11ea-816a-333445793454 -->



# File: `java.org.apache.commons.collections4.KeyValue`

## Interface: `java.org.apache.commons.collections4.KeyValue` / `public interface KeyValue<K, V>`


        <!-- 683bc3b3-9f1d-11ea-816b-333445793454 <=< ACCEPT -->
        Defines a simple key value pair.
        <p>
        A Map Entry has considerable additional semantics over and above a simple
        key-value pair. This interface defines the minimum key value, with just the
        two get methods.
        @param <K> the type of the key
        @param <V> the type of the value
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 683bc3b3-9f1d-11ea-816b-333445793454 -->



## Method: `java.org.apache.commons.collections4.KeyValue` / `K getKey()`


        <!-- 683bc3b4-9f1d-11ea-816c-333445793454 <=< ACCEPT -->
        Gets the key from the pair.
        @return the key
        <!-- ACCEPT >=> 683bc3b4-9f1d-11ea-816c-333445793454 -->



## Method: `java.org.apache.commons.collections4.KeyValue` / `V getValue()`


        <!-- 683bc3b5-9f1d-11ea-816d-333445793454 <=< ACCEPT -->
        Gets the value from the pair.
        @return the value
        <!-- ACCEPT >=> 683bc3b5-9f1d-11ea-816d-333445793454 -->



# File: `java.org.apache.commons.collections4.ListUtils`

## Class: `java.org.apache.commons.collections4.ListUtils` / `public class ListUtils`


        <!-- 683bc3b6-9f1d-11ea-816e-333445793454 <=< ACCEPT -->
        Provides utility methods and decorators for {@link List} instances.
        @since 1.0
        @version $Id$
        <!-- ACCEPT >=> 683bc3b6-9f1d-11ea-816e-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.ListUtils` / `private ListUtils()`


        <!-- 683bc3b7-9f1d-11ea-816f-333445793454 <=< ACCEPT -->
        <code>ListUtils</code> should not normally be instantiated.
        <!-- ACCEPT >=> 683bc3b7-9f1d-11ea-816f-333445793454 -->



## Method: `java.org.apache.commons.collections4.ListUtils` / `public static <T> List<T> emptyIfNull(final List<T> list)`


        <!-- 683bc3b8-9f1d-11ea-8170-333445793454 <=< ACCEPT -->
        Returns an immutable empty list if the argument is <code>null</code>,
        or the argument itself otherwise.
        @param <T> the element type
        @param list the list, possibly <code>null</code>
        @return an empty list if the argument is <code>null</code>
        <!-- ACCEPT >=> 683bc3b8-9f1d-11ea-8170-333445793454 -->



## Method: `java.org.apache.commons.collections4.ListUtils` / `public static <T> List<T> defaultIfNull(final List<T> list, final List<T> defaultList)`


        <!-- 683bc3b9-9f1d-11ea-8171-333445793454 <=< ACCEPT -->
        Returns either the passed in list, or if the list is {@code null},
        the value of {@code defaultList}.
        @param <T> the element type
        @param list  the list, possibly {@code null}
        @param defaultList  the returned values if list is {@code null}
        @return an empty list if the argument is <code>null</code>
        @since 4.0
        <!-- ACCEPT >=> 683bc3b9-9f1d-11ea-8171-333445793454 -->



## Method: `java.org.apache.commons.collections4.ListUtils` / `public static <E> List<E> intersection(final List<? extends E> list1, final List<? extends E> list2)`


        <!-- 683bc3ba-9f1d-11ea-8172-333445793454 <=< ACCEPT -->
        Returns a new list containing all elements that are contained in
        both given lists.
        @param <E> the element type
        @param list1  the first list
        @param list2  the second list
        @return  the intersection of those two lists
        @throws NullPointerException if either list is null
        <!-- ACCEPT >=> 683bc3ba-9f1d-11ea-8172-333445793454 -->



## Method: `java.org.apache.commons.collections4.ListUtils` / `public static <E> List<E> subtract(final List<E> list1, final List<? extends E> list2)`


        <!-- 683bc3bb-9f1d-11ea-8173-333445793454 <=< ACCEPT -->
        Subtracts all elements in the second list from the first list,
        placing the results in a new list.
        <p>
        This differs from {@link List#removeAll(Collection)} in that
        cardinality is respected; if <Code>list1</Code> contains two
        occurrences of <Code>null</Code> and <Code>list2</Code> only
        contains one occurrence, then the returned list will still contain
        one occurrence.
        @param <E> the element type
        @param list1  the list to subtract from
        @param list2  the list to subtract
        @return a new list containing the results
        @throws NullPointerException if either list is null
        <!-- ACCEPT >=> 683bc3bb-9f1d-11ea-8173-333445793454 -->



## Method: `java.org.apache.commons.collections4.ListUtils` / `public static <E> List<E> sum(final List<? extends E> list1, final List<? extends E> list2)`


        <!-- 683bc3bc-9f1d-11ea-8174-333445793454 <=< ACCEPT -->
        Returns the sum of the given lists.  This is their intersection
        subtracted from their union.
        @param <E> the element type
        @param list1  the first list
        @param list2  the second list
        @return  a new list containing the sum of those lists
        @throws NullPointerException if either list is null
        <!-- ACCEPT >=> 683bc3bc-9f1d-11ea-8174-333445793454 -->



## Method: `java.org.apache.commons.collections4.ListUtils` / `public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2)`


        <!-- 683bc3bd-9f1d-11ea-8175-333445793454 <=< ACCEPT -->
        Returns a new list containing the second list appended to the
        first list.  The {@link List#addAll(Collection)} operation is
        used to append the two given lists into a new list.
        @param <E> the element type
        @param list1  the first list
        @param list2  the second list
        @return a new list containing the union of those lists
        @throws NullPointerException if either list is null
        <!-- ACCEPT >=> 683bc3bd-9f1d-11ea-8175-333445793454 -->



## Method: `java.org.apache.commons.collections4.ListUtils` / `final Predicate<? super E> predicate)`


        <!-- 683bc3be-9f1d-11ea-8176-333445793454 <=< ACCEPT -->
        Selects all elements from input collection which match the given
        predicate into an output list.
        <p>
        A <code>null</code> predicate matches no elements.
        @param <E> the element type
        @param inputCollection  the collection to get the input from, may not be null
        @param predicate  the predicate to use, may be null
        @return the elements matching the predicate (new list)
        @throws NullPointerException if the input list is null
        @since 4.0
        @see CollectionUtils#select(Iterable, Predicate)
        <!-- ACCEPT >=> 683bc3be-9f1d-11ea-8176-333445793454 -->



## Method: `java.org.apache.commons.collections4.ListUtils` / `final Predicate<? super E> predicate)`


        <!-- 683bc3bf-9f1d-11ea-8177-333445793454 <=< ACCEPT -->
        Selects all elements from inputCollection which don't match the given
        predicate into an output collection.
        <p>
        If the input predicate is <code>null</code>, the result is an empty list.
        @param <E> the element type
        @param inputCollection the collection to get the input from, may not be null
        @param predicate the predicate to use, may be null
        @return the elements <b>not</b> matching the predicate (new list)
        @throws NullPointerException if the input collection is null
        @since 4.0
        @see CollectionUtils#selectRejected(Iterable, Predicate)
        <!-- ACCEPT >=> 683bc3bf-9f1d-11ea-8177-333445793454 -->



## Method: `java.org.apache.commons.collections4.ListUtils` / `public static boolean isEqualList(final Collection<?> list1, final Collection<?> list2)`


        <!-- 683bc3c0-9f1d-11ea-8178-333445793454 <=< ACCEPT -->
        Tests two lists for value-equality as per the equality contract in
        {@link java.util.List#equals(java.lang.Object)}.
        <p>
        This method is useful for implementing <code>List</code> when you cannot
        extend AbstractList. The method takes Collection instances to enable other
        collection types to use the List implementation algorithm.
        <p>
        The relevant text (slightly paraphrased as this is a static method) is:
        <blockquote>
        Compares the two list objects for equality.  Returns
        {@code true} if and only if both
        lists have the same size, and all corresponding pairs of elements in
        the two lists are <i>equal</i>.  (Two elements {@code e1} and
        {@code e2} are <i>equal</i> if <tt>(e1==null ? e2==null :
        e1.equals(e2))</tt>.)  In other words, two lists are defined to be
        equal if they contain the same elements in the same order.  This
        definition ensures that the equals method works properly across
        different implementations of the {@code List} interface.
        </blockquote>
        <b>Note:</b> The behaviour of this method is undefined if the lists are
        modified during the equals comparison.
        @see java.util.List
        @param list1  the first list, may be null
        @param list2  the second list, may be null
        @return whether the lists are equal by value comparison
        <!-- ACCEPT >=> 683bc3c0-9f1d-11ea-8178-333445793454 -->



## Method: `java.org.apache.commons.collections4.ListUtils` / `public static int hashCodeForList(final Collection<?> list)`


        <!-- 683bc3c1-9f1d-11ea-8179-333445793454 <=< ACCEPT -->
        Generates a hash code using the algorithm specified in
        {@link java.util.List#hashCode()}.
        <p>
        This method is useful for implementing <code>List</code> when you cannot
        extend AbstractList. The method takes Collection instances to enable other
        collection types to use the List implementation algorithm.
        @see java.util.List#hashCode()
        @param list  the list to generate the hashCode for, may be null
        @return the hash code
        <!-- ACCEPT >=> 683bc3c1-9f1d-11ea-8179-333445793454 -->



## Method: `java.org.apache.commons.collections4.ListUtils` / `public static <E> List<E> retainAll(final Collection<E> collection, final Collection<?> retain)`


        <!-- 683beaba-9f1d-11ea-817a-333445793454 <=< ACCEPT -->
        Returns a List containing all the elements in <code>collection</code>
        that are also in <code>retain</code>. The cardinality of an element <code>e</code>
        in the returned list is the same as the cardinality of <code>e</code>
        in <code>collection</code> unless <code>retain</code> does not contain <code>e</code>, in which
        case the cardinality is zero. This method is useful if you do not wish to modify
        the collection <code>c</code> and thus cannot call <code>collection.retainAll(retain);</code>.
        <p>
        This implementation iterates over <code>collection</code>, checking each element in
        turn to see if it's contained in <code>retain</code>. If it's contained, it's added
        to the returned list. As a consequence, it is advised to use a collection type for
        <code>retain</code> that provides a fast (e.g. O(1)) implementation of
        {@link Collection#contains(Object)}.
        @param <E>  the element type
        @param collection  the collection whose contents are the target of the #retailAll operation
        @param retain  the collection containing the elements to be retained in the returned collection
        @return a <code>List</code> containing all the elements of <code>c</code>
        that occur at least once in <code>retain</code>.
        @throws NullPointerException if either parameter is null
        @since 3.2
        <!-- ACCEPT >=> 683beaba-9f1d-11ea-817a-333445793454 -->



## Method: `java.org.apache.commons.collections4.ListUtils` / `public static <E> List<E> removeAll(final Collection<E> collection, final Collection<?> remove)`


        <!-- 683beabb-9f1d-11ea-817b-333445793454 <=< ACCEPT -->
        Removes the elements in <code>remove</code> from <code>collection</code>. That is, this
        method returns a list containing all the elements in <code>collection</code>
        that are not in <code>remove</code>. The cardinality of an element <code>e</code>
        in the returned collection is the same as the cardinality of <code>e</code>
        in <code>collection</code> unless <code>remove</code> contains <code>e</code>, in which
        case the cardinality is zero. This method is useful if you do not wish to modify
        <code>collection</code> and thus cannot call <code>collection.removeAll(remove);</code>.
        <p>
        This implementation iterates over <code>collection</code>, checking each element in
        turn to see if it's contained in <code>remove</code>. If it's not contained, it's added
        to the returned list. As a consequence, it is advised to use a collection type for
        <code>remove</code> that provides a fast (e.g. O(1)) implementation of
        {@link Collection#contains(Object)}.
        @param <E>  the element type
        @param collection  the collection from which items are removed (in the returned collection)
        @param remove  the items to be removed from the returned <code>collection</code>
        @return a <code>List</code> containing all the elements of <code>c</code> except
        any elements that also occur in <code>remove</code>.
        @throws NullPointerException if either parameter is null
        @since 3.2
        <!-- ACCEPT >=> 683beabb-9f1d-11ea-817b-333445793454 -->



## Method: `java.org.apache.commons.collections4.ListUtils` / `public static <E> List<E> synchronizedList(final List<E> list)`


        <!-- 683beabc-9f1d-11ea-817c-333445793454 <=< ACCEPT -->
        Returns a synchronized list backed by the given list.
        <p>
        You must manually synchronize on the returned list's iterator to
        avoid non-deterministic behavior:
        <pre>
        List list = ListUtils.synchronizedList(myList);
        synchronized (list) {
        Iterator i = list.iterator();
        while (i.hasNext()) {
        process (i.next());
        }
        }
        </pre>
        This method is just a wrapper for {@link Collections#synchronizedList(List)}.
        @param <E> the element type
        @param list  the list to synchronize, must not be null
        @return a synchronized list backed by the given list
        @throws NullPointerException if the list is null
        <!-- ACCEPT >=> 683beabc-9f1d-11ea-817c-333445793454 -->



## Method: `java.org.apache.commons.collections4.ListUtils` / `public static <E> List<E> unmodifiableList(final List<? extends E> list)`


        <!-- 683beabd-9f1d-11ea-817d-333445793454 <=< ACCEPT -->
        Returns an unmodifiable list backed by the given list.
        <p>
        This method uses the implementation in the decorators subpackage.
        @param <E>  the element type
        @param list  the list to make unmodifiable, must not be null
        @return an unmodifiable list backed by the given list
        @throws NullPointerException if the list is null
        <!-- ACCEPT >=> 683beabd-9f1d-11ea-817d-333445793454 -->



## Method: `java.org.apache.commons.collections4.ListUtils` / `public static <E> List<E> predicatedList(final List<E> list, final Predicate<E> predicate)`


        <!-- 683beabe-9f1d-11ea-817e-333445793454 <=< ACCEPT -->
        Returns a predicated (validating) list backed by the given list.
        <p>
        Only objects that pass the test in the given predicate can be added to the list.
        Trying to add an invalid object results in an IllegalArgumentException.
        It is important not to use the original list after invoking this method,
        as it is a backdoor for adding invalid objects.
        @param <E> the element type
        @param list  the list to predicate, must not be null
        @param predicate  the predicate for the list, must not be null
        @return a predicated list backed by the given list
        @throws NullPointerException if the List or Predicate is null
        <!-- ACCEPT >=> 683beabe-9f1d-11ea-817e-333445793454 -->



## Method: `java.org.apache.commons.collections4.ListUtils` / `final Transformer<? super E, ? extends E> transformer)`


        <!-- 683beabf-9f1d-11ea-817f-333445793454 <=< ACCEPT -->
        Returns a transformed list backed by the given list.
        <p>
        This method returns a new list (decorating the specified list) that
        will transform any new entries added to it.
        Existing entries in the specified list will not be transformed.
        <p>
        Each object is passed through the transformer as it is added to the
        List. It is important not to use the original list after invoking this
        method, as it is a backdoor for adding untransformed objects.
        <p>
        Existing entries in the specified list will not be transformed.
        If you want that behaviour, see {@link TransformedList#transformedList}.
        @param <E> the element type
        @param list  the list to predicate, must not be null
        @param transformer  the transformer for the list, must not be null
        @return a transformed list backed by the given list
        @throws NullPointerException if the List or Transformer is null
        <!-- ACCEPT >=> 683beabf-9f1d-11ea-817f-333445793454 -->



## Method: `java.org.apache.commons.collections4.ListUtils` / `public static <E> List<E> lazyList(final List<E> list, final Factory<? extends E> factory)`


        <!-- 683beac0-9f1d-11ea-8180-333445793454 <=< ACCEPT -->
        Returns a "lazy" list whose elements will be created on demand.
        <p>
        When the index passed to the returned list's {@link List#get(int) get}
        method is greater than the list's size, then the factory will be used
        to create a new object and that object will be inserted at that index.
        <p>
        For instance:
        <pre>
        Factory&lt;Date&gt; factory = new Factory&lt;Date&gt;() {
        public Date create() {
        return new Date();
        }
        }
        List&lt;Date&gt; lazy = ListUtils.lazyList(new ArrayList&lt;Date&gt;(), factory);
        Date date = lazy.get(3);
        </pre>
        After the above code is executed, <code>date</code> will refer to
        a new <code>Date</code> instance.  Furthermore, that <code>Date</code>
        instance is the fourth element in the list.  The first, second,
        and third element are all set to <code>null</code>.
        @param <E> the element type
        @param list  the list to make lazy, must not be null
        @param factory  the factory for creating new objects, must not be null
        @return a lazy list backed by the given list
        @throws NullPointerException if the List or Factory is null
        <!-- ACCEPT >=> 683beac0-9f1d-11ea-8180-333445793454 -->



## Method: `java.org.apache.commons.collections4.ListUtils` / `public static <E> List<E> fixedSizeList(final List<E> list)`


        <!-- 683beac1-9f1d-11ea-8181-333445793454 <=< ACCEPT -->
        Returns a fixed-sized list backed by the given list.
        Elements may not be added or removed from the returned list, but
        existing elements can be changed (for instance, via the
        {@link List#set(int, Object)} method).
        @param <E>  the element type
        @param list  the list whose size to fix, must not be null
        @return a fixed-size list backed by that list
        @throws NullPointerException  if the List is null
        <!-- ACCEPT >=> 683beac1-9f1d-11ea-8181-333445793454 -->



## Method: `java.org.apache.commons.collections4.ListUtils` / `public static <E> int indexOf(final List<E> list, final Predicate<E> predicate)`


        <!-- 683beac2-9f1d-11ea-8182-333445793454 <=< ACCEPT -->
        Finds the first index in the given List which matches the given predicate.
        <p>
        If the input List or predicate is null, or no element of the List
        matches the predicate, -1 is returned.
        @param <E>  the element type
        @param list the List to search, may be null
        @param predicate  the predicate to use, may be null
        @return the first index of an Object in the List which matches the predicate or -1 if none could be found
        <!-- ACCEPT >=> 683beac2-9f1d-11ea-8182-333445793454 -->



## Method: `java.org.apache.commons.collections4.ListUtils` / `public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b)`


        <!-- 683beac3-9f1d-11ea-8183-333445793454 <=< ACCEPT -->
        Returns the longest common subsequence (LCS) of two sequences (lists).
        @param <E>  the element type
        @param a  the first list
        @param b  the second list
        @return the longest common subsequence
        @throws NullPointerException if either list is {@code null}
        @since 4.0
        <!-- ACCEPT >=> 683beac3-9f1d-11ea-8183-333445793454 -->



## Method: `java.org.apache.commons.collections4.ListUtils` / `final Equator<? super E> equator)`


        <!-- 683beac4-9f1d-11ea-8184-333445793454 <=< ACCEPT -->
        Returns the longest common subsequence (LCS) of two sequences (lists).
        @param <E>  the element type
        @param a  the first list
        @param b  the second list
        @param equator  the equator used to test object equality
        @return the longest common subsequence
        @throws NullPointerException if either list or the equator is {@code null}
        @since 4.0
        <!-- ACCEPT >=> 683beac4-9f1d-11ea-8184-333445793454 -->



## Method: `java.org.apache.commons.collections4.ListUtils` / `public static String longestCommonSubsequence(final CharSequence a, final CharSequence b)`


        <!-- 683beac5-9f1d-11ea-8185-333445793454 <=< ACCEPT -->
        Returns the longest common subsequence (LCS) of two {@link CharSequence} objects.
        <p>
        This is a convenience method for using {@link #longestCommonSubsequence(List, List)}
        with {@link CharSequence} instances.
        @param a  the first sequence
        @param b  the second sequence
        @return the longest common subsequence as {@link String}
        @throws NullPointerException if either sequence is {@code null}
        @since 4.0
        <!-- ACCEPT >=> 683beac5-9f1d-11ea-8185-333445793454 -->



## Class: `java.org.apache.commons.collections4.ListUtils` / `private static final class LcsVisitor<E> implements CommandVisitor<E>`


        <!-- 683beac6-9f1d-11ea-8186-333445793454 <=< ACCEPT -->
        A helper class used to construct the longest common subsequence.
        <!-- ACCEPT >=> 683beac6-9f1d-11ea-8186-333445793454 -->



## Class: `java.org.apache.commons.collections4.ListUtils` / `private static final class CharSequenceAsList extends AbstractList<Character>`


        <!-- 683beac7-9f1d-11ea-8187-333445793454 <=< ACCEPT -->
        A simple wrapper to use a CharSequence as List.
        <!-- ACCEPT >=> 683beac7-9f1d-11ea-8187-333445793454 -->



## Method: `java.org.apache.commons.collections4.ListUtils` / `public static <T> List<List<T>> partition(final List<T> list, final int size)`


        <!-- 683c11c6-9f1d-11ea-8188-333445793454 <=< ACCEPT -->
        Returns consecutive {@link List#subList(int, int) sublists} of a
        list, each of the same size (the final list may be smaller). For example,
        partitioning a list containing {@code [a, b, c, d, e]} with a partition
        size of 3 yields {@code [[a, b, c], [d, e]]} -- an outer list containing
        two inner lists of three and two elements, all in the original order.
        <p>
        The outer list is unmodifiable, but reflects the latest state of the
        source list. The inner lists are sublist views of the original list,
        produced on demand using {@link List#subList(int, int)}, and are subject
        to all the usual caveats about modification as explained in that API.
        <p>
        Adapted from http://code.google.com/p/guava-libraries/
        @param <T> the element type
        @param list  the list to return consecutive sublists of
        @param size  the desired size of each sublist (the last may be smaller)
        @return a list of consecutive sublists
        @throws NullPointerException if list is null
        @throws IllegalArgumentException if size is not strictly positive
        @since 4.0
        <!-- ACCEPT >=> 683c11c6-9f1d-11ea-8188-333445793454 -->



## Class: `java.org.apache.commons.collections4.ListUtils` / `private static class Partition<T> extends AbstractList<List<T>>`


        <!-- 683c11c7-9f1d-11ea-8189-333445793454 <=< ACCEPT -->
        Provides a partition view on a {@link List}.
        @since 4.0
        <!-- ACCEPT >=> 683c11c7-9f1d-11ea-8189-333445793454 -->



# File: `java.org.apache.commons.collections4.ListValuedMap`

## Interface: `java.org.apache.commons.collections4.ListValuedMap` / `public interface ListValuedMap<K, V> extends MultiValuedMap<K, V>`


        <!-- 683c11c8-9f1d-11ea-818a-333445793454 <=< ACCEPT -->
        Defines a map that holds a list of values against each key.
        <p>
        A {@code ListValuedMap} is a Map with slightly different semantics:
        <ul>
        <li>Putting a value into the map will add the value to a {@link List} at that key.</li>
        <li>Getting a value will return a {@link List}, holding all the values put to that key.</li>
        </ul>
        @since 4.1
        @version $Id$
        <!-- ACCEPT >=> 683c11c8-9f1d-11ea-818a-333445793454 -->



## Method: `java.org.apache.commons.collections4.ListValuedMap` / `List<V> get(K key)`


        <!-- 683c11c9-9f1d-11ea-818b-333445793454 <=< ACCEPT -->
        Gets the list of values associated with the specified key.
        <p>
        This method will return an <b>empty</b> list if
        {@link #containsKey(Object)} returns {@code false}. Changes to the
        returned list will update the underlying {@code ListValuedMap} and
        vice-versa.
        @param key  the key to retrieve
        @return the {@code List} of values, implementations should return an
        empty {@code List} for no mapping
        @throws NullPointerException if the key is null and null keys are invalid
        <!-- ACCEPT >=> 683c11c9-9f1d-11ea-818b-333445793454 -->



## Method: `java.org.apache.commons.collections4.ListValuedMap` / `List<V> remove(Object key)`


        <!-- 683c11ca-9f1d-11ea-818c-333445793454 <=< ACCEPT -->
        Removes all values associated with the specified key.
        <p>
        The returned list <i>may</i> be modifiable, but updates will not be
        propagated to this list-valued map. In case no mapping was stored for the
        specified key, an empty, unmodifiable list will be returned.
        @param key  the key to remove values from
        @return the {@code List} of values removed, implementations
        typically return an empty, unmodifiable {@code List} for no mapping found
        @throws UnsupportedOperationException if the map is unmodifiable
        @throws NullPointerException if the key is null and null keys are invalid
        <!-- ACCEPT >=> 683c11ca-9f1d-11ea-818c-333445793454 -->



# File: `java.org.apache.commons.collections4.MapIterator`

## Interface: `java.org.apache.commons.collections4.MapIterator` / `public interface MapIterator<K, V> extends Iterator<K>`


        <!-- 683c11cb-9f1d-11ea-818d-333445793454 <=< ACCEPT -->
        Defines an iterator that operates over a <code>Map</code>.
        <p>
        This iterator is a special version designed for maps. It can be more
        efficient to use this rather than an entry set iterator where the option
        is available, and it is certainly more convenient.
        <p>
        A map that provides this interface may not hold the data internally using
        Map Entry objects, thus this interface can avoid lots of object creation.
        <p>
        In use, this iterator iterates through the keys in the map. After each call
        to <code>next()</code>, the <code>getValue()</code> method provides direct
        access to the value. The value can also be set using <code>setValue()</code>.
        <pre>
        MapIterator<String,Integer> it = map.mapIterator();
        while (it.hasNext()) {
        String key = it.next();
        Integer value = it.getValue();
        it.setValue(value + 1);
        }
        </pre>
        @param <K> the type of the keys in the map
        @param <V> the type of the values in the map
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 683c11cb-9f1d-11ea-818d-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapIterator` / `boolean hasNext()`


        <!-- 683c11cc-9f1d-11ea-818e-333445793454 <=< ACCEPT -->
        Checks to see if there are more entries still to be iterated.
        @return <code>true</code> if the iterator has more elements
        <!-- ACCEPT >=> 683c11cc-9f1d-11ea-818e-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapIterator` / `K next()`


        <!-- 683c11cd-9f1d-11ea-818f-333445793454 <=< ACCEPT -->
        Gets the next <em>key</em> from the <code>Map</code>.
        @return the next key in the iteration
        @throws java.util.NoSuchElementException if the iteration is finished
        <!-- ACCEPT >=> 683c11cd-9f1d-11ea-818f-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapIterator` / `K getKey()`


        <!-- 683c11ce-9f1d-11ea-8190-333445793454 <=< ACCEPT -->
        Gets the current key, which is the key returned by the last call
        to <code>next()</code>.
        @return the current key
        @throws IllegalStateException if <code>next()</code> has not yet been called
        <!-- ACCEPT >=> 683c11ce-9f1d-11ea-8190-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapIterator` / `V getValue()`


        <!-- 683c11cf-9f1d-11ea-8191-333445793454 <=< ACCEPT -->
        Gets the current value, which is the value associated with the last key
        returned by <code>next()</code>.
        @return the current value
        @throws IllegalStateException if <code>next()</code> has not yet been called
        <!-- ACCEPT >=> 683c11cf-9f1d-11ea-8191-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapIterator` / `void remove()`


        <!-- 683c11d0-9f1d-11ea-8192-333445793454 <=< ACCEPT -->
        Removes the last returned key from the underlying <code>Map</code> (optional operation).
        <p>
        This method can be called once per call to <code>next()</code>.
        @throws UnsupportedOperationException if remove is not supported by the map
        @throws IllegalStateException if <code>next()</code> has not yet been called
        @throws IllegalStateException if <code>remove()</code> has already been called
        since the last call to <code>next()</code>
        <!-- ACCEPT >=> 683c11d0-9f1d-11ea-8192-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapIterator` / `V setValue(V value)`


        <!-- 683c11d1-9f1d-11ea-8193-333445793454 <=< ACCEPT -->
        Sets the value associated with the current key (optional operation).
        @param value  the new value
        @return the previous value
        @throws UnsupportedOperationException if setValue is not supported by the map
        @throws IllegalStateException if <code>next()</code> has not yet been called
        @throws IllegalStateException if <code>remove()</code> has been called since the
        last call to <code>next()</code>
        <!-- ACCEPT >=> 683c11d1-9f1d-11ea-8193-333445793454 -->



# File: `java.org.apache.commons.collections4.MapUtils`

## Class: `java.org.apache.commons.collections4.MapUtils` / `public class MapUtils`


        <!-- 683c11d2-9f1d-11ea-8194-333445793454 <=< ACCEPT -->
        Provides utility methods and decorators for
        {@link Map} and {@link SortedMap} instances.
        <p>
        It contains various type safe methods
        as well as other useful features like deep copying.
        <p>
        It also provides the following decorators:
        <ul>
        <li>{@link #fixedSizeMap(Map)}
        <li>{@link #fixedSizeSortedMap(SortedMap)}
        <li>{@link #lazyMap(Map,Factory)}
        <li>{@link #lazyMap(Map,Transformer)}
        <li>{@link #lazySortedMap(SortedMap,Factory)}
        <li>{@link #lazySortedMap(SortedMap,Transformer)}
        <li>{@link #predicatedMap(Map,Predicate,Predicate)}
        <li>{@link #predicatedSortedMap(SortedMap,Predicate,Predicate)}
        <li>{@link #transformedMap(Map, Transformer, Transformer)}
        <li>{@link #transformedSortedMap(SortedMap, Transformer, Transformer)}
        <li>{@link #multiValueMap( Map )}
        <li>{@link #multiValueMap( Map, Class )}
        <li>{@link #multiValueMap( Map, Factory )}
        </ul>
        @since 1.0
        @version $Id$
        <!-- ACCEPT >=> 683c11d2-9f1d-11ea-8194-333445793454 -->



## Field: `java.org.apache.commons.collections4.MapUtils` / `public static final SortedMap EMPTY_SORTED_MAP`


        <!-- 683c11d3-9f1d-11ea-8195-333445793454 <=< ACCEPT -->
        An empty unmodifiable sorted map.
        This is not provided in the JDK.
        <!-- ACCEPT >=> 683c11d3-9f1d-11ea-8195-333445793454 -->



## Field: `java.org.apache.commons.collections4.MapUtils` / `private static final String INDENT_STRING`


        <!-- 683c11d4-9f1d-11ea-8196-333445793454 <=< ACCEPT -->
        String used to indent the verbose and debug Map prints.
        <!-- ACCEPT >=> 683c11d4-9f1d-11ea-8196-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.MapUtils` / `private MapUtils()`


        <!-- 683c11d5-9f1d-11ea-8197-333445793454 <=< ACCEPT -->
        <code>MapUtils</code> should not normally be instantiated.
        <!-- ACCEPT >=> 683c11d5-9f1d-11ea-8197-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `public static <K, V> V getObject(final Map<? super K, V> map, final K key)`


        <!-- 683c38d1-9f1d-11ea-8198-333445793454 <=< ACCEPT -->
        Gets from a Map in a null-safe manner.
        @param <K>  the key type
        @param <V>  the value type
        @param map  the map to use
        @param key  the key to look up
        @return the value in the Map, <code>null</code> if null map input
        <!-- ACCEPT >=> 683c38d1-9f1d-11ea-8198-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `public static <K> String getString(final Map<? super K, ?> map, final K key)`


        <!-- 683c38d2-9f1d-11ea-8199-333445793454 <=< ACCEPT -->
        Gets a String from a Map in a null-safe manner.
        <p>
        The String is obtained via <code>toString</code>.
        @param <K>  the key type
        @param map  the map to use
        @param key  the key to look up
        @return the value in the Map as a String, <code>null</code> if null map input
        <!-- ACCEPT >=> 683c38d2-9f1d-11ea-8199-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key)`


        <!-- 683c38d3-9f1d-11ea-819a-333445793454 <=< ACCEPT -->
        Gets a Boolean from a Map in a null-safe manner.
        <p>
        If the value is a <code>Boolean</code> it is returned directly.
        If the value is a <code>String</code> and it equals 'true' ignoring case
        then <code>true</code> is returned, otherwise <code>false</code>.
        If the value is a <code>Number</code> an integer zero value returns
        <code>false</code> and non-zero returns <code>true</code>.
        Otherwise, <code>null</code> is returned.
        @param <K>  the key type
        @param map  the map to use
        @param key  the key to look up
        @return the value in the Map as a Boolean, <code>null</code> if null map input
        <!-- ACCEPT >=> 683c38d3-9f1d-11ea-819a-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `public static <K> Number getNumber(final Map<? super K, ?> map, final K key)`


        <!-- 683c38d4-9f1d-11ea-819b-333445793454 <=< ACCEPT -->
        Gets a Number from a Map in a null-safe manner.
        <p>
        If the value is a <code>Number</code> it is returned directly.
        If the value is a <code>String</code> it is converted using
        {@link NumberFormat#parse(String)} on the system default formatter
        returning <code>null</code> if the conversion fails.
        Otherwise, <code>null</code> is returned.
        @param <K>  the key type
        @param map  the map to use
        @param key  the key to look up
        @return the value in the Map as a Number, <code>null</code> if null map input
        <!-- ACCEPT >=> 683c38d4-9f1d-11ea-819b-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `public static <K> Byte getByte(final Map<? super K, ?> map, final K key)`


        <!-- 683c38d5-9f1d-11ea-819c-333445793454 <=< ACCEPT -->
        Gets a Byte from a Map in a null-safe manner.
        <p>
        The Byte is obtained from the results of {@link #getNumber(Map,Object)}.
        @param <K>  the key type
        @param map  the map to use
        @param key  the key to look up
        @return the value in the Map as a Byte, <code>null</code> if null map input
        <!-- ACCEPT >=> 683c38d5-9f1d-11ea-819c-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `public static <K> Short getShort(final Map<? super K, ?> map, final K key)`


        <!-- 683c38d6-9f1d-11ea-819d-333445793454 <=< ACCEPT -->
        Gets a Short from a Map in a null-safe manner.
        <p>
        The Short is obtained from the results of {@link #getNumber(Map,Object)}.
        @param <K>  the key type
        @param map  the map to use
        @param key  the key to look up
        @return the value in the Map as a Short, <code>null</code> if null map input
        <!-- ACCEPT >=> 683c38d6-9f1d-11ea-819d-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `public static <K> Integer getInteger(final Map<? super K, ?> map, final K key)`


        <!-- 683c38d7-9f1d-11ea-819e-333445793454 <=< ACCEPT -->
        Gets a Integer from a Map in a null-safe manner.
        <p>
        The Integer is obtained from the results of {@link #getNumber(Map,Object)}.
        @param <K>  the key type
        @param map  the map to use
        @param key  the key to look up
        @return the value in the Map as a Integer, <code>null</code> if null map input
        <!-- ACCEPT >=> 683c38d7-9f1d-11ea-819e-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `public static <K> Long getLong(final Map<? super K, ?> map, final K key)`


        <!-- 683c38d8-9f1d-11ea-819f-333445793454 <=< ACCEPT -->
        Gets a Long from a Map in a null-safe manner.
        <p>
        The Long is obtained from the results of {@link #getNumber(Map,Object)}.
        @param <K>  the key type
        @param map  the map to use
        @param key  the key to look up
        @return the value in the Map as a Long, <code>null</code> if null map input
        <!-- ACCEPT >=> 683c38d8-9f1d-11ea-819f-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `public static <K> Float getFloat(final Map<? super K, ?> map, final K key)`


        <!-- 683c38d9-9f1d-11ea-81a0-333445793454 <=< ACCEPT -->
        Gets a Float from a Map in a null-safe manner.
        <p>
        The Float is obtained from the results of {@link #getNumber(Map,Object)}.
        @param <K>  the key type
        @param map  the map to use
        @param key  the key to look up
        @return the value in the Map as a Float, <code>null</code> if null map input
        <!-- ACCEPT >=> 683c38d9-9f1d-11ea-81a0-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `public static <K> Double getDouble(final Map<? super K, ?> map, final K key)`


        <!-- 683c38da-9f1d-11ea-81a1-333445793454 <=< ACCEPT -->
        Gets a Double from a Map in a null-safe manner.
        <p>
        The Double is obtained from the results of {@link #getNumber(Map,Object)}.
        @param <K>  the key type
        @param map  the map to use
        @param key  the key to look up
        @return the value in the Map as a Double, <code>null</code> if null map input
        <!-- ACCEPT >=> 683c38da-9f1d-11ea-81a1-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key)`


        <!-- 683c38db-9f1d-11ea-81a2-333445793454 <=< ACCEPT -->
        Gets a Map from a Map in a null-safe manner.
        <p>
        If the value returned from the specified map is not a Map then
        <code>null</code> is returned.
        @param <K>  the key type
        @param map  the map to use
        @param key  the key to look up
        @return the value in the Map as a Map, <code>null</code> if null map input
        <!-- ACCEPT >=> 683c38db-9f1d-11ea-81a2-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `public static <K, V> V getObject(final Map<K, V> map, final K key, final V defaultValue)`


        <!-- 683c38dc-9f1d-11ea-81a3-333445793454 <=< ACCEPT -->
        Looks up the given key in the given map, converting null into the
        given default value.
        @param <K>  the key type
        @param <V>  the value type
        @param map  the map whose value to look up
        @param key  the key of the value to look up in that map
        @param defaultValue  what to return if the value is null
        @return  the value in the map, or defaultValue if the original value
        is null or the map is null
        <!-- ACCEPT >=> 683c38dc-9f1d-11ea-81a3-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `public static <K> String getString(final Map<? super K, ?> map, final K key, final String defaultValue)`


        <!-- 683c38dd-9f1d-11ea-81a4-333445793454 <=< ACCEPT -->
        Looks up the given key in the given map, converting the result into
        a string, using the default value if the the conversion fails.
        @param <K>  the key type
        @param map  the map whose value to look up
        @param key  the key of the value to look up in that map
        @param defaultValue  what to return if the value is null or if the
        conversion fails
        @return  the value in the map as a string, or defaultValue if the
        original value is null, the map is null or the string conversion fails
        <!-- ACCEPT >=> 683c38dd-9f1d-11ea-81a4-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key, final Boolean defaultValue)`


        <!-- 683c38de-9f1d-11ea-81a5-333445793454 <=< ACCEPT -->
        Looks up the given key in the given map, converting the result into
        a boolean, using the default value if the the conversion fails.
        @param <K>  the key type
        @param map  the map whose value to look up
        @param key  the key of the value to look up in that map
        @param defaultValue  what to return if the value is null or if the
        conversion fails
        @return  the value in the map as a boolean, or defaultValue if the
        original value is null, the map is null or the boolean conversion fails
        <!-- ACCEPT >=> 683c38de-9f1d-11ea-81a5-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `public static <K> Number getNumber(final Map<? super K, ?> map, final K key, final Number defaultValue)`


        <!-- 683c38df-9f1d-11ea-81a6-333445793454 <=< ACCEPT -->
        Looks up the given key in the given map, converting the result into
        a number, using the default value if the the conversion fails.
        @param <K>  the key type
        @param map  the map whose value to look up
        @param key  the key of the value to look up in that map
        @param defaultValue  what to return if the value is null or if the
        conversion fails
        @return  the value in the map as a number, or defaultValue if the
        original value is null, the map is null or the number conversion fails
        <!-- ACCEPT >=> 683c38df-9f1d-11ea-81a6-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `public static <K> Byte getByte(final Map<? super K, ?> map, final K key, final Byte defaultValue)`


        <!-- 683c5fd8-9f1d-11ea-81a7-333445793454 <=< ACCEPT -->
        Looks up the given key in the given map, converting the result into
        a byte, using the default value if the the conversion fails.
        @param <K>  the key type
        @param map  the map whose value to look up
        @param key  the key of the value to look up in that map
        @param defaultValue  what to return if the value is null or if the
        conversion fails
        @return  the value in the map as a number, or defaultValue if the
        original value is null, the map is null or the number conversion fails
        <!-- ACCEPT >=> 683c5fd8-9f1d-11ea-81a7-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `public static <K> Short getShort(final Map<? super K, ?> map, final K key, final Short defaultValue)`


        <!-- 683c5fd9-9f1d-11ea-81a8-333445793454 <=< ACCEPT -->
        Looks up the given key in the given map, converting the result into
        a short, using the default value if the the conversion fails.
        @param <K>  the key type
        @param map  the map whose value to look up
        @param key  the key of the value to look up in that map
        @param defaultValue  what to return if the value is null or if the
        conversion fails
        @return  the value in the map as a number, or defaultValue if the
        original value is null, the map is null or the number conversion fails
        <!-- ACCEPT >=> 683c5fd9-9f1d-11ea-81a8-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `public static <K> Integer getInteger(final Map<? super K, ?> map, final K key, final Integer defaultValue)`


        <!-- 683c5fda-9f1d-11ea-81a9-333445793454 <=< ACCEPT -->
        Looks up the given key in the given map, converting the result into
        an integer, using the default value if the the conversion fails.
        @param <K>  the key type
        @param map  the map whose value to look up
        @param key  the key of the value to look up in that map
        @param defaultValue  what to return if the value is null or if the
        conversion fails
        @return  the value in the map as a number, or defaultValue if the
        original value is null, the map is null or the number conversion fails
        <!-- ACCEPT >=> 683c5fda-9f1d-11ea-81a9-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `public static <K> Long getLong(final Map<? super K, ?> map, final K key, final Long defaultValue)`


        <!-- 683c5fdb-9f1d-11ea-81aa-333445793454 <=< ACCEPT -->
        Looks up the given key in the given map, converting the result into
        a long, using the default value if the the conversion fails.
        @param <K>  the key type
        @param map  the map whose value to look up
        @param key  the key of the value to look up in that map
        @param defaultValue  what to return if the value is null or if the
        conversion fails
        @return  the value in the map as a number, or defaultValue if the
        original value is null, the map is null or the number conversion fails
        <!-- ACCEPT >=> 683c5fdb-9f1d-11ea-81aa-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `public static <K> Float getFloat(final Map<? super K, ?> map, final K key, final Float defaultValue)`


        <!-- 683c5fdc-9f1d-11ea-81ab-333445793454 <=< ACCEPT -->
        Looks up the given key in the given map, converting the result into
        a float, using the default value if the the conversion fails.
        @param <K>  the key type
        @param map  the map whose value to look up
        @param key  the key of the value to look up in that map
        @param defaultValue  what to return if the value is null or if the
        conversion fails
        @return  the value in the map as a number, or defaultValue if the
        original value is null, the map is null or the number conversion fails
        <!-- ACCEPT >=> 683c5fdc-9f1d-11ea-81ab-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `public static <K> Double getDouble(final Map<? super K, ?> map, final K key, final Double defaultValue)`


        <!-- 683c5fdd-9f1d-11ea-81ac-333445793454 <=< ACCEPT -->
        Looks up the given key in the given map, converting the result into
        a double, using the default value if the the conversion fails.
        @param <K>  the key type
        @param map  the map whose value to look up
        @param key  the key of the value to look up in that map
        @param defaultValue  what to return if the value is null or if the
        conversion fails
        @return  the value in the map as a number, or defaultValue if the
        original value is null, the map is null or the number conversion fails
        <!-- ACCEPT >=> 683c5fdd-9f1d-11ea-81ac-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key, final Map<?, ?> defaultValue)`


        <!-- 683c5fde-9f1d-11ea-81ad-333445793454 <=< ACCEPT -->
        Looks up the given key in the given map, converting the result into
        a map, using the default value if the the conversion fails.
        @param <K>  the key type
        @param map  the map whose value to look up
        @param key  the key of the value to look up in that map
        @param defaultValue  what to return if the value is null or if the
        conversion fails
        @return  the value in the map as a number, or defaultValue if the
        original value is null, the map is null or the map conversion fails
        <!-- ACCEPT >=> 683c5fde-9f1d-11ea-81ad-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key)`


        <!-- 683c5fdf-9f1d-11ea-81ae-333445793454 <=< ACCEPT -->
        Gets a boolean from a Map in a null-safe manner.
        <p>
        If the value is a <code>Boolean</code> its value is returned.
        If the value is a <code>String</code> and it equals 'true' ignoring case
        then <code>true</code> is returned, otherwise <code>false</code>.
        If the value is a <code>Number</code> an integer zero value returns
        <code>false</code> and non-zero returns <code>true</code>.
        Otherwise, <code>false</code> is returned.
        @param <K>  the key type
        @param map  the map to use
        @param key  the key to look up
        @return the value in the Map as a Boolean, <code>false</code> if null map input
        <!-- ACCEPT >=> 683c5fdf-9f1d-11ea-81ae-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `public static <K> byte getByteValue(final Map<? super K, ?> map, final K key)`


        <!-- 683c5fe0-9f1d-11ea-81af-333445793454 <=< ACCEPT -->
        Gets a byte from a Map in a null-safe manner.
        <p>
        The byte is obtained from the results of {@link #getNumber(Map,Object)}.
        @param <K>  the key type
        @param map  the map to use
        @param key  the key to look up
        @return the value in the Map as a byte, <code>0</code> if null map input
        <!-- ACCEPT >=> 683c5fe0-9f1d-11ea-81af-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `public static <K> short getShortValue(final Map<? super K, ?> map, final K key)`


        <!-- 683c5fe1-9f1d-11ea-81b0-333445793454 <=< ACCEPT -->
        Gets a short from a Map in a null-safe manner.
        <p>
        The short is obtained from the results of {@link #getNumber(Map,Object)}.
        @param <K>  the key type
        @param map  the map to use
        @param key  the key to look up
        @return the value in the Map as a short, <code>0</code> if null map input
        <!-- ACCEPT >=> 683c5fe1-9f1d-11ea-81b0-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `public static <K> int getIntValue(final Map<? super K, ?> map, final K key)`


        <!-- 683c5fe2-9f1d-11ea-81b1-333445793454 <=< ACCEPT -->
        Gets an int from a Map in a null-safe manner.
        <p>
        The int is obtained from the results of {@link #getNumber(Map,Object)}.
        @param <K>  the key type
        @param map  the map to use
        @param key  the key to look up
        @return the value in the Map as an int, <code>0</code> if null map input
        <!-- ACCEPT >=> 683c5fe2-9f1d-11ea-81b1-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `public static <K> long getLongValue(final Map<? super K, ?> map, final K key)`


        <!-- 683c5fe3-9f1d-11ea-81b2-333445793454 <=< ACCEPT -->
        Gets a long from a Map in a null-safe manner.
        <p>
        The long is obtained from the results of {@link #getNumber(Map,Object)}.
        @param <K>  the key type
        @param map  the map to use
        @param key  the key to look up
        @return the value in the Map as a long, <code>0L</code> if null map input
        <!-- ACCEPT >=> 683c5fe3-9f1d-11ea-81b2-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `public static <K> float getFloatValue(final Map<? super K, ?> map, final K key)`


        <!-- 683c5fe4-9f1d-11ea-81b3-333445793454 <=< ACCEPT -->
        Gets a float from a Map in a null-safe manner.
        <p>
        The float is obtained from the results of {@link #getNumber(Map,Object)}.
        @param <K>  the key type
        @param map  the map to use
        @param key  the key to look up
        @return the value in the Map as a float, <code>0.0F</code> if null map input
        <!-- ACCEPT >=> 683c5fe4-9f1d-11ea-81b3-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key)`


        <!-- 683c5fe5-9f1d-11ea-81b4-333445793454 <=< ACCEPT -->
        Gets a double from a Map in a null-safe manner.
        <p>
        The double is obtained from the results of {@link #getNumber(Map,Object)}.
        @param <K>  the key type
        @param map  the map to use
        @param key  the key to look up
        @return the value in the Map as a double, <code>0.0</code> if null map input
        <!-- ACCEPT >=> 683c5fe5-9f1d-11ea-81b4-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key, final boolean defaultValue)`


        <!-- 683c5fe6-9f1d-11ea-81b5-333445793454 <=< ACCEPT -->
        Gets a boolean from a Map in a null-safe manner,
        using the default value if the the conversion fails.
        <p>
        If the value is a <code>Boolean</code> its value is returned.
        If the value is a <code>String</code> and it equals 'true' ignoring case
        then <code>true</code> is returned, otherwise <code>false</code>.
        If the value is a <code>Number</code> an integer zero value returns
        <code>false</code> and non-zero returns <code>true</code>.
        Otherwise, <code>defaultValue</code> is returned.
        @param <K>  the key type
        @param map  the map to use
        @param key  the key to look up
        @param defaultValue  return if the value is null or if the conversion fails
        @return the value in the Map as a Boolean, <code>defaultValue</code> if null map input
        <!-- ACCEPT >=> 683c5fe6-9f1d-11ea-81b5-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `public static <K> byte getByteValue(final Map<? super K, ?> map, final K key, final byte defaultValue)`


        <!-- 683c5fe7-9f1d-11ea-81b6-333445793454 <=< ACCEPT -->
        Gets a byte from a Map in a null-safe manner,
        using the default value if the the conversion fails.
        <p>
        The byte is obtained from the results of {@link #getNumber(Map,Object)}.
        @param <K>  the key type
        @param map  the map to use
        @param key  the key to look up
        @param defaultValue  return if the value is null or if the conversion fails
        @return the value in the Map as a byte, <code>defaultValue</code> if null map input
        <!-- ACCEPT >=> 683c5fe7-9f1d-11ea-81b6-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `public static <K> short getShortValue(final Map<? super K, ?> map, final K key, final short defaultValue)`


        <!-- 683c86e3-9f1d-11ea-81b7-333445793454 <=< ACCEPT -->
        Gets a short from a Map in a null-safe manner,
        using the default value if the the conversion fails.
        <p>
        The short is obtained from the results of {@link #getNumber(Map,Object)}.
        @param <K>  the key type
        @param map  the map to use
        @param key  the key to look up
        @param defaultValue  return if the value is null or if the conversion fails
        @return the value in the Map as a short, <code>defaultValue</code> if null map input
        <!-- ACCEPT >=> 683c86e3-9f1d-11ea-81b7-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `public static <K> int getIntValue(final Map<? super K, ?> map, final K key, final int defaultValue)`


        <!-- 683c86e4-9f1d-11ea-81b8-333445793454 <=< ACCEPT -->
        Gets an int from a Map in a null-safe manner,
        using the default value if the the conversion fails.
        <p>
        The int is obtained from the results of {@link #getNumber(Map,Object)}.
        @param <K>  the key type
        @param map  the map to use
        @param key  the key to look up
        @param defaultValue  return if the value is null or if the conversion fails
        @return the value in the Map as an int, <code>defaultValue</code> if null map input
        <!-- ACCEPT >=> 683c86e4-9f1d-11ea-81b8-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `public static <K> long getLongValue(final Map<? super K, ?> map, final K key, final long defaultValue)`


        <!-- 683c86e5-9f1d-11ea-81b9-333445793454 <=< ACCEPT -->
        Gets a long from a Map in a null-safe manner,
        using the default value if the the conversion fails.
        <p>
        The long is obtained from the results of {@link #getNumber(Map,Object)}.
        @param <K>  the key type
        @param map  the map to use
        @param key  the key to look up
        @param defaultValue  return if the value is null or if the conversion fails
        @return the value in the Map as a long, <code>defaultValue</code> if null map input
        <!-- ACCEPT >=> 683c86e5-9f1d-11ea-81b9-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `public static <K> float getFloatValue(final Map<? super K, ?> map, final K key, final float defaultValue)`


        <!-- 683c86e6-9f1d-11ea-81ba-333445793454 <=< ACCEPT -->
        Gets a float from a Map in a null-safe manner,
        using the default value if the the conversion fails.
        <p>
        The float is obtained from the results of {@link #getNumber(Map,Object)}.
        @param <K>  the key type
        @param map  the map to use
        @param key  the key to look up
        @param defaultValue  return if the value is null or if the conversion fails
        @return the value in the Map as a float, <code>defaultValue</code> if null map input
        <!-- ACCEPT >=> 683c86e6-9f1d-11ea-81ba-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key, final double defaultValue)`


        <!-- 683c86e7-9f1d-11ea-81bb-333445793454 <=< ACCEPT -->
        Gets a double from a Map in a null-safe manner,
        using the default value if the the conversion fails.
        <p>
        The double is obtained from the results of {@link #getNumber(Map,Object)}.
        @param <K>  the key type
        @param map  the map to use
        @param key  the key to look up
        @param defaultValue  return if the value is null or if the conversion fails
        @return the value in the Map as a double, <code>defaultValue</code> if null map input
        <!-- ACCEPT >=> 683c86e7-9f1d-11ea-81bb-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `public static <K, V> Properties toProperties(final Map<K, V> map)`


        <!-- 683c86e8-9f1d-11ea-81bc-333445793454 <=< ACCEPT -->
        Gets a new Properties object initialised with the values from a Map.
        A null input will return an empty properties object.
        <p>
        A Properties object may only store non-null keys and values, thus if
        the provided map contains either a key or value which is {@code null},
        a {@link NullPointerException} will be thrown.
        @param <K>  the key type
        @param <V>  the value type
        @param map  the map to convert to a Properties object
        @return the properties object
        @throws NullPointerException if a key or value in the provided map is {@code null}
        <!-- ACCEPT >=> 683c86e8-9f1d-11ea-81bc-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `public static Map<String, Object> toMap(final ResourceBundle resourceBundle)`


        <!-- 683c86e9-9f1d-11ea-81bd-333445793454 <=< ACCEPT -->
        Creates a new HashMap using data copied from a ResourceBundle.
        @param resourceBundle  the resource bundle to convert, may not be null
        @return the hashmap containing the data
        @throws NullPointerException if the bundle is null
        <!-- ACCEPT >=> 683c86e9-9f1d-11ea-81bd-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `public static void verbosePrint(final PrintStream out, final Object label, final Map<?, ?> map)`


        <!-- 683c86ea-9f1d-11ea-81be-333445793454 <=< ACCEPT -->
        Prints the given map with nice line breaks.
        <p>
        This method prints a nicely formatted String describing the Map.
        Each map entry will be printed with key and value.
        When the value is a Map, recursive behaviour occurs.
        <p>
        This method is NOT thread-safe in any special way. You must manually
        synchronize on either this class or the stream as required.
        @param out  the stream to print to, must not be null
        @param label  The label to be used, may be <code>null</code>.
        If <code>null</code>, the label is not output.
        It typically represents the name of the property in a bean or similar.
        @param map  The map to print, may be <code>null</code>.
        If <code>null</code>, the text 'null' is output.
        @throws NullPointerException if the stream is <code>null</code>
        <!-- ACCEPT >=> 683c86ea-9f1d-11ea-81be-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `public static void debugPrint(final PrintStream out, final Object label, final Map<?, ?> map)`


        <!-- 683c86eb-9f1d-11ea-81bf-333445793454 <=< ACCEPT -->
        Prints the given map with nice line breaks.
        <p>
        This method prints a nicely formatted String describing the Map.
        Each map entry will be printed with key, value and value classname.
        When the value is a Map, recursive behaviour occurs.
        <p>
        This method is NOT thread-safe in any special way. You must manually
        synchronize on either this class or the stream as required.
        @param out  the stream to print to, must not be null
        @param label  The label to be used, may be <code>null</code>.
        If <code>null</code>, the label is not output.
        It typically represents the name of the property in a bean or similar.
        @param map  The map to print, may be <code>null</code>.
        If <code>null</code>, the text 'null' is output.
        @throws NullPointerException if the stream is <code>null</code>
        <!-- ACCEPT >=> 683c86eb-9f1d-11ea-81bf-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `final Deque<Map<?, ?>> lineage, final boolean debug)`


        <!-- 683c86ec-9f1d-11ea-81c0-333445793454 <=< ACCEPT -->
        Implementation providing functionality for {@link #debugPrint} and for
        {@link #verbosePrint}.  This prints the given map with nice line breaks.
        If the debug flag is true, it additionally prints the type of the object
        value.  If the contents of a map include the map itself, then the text
        <em>(this Map)</em> is printed out.  If the contents include a
        parent container of the map, the the text <em>(ancestor[i] Map)</em> is
        printed, where i actually indicates the number of levels which must be
        traversed in the sequential list of ancestors (e.g. father, grandfather,
        great-grandfather, etc).
        @param out  the stream to print to
        @param label  the label to be used, may be <code>null</code>.
        If <code>null</code>, the label is not output.
        It typically represents the name of the property in a bean or similar.
        @param map  the map to print, may be <code>null</code>.
        If <code>null</code>, the text 'null' is output
        @param lineage  a stack consisting of any maps in which the previous
        argument is contained. This is checked to avoid infinite recursion when
        printing the output
        @param debug  flag indicating whether type names should be output.
        @throws NullPointerException if the stream is <code>null</code>
        <!-- ACCEPT >=> 683c86ec-9f1d-11ea-81c0-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `private static void printIndent(final PrintStream out, final int indent)`


        <!-- 683c86ed-9f1d-11ea-81c1-333445793454 <=< ACCEPT -->
        Writes indentation to the given stream.
        @param out  the stream to indent
        <!-- ACCEPT >=> 683c86ed-9f1d-11ea-81c1-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `public static <K, V> Map<V, K> invertMap(final Map<K, V> map)`


        <!-- 683c86ee-9f1d-11ea-81c2-333445793454 <=< ACCEPT -->
        Inverts the supplied map returning a new HashMap such that the keys of
        the input are swapped with the values.
        <p>
        This operation assumes that the inverse mapping is well defined.
        If the input map had multiple entries with the same value mapped to
        different keys, the returned map will map one of those keys to the
        value, but the exact key which will be mapped is undefined.
        @param <K>  the key type
        @param <V>  the value type
        @param map  the map to invert, may not be null
        @return a new HashMap containing the inverted data
        @throws NullPointerException if the map is null
        <!-- ACCEPT >=> 683c86ee-9f1d-11ea-81c2-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `throws NullPointerException`


        <!-- 683c86ef-9f1d-11ea-81c3-333445793454 <=< ACCEPT -->
        Protects against adding null values to a map.
        <p>
        This method checks the value being added to the map, and if it is null
        it is replaced by an empty string.
        <p>
        This could be useful if the map does not accept null values, or for
        receiving data from a source that may provide null or empty string
        which should be held in the same way in the map.
        <p>
        Keys are not validated.
        Note that this method can be used to circumvent the map's
        value type at runtime.
        @param <K>  the key type
        @param map  the map to add to, may not be null
        @param key  the key
        @param value  the value, null converted to ""
        @throws NullPointerException if the map is null
        <!-- ACCEPT >=> 683c86ef-9f1d-11ea-81c3-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array)`


        <!-- 683caded-9f1d-11ea-81c4-333445793454 <=< ACCEPT -->
        Puts all the keys and values from the specified array into the map.
        <p>
        This method is an alternative to the {@link java.util.Map#putAll(java.util.Map)}
        method and constructors. It allows you to build a map from an object array
        of various possible styles.
        <p>
        If the first entry in the object array implements {@link java.util.Map.Entry}
        or {@link KeyValue} then the key and value are added from that object.
        If the first entry in the object array is an object array itself, then
        it is assumed that index 0 in the sub-array is the key and index 1 is the value.
        Otherwise, the array is treated as keys and values in alternate indices.
        <p>
        For example, to create a color map:
        <pre>
        Map colorMap = MapUtils.putAll(new HashMap(), new String[][] {
        {"RED", "#FF0000"},
        {"GREEN", "#00FF00"},
        {"BLUE", "#0000FF"}
        });
        </pre>
        or:
        <pre>
        Map colorMap = MapUtils.putAll(new HashMap(), new String[] {
        "RED", "#FF0000",
        "GREEN", "#00FF00",
        "BLUE", "#0000FF"
        });
        </pre>
        or:
        <pre>
        Map colorMap = MapUtils.putAll(new HashMap(), new Map.Entry[] {
        new DefaultMapEntry("RED", "#FF0000"),
        new DefaultMapEntry("GREEN", "#00FF00"),
        new DefaultMapEntry("BLUE", "#0000FF")
        });
        </pre>
        @param <K>  the key type
        @param <V>  the value type
        @param map  the map to populate, must not be null
        @param array  an array to populate from, null ignored
        @return the input map
        @throws NullPointerException  if map is null
        @throws IllegalArgumentException  if sub-array or entry matching used and an entry is invalid
        @throws ClassCastException if the array contents is mixed
        @since 3.2
        <!-- ACCEPT >=> 683caded-9f1d-11ea-81c4-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `public static <K,V> Map<K,V> emptyIfNull(final Map<K,V> map)`


        <!-- 683cadee-9f1d-11ea-81c5-333445793454 <=< ACCEPT -->
        Returns an immutable empty map if the argument is <code>null</code>,
        or the argument itself otherwise.
        @param <K> the key type
        @param <V> the value type
        @param map the map, possibly <code>null</code>
        @return an empty map if the argument is <code>null</code>
        <!-- ACCEPT >=> 683cadee-9f1d-11ea-81c5-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `public static boolean isEmpty(final Map<?,?> map)`


        <!-- 683cadef-9f1d-11ea-81c6-333445793454 <=< ACCEPT -->
        Null-safe check if the specified map is empty.
        <p>
        Null returns true.
        @param map  the map to check, may be null
        @return true if empty or null
        @since 3.2
        <!-- ACCEPT >=> 683cadef-9f1d-11ea-81c6-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `public static boolean isNotEmpty(final Map<?,?> map)`


        <!-- 683cadf0-9f1d-11ea-81c7-333445793454 <=< ACCEPT -->
        Null-safe check if the specified map is not empty.
        <p>
        Null returns false.
        @param map  the map to check, may be null
        @return true if non-null and non-empty
        @since 3.2
        <!-- ACCEPT >=> 683cadf0-9f1d-11ea-81c7-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `public static <K, V> Map<K, V> synchronizedMap(final Map<K, V> map)`


        <!-- 683cadf1-9f1d-11ea-81c8-333445793454 <=< ACCEPT -->
        Returns a synchronized map backed by the given map.
        <p>
        You must manually synchronize on the returned buffer's iterator to
        avoid non-deterministic behavior:
        <pre>
        Map m = MapUtils.synchronizedMap(myMap);
        Set s = m.keySet();  // outside synchronized block
        synchronized (m) {  // synchronized on MAP!
        Iterator i = s.iterator();
        while (i.hasNext()) {
        process (i.next());
        }
        }
        </pre>
        This method uses the implementation in {@link java.util.Collections Collections}.
        @param <K>  the key type
        @param <V>  the value type
        @param map  the map to synchronize, must not be null
        @return a synchronized map backed by the given map
        <!-- ACCEPT >=> 683cadf1-9f1d-11ea-81c8-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)`


        <!-- 683cadf2-9f1d-11ea-81c9-333445793454 <=< ACCEPT -->
        Returns an unmodifiable map backed by the given map.
        <p>
        This method uses the implementation in the decorators subpackage.
        @param <K>  the key type
        @param <V>  the value type
        @param map  the map to make unmodifiable, must not be null
        @return an unmodifiable map backed by the given map
        @throws NullPointerException  if the map is null
        <!-- ACCEPT >=> 683cadf2-9f1d-11ea-81c9-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `final Predicate<? super V> valuePred)`


        <!-- 683cadf3-9f1d-11ea-81ca-333445793454 <=< ACCEPT -->
        Returns a predicated (validating) map backed by the given map.
        <p>
        Only objects that pass the tests in the given predicates can be added to the map.
        Trying to add an invalid object results in an IllegalArgumentException.
        Keys must pass the key predicate, values must pass the value predicate.
        It is important not to use the original map after invoking this method,
        as it is a backdoor for adding invalid objects.
        @param <K>  the key type
        @param <V>  the value type
        @param map  the map to predicate, must not be null
        @param keyPred  the predicate for keys, null means no check
        @param valuePred  the predicate for values, null means no check
        @return a predicated map backed by the given map
        @throws NullPointerException  if the Map is null
        <!-- ACCEPT >=> 683cadf3-9f1d-11ea-81ca-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `final Transformer<? super V, ? extends V> valueTransformer)`


        <!-- 683cadf4-9f1d-11ea-81cb-333445793454 <=< ACCEPT -->
        Returns a transformed map backed by the given map.
        <p>
        This method returns a new map (decorating the specified map) that
        will transform any new entries added to it.
        Existing entries in the specified map will not be transformed.
        If you want that behaviour, see {@link TransformedMap#transformedMap}.
        <p>
        Each object is passed through the transformers as it is added to the
        Map. It is important not to use the original map after invoking this
        method, as it is a backdoor for adding untransformed objects.
        <p>
        If there are any elements already in the map being decorated, they
        are NOT transformed.
        @param <K>  the key type
        @param <V>  the value type
        @param map  the map to transform, must not be null, typically empty
        @param keyTransformer  the transformer for the map keys, null means no transformation
        @param valueTransformer  the transformer for the map values, null means no transformation
        @return a transformed map backed by the given map
        @throws NullPointerException  if the Map is null
        <!-- ACCEPT >=> 683cadf4-9f1d-11ea-81cb-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `public static <K, V> IterableMap<K, V> fixedSizeMap(final Map<K, V> map)`


        <!-- 683cadf5-9f1d-11ea-81cc-333445793454 <=< ACCEPT -->
        Returns a fixed-sized map backed by the given map.
        Elements may not be added or removed from the returned map, but
        existing elements can be changed (for instance, via the
        {@link Map#put(Object,Object)} method).
        @param <K>  the key type
        @param <V>  the value type
        @param map  the map whose size to fix, must not be null
        @return a fixed-size map backed by that map
        @throws NullPointerException  if the Map is null
        <!-- ACCEPT >=> 683cadf5-9f1d-11ea-81cc-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)`


        <!-- 683cadf6-9f1d-11ea-81cd-333445793454 <=< ACCEPT -->
        Returns a "lazy" map whose values will be created on demand.
        <p>
        When the key passed to the returned map's {@link Map#get(Object)}
        method is not present in the map, then the factory will be used
        to create a new object and that object will become the value
        associated with that key.
        <p>
        For instance:
        <pre>
        Factory factory = new Factory() {
        public Object create() {
        return new Date();
        }
        }
        Map lazyMap = MapUtils.lazyMap(new HashMap(), factory);
        Object obj = lazyMap.get("test");
        </pre>
        After the above code is executed, <code>obj</code> will contain
        a new <code>Date</code> instance.  Furthermore, that <code>Date</code>
        instance is the value for the <code>"test"</code> key in the map.
        @param <K>  the key type
        @param <V>  the value type
        @param map  the map to make lazy, must not be null
        @param factory  the factory for creating new objects, must not be null
        @return a lazy map backed by the given map
        @throws NullPointerException  if the Map or Factory is null
        <!-- ACCEPT >=> 683cadf6-9f1d-11ea-81cd-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `final Transformer<? super K, ? extends V> transformerFactory)`


        <!-- 683cadf7-9f1d-11ea-81ce-333445793454 <=< ACCEPT -->
        Returns a "lazy" map whose values will be created on demand.
        <p>
        When the key passed to the returned map's {@link Map#get(Object)}
        method is not present in the map, then the factory will be used
        to create a new object and that object will become the value
        associated with that key. The factory is a {@link Transformer}
        that will be passed the key which it must transform into the value.
        <p>
        For instance:
        <pre>
        Transformer factory = new Transformer() {
        public Object transform(Object mapKey) {
        return new File(mapKey);
        }
        }
        Map lazyMap = MapUtils.lazyMap(new HashMap(), factory);
        Object obj = lazyMap.get("C:/dev");
        </pre>
        After the above code is executed, <code>obj</code> will contain
        a new <code>File</code> instance for the C drive dev directory.
        Furthermore, that <code>File</code> instance is the value for the
        <code>"C:/dev"</code> key in the map.
        <p>
        If a lazy map is wrapped by a synchronized map, the result is a simple
        synchronized cache. When an object is not is the cache, the cache itself
        calls back to the factory Transformer to populate itself, all within the
        same synchronized block.
        @param <K>  the key type
        @param <V>  the value type
        @param map  the map to make lazy, must not be null
        @param transformerFactory  the factory for creating new objects, must not be null
        @return a lazy map backed by the given map
        @throws NullPointerException  if the Map or Transformer is null
        <!-- ACCEPT >=> 683cadf7-9f1d-11ea-81ce-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `public static <K, V> OrderedMap<K, V> orderedMap(final Map<K, V> map)`


        <!-- 683cadf8-9f1d-11ea-81cf-333445793454 <=< ACCEPT -->
        Returns a map that maintains the order of keys that are added
        backed by the given map.
        <p>
        If a key is added twice, the order is determined by the first add.
        The order is observed through the keySet, values and entrySet.
        @param <K>  the key type
        @param <V>  the value type
        @param map  the map to order, must not be null
        @return an ordered map backed by the given map
        @throws NullPointerException  if the Map is null
        <!-- ACCEPT >=> 683cadf8-9f1d-11ea-81cf-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)`


        <!-- 683cd4f8-9f1d-11ea-81d0-333445793454 <=< ACCEPT -->
        Creates a mult-value map backed by the given map which returns
        collections of type ArrayList.
        @param <K>  the key type
        @param <V>  the value type
        @param map  the map to decorate
        @return a multi-value map backed by the given map which returns ArrayLists of values.
        @see MultiValueMap
        @since 3.2
        @deprecated since 4.1, use {@link MultiValuedMap} instead
        <!-- ACCEPT >=> 683cd4f8-9f1d-11ea-81d0-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `final Class<C> collectionClass)`


        <!-- 683cd4f9-9f1d-11ea-81d1-333445793454 <=< ACCEPT -->
        Creates a multi-value map backed by the given map which returns
        collections of the specified type.
        @param <K>  the key type
        @param <V>  the value type
        @param <C>  the collection class type
        @param map  the map to decorate
        @param collectionClass  the type of collections to return from the map
        (must contain public no-arg constructor and extend Collection)
        @return a multi-value map backed by the given map which returns collections of the specified type
        @see MultiValueMap
        @since 3.2
        @deprecated since 4.1, use {@link MultiValuedMap} instead
        <!-- ACCEPT >=> 683cd4f9-9f1d-11ea-81d1-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `final Factory<C> collectionFactory)`


        <!-- 683cd4fa-9f1d-11ea-81d2-333445793454 <=< ACCEPT -->
        Creates a multi-value map backed by the given map which returns
        collections created by the specified collection factory.
        @param <K>  the key type
        @param <V>  the value type
        @param <C>  the collection class type
        @param map  the map to decorate
        @param collectionFactory  a factor which creates collection objects
        @return a multi-value map backed by the given map which returns collections
        created by the specified collection factory
        @see MultiValueMap
        @since 3.2
        @deprecated since 4.1, use {@link MultiValuedMap} instead
        <!-- ACCEPT >=> 683cd4fa-9f1d-11ea-81d2-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `public static <K, V> SortedMap<K, V> synchronizedSortedMap(final SortedMap<K, V> map)`


        <!-- 683cd4fb-9f1d-11ea-81d3-333445793454 <=< ACCEPT -->
        Returns a synchronized sorted map backed by the given sorted map.
        <p>
        You must manually synchronize on the returned buffer's iterator to
        avoid non-deterministic behavior:
        <pre>
        Map m = MapUtils.synchronizedSortedMap(myMap);
        Set s = m.keySet();  // outside synchronized block
        synchronized (m) {  // synchronized on MAP!
        Iterator i = s.iterator();
        while (i.hasNext()) {
        process (i.next());
        }
        }
        </pre>
        This method uses the implementation in {@link java.util.Collections Collections}.
        @param <K>  the key type
        @param <V>  the value type
        @param map  the map to synchronize, must not be null
        @return a synchronized map backed by the given map
        @throws NullPointerException  if the map is null
        <!-- ACCEPT >=> 683cd4fb-9f1d-11ea-81d3-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)`


        <!-- 683cd4fc-9f1d-11ea-81d4-333445793454 <=< ACCEPT -->
        Returns an unmodifiable sorted map backed by the given sorted map.
        <p>
        This method uses the implementation in the decorators subpackage.
        @param <K>  the key type
        @param <V>  the value type
        @param map  the sorted map to make unmodifiable, must not be null
        @return an unmodifiable map backed by the given map
        @throws NullPointerException  if the map is null
        <!-- ACCEPT >=> 683cd4fc-9f1d-11ea-81d4-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)`


        <!-- 683cd4fd-9f1d-11ea-81d5-333445793454 <=< ACCEPT -->
        Returns a predicated (validating) sorted map backed by the given map.
        <p>
        Only objects that pass the tests in the given predicates can be added to the map.
        Trying to add an invalid object results in an IllegalArgumentException.
        Keys must pass the key predicate, values must pass the value predicate.
        It is important not to use the original map after invoking this method,
        as it is a backdoor for adding invalid objects.
        @param <K>  the key type
        @param <V>  the value type
        @param map  the map to predicate, must not be null
        @param keyPred  the predicate for keys, null means no check
        @param valuePred  the predicate for values, null means no check
        @return a predicated map backed by the given map
        @throws NullPointerException  if the SortedMap is null
        <!-- ACCEPT >=> 683cd4fd-9f1d-11ea-81d5-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `final Transformer<? super V, ? extends V> valueTransformer)`


        <!-- 683cd4fe-9f1d-11ea-81d6-333445793454 <=< ACCEPT -->
        Returns a transformed sorted map backed by the given map.
        <p>
        This method returns a new sorted map (decorating the specified map) that
        will transform any new entries added to it.
        Existing entries in the specified map will not be transformed.
        If you want that behaviour, see {@link TransformedSortedMap#transformedSortedMap}.
        <p>
        Each object is passed through the transformers as it is added to the
        Map. It is important not to use the original map after invoking this
        method, as it is a backdoor for adding untransformed objects.
        <p>
        If there are any elements already in the map being decorated, they
        are NOT transformed.
        @param <K>  the key type
        @param <V>  the value type
        @param map  the map to transform, must not be null, typically empty
        @param keyTransformer  the transformer for the map keys, null means no transformation
        @param valueTransformer  the transformer for the map values, null means no transformation
        @return a transformed map backed by the given map
        @throws NullPointerException  if the SortedMap is null
        <!-- ACCEPT >=> 683cd4fe-9f1d-11ea-81d6-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `public static <K, V> SortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)`


        <!-- 683cd4ff-9f1d-11ea-81d7-333445793454 <=< ACCEPT -->
        Returns a fixed-sized sorted map backed by the given sorted map.
        Elements may not be added or removed from the returned map, but
        existing elements can be changed (for instance, via the
        {@link Map#put(Object,Object)} method).
        @param <K>  the key type
        @param <V>  the value type
        @param map  the map whose size to fix, must not be null
        @return a fixed-size map backed by that map
        @throws NullPointerException  if the SortedMap is null
        <!-- ACCEPT >=> 683cd4ff-9f1d-11ea-81d7-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)`


        <!-- 683cd500-9f1d-11ea-81d8-333445793454 <=< ACCEPT -->
        Returns a "lazy" sorted map whose values will be created on demand.
        <p>
        When the key passed to the returned map's {@link Map#get(Object)}
        method is not present in the map, then the factory will be used
        to create a new object and that object will become the value
        associated with that key.
        <p>
        For instance:
        <pre>
        Factory factory = new Factory() {
        public Object create() {
        return new Date();
        }
        }
        SortedMap lazy = MapUtils.lazySortedMap(new TreeMap(), factory);
        Object obj = lazy.get("test");
        </pre>
        After the above code is executed, <code>obj</code> will contain
        a new <code>Date</code> instance.  Furthermore, that <code>Date</code>
        instance is the value for the <code>"test"</code> key.
        @param <K>  the key type
        @param <V>  the value type
        @param map  the map to make lazy, must not be null
        @param factory  the factory for creating new objects, must not be null
        @return a lazy map backed by the given map
        @throws NullPointerException  if the SortedMap or Factory is null
        <!-- ACCEPT >=> 683cd500-9f1d-11ea-81d8-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `final Transformer<? super K, ? extends V> transformerFactory)`


        <!-- 683cd501-9f1d-11ea-81d9-333445793454 <=< ACCEPT -->
        Returns a "lazy" sorted map whose values will be created on demand.
        <p>
        When the key passed to the returned map's {@link Map#get(Object)}
        method is not present in the map, then the factory will be used
        to create a new object and that object will become the value
        associated with that key. The factory is a {@link Transformer}
        that will be passed the key which it must transform into the value.
        <p>
        For instance:
        <pre>
        Transformer factory = new Transformer() {
        public Object transform(Object mapKey) {
        return new File(mapKey);
        }
        }
        SortedMap lazy = MapUtils.lazySortedMap(new TreeMap(), factory);
        Object obj = lazy.get("C:/dev");
        </pre>
        After the above code is executed, <code>obj</code> will contain
        a new <code>File</code> instance for the C drive dev directory.
        Furthermore, that <code>File</code> instance is the value for the
        <code>"C:/dev"</code> key in the map.
        <p>
        If a lazy map is wrapped by a synchronized map, the result is a simple
        synchronized cache. When an object is not is the cache, the cache itself
        calls back to the factory Transformer to populate itself, all within the
        same synchronized block.
        @param <K>  the key type
        @param <V>  the value type
        @param map  the map to make lazy, must not be null
        @param transformerFactory  the factory for creating new objects, must not be null
        @return a lazy map backed by the given map
        @throws NullPointerException  if the Map or Transformer is null
        <!-- ACCEPT >=> 683cd501-9f1d-11ea-81d9-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `final Transformer<V, K> keyTransformer)`


        <!-- 683cd502-9f1d-11ea-81da-333445793454 <=< ACCEPT -->
        Populates a Map using the supplied <code>Transformer</code> to transform the elements
        into keys, using the unaltered element as the value in the <code>Map</code>.
        @param <K>  the key type
        @param <V>  the value type
        @param map the <code>Map</code> to populate.
        @param elements the <code>Iterable</code> containing the input values for the map.
        @param keyTransformer the <code>Transformer</code> used to transform the element into a key value
        @throws NullPointerException if the map, elements or transformer are null
        <!-- ACCEPT >=> 683cd502-9f1d-11ea-81da-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `final Transformer<E, V> valueTransformer)`


        <!-- 683cd503-9f1d-11ea-81db-333445793454 <=< ACCEPT -->
        Populates a Map using the supplied <code>Transformer</code>s to transform the elements
        into keys and values.
        @param <K>  the key type
        @param <V>  the value type
        @param <E>  the type of object contained in the {@link Iterable}
        @param map the <code>Map</code> to populate.
        @param elements the <code>Iterable</code> containing the input values for the map.
        @param keyTransformer the <code>Transformer</code> used to transform the element into a key value
        @param valueTransformer the <code>Transformer</code> used to transform the element into a value
        @throws NullPointerException if the map, elements or transformers are null
        <!-- ACCEPT >=> 683cd503-9f1d-11ea-81db-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `final Transformer<V, K> keyTransformer)`


        <!-- 683cfc01-9f1d-11ea-81dc-333445793454 <=< ACCEPT -->
        Populates a MultiMap using the supplied <code>Transformer</code> to transform the elements
        into keys, using the unaltered element as the value in the <code>MultiMap</code>.
        @param <K>  the key type
        @param <V>  the value type
        @param map the <code>MultiMap</code> to populate.
        @param elements the <code>Iterable</code> to use as input values for the map.
        @param keyTransformer the <code>Transformer</code> used to transform the element into a key value
        @throws NullPointerException if the map, elements or transformer are null
        <!-- ACCEPT >=> 683cfc01-9f1d-11ea-81dc-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `final Transformer<E, V> valueTransformer)`


        <!-- 683cfc02-9f1d-11ea-81dd-333445793454 <=< ACCEPT -->
        Populates a MultiMap using the supplied <code>Transformer</code>s to transform the elements
        into keys and values.
        @param <K>  the key type
        @param <V>  the value type
        @param <E>  the type of object contained in the {@link Iterable}
        @param map the <code>MultiMap</code> to populate.
        @param elements the <code>Iterable</code> containing the input values for the map.
        @param keyTransformer the <code>Transformer</code> used to transform the element into a key value
        @param valueTransformer the <code>Transformer</code> used to transform the element into a value
        @throws NullPointerException if the map, collection or transformers are null
        <!-- ACCEPT >=> 683cfc02-9f1d-11ea-81dd-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `public static <K, V> IterableMap<K, V> iterableMap(final Map<K, V> map)`


        <!-- 683cfc03-9f1d-11ea-81de-333445793454 <=< ACCEPT -->
        Get the specified {@link Map} as an {@link IterableMap}.
        @param <K>  the key type
        @param <V>  the value type
        @param map to wrap if necessary.
        @return IterableMap<K, V>
        @throws NullPointerException if map is null
        @since 4.0
        <!-- ACCEPT >=> 683cfc03-9f1d-11ea-81de-333445793454 -->



## Method: `java.org.apache.commons.collections4.MapUtils` / `public static <K, V> IterableSortedMap<K, V> iterableSortedMap(final SortedMap<K, V> sortedMap)`


        <!-- 683cfc04-9f1d-11ea-81df-333445793454 <=< ACCEPT -->
        Get the specified {@link SortedMap} as an {@link IterableSortedMap}.
        @param <K>  the key type
        @param <V>  the value type
        @param sortedMap to wrap if necessary
        @return {@link IterableSortedMap}<K, V>
        @throws NullPointerException if sortedMap is null
        @since 4.0
        <!-- ACCEPT >=> 683cfc04-9f1d-11ea-81df-333445793454 -->



# File: `java.org.apache.commons.collections4.MultiMap`

## Interface: `java.org.apache.commons.collections4.MultiMap` / `public interface MultiMap<K, V> extends IterableMap<K, Object>`


        <!-- 683cfc05-9f1d-11ea-81e0-333445793454 <=< ACCEPT -->
        Defines a map that holds a collection of values against each key.
        <p>
        A <code>MultiMap</code> is a Map with slightly different semantics.
        Putting a value into the map will add the value to a Collection at that key.
        Getting a value will return a Collection, holding all the values put to that key.
        <p>
        For example:
        <pre>
        MultiMap mhm = new MultiValueMap();
        mhm.put(key, "A");
        mhm.put(key, "B");
        mhm.put(key, "C");
        Collection coll = (Collection) mhm.get(key);</pre>
        <p>
        <code>coll</code> will be a collection containing "A", "B", "C".
        <p>
        NOTE: Additional methods were added to this interface in Commons Collections 3.1.
        These were added solely for documentation purposes and do not change the interface
        as they were defined in the superinterface <code>Map</code> anyway.
        @since 2.0
        @version $Id$
        @deprecated since 4.1, use {@link MultiValuedMap} instead
        <!-- ACCEPT >=> 683cfc05-9f1d-11ea-81e0-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiMap` / `boolean removeMapping(K key, V item)`


        <!-- 683cfc06-9f1d-11ea-81e1-333445793454 <=< ACCEPT -->
        Removes a specific value from map.
        <p>
        The item is removed from the collection mapped to the specified key.
        Other values attached to that key are unaffected.
        <p>
        If the last value for a key is removed, implementations typically
        return <code>null</code> from a subsequent <code>get(Object)</code>, however
        they may choose to return an empty collection.
        @param key  the key to remove from
        @param item  the item to remove
        @return {@code true} if the mapping was removed, {@code false} otherwise
        @throws UnsupportedOperationException if the map is unmodifiable
        @throws ClassCastException if the key or value is of an invalid type
        @throws NullPointerException if the key or value is null and null is invalid
        @since 4.0 (signature in previous releases: V remove(K, V))
        <!-- ACCEPT >=> 683cfc06-9f1d-11ea-81e1-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiMap` / `int size()`


        <!-- 683cfc07-9f1d-11ea-81e2-333445793454 <=< ACCEPT -->
        Gets the number of keys in this map.
        <p>
        Implementations typically return only the count of keys in the map
        This cannot be mandated due to backwards compatibility of this interface.
        @return the number of key-collection mappings in this map
        <!-- ACCEPT >=> 683cfc07-9f1d-11ea-81e2-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiMap` / `Object get(Object key)`


        <!-- 683cfc08-9f1d-11ea-81e3-333445793454 <=< ACCEPT -->
        Gets the collection of values associated with the specified key.
        <p>
        The returned value will implement <code>Collection</code>. Implementations
        are free to declare that they return <code>Collection</code> subclasses
        such as <code>List</code> or <code>Set</code>.
        <p>
        Implementations typically return <code>null</code> if no values have
        been mapped to the key, however the implementation may choose to
        return an empty collection.
        <p>
        Implementations may choose to return a clone of the internal collection.
        @param key  the key to retrieve
        @return the <code>Collection</code> of values, implementations should
        return <code>null</code> for no mapping, but may return an empty collection
        @throws ClassCastException if the key is of an invalid type
        @throws NullPointerException if the key is null and null keys are invalid
        <!-- ACCEPT >=> 683cfc08-9f1d-11ea-81e3-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiMap` / `boolean containsValue(Object value)`


        <!-- 683cfc09-9f1d-11ea-81e4-333445793454 <=< ACCEPT -->
        Checks whether the map contains the value specified.
        <p>
        Implementations typically check all collections against all keys for the value.
        This cannot be mandated due to backwards compatibility of this interface.
        @param value  the value to search for
        @return true if the map contains the value
        @throws ClassCastException if the value is of an invalid type
        @throws NullPointerException if the value is null and null value are invalid
        <!-- ACCEPT >=> 683cfc09-9f1d-11ea-81e4-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiMap` / `Object put(K key, Object value)`


        <!-- 683cfc0a-9f1d-11ea-81e5-333445793454 <=< ACCEPT -->
        Adds the value to the collection associated with the specified key.
        <p>
        Unlike a normal <code>Map</code> the previous value is not replaced.
        Instead the new value is added to the collection stored against the key.
        The collection may be a <code>List</code>, <code>Set</code> or other
        collection dependent on implementation.
        @param key  the key to store against
        @param value  the value to add to the collection at the key
        @return typically the value added if the map changed and null if the map did not change
        @throws UnsupportedOperationException if the map is unmodifiable
        @throws ClassCastException if the key or value is of an invalid type
        @throws NullPointerException if the key or value is null and null is invalid
        @throws IllegalArgumentException if the key or value is invalid
        <!-- ACCEPT >=> 683cfc0a-9f1d-11ea-81e5-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiMap` / `Object remove(Object key)`


        <!-- 683cfc0b-9f1d-11ea-81e6-333445793454 <=< ACCEPT -->
        Removes all values associated with the specified key.
        <p>
        Implementations typically return <code>null</code> from a subsequent
        <code>get(Object)</code>, however they may choose to return an empty collection.
        @param key  the key to remove values from
        @return the <code>Collection</code> of values removed, implementations should
        return <code>null</code> for no mapping found, but may return an empty collection
        @throws UnsupportedOperationException if the map is unmodifiable
        @throws ClassCastException if the key is of an invalid type
        @throws NullPointerException if the key is null and null keys are invalid
        <!-- ACCEPT >=> 683cfc0b-9f1d-11ea-81e6-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiMap` / `Collection<Object> values()`


        <!-- 683cfc0c-9f1d-11ea-81e7-333445793454 <=< ACCEPT -->
        Gets a collection containing all the values in the map.
        <p>
        Implementations typically return a collection containing the combination
        of values from all keys.
        This cannot be mandated due to backwards compatibility of this interface.
        @return a collection view of the values contained in this map
        <!-- ACCEPT >=> 683cfc0c-9f1d-11ea-81e7-333445793454 -->



# File: `java.org.apache.commons.collections4.MultiMapUtils`

## Class: `java.org.apache.commons.collections4.MultiMapUtils` / `public class MultiMapUtils`


        <!-- 683cfc0d-9f1d-11ea-81e8-333445793454 <=< ACCEPT -->
        Provides utility methods and decorators for {@link MultiValuedMap} instances.
        <p>
        It contains various type safe and null safe methods. Additionally, it provides
        the following decorators:
        <ul>
        <li>{@link #unmodifiableMultiValuedMap(MultiValuedMap)}</li>
        <li>{@link #transformedMultiValuedMap(MultiValuedMap, Transformer, Transformer)}</li>
        </ul>
        @since 4.1
        @version $Id$
        <!-- ACCEPT >=> 683cfc0d-9f1d-11ea-81e8-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.MultiMapUtils` / `private MultiMapUtils()`


        <!-- 683cfc0e-9f1d-11ea-81e9-333445793454 <=< ACCEPT -->
        <code>MultiMapUtils</code> should not normally be instantiated.
        <!-- ACCEPT >=> 683cfc0e-9f1d-11ea-81e9-333445793454 -->



## Field: `java.org.apache.commons.collections4.MultiMapUtils` / `public static final MultiValuedMap EMPTY_MULTI_VALUED_MAP`


        <!-- 683cfc0f-9f1d-11ea-81ea-333445793454 <=< ACCEPT -->
        An empty {@link UnmodifiableMultiValuedMap}.
        <!-- ACCEPT >=> 683cfc0f-9f1d-11ea-81ea-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiMapUtils` / `public static <K, V> MultiValuedMap<K, V> emptyMultiValuedMap()`


        <!-- 683cfc10-9f1d-11ea-81eb-333445793454 <=< ACCEPT -->
        Returns immutable EMPTY_MULTI_VALUED_MAP with generic type safety.
        @param <K> the type of key in the map
        @param <V> the type of value in the map
        @return immutable and empty <code>MultiValuedMap</code>
        <!-- ACCEPT >=> 683cfc10-9f1d-11ea-81eb-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiMapUtils` / `public static <K, V> MultiValuedMap<K, V> emptyIfNull(final MultiValuedMap<K, V> map)`


        <!-- 683d230b-9f1d-11ea-81ec-333445793454 <=< ACCEPT -->
        Returns an immutable empty <code>MultiValuedMap</code> if the argument is
        <code>null</code>, or the argument itself otherwise.
        @param <K> the type of key in the map
        @param <V> the type of value in the map
        @param map  the map, may be null
        @return an empty {@link MultiValuedMap} if the argument is null
        <!-- ACCEPT >=> 683d230b-9f1d-11ea-81ec-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiMapUtils` / `public static boolean isEmpty(final MultiValuedMap<?, ?> map)`


        <!-- 683d230c-9f1d-11ea-81ed-333445793454 <=< ACCEPT -->
        Null-safe check if the specified <code>MultiValuedMap</code> is empty.
        <p>
        If the provided map is null, returns true.
        @param map  the map to check, may be null
        @return true if the map is empty or null
        <!-- ACCEPT >=> 683d230c-9f1d-11ea-81ed-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiMapUtils` / `public static <K, V> Collection<V> getCollection(final MultiValuedMap<K, V> map, final K key)`


        <!-- 683d230d-9f1d-11ea-81ee-333445793454 <=< ACCEPT -->
        Gets a Collection from <code>MultiValuedMap</code> in a null-safe manner.
        @param <K> the key type
        @param <V> the value type
        @param map  the {@link MultiValuedMap} to use
        @param key  the key to look up
        @return the Collection in the {@link MultiValuedMap}, or null if input map is null
        <!-- ACCEPT >=> 683d230d-9f1d-11ea-81ee-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiMapUtils` / `public static <K, V> List<V> getValuesAsList(final MultiValuedMap<K, V> map, final K key)`


        <!-- 683d230e-9f1d-11ea-81ef-333445793454 <=< ACCEPT -->
        Gets a List from <code>MultiValuedMap</code> in a null-safe manner.
        @param <K> the key type
        @param <V> the value type
        @param map  the {@link MultiValuedMap} to use
        @param key  the key to look up
        @return the Collection in the {@link MultiValuedMap} as List, or null if input map is null
        <!-- ACCEPT >=> 683d230e-9f1d-11ea-81ef-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiMapUtils` / `public static <K, V> Set<V> getValuesAsSet(final MultiValuedMap<K, V> map, final K key)`


        <!-- 683d230f-9f1d-11ea-81f0-333445793454 <=< ACCEPT -->
        Gets a Set from <code>MultiValuedMap</code> in a null-safe manner.
        @param <K> the key type
        @param <V> the value type
        @param map  the {@link MultiValuedMap} to use
        @param key  the key to look up
        @return the Collection in the {@link MultiValuedMap} as Set, or null if input map is null
        <!-- ACCEPT >=> 683d230f-9f1d-11ea-81f0-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiMapUtils` / `public static <K, V> Bag<V> getValuesAsBag(final MultiValuedMap<K, V> map, final K key)`


        <!-- 683d2310-9f1d-11ea-81f1-333445793454 <=< ACCEPT -->
        Gets a Bag from <code>MultiValuedMap</code> in a null-safe manner.
        @param <K> the key type
        @param <V> the value type
        @param map  the {@link MultiValuedMap} to use
        @param key  the key to look up
        @return the Collection in the {@link MultiValuedMap} as Bag, or null if input map is null
        <!-- ACCEPT >=> 683d2310-9f1d-11ea-81f1-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiMapUtils` / `public static <K, V> ListValuedMap<K, V> newListValuedHashMap()`


        <!-- 683d2311-9f1d-11ea-81f2-333445793454 <=< ACCEPT -->
        Creates a {@link ListValuedMap} with an {@link java.util.ArrayList ArrayList} as
        collection class to store the values mapped to a key.
        @param <K> the key type
        @param <V> the value type
        @return a new <code>ListValuedMap</code>
        <!-- ACCEPT >=> 683d2311-9f1d-11ea-81f2-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiMapUtils` / `public static <K, V> SetValuedMap<K, V> newSetValuedHashMap()`


        <!-- 683d2312-9f1d-11ea-81f3-333445793454 <=< ACCEPT -->
        Creates a {@link SetValuedMap} with an {@link java.util.HashSet HashSet} as
        collection class to store the values mapped to a key.
        @param <K> the key type
        @param <V> the value type
        @return a new {@link SetValuedMap}
        <!-- ACCEPT >=> 683d2312-9f1d-11ea-81f3-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiMapUtils` / `final MultiValuedMap<? extends K, ? extends V> map)`


        <!-- 683d2313-9f1d-11ea-81f4-333445793454 <=< ACCEPT -->
        Returns an <code>UnmodifiableMultiValuedMap</code> backed by the given
        map.
        @param <K> the key type
        @param <V> the value type
        @param map  the {@link MultiValuedMap} to decorate, must not be null
        @return an unmodifiable {@link MultiValuedMap} backed by the provided map
        @throws NullPointerException if map is null
        <!-- ACCEPT >=> 683d2313-9f1d-11ea-81f4-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiMapUtils` / `final Transformer<? super V, ? extends V> valueTransformer)`


        <!-- 683d2314-9f1d-11ea-81f5-333445793454 <=< ACCEPT -->
        Returns a <code>TransformedMultiValuedMap</code> backed by the given map.
        <p>
        This method returns a new <code>MultiValuedMap</code> (decorating the
        specified map) that will transform any new entries added to it. Existing
        entries in the specified map will not be transformed. If you want that
        behaviour, see {@link TransformedMultiValuedMap#transformedMap}.
        <p>
        Each object is passed through the transformers as it is added to the Map.
        It is important not to use the original map after invoking this method,
        as it is a back door for adding untransformed objects.
        <p>
        If there are any elements already in the map being decorated, they are
        NOT transformed.
        @param <K> the key type
        @param <V> the value type
        @param map  the {@link MultiValuedMap} to transform, must not be null, typically empty
        @param keyTransformer  the transformer for the map keys, null means no transformation
        @param valueTransformer  the transformer for the map values, null means no transformation
        @return a transformed <code>MultiValuedMap</code> backed by the given map
        @throws NullPointerException if map is null
        <!-- ACCEPT >=> 683d2314-9f1d-11ea-81f5-333445793454 -->



# File: `java.org.apache.commons.collections4.MultiSet`

## Interface: `java.org.apache.commons.collections4.MultiSet` / `public interface MultiSet<E> extends Collection<E>`


        <!-- 683d2315-9f1d-11ea-81f6-333445793454 <=< ACCEPT -->
        Defines a collection that counts the number of times an object appears in
        the collection.
        <p>
        Suppose you have a MultiSet that contains <code>{a, a, b, c}</code>.
        Calling {@link #getCount(Object)} on <code>a</code> would return 2, while
        calling {@link #uniqueSet()} would return <code>{a, b, c}</code>.
        @param <E> the type held in the multiset
        @since 4.1
        @version $Id$
        <!-- ACCEPT >=> 683d2315-9f1d-11ea-81f6-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiSet` / `int getCount(Object object)`


        <!-- 683d2316-9f1d-11ea-81f7-333445793454 <=< ACCEPT -->
        Returns the number of occurrences of the given object currently
        in the MultiSet. If the object does not exist in the multiset,
        return 0.
        @param object  the object to search for
        @return the number of occurrences of the object, zero if not found
        <!-- ACCEPT >=> 683d2316-9f1d-11ea-81f7-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiSet` / `int setCount(E object, int count)`


        <!-- 683d2317-9f1d-11ea-81f8-333445793454 <=< ACCEPT -->
        Sets the number of occurrences of the specified object in the MultiSet
        to the given count.
        <p>
        If the provided count is zero, the object will be removed from the
        {@link #uniqueSet()}.
        @param object  the object to update
        @param count  the number of occurrences of the object
        @return the number of occurrences of the object before this operation, zero
        if the object was not contained in the multiset
        @throws IllegalArgumentException if count is negative
        <!-- ACCEPT >=> 683d2317-9f1d-11ea-81f8-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiSet` / `boolean add(E object)`


        <!-- 683d4a19-9f1d-11ea-81f9-333445793454 <=< ACCEPT -->
        Adds one copy of the specified object to the MultiSet.
        <p>
        If the object is already in the {@link #uniqueSet()} then increment its
        count as reported by {@link #getCount(Object)}. Otherwise add it to the
        {@link #uniqueSet()} and report its count as 1.
        @param object  the object to add
        @return <code>true</code> always, as the size of the MultiSet is increased
        in any case
        <!-- ACCEPT >=> 683d4a19-9f1d-11ea-81f9-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiSet` / `int add(E object, int occurrences)`


        <!-- 683d4a1a-9f1d-11ea-81fa-333445793454 <=< ACCEPT -->
        Adds a number of occurrences of the specified object to the MultiSet.
        <p>
        If the object is already in the {@link #uniqueSet()} then increment its
        count as reported by {@link #getCount(Object)}. Otherwise add it to the
        {@link #uniqueSet()} and report its count as <code>occurrences</code>.
        @param object  the object to add
        @param occurrences  the number of occurrences to add, may be zero,
        in which case no change is made to the multiset
        @return the number of occurrences of the object in the multiset before
        this operation; possibly zero
        @throws IllegalArgumentException if occurrences is negative
        <!-- ACCEPT >=> 683d4a1a-9f1d-11ea-81fa-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiSet` / `boolean remove(Object object)`


        <!-- 683d4a1b-9f1d-11ea-81fb-333445793454 <=< ACCEPT -->
        Removes one occurrence of the given object from the MultiSet.
        <p>
        If the number of occurrences after this operations is reduced
        to zero, the object will be removed from the {@link #uniqueSet()}.
        @param object  the object to remove
        @return <code>true</code> if this call changed the collection
        <!-- ACCEPT >=> 683d4a1b-9f1d-11ea-81fb-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiSet` / `int remove(Object object, int occurrences)`


        <!-- 683d4a1c-9f1d-11ea-81fc-333445793454 <=< ACCEPT -->
        Removes a number of occurrences of the specified object from the MultiSet.
        <p>
        If the number of occurrences to remove is greater than the actual number of
        occurrences in the multiset, the object will be removed from the multiset.
        @param object  the object to remove
        @param occurrences  the number of occurrences to remove, may be zero,
        in which case no change is made to the multiset
        @return the number of occurrences of the object in the multiset
        before the operation; possibly zero
        @throws IllegalArgumentException if occurrences is negative
        <!-- ACCEPT >=> 683d4a1c-9f1d-11ea-81fc-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiSet` / `Set<E> uniqueSet()`


        <!-- 683d4a1d-9f1d-11ea-81fd-333445793454 <=< ACCEPT -->
        Returns a {@link Set} of unique elements in the MultiSet.
        <p>
        Uniqueness constraints are the same as those in {@link java.util.Set}.
        <p>
        The returned set is backed by this multiset, so any change to either
        is immediately reflected in the other. Only removal operations are
        supported, in which case all occurrences of the element are removed
        from the backing multiset.
        @return the Set of unique MultiSet elements
        <!-- ACCEPT >=> 683d4a1d-9f1d-11ea-81fd-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiSet` / `Set<Entry<E>> entrySet()`


        <!-- 683d4a1e-9f1d-11ea-81fe-333445793454 <=< ACCEPT -->
        Returns a {@link Set} of all entries contained in the MultiSet.
        <p>
        The returned set is backed by this multiset, so any change to either
        is immediately reflected in the other.
        @return the Set of MultiSet entries
        <!-- ACCEPT >=> 683d4a1e-9f1d-11ea-81fe-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiSet` / `Iterator<E> iterator()`


        <!-- 683d4a1f-9f1d-11ea-81ff-333445793454 <=< ACCEPT -->
        Returns an {@link Iterator} over the entire set of members,
        including copies due to cardinality. This iterator is fail-fast
        and will not tolerate concurrent modifications.
        @return iterator over all elements in the MultiSet
        <!-- ACCEPT >=> 683d4a1f-9f1d-11ea-81ff-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiSet` / `int size()`


        <!-- 683d4a20-9f1d-11ea-8200-333445793454 <=< ACCEPT -->
        Returns the total number of items in the MultiSet.
        @return the total size of the multiset
        <!-- ACCEPT >=> 683d4a20-9f1d-11ea-8200-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiSet` / `boolean containsAll(Collection<?> coll)`


        <!-- 683d4a21-9f1d-11ea-8201-333445793454 <=< ACCEPT -->
        Returns <code>true</code> if the MultiSet contains at least one
        occurrence for each element contained in the given collection.
        @param coll  the collection to check against
        @return <code>true</code> if the MultiSet contains all the collection
        <!-- ACCEPT >=> 683d4a21-9f1d-11ea-8201-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiSet` / `boolean removeAll(Collection<?> coll)`


        <!-- 683d4a22-9f1d-11ea-8202-333445793454 <=< ACCEPT -->
        Remove all occurrences of all elements from this MultiSet represented
        in the given collection.
        @param coll  the collection of elements to remove
        @return <code>true</code> if this call changed the multiset
        <!-- ACCEPT >=> 683d4a22-9f1d-11ea-8202-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiSet` / `boolean retainAll(Collection<?> coll)`


        <!-- 683d4a23-9f1d-11ea-8203-333445793454 <=< ACCEPT -->
        Remove any elements of this MultiSet that are not contained in the
        given collection.
        @param coll  the collection of elements to retain
        @return <code>true</code> if this call changed the multiset
        <!-- ACCEPT >=> 683d4a23-9f1d-11ea-8203-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiSet` / `boolean equals(Object obj)`


        <!-- 683d4a24-9f1d-11ea-8204-333445793454 <=< ACCEPT -->
        Compares this MultiSet to another object.
        <p>
        This MultiSet equals another object if it is also a MultiSet
        that contains the same number of occurrences of the same elements.
        @param obj  the object to compare to
        @return true if equal
        <!-- ACCEPT >=> 683d4a24-9f1d-11ea-8204-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiSet` / `int hashCode()`


        <!-- 683d4a25-9f1d-11ea-8205-333445793454 <=< ACCEPT -->
        Gets a hash code for the MultiSet compatible with the definition of equals.
        The hash code is defined as the sum total of a hash code for each element.
        The per element hash code is defined as
        <code>(e==null ? 0 : e.hashCode()) ^ noOccurances)</code>.
        @return the hash code of the MultiSet
        <!-- ACCEPT >=> 683d4a25-9f1d-11ea-8205-333445793454 -->



## Interface: `java.org.apache.commons.collections4.MultiSet` / `interface Entry<E>`


        <!-- 683d4a26-9f1d-11ea-8206-333445793454 <=< ACCEPT -->
        An unmodifiable entry for an element and its occurrence as contained in a MultiSet.
        <p>
        The {@link MultiSet#entrySet()} method returns a view of the multiset whose elements
        implements this interface.
        @param <E>  the element type
        <!-- ACCEPT >=> 683d4a26-9f1d-11ea-8206-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiSet` / `E getElement()`


        <!-- 683d4a27-9f1d-11ea-8207-333445793454 <=< ACCEPT -->
        Returns the element corresponding to this entry.
        @return the element corresponding to this entry
        <!-- ACCEPT >=> 683d4a27-9f1d-11ea-8207-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiSet` / `int getCount()`


        <!-- 683d4a28-9f1d-11ea-8208-333445793454 <=< ACCEPT -->
        Returns the number of occurrences for the element of this entry.
        @return the number of occurrences of the element
        <!-- ACCEPT >=> 683d4a28-9f1d-11ea-8208-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiSet` / `boolean equals(Object o)`


        <!-- 683d4a29-9f1d-11ea-8209-333445793454 <=< ACCEPT -->
        Compares the specified object with this entry for equality.
        Returns true if the given object is also a multiset entry
        and the two entries represent the same element with the same
        number of occurrences.
        <p>
        More formally, two entries <tt>e1</tt> and <tt>e2</tt> represent
        the same mapping if
        <pre>
        (e1.getElement()==null ? e2.getElement()==null
        : e1.getElement().equals(e2.getElement())) &amp;&amp;
        (e1.getCount()==e2.getCount())
        </pre>
        @param o object to be compared for equality with this multiset entry
        @return true if the specified object is equal to this multiset entry
        <!-- ACCEPT >=> 683d4a29-9f1d-11ea-8209-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiSet` / `int hashCode()`


        <!-- 683d7134-9f1d-11ea-820a-333445793454 <=< ACCEPT -->
        Returns the hash code value for this multiset entry.
        <p>
        The hash code of a multiset entry <tt>e</tt> is defined to be:
        <pre>
        (e==null ? 0 : e.hashCode()) ^ noOccurances)
        </pre>
        @return the hash code value for this multiset entry
        <!-- ACCEPT >=> 683d7134-9f1d-11ea-820a-333445793454 -->



# File: `java.org.apache.commons.collections4.MultiSetUtils`

## Class: `java.org.apache.commons.collections4.MultiSetUtils` / `public class MultiSetUtils`


        <!-- 683d7135-9f1d-11ea-820b-333445793454 <=< ACCEPT -->
        Provides utility methods and decorators for {@link MultiSet} instances.
        @since 4.1
        @version $Id$
        <!-- ACCEPT >=> 683d7135-9f1d-11ea-820b-333445793454 -->



## Field: `java.org.apache.commons.collections4.MultiSetUtils` / `public static final MultiSet EMPTY_MULTISET`


        <!-- 683d7136-9f1d-11ea-820c-333445793454 <=< ACCEPT -->
        An empty unmodifiable multiset.
        <!-- ACCEPT >=> 683d7136-9f1d-11ea-820c-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.MultiSetUtils` / `private MultiSetUtils()`


        <!-- 683d7137-9f1d-11ea-820d-333445793454 <=< ACCEPT -->
        Instantiation of MultiSetUtils is not intended or required.
        <!-- ACCEPT >=> 683d7137-9f1d-11ea-820d-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiSetUtils` / `public static <E> MultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)`


        <!-- 683d7138-9f1d-11ea-820e-333445793454 <=< ACCEPT -->
        Returns a synchronized (thread-safe) multiset backed by the given multiset.
        In order to guarantee serial access, it is critical that all access to the
        backing multiset is accomplished through the returned multiset.
        <p>
        It is imperative that the user manually synchronize on the returned multiset
        when iterating over it:
        <pre>
        MultiSet multiset = MultiSetUtils.synchronizedMultiSet(new HashMultiSet());
        ...
        synchronized(multiset) {
        Iterator i = multiset.iterator(); // Must be in synchronized block
        while (i.hasNext())
        foo(i.next());
        }
        }
        </pre>
        Failure to follow this advice may result in non-deterministic behavior.
        @param <E> the element type
        @param multiset the multiset to synchronize, must not be null
        @return a synchronized multiset backed by that multiset
        @throws NullPointerException if the MultiSet is null
        <!-- ACCEPT >=> 683d7138-9f1d-11ea-820e-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiSetUtils` / `public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)`


        <!-- 683d7139-9f1d-11ea-820f-333445793454 <=< ACCEPT -->
        Returns an unmodifiable view of the given multiset. Any modification attempts
        to the returned multiset will raise an {@link UnsupportedOperationException}.
        @param <E> the element type
        @param multiset the multiset whose unmodifiable view is to be returned, must not be null
        @return an unmodifiable view of that multiset
        @throws NullPointerException if the MultiSet is null
        <!-- ACCEPT >=> 683d7139-9f1d-11ea-820f-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiSetUtils` / `final Predicate<? super E> predicate)`


        <!-- 683d713a-9f1d-11ea-8210-333445793454 <=< ACCEPT -->
        Returns a predicated (validating) multiset backed by the given multiset.
        <p>
        Only objects that pass the test in the given predicate can be added to
        the multiset. Trying to add an invalid object results in an
        IllegalArgumentException. It is important not to use the original multiset
        after invoking this method, as it is a backdoor for adding invalid
        objects.
        @param <E> the element type
        @param multiset the multiset to predicate, must not be null
        @param predicate the predicate for the multiset, must not be null
        @return a predicated multiset backed by the given multiset
        @throws NullPointerException if the MultiSet or Predicate is null
        <!-- ACCEPT >=> 683d713a-9f1d-11ea-8210-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiSetUtils` / `public static <E> MultiSet<E> emptyMultiSet()`


        <!-- 683d713b-9f1d-11ea-8211-333445793454 <=< ACCEPT -->
        Get an empty <code>MultiSet</code>.
        @param <E> the element type
        @return an empty MultiSet
        <!-- ACCEPT >=> 683d713b-9f1d-11ea-8211-333445793454 -->



# File: `java.org.apache.commons.collections4.MultiValuedMap`

## Interface: `java.org.apache.commons.collections4.MultiValuedMap` / `public interface MultiValuedMap<K, V>`


        <!-- 683d713c-9f1d-11ea-8212-333445793454 <=< ACCEPT -->
        Defines a map that holds a collection of values against each key.
        <p>
        A {@code MultiValuedMap} is a Map with slightly different semantics:
        <ul>
        <li>Putting a value into the map will add the value to a {@link Collection} at that key.</li>
        <li>Getting a value will return a {@link Collection}, holding all the values put to that key.</li>
        </ul>
        <p>
        For example:
        <pre>
        MultiValuedMap&lt;K, String&gt; map = new MultiValuedHashMap&lt;K, String&gt;();
        map.put(key, &quot;A&quot;);
        map.put(key, &quot;B&quot;);
        map.put(key, &quot;C&quot;);
        Collection&lt;String&gt; coll = map.get(key);
        </pre>
        <p>
        <code>coll</code> will be a collection containing "A", "B", "C".
        <p>
        @since 4.1
        @version $Id$
        <!-- ACCEPT >=> 683d713c-9f1d-11ea-8212-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiValuedMap` / `int size()`


        <!-- 683d713d-9f1d-11ea-8213-333445793454 <=< ACCEPT -->
        Gets the total size of the map.
        <p>
        Implementations would return the total size of the map which is the count
        of the values from all keys.
        @return the total size of the map
        <!-- ACCEPT >=> 683d713d-9f1d-11ea-8213-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiValuedMap` / `boolean isEmpty()`


        <!-- 683d713e-9f1d-11ea-8214-333445793454 <=< ACCEPT -->
        Returns {@code true} if this map contains no key-value mappings.
        @return {@code true} if this map contains no key-value mappings
        <!-- ACCEPT >=> 683d713e-9f1d-11ea-8214-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiValuedMap` / `boolean containsKey(Object key)`


        <!-- 683d713f-9f1d-11ea-8215-333445793454 <=< ACCEPT -->
        Returns {@code true} if this map contains a mapping for the specified
        key. More formally, returns {@code true} if and only if this map contains
        a mapping for a key {@code k} such that {@code (key==null ? k==null : key.equals(k))}.
        (There can be at most one such mapping.)
        @param key  key whose presence in this map is to be tested
        @return true if this map contains a mapping for the specified key
        @throws NullPointerException if the specified key is null and this map
        does not permit null keys (optional)
        <!-- ACCEPT >=> 683d713f-9f1d-11ea-8215-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiValuedMap` / `boolean containsValue(Object value)`


        <!-- 683d7140-9f1d-11ea-8216-333445793454 <=< ACCEPT -->
        Checks whether the map contains at least one mapping for the specified value.
        @param value  the value to search for
        @return true if the map contains the value
        @throws NullPointerException if the value is null and null values are not supported
        by the used collection types (optional)
        <!-- ACCEPT >=> 683d7140-9f1d-11ea-8216-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiValuedMap` / `boolean containsMapping(Object key, Object value)`


        <!-- 683d7141-9f1d-11ea-8217-333445793454 <=< ACCEPT -->
        Checks whether the map contains a mapping for the specified key and value.
        @param key  the key to search for
        @param value  the value to search for
        @return true if the map contains the value
        <!-- ACCEPT >=> 683d7141-9f1d-11ea-8217-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiValuedMap` / `Collection<V> get(K key)`


        <!-- 683d7142-9f1d-11ea-8218-333445793454 <=< ACCEPT -->
        Returns a view collection of the values associated with the specified key.
        <p>
        This method will return an <b>empty</b> collection if {@link #containsKey(Object)}
        returns {@code false}. Changes to the returned collection will update the underlying
        {@code MultiValuedMap} and vice-versa.
        @param key  the key to retrieve
        @return the {@code Collection} of values, implementations should
        return an empty collection for no mapping
        @throws NullPointerException if the key is null and null keys are invalid (optional)
        <!-- ACCEPT >=> 683d7142-9f1d-11ea-8218-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiValuedMap` / `boolean put(K key, V value)`


        <!-- 683d983c-9f1d-11ea-8219-333445793454 <=< ACCEPT -->
        Adds a key-value mapping to this multi-valued map.
        <p>
        Unlike a normal {@code Map} the previous value is not replaced.
        Instead the new value is added to the collection stored against the key.
        Depending on the collection type used, duplicate key-value mappings may
        be allowed.
        <p>
        The method will return {@code true} if the size of the multi-valued map
        has been increased because of this operation.
        @param key  the key to store against
        @param value  the value to add to the collection at the key
        @return true if the map changed as a result of this put operation, or false
        if the map already contained the key-value mapping and the collection
        type does not allow duplicate values, e.g. when using a Set
        @throws UnsupportedOperationException if the put operation is not supported by
        this multi-valued map, e.g. if it is unmodifiable
        @throws NullPointerException if the key or value is null and null is invalid (optional)
        @throws IllegalArgumentException if some aspect of the specified key or value prevents
        it from being stored in this multi-valued map
        <!-- ACCEPT >=> 683d983c-9f1d-11ea-8219-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiValuedMap` / `boolean putAll(K key, Iterable<? extends V> values)`


        <!-- 683d983d-9f1d-11ea-821a-333445793454 <=< ACCEPT -->
        Adds a mapping to the specified key for all values contained in the given Iterable.
        @param key  the key to store against
        @param values  the values to add to the collection at the key, may not be null
        @return true if the map changed as a result of this operation
        @throws NullPointerException if the specified iterable is null, or if this map
        does not permit null keys or values, and the specified key or values contain
        null (optional)
        <!-- ACCEPT >=> 683d983d-9f1d-11ea-821a-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiValuedMap` / `boolean putAll(Map<? extends K, ? extends V> map)`


        <!-- 683d983e-9f1d-11ea-821b-333445793454 <=< ACCEPT -->
        Copies all mappings from the specified map to this multi-valued map
        (optional operation).
        <p>
        The effect of this call is equivalent to that of calling
        {@link #put(Object,Object) put(k, v)} on this map once for each mapping
        from key {@code k} to value {@code v} in the specified map.
        <p>
        The behavior of this operation is undefined if the specified map is modified
        while the operation is in progress.
        @param map  mappings to be stored in this map, may not be null
        @return true if the map changed as a result of this operation
        @throws UnsupportedOperationException if the {@code putAll} operation is
        not supported by this map
        @throws NullPointerException if the specified map is null, or if this map
        does not permit null keys or values, and the specified map
        contains null keys or values (optional)
        @throws IllegalArgumentException if some property of a key or value in
        the specified map prevents it from being stored in this map
        <!-- ACCEPT >=> 683d983e-9f1d-11ea-821b-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiValuedMap` / `boolean putAll(MultiValuedMap<? extends K, ? extends V> map)`


        <!-- 683d983f-9f1d-11ea-821c-333445793454 <=< ACCEPT -->
        Copies all mappings from the specified map to this multi-valued map
        (optional operation).
        <p>
        The effect of this call is equivalent to that of calling
        {@link #put(Object,Object) put(k, v)} on this map once for each
        mapping from key {@code k} to value {@code v} in the specified map.
        <p>
        The behavior of this operation is undefined if the specified map is modified
        while the operation is in progress.
        @param map  mappings to be stored in this map, may not be null
        @return true if the map changed as a result of this operation
        @throws UnsupportedOperationException if the {@code putAll} operation is
        not supported by this map
        @throws NullPointerException if the specified map is null, or if this map
        does not permit null keys or values, and the specified map
        contains null keys or values (optional)
        @throws IllegalArgumentException if some property of a key or value in
        the specified map prevents it from being stored in this map
        <!-- ACCEPT >=> 683d983f-9f1d-11ea-821c-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiValuedMap` / `Collection<V> remove(Object key)`


        <!-- 683d9840-9f1d-11ea-821d-333445793454 <=< ACCEPT -->
        Removes all values associated with the specified key.
        <p>
        The returned collection <i>may</i> be modifiable, but updates will not be propagated
        to this multi-valued map. In case no mapping was stored for the specified
        key, an empty, unmodifiable collection will be returned.
        @param key  the key to remove values from
        @return the values that were removed
        @throws UnsupportedOperationException if the map is unmodifiable
        @throws NullPointerException if the key is null and null keys are invalid (optional)
        <!-- ACCEPT >=> 683d9840-9f1d-11ea-821d-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiValuedMap` / `boolean removeMapping(Object key, Object item)`


        <!-- 683d9841-9f1d-11ea-821e-333445793454 <=< ACCEPT -->
        Removes a key-value mapping from the map.
        <p>
        The item is removed from the collection mapped to the specified key.
        Other values attached to that key are unaffected.
        <p>
        If the last value for a key is removed, implementations typically return
        an empty collection from a subsequent <code>get(Object)</code>.
        @param key  the key to remove from
        @param item  the item to remove
        @return true if the mapping was removed, false otherwise
        @throws UnsupportedOperationException if the map is unmodifiable
        @throws NullPointerException if the key or value is null and null is invalid (optional)
        <!-- ACCEPT >=> 683d9841-9f1d-11ea-821e-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiValuedMap` / `void clear()`


        <!-- 683d9842-9f1d-11ea-821f-333445793454 <=< ACCEPT -->
        Removes all of the mappings from this map (optional operation).
        <p>
        The map will be empty after this call returns.
        @throws UnsupportedOperationException if the map is unmodifiable
        <!-- ACCEPT >=> 683d9842-9f1d-11ea-821f-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiValuedMap` / `Collection<Entry<K, V>> entries()`


        <!-- 683d9843-9f1d-11ea-8220-333445793454 <=< ACCEPT -->
        Returns a {@link Collection} view of the mappings contained in this multi-valued map.
        <p>
        The collection is backed by the map, so changes to the map are reflected
        in the collection, and vice-versa.
        @return a set view of the mappings contained in this map
        <!-- ACCEPT >=> 683d9843-9f1d-11ea-8220-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiValuedMap` / `MultiSet<K> keys()`


        <!-- 683d9844-9f1d-11ea-8221-333445793454 <=< ACCEPT -->
        Returns a {@link MultiSet} view of the keys contained in this multi-valued map.
        <p>
        The {@link MultiSet#getCount(Object)} method of the returned multiset will give
        the same result a calling {@code get(Object).size()} for the same key.
        <p>
        This multiset is backed by the map, so any changes in the map are reflected in
        the multiset.
        @return a multiset view of the keys contained in this map
        <!-- ACCEPT >=> 683d9844-9f1d-11ea-8221-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiValuedMap` / `Set<K> keySet()`


        <!-- 683d9845-9f1d-11ea-8222-333445793454 <=< ACCEPT -->
        Returns a {@link Set} view of the keys contained in this multi-valued map.
        <p>
        The set is backed by the map, so changes to the map are reflected
        in the set, and vice-versa.
        <p>
        If the map is modified while an iteration over the set is in
        progress (except through the iterator's own {@code remove} operation),
        the result of the iteration is undefined. The set supports element
        removal, which removes the corresponding mapping from the map, via the
        {@code Iterator.remove}, {@code Set.remove}, {@code removeAll},
        {@code retainAll}, and {@code clear} operations. It does not support
        the {@code add} or {@code addAll} operations.
        @return a set view of the keys contained in this map
        <!-- ACCEPT >=> 683d9845-9f1d-11ea-8222-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiValuedMap` / `Collection<V> values()`


        <!-- 683d9846-9f1d-11ea-8223-333445793454 <=< ACCEPT -->
        Gets a {@link Collection} view of all values contained in this multi-valued map.
        <p>
        Implementations typically return a collection containing the combination
        of values from all keys.
        @return a collection view of the values contained in this multi-valued map
        <!-- ACCEPT >=> 683d9846-9f1d-11ea-8223-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiValuedMap` / `Map<K, Collection<V>> asMap()`


        <!-- 683d9847-9f1d-11ea-8224-333445793454 <=< ACCEPT -->
        Returns a view of this multi-valued map as a {@code Map} from each distinct
        key to the non-empty collection of that key's associated values.
        <p>
        Note that {@code this.asMap().get(k)} is equivalent to {@code this.get(k)}
        only when {@code k} is a key contained in the multi-valued map; otherwise it
        returns {@code null} as opposed to an empty collection.
        <p>
        Changes to the returned map or the collections that serve as its values
        will update the underlying multi-valued map, and vice versa. The map does
        not support {@code put} or {@code putAll}, nor do its entries support
        {@link Map.Entry#setValue setValue}.
        @return a map view of the mappings in this multi-valued map
        <!-- ACCEPT >=> 683d9847-9f1d-11ea-8224-333445793454 -->



## Method: `java.org.apache.commons.collections4.MultiValuedMap` / `MapIterator<K, V> mapIterator()`


        <!-- 683d9848-9f1d-11ea-8225-333445793454 <=< ACCEPT -->
        Obtains a <code>MapIterator</code> over this multi-valued map.
        <p>
        A map iterator is an efficient way of iterating over maps. There is no
        need to access the entries collection or use {@code Map.Entry} objects.
        @return a map iterator
        <!-- ACCEPT >=> 683d9848-9f1d-11ea-8225-333445793454 -->



# File: `java.org.apache.commons.collections4.OrderedBidiMap`

## Interface: `java.org.apache.commons.collections4.OrderedBidiMap` / `public interface OrderedBidiMap<K, V> extends BidiMap<K, V>, OrderedMap<K, V>`


        <!-- 683d9849-9f1d-11ea-8226-333445793454 <=< ACCEPT -->
        Defines a map that allows bidirectional lookup between key and values
        and retains and provides access to an ordering.
        <p>
        Implementations should allow a value to be looked up from a key and
        a key to be looked up from a value with equal performance.
        @param <K> the type of the keys in the map
        @param <V> the type of the values in the map
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 683d9849-9f1d-11ea-8226-333445793454 -->



## Method: `java.org.apache.commons.collections4.OrderedBidiMap` / `OrderedBidiMap<V, K> inverseBidiMap()`


        <!-- 683d984a-9f1d-11ea-8227-333445793454 <=< ACCEPT -->
        Gets a view of this map where the keys and values are reversed.
        <p>
        Changes to one map will be visible in the other and vice versa.
        This enables both directions of the map to be accessed equally.
        <p>
        Implementations should seek to avoid creating a new object every time this
        method is called. See <code>AbstractMap.values()</code> etc. Calling this
        method on the inverse map should return the original.
        <p>
        Implementations must return an <code>OrderedBidiMap</code> instance,
        usually by forwarding to <code>inverseOrderedBidiMap()</code>.
        @return an inverted bidirectional map
        <!-- ACCEPT >=> 683d984a-9f1d-11ea-8227-333445793454 -->



# File: `java.org.apache.commons.collections4.OrderedIterator`

## Interface: `java.org.apache.commons.collections4.OrderedIterator` / `public interface OrderedIterator<E> extends Iterator<E>`


        <!-- 683dbf45-9f1d-11ea-8228-333445793454 <=< ACCEPT -->
        Defines an iterator that operates over an ordered container. Subset of {@link java.util.ListIterator}.
        <p>
        This iterator allows both forward and reverse iteration through the container.
        @param <E> the type to iterate over
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 683dbf45-9f1d-11ea-8228-333445793454 -->



## Method: `java.org.apache.commons.collections4.OrderedIterator` / `boolean hasPrevious()`


        <!-- 683dbf46-9f1d-11ea-8229-333445793454 <=< ACCEPT -->
        Checks to see if there is a previous element that can be iterated to.
        @return <code>true</code> if the iterator has a previous element
        <!-- ACCEPT >=> 683dbf46-9f1d-11ea-8229-333445793454 -->



## Method: `java.org.apache.commons.collections4.OrderedIterator` / `E previous()`


        <!-- 683dbf47-9f1d-11ea-822a-333445793454 <=< ACCEPT -->
        Gets the previous element from the container.
        @return the previous element in the iteration
        @throws java.util.NoSuchElementException if the iteration is finished
        <!-- ACCEPT >=> 683dbf47-9f1d-11ea-822a-333445793454 -->



# File: `java.org.apache.commons.collections4.OrderedMap`

## Interface: `java.org.apache.commons.collections4.OrderedMap` / `public interface OrderedMap<K, V> extends IterableMap<K, V>`


        <!-- 683dbf48-9f1d-11ea-822b-333445793454 <=< ACCEPT -->
        Defines a map that maintains order and allows both forward and backward
        iteration through that order.
        @param <K> the type of the keys in the map
        @param <V> the type of the values in the map
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 683dbf48-9f1d-11ea-822b-333445793454 -->



## Method: `java.org.apache.commons.collections4.OrderedMap` / `OrderedMapIterator<K, V> mapIterator()`


        <!-- 683dbf49-9f1d-11ea-822c-333445793454 <=< ACCEPT -->
        Obtains an <code>OrderedMapIterator</code> over the map.
        <p>
        A ordered map iterator is an efficient way of iterating over maps
        in both directions.
        @return a map iterator
        <!-- ACCEPT >=> 683dbf49-9f1d-11ea-822c-333445793454 -->



## Method: `java.org.apache.commons.collections4.OrderedMap` / `K firstKey()`


        <!-- 683dbf4a-9f1d-11ea-822d-333445793454 <=< ACCEPT -->
        Gets the first key currently in this map.
        @return the first key currently in this map
        @throws java.util.NoSuchElementException if this map is empty
        <!-- ACCEPT >=> 683dbf4a-9f1d-11ea-822d-333445793454 -->



## Method: `java.org.apache.commons.collections4.OrderedMap` / `K lastKey()`


        <!-- 683dbf4b-9f1d-11ea-822e-333445793454 <=< ACCEPT -->
        Gets the last key currently in this map.
        @return the last key currently in this map
        @throws java.util.NoSuchElementException if this map is empty
        <!-- ACCEPT >=> 683dbf4b-9f1d-11ea-822e-333445793454 -->



## Method: `java.org.apache.commons.collections4.OrderedMap` / `K nextKey(K key)`


        <!-- 683dbf4c-9f1d-11ea-822f-333445793454 <=< ACCEPT -->
        Gets the next key after the one specified.
        @param key  the key to search for next from
        @return the next key, null if no match or at end
        <!-- ACCEPT >=> 683dbf4c-9f1d-11ea-822f-333445793454 -->



## Method: `java.org.apache.commons.collections4.OrderedMap` / `K previousKey(K key)`


        <!-- 683dbf4d-9f1d-11ea-8230-333445793454 <=< ACCEPT -->
        Gets the previous key before the one specified.
        @param key  the key to search for previous from
        @return the previous key, null if no match or at start
        <!-- ACCEPT >=> 683dbf4d-9f1d-11ea-8230-333445793454 -->



# File: `java.org.apache.commons.collections4.OrderedMapIterator`

## Interface: `java.org.apache.commons.collections4.OrderedMapIterator` / `public interface OrderedMapIterator<K, V> extends MapIterator<K, V>, OrderedIterator<K>`


        <!-- 683dbf4e-9f1d-11ea-8231-333445793454 <=< ACCEPT -->
        Defines an iterator that operates over an ordered <code>Map</code>.
        <p>
        This iterator allows both forward and reverse iteration through the map.
        @param <K> the type of the keys in the map
        @param <V> the type of the values in the map
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 683dbf4e-9f1d-11ea-8231-333445793454 -->



## Method: `java.org.apache.commons.collections4.OrderedMapIterator` / `boolean hasPrevious()`


        <!-- 683dbf4f-9f1d-11ea-8232-333445793454 <=< ACCEPT -->
        Checks to see if there is a previous entry that can be iterated to.
        @return <code>true</code> if the iterator has a previous element
        <!-- ACCEPT >=> 683dbf4f-9f1d-11ea-8232-333445793454 -->



## Method: `java.org.apache.commons.collections4.OrderedMapIterator` / `K previous()`


        <!-- 683dbf50-9f1d-11ea-8233-333445793454 <=< ACCEPT -->
        Gets the previous <em>key</em> from the <code>Map</code>.
        @return the previous key in the iteration
        @throws java.util.NoSuchElementException if the iteration is finished
        <!-- ACCEPT >=> 683dbf50-9f1d-11ea-8233-333445793454 -->



# File: `java.org.apache.commons.collections4.Predicate`

## Interface: `java.org.apache.commons.collections4.Predicate` / `public interface Predicate<T>`


        <!-- 683dbf51-9f1d-11ea-8234-333445793454 <=< ACCEPT -->
        Defines a functor interface implemented by classes that perform a predicate
        test on an object.
        <p>
        A <code>Predicate</code> is the object equivalent of an <code>if</code> statement.
        It uses the input object to return a true or false value, and is often used in
        validation or filtering.
        <p>
        Standard implementations of common predicates are provided by
        {@link PredicateUtils}. These include true, false, instanceof, equals, and,
        or, not, method invokation and null testing.
        @param <T> the type that the predicate queries
        @since 1.0
        @version $Id$
        <!-- ACCEPT >=> 683dbf51-9f1d-11ea-8234-333445793454 -->



## Method: `java.org.apache.commons.collections4.Predicate` / `boolean evaluate(T object)`


        <!-- 683dbf52-9f1d-11ea-8235-333445793454 <=< ACCEPT -->
        Use the specified parameter to perform a test that returns true or false.
        @param object  the object to evaluate, should not be changed
        @return true or false
        @throws ClassCastException (runtime) if the input is the wrong class
        @throws IllegalArgumentException (runtime) if the input is invalid
        @throws FunctorException (runtime) if the predicate encounters a problem
        <!-- ACCEPT >=> 683dbf52-9f1d-11ea-8235-333445793454 -->



# File: `java.org.apache.commons.collections4.PredicateUtils`

## Class: `java.org.apache.commons.collections4.PredicateUtils` / `public class PredicateUtils`


        <!-- 683dbf53-9f1d-11ea-8236-333445793454 <=< ACCEPT -->
        <code>PredicateUtils</code> provides reference implementations and utilities
        for the Predicate functor interface. The supplied predicates are:
        <ul>
        <li>Invoker - returns the result of a method call on the input object
        <li>InstanceOf - true if the object is an instanceof a class
        <li>Equal - true if the object equals() a specified object
        <li>Identity - true if the object == a specified object
        <li>Null - true if the object is null
        <li>NotNull - true if the object is not null
        <li>Unique - true if the object has not already been evaluated
        <li>And/All - true if all of the predicates are true
        <li>Or/Any - true if any of the predicates is true
        <li>Either/One - true if only one of the predicate is true
        <li>Neither/None - true if none of the predicates are true
        <li>Not - true if the predicate is false, and vice versa
        <li>Transformer - wraps a Transformer as a Predicate
        <li>True - always return true
        <li>False - always return false
        <li>Exception - always throws an exception
        <li>NullIsException/NullIsFalse/NullIsTrue - check for null input
        <li>Transformed - transforms the input before calling the predicate
        </ul>
        All the supplied predicates are Serializable.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 683dbf53-9f1d-11ea-8236-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.PredicateUtils` / `private PredicateUtils()`


        <!-- 683dbf54-9f1d-11ea-8237-333445793454 <=< ACCEPT -->
        This class is not normally instantiated.
        <!-- ACCEPT >=> 683dbf54-9f1d-11ea-8237-333445793454 -->



## Method: `java.org.apache.commons.collections4.PredicateUtils` / `public static <T> Predicate<T> exceptionPredicate()`


        <!-- 683de64f-9f1d-11ea-8238-333445793454 <=< ACCEPT -->
        Gets a Predicate that always throws an exception.
        This could be useful during testing as a placeholder.
        @param <T>  the type that the predicate queries
        @return the predicate
        @see ExceptionPredicate
        <!-- ACCEPT >=> 683de64f-9f1d-11ea-8238-333445793454 -->



## Method: `java.org.apache.commons.collections4.PredicateUtils` / `public static <T> Predicate<T> truePredicate()`


        <!-- 683de650-9f1d-11ea-8239-333445793454 <=< ACCEPT -->
        Gets a Predicate that always returns true.
        @param <T>  the type that the predicate queries
        @return the predicate
        @see TruePredicate
        <!-- ACCEPT >=> 683de650-9f1d-11ea-8239-333445793454 -->



## Method: `java.org.apache.commons.collections4.PredicateUtils` / `public static <T> Predicate<T> falsePredicate()`


        <!-- 683de651-9f1d-11ea-823a-333445793454 <=< ACCEPT -->
        Gets a Predicate that always returns false.
        @param <T>  the type that the predicate queries
        @return the predicate
        @see FalsePredicate
        <!-- ACCEPT >=> 683de651-9f1d-11ea-823a-333445793454 -->



## Method: `java.org.apache.commons.collections4.PredicateUtils` / `public static <T> Predicate<T> nullPredicate()`


        <!-- 683de652-9f1d-11ea-823b-333445793454 <=< ACCEPT -->
        Gets a Predicate that checks if the input object passed in is null.
        @param <T>  the type that the predicate queries
        @return the predicate
        @see NullPredicate
        <!-- ACCEPT >=> 683de652-9f1d-11ea-823b-333445793454 -->



## Method: `java.org.apache.commons.collections4.PredicateUtils` / `public static <T> Predicate<T> notNullPredicate()`


        <!-- 683de653-9f1d-11ea-823c-333445793454 <=< ACCEPT -->
        Gets a Predicate that checks if the input object passed in is not null.
        @param <T>  the type that the predicate queries
        @return the predicate
        @see NotNullPredicate
        <!-- ACCEPT >=> 683de653-9f1d-11ea-823c-333445793454 -->



## Method: `java.org.apache.commons.collections4.PredicateUtils` / `public static <T> Predicate<T> equalPredicate(final T value)`


        <!-- 683de654-9f1d-11ea-823d-333445793454 <=< ACCEPT -->
        Creates a Predicate that checks if the input object is equal to the
        specified object using equals().
        @param <T>  the type that the predicate queries
        @param value  the value to compare against
        @return the predicate
        @see EqualPredicate
        <!-- ACCEPT >=> 683de654-9f1d-11ea-823d-333445793454 -->



## Method: `java.org.apache.commons.collections4.PredicateUtils` / `public static <T> Predicate<T> identityPredicate(final T value)`


        <!-- 683de655-9f1d-11ea-823e-333445793454 <=< ACCEPT -->
        Creates a Predicate that checks if the input object is equal to the
        specified object by identity.
        @param <T>  the type that the predicate queries
        @param value  the value to compare against
        @return the predicate
        @see IdentityPredicate
        <!-- ACCEPT >=> 683de655-9f1d-11ea-823e-333445793454 -->



## Method: `java.org.apache.commons.collections4.PredicateUtils` / `public static Predicate<Object> instanceofPredicate(final Class<?> type)`


        <!-- 683de656-9f1d-11ea-823f-333445793454 <=< ACCEPT -->
        Creates a Predicate that checks if the object passed in is of
        a particular type, using instanceof. A <code>null</code> input
        object will return <code>false</code>.
        @param type  the type to check for, may not be null
        @return the predicate
        @throws NullPointerException if the class is null
        @see InstanceofPredicate
        <!-- ACCEPT >=> 683de656-9f1d-11ea-823f-333445793454 -->



## Method: `java.org.apache.commons.collections4.PredicateUtils` / `public static <T> Predicate<T> uniquePredicate()`


        <!-- 683de657-9f1d-11ea-8240-333445793454 <=< ACCEPT -->
        Creates a Predicate that returns true the first time an object is
        encountered, and false if the same object is received
        again. The comparison is by equals(). A <code>null</code> input object
        is accepted and will return true the first time, and false subsequently
        as well.
        @param <T>  the type that the predicate queries
        @return the predicate
        @see UniquePredicate
        <!-- ACCEPT >=> 683de657-9f1d-11ea-8240-333445793454 -->



## Method: `java.org.apache.commons.collections4.PredicateUtils` / `public static <T> Predicate<T> invokerPredicate(final String methodName)`


        <!-- 683de658-9f1d-11ea-8241-333445793454 <=< ACCEPT -->
        Creates a Predicate that invokes a method on the input object.
        The method must return either a boolean or a non-null Boolean,
        and have no parameters. If the input object is null, a
        PredicateException is thrown.
        <p>
        For example, <code>PredicateUtils.invokerPredicate("isEmpty");</code>
        will call the <code>isEmpty</code> method on the input object to
        determine the predicate result.
        @param <T>  the type that the predicate queries
        @param methodName  the method name to call on the input object, may not be null
        @return the predicate
        @throws NullPointerException if the methodName is null.
        @see InvokerTransformer
        @see TransformerPredicate
        <!-- ACCEPT >=> 683de658-9f1d-11ea-8241-333445793454 -->



## Method: `java.org.apache.commons.collections4.PredicateUtils` / `final Object[] args)`


        <!-- 683de659-9f1d-11ea-8242-333445793454 <=< ACCEPT -->
        Creates a Predicate that invokes a method on the input object.
        The method must return either a boolean or a non-null Boolean,
        and have no parameters. If the input object is null, a
        PredicateException is thrown.
        <p>
        For example, <code>PredicateUtils.invokerPredicate("isEmpty");</code>
        will call the <code>isEmpty</code> method on the input object to
        determine the predicate result.
        @param <T>  the type that the predicate queries
        @param methodName  the method name to call on the input object, may not be null
        @param paramTypes  the parameter types
        @param args  the arguments
        @return the predicate
        @throws NullPointerException if the method name is null
        @throws IllegalArgumentException if the paramTypes and args don't match
        @see InvokerTransformer
        @see TransformerPredicate
        <!-- ACCEPT >=> 683de659-9f1d-11ea-8242-333445793454 -->



## Method: `java.org.apache.commons.collections4.PredicateUtils` / `final Predicate<? super T> predicate2)`


        <!-- 683de65a-9f1d-11ea-8243-333445793454 <=< ACCEPT -->
        Create a new Predicate that returns true only if both of the specified
        predicates are true.
        @param <T>  the type that the predicate queries
        @param predicate1  the first predicate, may not be null
        @param predicate2  the second predicate, may not be null
        @return the <code>and</code> predicate
        @throws NullPointerException if either predicate is null
        @see AndPredicate
        <!-- ACCEPT >=> 683de65a-9f1d-11ea-8243-333445793454 -->



## Method: `java.org.apache.commons.collections4.PredicateUtils` / `public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)`


        <!-- 683de65b-9f1d-11ea-8244-333445793454 <=< ACCEPT -->
        Create a new Predicate that returns true only if all of the specified
        predicates are true.
        If the array of predicates is empty, then this predicate returns true.
        @param <T>  the type that the predicate queries
        @param predicates  an array of predicates to check, may not be null
        @return the <code>all</code> predicate
        @throws NullPointerException if the predicates array is null
        @throws NullPointerException if any predicate in the array is null
        @see AllPredicate
        <!-- ACCEPT >=> 683de65b-9f1d-11ea-8244-333445793454 -->



## Method: `java.org.apache.commons.collections4.PredicateUtils` / `public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)`


        <!-- 683de65c-9f1d-11ea-8245-333445793454 <=< ACCEPT -->
        Create a new Predicate that returns true only if all of the specified
        predicates are true. The predicates are checked in iterator order.
        If the collection of predicates is empty, then this predicate returns true.
        @param <T>  the type that the predicate queries
        @param predicates  a collection of predicates to check, may not be null
        @return the <code>all</code> predicate
        @throws NullPointerException if the predicates collection is null
        @throws NullPointerException if any predicate in the collection is null
        @see AllPredicate
        <!-- ACCEPT >=> 683de65c-9f1d-11ea-8245-333445793454 -->



## Method: `java.org.apache.commons.collections4.PredicateUtils` / `final Predicate<? super T> predicate2)`


        <!-- 683de65d-9f1d-11ea-8246-333445793454 <=< ACCEPT -->
        Create a new Predicate that returns true if either of the specified
        predicates are true.
        @param <T>  the type that the predicate queries
        @param predicate1  the first predicate, may not be null
        @param predicate2  the second predicate, may not be null
        @return the <code>or</code> predicate
        @throws NullPointerException if either predicate is null
        @see OrPredicate
        <!-- ACCEPT >=> 683de65d-9f1d-11ea-8246-333445793454 -->



## Method: `java.org.apache.commons.collections4.PredicateUtils` / `public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)`


        <!-- 683de65e-9f1d-11ea-8247-333445793454 <=< ACCEPT -->
        Create a new Predicate that returns true if any of the specified
        predicates are true.
        If the array of predicates is empty, then this predicate returns false.
        @param <T>  the type that the predicate queries
        @param predicates  an array of predicates to check, may not be null
        @return the <code>any</code> predicate
        @throws NullPointerException if the predicates array is null
        @throws NullPointerException if any predicate in the array is null
        @see AnyPredicate
        <!-- ACCEPT >=> 683de65e-9f1d-11ea-8247-333445793454 -->



## Method: `java.org.apache.commons.collections4.PredicateUtils` / `public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)`


        <!-- 683e0d57-9f1d-11ea-8248-333445793454 <=< ACCEPT -->
        Create a new Predicate that returns true if any of the specified
        predicates are true. The predicates are checked in iterator order.
        If the collection of predicates is empty, then this predicate returns false.
        @param <T>  the type that the predicate queries
        @param predicates  a collection of predicates to check, may not be null
        @return the <code>any</code> predicate
        @throws NullPointerException if the predicates collection is null
        @throws NullPointerException if any predicate in the collection is null
        @see AnyPredicate
        <!-- ACCEPT >=> 683e0d57-9f1d-11ea-8248-333445793454 -->



## Method: `java.org.apache.commons.collections4.PredicateUtils` / `final Predicate<? super T> predicate2)`


        <!-- 683e0d58-9f1d-11ea-8249-333445793454 <=< ACCEPT -->
        Create a new Predicate that returns true if one, but not both, of the
        specified predicates are true. XOR
        @param <T>  the type that the predicate queries
        @param predicate1  the first predicate, may not be null
        @param predicate2  the second predicate, may not be null
        @return the <code>either</code> predicate
        @throws NullPointerException if either predicate is null
        @see OnePredicate
        <!-- ACCEPT >=> 683e0d58-9f1d-11ea-8249-333445793454 -->



## Method: `java.org.apache.commons.collections4.PredicateUtils` / `public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)`


        <!-- 683e0d59-9f1d-11ea-824a-333445793454 <=< ACCEPT -->
        Create a new Predicate that returns true if only one of the specified
        predicates are true.
        If the array of predicates is empty, then this predicate returns false.
        @param <T>  the type that the predicate queries
        @param predicates  an array of predicates to check, may not be null
        @return the <code>one</code> predicate
        @throws NullPointerException if the predicates array is null
        @throws NullPointerException if any predicate in the array is null
        @see OnePredicate
        <!-- ACCEPT >=> 683e0d59-9f1d-11ea-824a-333445793454 -->



## Method: `java.org.apache.commons.collections4.PredicateUtils` / `public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)`


        <!-- 683e0d5a-9f1d-11ea-824b-333445793454 <=< ACCEPT -->
        Create a new Predicate that returns true if only one of the specified
        predicates are true. The predicates are checked in iterator order.
        If the collection of predicates is empty, then this predicate returns false.
        @param <T>  the type that the predicate queries
        @param predicates  a collection of predicates to check, may not be null
        @return the <code>one</code> predicate
        @throws NullPointerException if the predicates collection is null
        @throws NullPointerException if any predicate in the collection is null
        @see OnePredicate
        <!-- ACCEPT >=> 683e0d5a-9f1d-11ea-824b-333445793454 -->



## Method: `java.org.apache.commons.collections4.PredicateUtils` / `final Predicate<? super T> predicate2)`


        <!-- 683e0d5b-9f1d-11ea-824c-333445793454 <=< ACCEPT -->
        Create a new Predicate that returns true if neither of the specified
        predicates are true.
        @param <T>  the type that the predicate queries
        @param predicate1  the first predicate, may not be null
        @param predicate2  the second predicate, may not be null
        @return the <code>neither</code> predicate
        @throws NullPointerException if either predicate is null
        @see NonePredicate
        <!-- ACCEPT >=> 683e0d5b-9f1d-11ea-824c-333445793454 -->



## Method: `java.org.apache.commons.collections4.PredicateUtils` / `public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)`


        <!-- 683e0d5c-9f1d-11ea-824d-333445793454 <=< ACCEPT -->
        Create a new Predicate that returns true if none of the specified
        predicates are true.
        If the array of predicates is empty, then this predicate returns true.
        @param <T>  the type that the predicate queries
        @param predicates  an array of predicates to check, may not be null
        @return the <code>none</code> predicate
        @throws NullPointerException if the predicates array is null
        @throws NullPointerException if any predicate in the array is null
        @see NonePredicate
        <!-- ACCEPT >=> 683e0d5c-9f1d-11ea-824d-333445793454 -->



## Method: `java.org.apache.commons.collections4.PredicateUtils` / `public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)`


        <!-- 683e0d5d-9f1d-11ea-824e-333445793454 <=< ACCEPT -->
        Create a new Predicate that returns true if none of the specified
        predicates are true. The predicates are checked in iterator order.
        If the collection of predicates is empty, then this predicate returns true.
        @param <T>  the type that the predicate queries
        @param predicates  a collection of predicates to check, may not be null
        @return the <code>none</code> predicate
        @throws NullPointerException if the predicates collection is null
        @throws NullPointerException if any predicate in the collection is null
        @see NonePredicate
        <!-- ACCEPT >=> 683e0d5d-9f1d-11ea-824e-333445793454 -->



## Method: `java.org.apache.commons.collections4.PredicateUtils` / `public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)`


        <!-- 683e0d5e-9f1d-11ea-824f-333445793454 <=< ACCEPT -->
        Create a new Predicate that returns true if the specified predicate
        returns false and vice versa.
        @param <T>  the type that the predicate queries
        @param predicate  the predicate to not
        @return the <code>not</code> predicate
        @throws NullPointerException if the predicate is null
        @see NotPredicate
        <!-- ACCEPT >=> 683e0d5e-9f1d-11ea-824f-333445793454 -->



## Method: `java.org.apache.commons.collections4.PredicateUtils` / `public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer)`


        <!-- 683e0d5f-9f1d-11ea-8250-333445793454 <=< ACCEPT -->
        Create a new Predicate that wraps a Transformer. The Transformer must
        return either Boolean.TRUE or Boolean.FALSE otherwise a PredicateException
        will be thrown.
        @param <T>  the type that the predicate queries
        @param transformer  the transformer to wrap, may not be null
        @return the transformer wrapping predicate
        @throws NullPointerException if the transformer is null
        @see TransformerPredicate
        <!-- ACCEPT >=> 683e0d5f-9f1d-11ea-8250-333445793454 -->



## Method: `java.org.apache.commons.collections4.PredicateUtils` / `public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)`


        <!-- 683e0d60-9f1d-11ea-8251-333445793454 <=< ACCEPT -->
        Gets a Predicate that throws an exception if the input object is null,
        otherwise it calls the specified Predicate. This allows null handling
        behaviour to be added to Predicates that don't support nulls.
        @param <T>  the type that the predicate queries
        @param predicate  the predicate to wrap, may not be null
        @return the predicate
        @throws NullPointerException if the predicate is null.
        @see NullIsExceptionPredicate
        <!-- ACCEPT >=> 683e0d60-9f1d-11ea-8251-333445793454 -->



## Method: `java.org.apache.commons.collections4.PredicateUtils` / `public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)`


        <!-- 683e0d61-9f1d-11ea-8252-333445793454 <=< ACCEPT -->
        Gets a Predicate that returns false if the input object is null, otherwise
        it calls the specified Predicate. This allows null handling behaviour to
        be added to Predicates that don't support nulls.
        @param <T>  the type that the predicate queries
        @param predicate  the predicate to wrap, may not be null
        @return the predicate
        @throws NullPointerException if the predicate is null.
        @see NullIsFalsePredicate
        <!-- ACCEPT >=> 683e0d61-9f1d-11ea-8252-333445793454 -->



## Method: `java.org.apache.commons.collections4.PredicateUtils` / `public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)`


        <!-- 683e0d62-9f1d-11ea-8253-333445793454 <=< ACCEPT -->
        Gets a Predicate that returns true if the input object is null, otherwise
        it calls the specified Predicate. This allows null handling behaviour to
        be added to Predicates that don't support nulls.
        @param <T>  the type that the predicate queries
        @param predicate  the predicate to wrap, may not be null
        @return the predicate
        @throws NullPointerException if the predicate is null.
        @see NullIsTruePredicate
        <!-- ACCEPT >=> 683e0d62-9f1d-11ea-8253-333445793454 -->



## Method: `java.org.apache.commons.collections4.PredicateUtils` / `final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)`


        <!-- 683e0d63-9f1d-11ea-8254-333445793454 <=< ACCEPT -->
        Creates a predicate that transforms the input object before passing it
        to the predicate.
        @param <T>  the type that the predicate queries
        @param transformer  the transformer to call first
        @param predicate  the predicate to call with the result of the transform
        @return the predicate
        @throws NullPointerException if the transformer or the predicate is null
        @see TransformedPredicate
        @since 3.1
        <!-- ACCEPT >=> 683e0d63-9f1d-11ea-8254-333445793454 -->



# File: `java.org.apache.commons.collections4.Put`

## Interface: `java.org.apache.commons.collections4.Put` / `public interface Put<K, V>`


        <!-- 683e0d64-9f1d-11ea-8255-333445793454 <=< ACCEPT -->
        The "write" subset of the {@link Map} interface.
        <p>
        NOTE: in the original {@link Map} interface, {@link Map#put(Object, Object)} is known
        to have the same return type as {@link Map#get(Object)}, namely {@code V}. {@link Put}
        makes no assumptions in this regard (there is no association with, nor even knowledge
        of, a "reading" interface) and thus defines {@link #put(Object, Object)} as returning
        {@link Object}.
        @since 4.0
        @version $Id$
        @see Get
        <!-- ACCEPT >=> 683e0d64-9f1d-11ea-8255-333445793454 -->



## Method: `java.org.apache.commons.collections4.Put` / `void clear()`


        <!-- 683e0d65-9f1d-11ea-8256-333445793454 <=< ACCEPT -->
        @see Map#clear()
        <!-- ACCEPT >=> 683e0d65-9f1d-11ea-8256-333445793454 -->



## Method: `java.org.apache.commons.collections4.Put` / `Object put(K key, V value)`


        <!-- 683e0d66-9f1d-11ea-8257-333445793454 <=< ACCEPT -->
        Note that the return type is Object, rather than V as in the Map interface.
        See the class Javadoc for further info.
        @see Map#put(Object, Object)
        <!-- ACCEPT >=> 683e0d66-9f1d-11ea-8257-333445793454 -->



## Method: `java.org.apache.commons.collections4.Put` / `void putAll(Map<? extends K, ? extends V> t)`


        <!-- 683e3462-9f1d-11ea-8258-333445793454 <=< ACCEPT -->
        @see Map#putAll(Map)
        <!-- ACCEPT >=> 683e3462-9f1d-11ea-8258-333445793454 -->



# File: `java.org.apache.commons.collections4.QueueUtils`

## Class: `java.org.apache.commons.collections4.QueueUtils` / `public class QueueUtils`


        <!-- 683e3463-9f1d-11ea-8259-333445793454 <=< ACCEPT -->
        Provides utility methods and decorators for {@link Queue} instances.
        @since 4.0
        @version $Id$
        <!-- ACCEPT >=> 683e3463-9f1d-11ea-8259-333445793454 -->



## Field: `java.org.apache.commons.collections4.QueueUtils` / `public static final Queue EMPTY_QUEUE`


        <!-- 683e3464-9f1d-11ea-825a-333445793454 <=< ACCEPT -->
        An empty unmodifiable queue.
        <!-- ACCEPT >=> 683e3464-9f1d-11ea-825a-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.QueueUtils` / `private QueueUtils()`


        <!-- 683e3465-9f1d-11ea-825b-333445793454 <=< ACCEPT -->
        <code>QueueUtils</code> should not normally be instantiated.
        <!-- ACCEPT >=> 683e3465-9f1d-11ea-825b-333445793454 -->



## Method: `java.org.apache.commons.collections4.QueueUtils` / `public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)`


        <!-- 683e3466-9f1d-11ea-825c-333445793454 <=< ACCEPT -->
        Returns an unmodifiable queue backed by the given queue.
        @param <E> the type of the elements in the queue
        @param queue  the queue to make unmodifiable, must not be null
        @return an unmodifiable queue backed by that queue
        @throws NullPointerException if the queue is null
        <!-- ACCEPT >=> 683e3466-9f1d-11ea-825c-333445793454 -->



## Method: `java.org.apache.commons.collections4.QueueUtils` / `public static <E> Queue<E> predicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate)`


        <!-- 683e3467-9f1d-11ea-825d-333445793454 <=< ACCEPT -->
        Returns a predicated (validating) queue backed by the given queue.
        <p>
        Only objects that pass the test in the given predicate can be added to the queue.
        Trying to add an invalid object results in an IllegalArgumentException.
        It is important not to use the original queue after invoking this method,
        as it is a backdoor for adding invalid objects.
        @param <E> the type of the elements in the queue
        @param queue  the queue to predicate, must not be null
        @param predicate  the predicate used to evaluate new elements, must not be null
        @return a predicated queue
        @throws NullPointerException if the queue or predicate is null
        <!-- ACCEPT >=> 683e3467-9f1d-11ea-825d-333445793454 -->



## Method: `java.org.apache.commons.collections4.QueueUtils` / `final Transformer<? super E, ? extends E> transformer)`


        <!-- 683e3468-9f1d-11ea-825e-333445793454 <=< ACCEPT -->
        Returns a transformed queue backed by the given queue.
        <p>
        Each object is passed through the transformer as it is added to the
        Queue. It is important not to use the original queue after invoking this
        method, as it is a backdoor for adding untransformed objects.
        <p>
        Existing entries in the specified queue will not be transformed.
        If you want that behaviour, see {@link TransformedQueue#transformedQueue}.
        @param <E> the type of the elements in the queue
        @param queue  the queue to predicate, must not be null
        @param transformer  the transformer for the queue, must not be null
        @return a transformed queue backed by the given queue
        @throws NullPointerException if the queue or transformer is null
        <!-- ACCEPT >=> 683e3468-9f1d-11ea-825e-333445793454 -->



## Method: `java.org.apache.commons.collections4.QueueUtils` / `public static <E> Queue<E> emptyQueue()`


        <!-- 683e3469-9f1d-11ea-825f-333445793454 <=< ACCEPT -->
        Get an empty <code>Queue</code>.
        @param <E> the type of the elements in the queue
        @return an empty {@link Queue}
        <!-- ACCEPT >=> 683e3469-9f1d-11ea-825f-333445793454 -->



# File: `java.org.apache.commons.collections4.ResettableIterator`

## Interface: `java.org.apache.commons.collections4.ResettableIterator` / `public interface ResettableIterator<E> extends Iterator<E>`


        <!-- 683e346a-9f1d-11ea-8260-333445793454 <=< ACCEPT -->
        Defines an iterator that can be reset back to an initial state.
        <p>
        This interface allows an iterator to be repeatedly reused.
        @param <E> the type to iterate over
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 683e346a-9f1d-11ea-8260-333445793454 -->



## Method: `java.org.apache.commons.collections4.ResettableIterator` / `void reset()`


        <!-- 683e346b-9f1d-11ea-8261-333445793454 <=< ACCEPT -->
        Resets the iterator back to the position at which the iterator
        was created.
        <!-- ACCEPT >=> 683e346b-9f1d-11ea-8261-333445793454 -->



# File: `java.org.apache.commons.collections4.ResettableListIterator`

## Interface: `java.org.apache.commons.collections4.ResettableListIterator` / `public interface ResettableListIterator<E> extends ListIterator<E>, ResettableIterator<E>, OrderedIterator<E>`


        <!-- 683e346c-9f1d-11ea-8262-333445793454 <=< ACCEPT -->
        Defines a list iterator that can be reset back to an initial state.
        <p>
        This interface allows an iterator to be repeatedly reused.
        @param <E> the type to iterate over
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 683e346c-9f1d-11ea-8262-333445793454 -->



# File: `java.org.apache.commons.collections4.SetUtils`

## Class: `java.org.apache.commons.collections4.SetUtils` / `public class SetUtils`


        <!-- 683e346d-9f1d-11ea-8263-333445793454 <=< ACCEPT -->
        Provides utility methods and decorators for
        {@link Set} and {@link SortedSet} instances.
        @since 2.1
        @version $Id$
        <!-- ACCEPT >=> 683e346d-9f1d-11ea-8263-333445793454 -->



## Method: `java.org.apache.commons.collections4.SetUtils` / `public static <E> Set<E> emptySet()`


        <!-- 683e346e-9f1d-11ea-8264-333445793454 <=< ACCEPT -->
        Get a typed empty unmodifiable Set.
        @param <E> the element type
        @return an empty Set
        <!-- ACCEPT >=> 683e346e-9f1d-11ea-8264-333445793454 -->



## Field: `java.org.apache.commons.collections4.SetUtils` / `public static final SortedSet EMPTY_SORTED_SET`


        <!-- 683e346f-9f1d-11ea-8265-333445793454 <=< ACCEPT -->
        An empty unmodifiable sorted set.
        This is not provided in the JDK.
        <!-- ACCEPT >=> 683e346f-9f1d-11ea-8265-333445793454 -->



## Method: `java.org.apache.commons.collections4.SetUtils` / `public static <E> SortedSet<E> emptySortedSet()`


        <!-- 683e3470-9f1d-11ea-8266-333445793454 <=< ACCEPT -->
        Get a typed empty unmodifiable sorted set.
        @param <E> the element type
        @return an empty sorted Set
        <!-- ACCEPT >=> 683e3470-9f1d-11ea-8266-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.SetUtils` / `private SetUtils()`


        <!-- 683e3471-9f1d-11ea-8267-333445793454 <=< ACCEPT -->
        <code>SetUtils</code> should not normally be instantiated.
        <!-- ACCEPT >=> 683e3471-9f1d-11ea-8267-333445793454 -->



## Method: `java.org.apache.commons.collections4.SetUtils` / `public static <T> Set<T> emptyIfNull(final Set<T> set)`


        <!-- 683e5b6c-9f1d-11ea-8268-333445793454 <=< ACCEPT -->
        Returns an immutable empty set if the argument is <code>null</code>,
        or the argument itself otherwise.
        @param <T> the element type
        @param set the set, possibly <code>null</code>
        @return an empty set if the argument is <code>null</code>
        <!-- ACCEPT >=> 683e5b6c-9f1d-11ea-8268-333445793454 -->



## Method: `java.org.apache.commons.collections4.SetUtils` / `public static boolean isEqualSet(final Collection<?> set1, final Collection<?> set2)`


        <!-- 683e5b6d-9f1d-11ea-8269-333445793454 <=< ACCEPT -->
        Tests two sets for equality as per the <code>equals()</code> contract
        in {@link java.util.Set#equals(java.lang.Object)}.
        <p>
        This method is useful for implementing <code>Set</code> when you cannot
        extend AbstractSet. The method takes Collection instances to enable other
        collection types to use the Set implementation algorithm.
        <p>
        The relevant text (slightly paraphrased as this is a static method) is:
        <blockquote>
        <p>Two sets are considered equal if they have
        the same size, and every member of the first set is contained in
        the second. This ensures that the {@code equals} method works
        properly across different implementations of the {@code Set}
        interface.</p>
        <p>
        This implementation first checks if the two sets are the same object:
        if so it returns {@code true}.  Then, it checks if the two sets are
        identical in size; if not, it returns false. If so, it returns
        {@code a.containsAll((Collection) b)}.</p>
        </blockquote>
        @see java.util.Set
        @param set1  the first set, may be null
        @param set2  the second set, may be null
        @return whether the sets are equal by value comparison
        <!-- ACCEPT >=> 683e5b6d-9f1d-11ea-8269-333445793454 -->



## Method: `java.org.apache.commons.collections4.SetUtils` / `public static <T> int hashCodeForSet(final Collection<T> set)`


        <!-- 683e5b6e-9f1d-11ea-826a-333445793454 <=< ACCEPT -->
        Generates a hash code using the algorithm specified in
        {@link java.util.Set#hashCode()}.
        <p>
        This method is useful for implementing <code>Set</code> when you cannot
        extend AbstractSet. The method takes Collection instances to enable other
        collection types to use the Set implementation algorithm.
        @param <T> the element type
        @see java.util.Set#hashCode()
        @param set  the set to calculate the hash code for, may be null
        @return the hash code
        <!-- ACCEPT >=> 683e5b6e-9f1d-11ea-826a-333445793454 -->



## Method: `java.org.apache.commons.collections4.SetUtils` / `public static <E> Set<E> newIdentityHashSet()`


        <!-- 683e5b6f-9f1d-11ea-826b-333445793454 <=< ACCEPT -->
        Returns a new hash set that matches elements based on <code>==</code> not
        <code>equals()</code>.
        <p>
        <strong>This set will violate the detail of various Set contracts.</note>
        As a general rule, don't compare this set to other sets. In particular, you can't
        use decorators like {@link ListOrderedSet} on it, which silently assume that these
        contracts are fulfilled.</strong>
        <p>
        <strong>Note that the returned set is not synchronized and is not thread-safe.</strong>
        If you wish to use this set from multiple threads concurrently, you must use
        appropriate synchronization. The simplest approach is to wrap this map
        using {@link java.util.Collections#synchronizedSet(Set)}. This class may throw
        exceptions when accessed by concurrent threads without synchronization.
        @param <E>  the element type
        @return a new identity hash set
        @since 4.1
        <!-- ACCEPT >=> 683e5b6f-9f1d-11ea-826b-333445793454 -->



## Method: `java.org.apache.commons.collections4.SetUtils` / `public static <E> Set<E> synchronizedSet(final Set<E> set)`


        <!-- 683e5b70-9f1d-11ea-826c-333445793454 <=< ACCEPT -->
        Returns a synchronized set backed by the given set.
        <p>
        You must manually synchronize on the returned set's iterator to
        avoid non-deterministic behavior:
        <pre>
        Set s = SetUtils.synchronizedSet(mySet);
        synchronized (s) {
        Iterator i = s.iterator();
        while (i.hasNext()) {
        process (i.next());
        }
        }
        </pre>
        This method is just a wrapper for {@link Collections#synchronizedSet(Set)}.
        @param <E> the element type
        @param set  the set to synchronize, must not be null
        @return a synchronized set backed by the given set
        @throws NullPointerException if the set is null
        <!-- ACCEPT >=> 683e5b70-9f1d-11ea-826c-333445793454 -->



## Method: `java.org.apache.commons.collections4.SetUtils` / `public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)`


        <!-- 683e5b71-9f1d-11ea-826d-333445793454 <=< ACCEPT -->
        Returns an unmodifiable set backed by the given set.
        <p>
        This method uses the implementation in the decorators subpackage.
        @param <E> the element type
        @param set  the set to make unmodifiable, must not be null
        @return an unmodifiable set backed by the given set
        @throws NullPointerException if the set is null
        <!-- ACCEPT >=> 683e5b71-9f1d-11ea-826d-333445793454 -->



## Method: `java.org.apache.commons.collections4.SetUtils` / `public static <E> Set<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)`


        <!-- 683e5b72-9f1d-11ea-826e-333445793454 <=< ACCEPT -->
        Returns a predicated (validating) set backed by the given set.
        <p>
        Only objects that pass the test in the given predicate can be added to the set.
        Trying to add an invalid object results in an IllegalArgumentException.
        It is important not to use the original set after invoking this method,
        as it is a backdoor for adding invalid objects.
        @param <E> the element type
        @param set  the set to predicate, must not be null
        @param predicate  the predicate for the set, must not be null
        @return a predicated set backed by the given set
        @throws NullPointerException if the set or predicate is null
        <!-- ACCEPT >=> 683e5b72-9f1d-11ea-826e-333445793454 -->



## Method: `java.org.apache.commons.collections4.SetUtils` / `final Transformer<? super E, ? extends E> transformer)`


        <!-- 683e5b73-9f1d-11ea-826f-333445793454 <=< ACCEPT -->
        Returns a transformed set backed by the given set.
        <p>
        Each object is passed through the transformer as it is added to the
        Set. It is important not to use the original set after invoking this
        method, as it is a backdoor for adding untransformed objects.
        <p>
        Existing entries in the specified set will not be transformed.
        If you want that behaviour, see {@link TransformedSet#transformedSet}.
        @param <E> the element type
        @param set  the set to transform, must not be null
        @param transformer  the transformer for the set, must not be null
        @return a transformed set backed by the given set
        @throws NullPointerException if the set or transformer is null
        <!-- ACCEPT >=> 683e5b73-9f1d-11ea-826f-333445793454 -->



## Method: `java.org.apache.commons.collections4.SetUtils` / `public static <E> Set<E> orderedSet(final Set<E> set)`


        <!-- 683e5b74-9f1d-11ea-8270-333445793454 <=< ACCEPT -->
        Returns a set that maintains the order of elements that are added
        backed by the given set.
        <p>
        If an element is added twice, the order is determined by the first add.
        The order is observed through the iterator or toArray.
        @param <E> the element type
        @param set  the set to order, must not be null
        @return an ordered set backed by the given set
        @throws NullPointerException if the set is null
        <!-- ACCEPT >=> 683e5b74-9f1d-11ea-8270-333445793454 -->



## Method: `java.org.apache.commons.collections4.SetUtils` / `public static <E> SortedSet<E> synchronizedSortedSet(final SortedSet<E> set)`


        <!-- 683e5b75-9f1d-11ea-8271-333445793454 <=< ACCEPT -->
        Returns a synchronized sorted set backed by the given sorted set.
        <p>
        You must manually synchronize on the returned set's iterator to
        avoid non-deterministic behavior:
        <pre>
        Set s = SetUtils.synchronizedSortedSet(mySet);
        synchronized (s) {
        Iterator i = s.iterator();
        while (i.hasNext()) {
        process (i.next());
        }
        }
        </pre>
        This method is just a wrapper for {@link Collections#synchronizedSortedSet(SortedSet)}.
        @param <E> the element type
        @param set  the sorted set to synchronize, must not be null
        @return a synchronized set backed by the given set
        @throws NullPointerException if the set is null
        <!-- ACCEPT >=> 683e5b75-9f1d-11ea-8271-333445793454 -->



## Method: `java.org.apache.commons.collections4.SetUtils` / `public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)`


        <!-- 683e5b76-9f1d-11ea-8272-333445793454 <=< ACCEPT -->
        Returns an unmodifiable sorted set backed by the given sorted set.
        <p>
        This method uses the implementation in the decorators subpackage.
        @param <E> the element type
        @param set  the sorted set to make unmodifiable, must not be null
        @return an unmodifiable set backed by the given set
        @throws NullPointerException if the set is null
        <!-- ACCEPT >=> 683e5b76-9f1d-11ea-8272-333445793454 -->



## Method: `java.org.apache.commons.collections4.SetUtils` / `final Predicate<? super E> predicate)`


        <!-- 683e8276-9f1d-11ea-8273-333445793454 <=< ACCEPT -->
        Returns a predicated (validating) sorted set backed by the given sorted set.
        <p>
        Only objects that pass the test in the given predicate can be added to the set.
        Trying to add an invalid object results in an IllegalArgumentException.
        It is important not to use the original set after invoking this method,
        as it is a backdoor for adding invalid objects.
        @param <E> the element type
        @param set  the sorted set to predicate, must not be null
        @param predicate  the predicate for the sorted set, must not be null
        @return a predicated sorted set backed by the given sorted set
        @throws NullPointerException if the set or predicate is null
        <!-- ACCEPT >=> 683e8276-9f1d-11ea-8273-333445793454 -->



## Method: `java.org.apache.commons.collections4.SetUtils` / `final Transformer<? super E, ? extends E> transformer)`


        <!-- 683e8277-9f1d-11ea-8274-333445793454 <=< ACCEPT -->
        Returns a transformed sorted set backed by the given set.
        <p>
        Each object is passed through the transformer as it is added to the
        Set. It is important not to use the original set after invoking this
        method, as it is a backdoor for adding untransformed objects.
        <p>
        Existing entries in the specified set will not be transformed.
        If you want that behaviour, see {@link TransformedSortedSet#transformedSortedSet}.
        @param <E> the element type
        @param set  the set to transform, must not be null
        @param transformer  the transformer for the set, must not be null
        @return a transformed set backed by the given set
        @throws NullPointerException if the set or transformer is null
        <!-- ACCEPT >=> 683e8277-9f1d-11ea-8274-333445793454 -->



## Method: `java.org.apache.commons.collections4.SetUtils` / `public static <E> SortedSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)`


        <!-- 683e8278-9f1d-11ea-8275-333445793454 <=< ACCEPT -->
        Returns an unmodifiable navigable set backed by the given navigable set.
        <p>
        This method uses the implementation in the decorators subpackage.
        @param <E> the element type
        @param set  the navigable set to make unmodifiable, must not be null
        @return an unmodifiable set backed by the given set
        @throws NullPointerException if the set is null
        @since 4.1
        <!-- ACCEPT >=> 683e8278-9f1d-11ea-8275-333445793454 -->



## Method: `java.org.apache.commons.collections4.SetUtils` / `final Predicate<? super E> predicate)`


        <!-- 683e8279-9f1d-11ea-8276-333445793454 <=< ACCEPT -->
        Returns a predicated (validating) navigable set backed by the given navigable set.
        <p>
        Only objects that pass the test in the given predicate can be added to the set.
        Trying to add an invalid object results in an IllegalArgumentException.
        It is important not to use the original set after invoking this method,
        as it is a backdoor for adding invalid objects.
        @param <E> the element type
        @param set  the navigable set to predicate, must not be null
        @param predicate  the predicate for the navigable set, must not be null
        @return a predicated navigable set backed by the given navigable set
        @throws NullPointerException if the set or predicate is null
        @since 4.1
        <!-- ACCEPT >=> 683e8279-9f1d-11ea-8276-333445793454 -->



## Method: `java.org.apache.commons.collections4.SetUtils` / `final Transformer<? super E, ? extends E> transformer)`


        <!-- 683e827a-9f1d-11ea-8277-333445793454 <=< ACCEPT -->
        Returns a transformed navigable set backed by the given navigable set.
        <p>
        Each object is passed through the transformer as it is added to the
        Set. It is important not to use the original set after invoking this
        method, as it is a backdoor for adding untransformed objects.
        <p>
        Existing entries in the specified set will not be transformed.
        If you want that behaviour, see {@link TransformedNavigableSet#transformedNavigableSet}.
        @param <E> the element type
        @param set  the navigable set to transform, must not be null
        @param transformer  the transformer for the set, must not be null
        @return a transformed set backed by the given set
        @throws NullPointerException if the set or transformer is null
        @since 4.1
        <!-- ACCEPT >=> 683e827a-9f1d-11ea-8277-333445793454 -->



## Method: `java.org.apache.commons.collections4.SetUtils` / `public static <E> SetView<E> union(final Set<? extends E> a, final Set<? extends E> b)`


        <!-- 683e827b-9f1d-11ea-8278-333445793454 <=< ACCEPT -->
        Returns a unmodifiable <b>view</b> of the union of the given {@link Set}s.
        <p>
        The returned view contains all elements of {@code a} and {@code b}.
        @param <E> the generic type that is able to represent the types contained
        in both input sets.
        @param a  the first set, must not be null
        @param b  the second set, must not be null
        @return a view of the union of the two set
        @throws NullPointerException if either input set is null
        @since 4.1
        <!-- ACCEPT >=> 683e827b-9f1d-11ea-8278-333445793454 -->



## Method: `java.org.apache.commons.collections4.SetUtils` / `public static <E> SetView<E> difference(final Set<? extends E> a, final Set<? extends E> b)`


        <!-- 683e827c-9f1d-11ea-8279-333445793454 <=< ACCEPT -->
        Returns a unmodifiable <b>view</b> containing the difference of the given
        {@link Set}s, denoted by {@code a \ b} (or {@code a - b}).
        <p>
        The returned view contains all elements of {@code a} that are not a member
        of {@code b}.
        @param <E> the generic type that is able to represent the types contained
        in both input sets.
        @param a  the set to subtract from, must not be null
        @param b  the set to subtract, must not be null
        @return a view of the relative complement of  of the two sets
        @since 4.1
        <!-- ACCEPT >=> 683e827c-9f1d-11ea-8279-333445793454 -->



## Method: `java.org.apache.commons.collections4.SetUtils` / `public static <E> SetView<E> intersection(final Set<? extends E> a, final Set<? extends E> b)`


        <!-- 683e827d-9f1d-11ea-827a-333445793454 <=< ACCEPT -->
        Returns a unmodifiable <b>view</b> of the intersection of the given {@link Set}s.
        <p>
        The returned view contains all elements that are members of both input sets
        ({@code a} and {@code b}).
        @param <E> the generic type that is able to represent the types contained
        in both input sets.
        @param a  the first set, must not be null
        @param b  the second set, must not be null
        @return a view of the intersection of the two sets
        @since 4.1
        <!-- ACCEPT >=> 683e827d-9f1d-11ea-827a-333445793454 -->



## Method: `java.org.apache.commons.collections4.SetUtils` / `public static <E> SetView<E> disjunction(final Set<? extends E> a, final Set<? extends E> b)`


        <!-- 683e827e-9f1d-11ea-827b-333445793454 <=< ACCEPT -->
        Returns a unmodifiable <b>view</b> of the symmetric difference of the given
        {@link Set}s.
        <p>
        The returned view contains all elements of {@code a} and {@code b} that are
        not a member of the other set.
        <p>
        This is equivalent to {@code union(difference(a, b), difference(b, a))}.
        @param <E> the generic type that is able to represent the types contained
        in both input sets.
        @param a  the first set, must not be null
        @param b  the second set, must not be null
        @return a view of the symmetric difference of the two sets
        @since 4.1
        <!-- ACCEPT >=> 683e827e-9f1d-11ea-827b-333445793454 -->



## Class: `java.org.apache.commons.collections4.SetUtils` / `public static abstract class SetView<E> extends AbstractSet<E>`


        <!-- 683e827f-9f1d-11ea-827c-333445793454 <=< ACCEPT -->
        An unmodifiable <b>view</b> of a set that may be backed by other sets.
        <p>
        If the decorated sets change, this view will change as well. The contents
        of this view can be transferred to another instance via the {@link #copyInto(Set)}
        and {@link #toSet()} methods.
        @param <E> the element type
        @since 4.1
        <!-- ACCEPT >=> 683e827f-9f1d-11ea-827c-333445793454 -->



## Method: `java.org.apache.commons.collections4.SetUtils` / `protected abstract Iterator<E> createIterator()`


        <!-- 683e8280-9f1d-11ea-827d-333445793454 <=< ACCEPT -->
        Return an iterator for this view; the returned iterator is
        not required to be unmodifiable.
        @return a new iterator for this view
        <!-- ACCEPT >=> 683e8280-9f1d-11ea-827d-333445793454 -->



## Method: `java.org.apache.commons.collections4.SetUtils` / `public <S extends Set<E>> void copyInto(final S set)`


        <!-- 683e8281-9f1d-11ea-827e-333445793454 <=< ACCEPT -->
        Copies the contents of this view into the provided set.
        @param <S> the set type
        @param set  the set for copying the contents
        <!-- ACCEPT >=> 683e8281-9f1d-11ea-827e-333445793454 -->



## Method: `java.org.apache.commons.collections4.SetUtils` / `public Set<E> toSet()`


        <!-- 683e8282-9f1d-11ea-827f-333445793454 <=< ACCEPT -->
        Returns a new set containing the contents of this view.
        @return a new set containing all elements of this view
        <!-- ACCEPT >=> 683e8282-9f1d-11ea-827f-333445793454 -->



# File: `java.org.apache.commons.collections4.SetValuedMap`

## Interface: `java.org.apache.commons.collections4.SetValuedMap` / `public interface SetValuedMap<K, V> extends MultiValuedMap<K, V>`


        <!-- 683e8283-9f1d-11ea-8280-333445793454 <=< ACCEPT -->
        Defines a map that holds a set of values against each key.
        <p>
        A {@code SetValuedMap} is a Map with slightly different semantics:
        <ul>
        <li>Putting a value into the map will add the value to a {@link Set} at that key.</li>
        <li>Getting a value will return a {@link Set}, holding all the values put to that key.</li>
        </ul>
        @since 4.1
        @version $Id$
        <!-- ACCEPT >=> 683e8283-9f1d-11ea-8280-333445793454 -->



## Method: `java.org.apache.commons.collections4.SetValuedMap` / `Set<V> get(K key)`


        <!-- 683e8284-9f1d-11ea-8281-333445793454 <=< ACCEPT -->
        Gets the set of values associated with the specified key.
        <p>
        Implementations typically return an empty {@code Set} if no values
        have been mapped to the key.
        <p>
        @param key  the key to retrieve
        @return the {@code Set} of values, implementations should return an
        empty {@code Set} for no mapping
        @throws NullPointerException if the key is null and null keys are invalid
        <!-- ACCEPT >=> 683e8284-9f1d-11ea-8281-333445793454 -->



## Method: `java.org.apache.commons.collections4.SetValuedMap` / `Set<V> remove(Object key)`


        <!-- 683ea980-9f1d-11ea-8282-333445793454 <=< ACCEPT -->
        Removes all values associated with the specified key.
        <p>
        The returned set <i>may</i> be modifiable, but updates will not be
        propagated to this set-valued map. In case no mapping was stored for the
        specified key, an empty, unmodifiable set will be returned.
        @param key  the key to remove values from
        @return the {@code Set} of values removed, implementations should
        return null for no mapping found, but may return an empty collection
        @throws UnsupportedOperationException if the map is unmodifiable
        @throws NullPointerException if the key is null and null keys are invalid
        <!-- ACCEPT >=> 683ea980-9f1d-11ea-8282-333445793454 -->



# File: `java.org.apache.commons.collections4.SortedBag`

## Interface: `java.org.apache.commons.collections4.SortedBag` / `public interface SortedBag<E> extends Bag<E>`


        <!-- 683ea981-9f1d-11ea-8283-333445793454 <=< ACCEPT -->
        Defines a type of <code>Bag</code> that maintains a sorted order among
        its unique representative members.
        @param <E> the type to iterate over
        @since 2.0
        @version $Id$
        <!-- ACCEPT >=> 683ea981-9f1d-11ea-8283-333445793454 -->



## Method: `java.org.apache.commons.collections4.SortedBag` / `Comparator<? super E> comparator()`


        <!-- 683ea982-9f1d-11ea-8284-333445793454 <=< ACCEPT -->
        Returns the comparator associated with this sorted set, or null
        if it uses its elements' natural ordering.
        @return the comparator in use, or null if natural ordering
        <!-- ACCEPT >=> 683ea982-9f1d-11ea-8284-333445793454 -->



## Method: `java.org.apache.commons.collections4.SortedBag` / `E first()`


        <!-- 683ea983-9f1d-11ea-8285-333445793454 <=< ACCEPT -->
        Returns the first (lowest) member.
        @return the first element in the sorted bag
        <!-- ACCEPT >=> 683ea983-9f1d-11ea-8285-333445793454 -->



## Method: `java.org.apache.commons.collections4.SortedBag` / `E last()`


        <!-- 683ea984-9f1d-11ea-8286-333445793454 <=< ACCEPT -->
        Returns the last (highest) member.
        @return the last element in the sorted bag
        <!-- ACCEPT >=> 683ea984-9f1d-11ea-8286-333445793454 -->



# File: `java.org.apache.commons.collections4.SortedBidiMap`

## Interface: `java.org.apache.commons.collections4.SortedBidiMap` / `public interface SortedBidiMap<K, V> extends OrderedBidiMap<K, V>, SortedMap<K, V>`


        <!-- 683ea985-9f1d-11ea-8287-333445793454 <=< ACCEPT -->
        Defines a map that allows bidirectional lookup between key and values
        and retains both keys and values in sorted order.
        <p>
        Implementations should allow a value to be looked up from a key and
        a key to be looked up from a value with equal performance.
        @param <K> the type of the keys in the map
        @param <V> the type of the values in the map
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 683ea985-9f1d-11ea-8287-333445793454 -->



## Method: `java.org.apache.commons.collections4.SortedBidiMap` / `SortedBidiMap<V, K> inverseBidiMap()`


        <!-- 683ea986-9f1d-11ea-8288-333445793454 <=< ACCEPT -->
        Gets a view of this map where the keys and values are reversed.
        <p>
        Changes to one map will be visible in the other and vice versa.
        This enables both directions of the map to be accessed equally.
        <p>
        Implementations should seek to avoid creating a new object every time this
        method is called. See <code>AbstractMap.values()</code> etc. Calling this
        method on the inverse map should return the original.
        <p>
        Implementations must return a <code>SortedBidiMap</code> instance,
        usually by forwarding to <code>inverseSortedBidiMap()</code>.
        @return an inverted bidirectional map
        <!-- ACCEPT >=> 683ea986-9f1d-11ea-8288-333445793454 -->



## Method: `java.org.apache.commons.collections4.SortedBidiMap` / `Comparator<? super V> valueComparator()`


        <!-- 683ea987-9f1d-11ea-8289-333445793454 <=< ACCEPT -->
        Get the comparator used for the values in the value-to-key map aspect.
        @return Comparator<? super V>
        <!-- ACCEPT >=> 683ea987-9f1d-11ea-8289-333445793454 -->



# File: `java.org.apache.commons.collections4.SplitMapUtils`

## Class: `java.org.apache.commons.collections4.SplitMapUtils` / `public class SplitMapUtils`


        <!-- 683ea988-9f1d-11ea-828a-333445793454 <=< ACCEPT -->
        Utilities for working with "split maps:" objects that implement {@link Put}
        and/or {@link Get} but not {@link Map}.
        @since 4.0
        @version $Id$
        @see Get
        @see Put
        <!-- ACCEPT >=> 683ea988-9f1d-11ea-828a-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.SplitMapUtils` / `private SplitMapUtils()`


        <!-- 683ea989-9f1d-11ea-828b-333445793454 <=< ACCEPT -->
        <code>SplitMapUtils</code> should not normally be instantiated.
        <!-- ACCEPT >=> 683ea989-9f1d-11ea-828b-333445793454 -->



## Method: `java.org.apache.commons.collections4.SplitMapUtils` / `public static <K, V> IterableMap<K, V> readableMap(final Get<K, V> get)`


        <!-- 683ea98a-9f1d-11ea-828c-333445793454 <=< ACCEPT -->
        Get the specified {@link Get} as an instance of {@link IterableMap}.
        If <code>get</code> implements {@link IterableMap} directly, no conversion will take place.
        If <code>get</code> implements {@link Map} but not {@link IterableMap} it will be decorated.
        Otherwise an {@link Unmodifiable} {@link IterableMap} will be returned.
        @param <K> the key type
        @param <V> the value type
        @param get to wrap, must not be null
        @return {@link IterableMap}
        @throws NullPointerException if the argument is null
        <!-- ACCEPT >=> 683ea98a-9f1d-11ea-828c-333445793454 -->



## Method: `java.org.apache.commons.collections4.SplitMapUtils` / `public static <K, V> Map<K, V> writableMap(final Put<K, V> put)`


        <!-- 683ea98b-9f1d-11ea-828d-333445793454 <=< ACCEPT -->
        Get the specified {@link Put} as an instanceof {@link Map}.
        If <code>put</code> implements {@link Map} directly, no conversion will take place.
        Otherwise a <em>write-only</em> {@link Map} will be returned.  On such a {@link Map}
        it is recommended that the result of #put(K, V) be discarded as it likely will not
        match <code>V</code> at runtime.
        @param <K> the key type
        @param <V> the element type
        @param put to wrap, must not be null
        @return {@link Map}
        @throws NullPointerException if the argument is null
        <!-- ACCEPT >=> 683ea98b-9f1d-11ea-828d-333445793454 -->



# File: `java.org.apache.commons.collections4.Transformer`

## Interface: `java.org.apache.commons.collections4.Transformer` / `public interface Transformer<I, O>`


        <!-- 683ea98c-9f1d-11ea-828e-333445793454 <=< ACCEPT -->
        Defines a functor interface implemented by classes that transform one
        object into another.
        <p>
        A <code>Transformer</code> converts the input object to the output object.
        The input object should be left unchanged.
        Transformers are typically used for type conversions, or extracting data
        from an object.
        <p>
        Standard implementations of common transformers are provided by
        {@link TransformerUtils}. These include method invocation, returning a constant,
        cloning and returning the string value.
        @param <I> the input type to the transformer
        @param <O> the output type from the transformer
        @since 1.0
        @version $Id$
        <!-- ACCEPT >=> 683ea98c-9f1d-11ea-828e-333445793454 -->



## Method: `java.org.apache.commons.collections4.Transformer` / `O transform(I input)`


        <!-- 683ea98d-9f1d-11ea-828f-333445793454 <=< ACCEPT -->
        Transforms the input object (leaving it unchanged) into some output object.
        @param input  the object to be transformed, should be left unchanged
        @return a transformed object
        @throws ClassCastException (runtime) if the input is the wrong class
        @throws IllegalArgumentException (runtime) if the input is invalid
        @throws FunctorException (runtime) if the transform cannot be completed
        <!-- ACCEPT >=> 683ea98d-9f1d-11ea-828f-333445793454 -->



# File: `java.org.apache.commons.collections4.TransformerUtils`

## Class: `java.org.apache.commons.collections4.TransformerUtils` / `public class TransformerUtils`


        <!-- 683ea98e-9f1d-11ea-8290-333445793454 <=< ACCEPT -->
        <code>TransformerUtils</code> provides reference implementations and
        utilities for the Transformer functor interface. The supplied transformers are:
        <ul>
        <li>Invoker - returns the result of a method call on the input object
        <li>Clone - returns a clone of the input object
        <li>Constant - always returns the same object
        <li>Closure - performs a Closure and returns the input object
        <li>Predicate - returns the result of the predicate as a Boolean
        <li>Factory - returns a new object from a factory
        <li>Chained - chains two or more transformers together
        <li>If - calls one transformer or another based on a predicate
        <li>Switch - calls one transformer based on one or more predicates
        <li>SwitchMap - calls one transformer looked up from a Map
        <li>Instantiate - the Class input object is instantiated
        <li>Map - returns an object from a supplied Map
        <li>Null - always returns null
        <li>NOP - returns the input object, which should be immutable
        <li>Exception - always throws an exception
        <li>StringValue - returns a <code>java.lang.String</code> representation of the input object
        </ul>
        <p>
        Since v4.1 only transformers which are considered to be safe are
        Serializable. Transformers considered to be unsafe for serialization are:
        <ul>
        <li>Invoker
        <li>Clone
        <li>Instantiate
        </ul>
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 683ea98e-9f1d-11ea-8290-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.TransformerUtils` / `private TransformerUtils()`


        <!-- 683ea98f-9f1d-11ea-8291-333445793454 <=< ACCEPT -->
        This class is not normally instantiated.
        <!-- ACCEPT >=> 683ea98f-9f1d-11ea-8291-333445793454 -->



## Method: `java.org.apache.commons.collections4.TransformerUtils` / `public static <I, O> Transformer<I, O> exceptionTransformer()`


        <!-- 683ed089-9f1d-11ea-8292-333445793454 <=< ACCEPT -->
        Gets a transformer that always throws an exception.
        This could be useful during testing as a placeholder.
        @param <I>  the input type
        @param <O>  the output type
        @return the transformer
        @see ExceptionTransformer
        <!-- ACCEPT >=> 683ed089-9f1d-11ea-8292-333445793454 -->



## Method: `java.org.apache.commons.collections4.TransformerUtils` / `public static <I, O> Transformer<I, O> nullTransformer()`


        <!-- 683ed08a-9f1d-11ea-8293-333445793454 <=< ACCEPT -->
        Gets a transformer that always returns null.
        @param <I>  the input type
        @param <O>  the output type
        @return the transformer
        @see ConstantTransformer
        <!-- ACCEPT >=> 683ed08a-9f1d-11ea-8293-333445793454 -->



## Method: `java.org.apache.commons.collections4.TransformerUtils` / `public static <T> Transformer<T, T> nopTransformer()`


        <!-- 683ed08b-9f1d-11ea-8294-333445793454 <=< ACCEPT -->
        Gets a transformer that returns the input object.
        The input object should be immutable to maintain the
        contract of Transformer (although this is not checked).
        @param <T>  the input/output type
        @return the transformer
        @see NOPTransformer
        <!-- ACCEPT >=> 683ed08b-9f1d-11ea-8294-333445793454 -->



## Method: `java.org.apache.commons.collections4.TransformerUtils` / `public static <T> Transformer<T, T> cloneTransformer()`


        <!-- 683ed08c-9f1d-11ea-8295-333445793454 <=< ACCEPT -->
        Gets a transformer that returns a clone of the input object.
        The input object will be cloned using one of these techniques (in order):
        <ul>
        <li>public clone method
        <li>public copy constructor
        <li>serialization clone
        <ul>
        @param <T>  the input/output type
        @return the transformer
        @see CloneTransformer
        <!-- ACCEPT >=> 683ed08c-9f1d-11ea-8295-333445793454 -->



## Method: `java.org.apache.commons.collections4.TransformerUtils` / `public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)`


        <!-- 683ed08d-9f1d-11ea-8296-333445793454 <=< ACCEPT -->
        Creates a Transformer that will return the same object each time the
        transformer is used.
        @param <I>  the input type
        @param <O>  the output type
        @param constantToReturn  the constant object to return each time in the transformer
        @return the transformer.
        @see ConstantTransformer
        <!-- ACCEPT >=> 683ed08d-9f1d-11ea-8296-333445793454 -->



## Method: `java.org.apache.commons.collections4.TransformerUtils` / `public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure)`


        <!-- 683ed08e-9f1d-11ea-8297-333445793454 <=< ACCEPT -->
        Creates a Transformer that calls a Closure each time the transformer is used.
        The transformer returns the input object.
        @param <T>  the input/output type
        @param closure  the closure to run each time in the transformer, not null
        @return the transformer
        @throws NullPointerException if the closure is null
        @see ClosureTransformer
        <!-- ACCEPT >=> 683ed08e-9f1d-11ea-8297-333445793454 -->



## Method: `java.org.apache.commons.collections4.TransformerUtils` / `public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate)`


        <!-- 683ed08f-9f1d-11ea-8298-333445793454 <=< ACCEPT -->
        Creates a Transformer that calls a Predicate each time the transformer is used.
        The transformer will return either Boolean.TRUE or Boolean.FALSE.
        @param <T>  the input type
        @param predicate  the predicate to run each time in the transformer, not null
        @return the transformer
        @throws NullPointerException if the predicate is null
        @see PredicateTransformer
        <!-- ACCEPT >=> 683ed08f-9f1d-11ea-8298-333445793454 -->



## Method: `java.org.apache.commons.collections4.TransformerUtils` / `public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory)`


        <!-- 683ed090-9f1d-11ea-8299-333445793454 <=< ACCEPT -->
        Creates a Transformer that calls a Factory each time the transformer is used.
        The transformer will return the value returned by the factory.
        @param <I>  the input type
        @param <O>  the output type
        @param factory  the factory to run each time in the transformer, not null
        @return the transformer
        @throws NullPointerException if the factory is null
        @see FactoryTransformer
        <!-- ACCEPT >=> 683ed090-9f1d-11ea-8299-333445793454 -->



## Method: `java.org.apache.commons.collections4.TransformerUtils` / `final Transformer<? super T, ? extends T>... transformers)`


        <!-- 683ed091-9f1d-11ea-829a-333445793454 <=< ACCEPT -->
        Create a new Transformer that calls each transformer in turn, passing the
        result into the next transformer.
        @param <T>  the input/output type
        @param transformers  an array of transformers to chain
        @return the transformer
        @throws NullPointerException if the transformers array or any of the transformers is null
        @see ChainedTransformer
        <!-- ACCEPT >=> 683ed091-9f1d-11ea-829a-333445793454 -->



## Method: `java.org.apache.commons.collections4.TransformerUtils` / `final Collection<? extends Transformer<? super T, ? extends T>> transformers)`


        <!-- 683ed092-9f1d-11ea-829b-333445793454 <=< ACCEPT -->
        Create a new Transformer that calls each transformer in turn, passing the
        result into the next transformer. The ordering is that of the iterator()
        method on the collection.
        @param <T>  the input/output type
        @param transformers  a collection of transformers to chain
        @return the transformer
        @throws NullPointerException if the transformers collection or any of the transformers is null
        @see ChainedTransformer
        <!-- ACCEPT >=> 683ed092-9f1d-11ea-829b-333445793454 -->



## Method: `java.org.apache.commons.collections4.TransformerUtils` / `final Transformer<? super T, ? extends T> trueTransformer)`


        <!-- 683ed093-9f1d-11ea-829c-333445793454 <=< ACCEPT -->
        Create a new Transformer that calls the transformer if the predicate is true,
        otherwise the input object is returned unchanged.
        @param <T>  the input / output type
        @param predicate  the predicate to switch on
        @param trueTransformer  the transformer called if the predicate is true
        @return the transformer
        @throws NullPointerException if either the predicate or transformer is null
        @see IfTransformer
        @since 4.1
        <!-- ACCEPT >=> 683ed093-9f1d-11ea-829c-333445793454 -->



## Method: `java.org.apache.commons.collections4.TransformerUtils` / `final Transformer<? super I, ? extends O> falseTransformer)`


        <!-- 683ed094-9f1d-11ea-829d-333445793454 <=< ACCEPT -->
        Create a new Transformer that calls one of two transformers depending
        on the specified predicate.
        @param <I>  the input type
        @param <O>  the output type
        @param predicate  the predicate to switch on
        @param trueTransformer  the transformer called if the predicate is true
        @param falseTransformer  the transformer called if the predicate is false
        @return the transformer
        @throws NullPointerException if either the predicate or transformer is null
        @see IfTransformer
        @since 4.1
        <!-- ACCEPT >=> 683ed094-9f1d-11ea-829d-333445793454 -->



## Method: `java.org.apache.commons.collections4.TransformerUtils` / `final Transformer<? super I, ? extends O> falseTransformer)`


        <!-- 683ed095-9f1d-11ea-829e-333445793454 <=< ACCEPT -->
        Create a new Transformer that calls one of two transformers depending
        on the specified predicate.
        @param <I>  the input type
        @param <O>  the output type
        @param predicate  the predicate to switch on
        @param trueTransformer  the transformer called if the predicate is true
        @param falseTransformer  the transformer called if the predicate is false
        @return the transformer
        @throws NullPointerException if either the predicate or transformer is null
        @see SwitchTransformer
        @deprecated as of 4.1, use {@link #ifTransformer(Predicate, Transformer, Transformer))
        <!-- ACCEPT >=> 683ed095-9f1d-11ea-829e-333445793454 -->



## Method: `java.org.apache.commons.collections4.TransformerUtils` / `final Transformer<? super I, ? extends O>[] transformers)`


        <!-- 683ed096-9f1d-11ea-829f-333445793454 <=< ACCEPT -->
        Create a new Transformer that calls one of the transformers depending
        on the predicates. The transformer at array location 0 is called if the
        predicate at array location 0 returned true. Each predicate is evaluated
        until one returns true. If no predicates evaluate to true, null is returned.
        @param <I>  the input type
        @param <O>  the output type
        @param predicates  an array of predicates to check
        @param transformers  an array of transformers to call
        @return the transformer
        @throws NullPointerException if the either array is null
        @throws NullPointerException if any element in the arrays is null
        @throws IllegalArgumentException if the arrays have different sizes
        @see SwitchTransformer
        <!-- ACCEPT >=> 683ed096-9f1d-11ea-829f-333445793454 -->



## Method: `java.org.apache.commons.collections4.TransformerUtils` / `final Transformer<? super I, ? extends O> defaultTransformer)`


        <!-- 683ef794-9f1d-11ea-82a0-333445793454 <=< ACCEPT -->
        Create a new Transformer that calls one of the transformers depending
        on the predicates. The transformer at array location 0 is called if the
        predicate at array location 0 returned true. Each predicate is evaluated
        until one returns true. If no predicates evaluate to true, the default
        transformer is called. If the default transformer is null, null is returned.
        @param <I>  the input type
        @param <O>  the output type
        @param predicates  an array of predicates to check
        @param transformers  an array of transformers to call
        @param defaultTransformer  the default to call if no predicate matches, null means return null
        @return the transformer
        @throws NullPointerException if the either array is null
        @throws NullPointerException if any element in the arrays is null
        @throws IllegalArgumentException if the arrays have different sizes
        @see SwitchTransformer
        <!-- ACCEPT >=> 683ef794-9f1d-11ea-82a0-333445793454 -->



## Method: `java.org.apache.commons.collections4.TransformerUtils` / `final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers)`


        <!-- 683ef795-9f1d-11ea-82a1-333445793454 <=< ACCEPT -->
        Create a new Transformer that calls one of the transformers depending
        on the predicates.
        <p>
        The Map consists of Predicate keys and Transformer values. A transformer
        is called if its matching predicate returns true. Each predicate is evaluated
        until one returns true. If no predicates evaluate to true, the default
        transformer is called. The default transformer is set in the map with a
        null key. If no default transformer is set, null will be returned in a default
        case. The ordering is that of the iterator() method on the entryset collection
        of the map.
        @param <I>  the input type
        @param <O>  the output type
        @param predicatesAndTransformers  a map of predicates to transformers
        @return the transformer
        @throws NullPointerException if the map is null
        @throws NullPointerException if any transformer in the map is null
        @throws ClassCastException  if the map elements are of the wrong type
        @see SwitchTransformer
        <!-- ACCEPT >=> 683ef795-9f1d-11ea-82a1-333445793454 -->



## Method: `java.org.apache.commons.collections4.TransformerUtils` / `final Map<I, Transformer<I, O>> objectsAndTransformers)`


        <!-- 683ef796-9f1d-11ea-82a2-333445793454 <=< ACCEPT -->
        Create a new Transformer that uses the input object as a key to find the
        transformer to call.
        <p>
        The Map consists of object keys and Transformer values. A transformer
        is called if the input object equals the key. If there is no match, the
        default transformer is called. The default transformer is set in the map
        using a null key. If no default is set, null will be returned in a default case.
        @param <I>  the input type
        @param <O>  the output type
        @param objectsAndTransformers  a map of objects to transformers
        @return the transformer
        @throws NullPointerException if the map is null
        @throws NullPointerException if any transformer in the map is null
        @see SwitchTransformer
        <!-- ACCEPT >=> 683ef796-9f1d-11ea-82a2-333445793454 -->



## Method: `java.org.apache.commons.collections4.TransformerUtils` / `public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()`


        <!-- 683ef797-9f1d-11ea-82a3-333445793454 <=< ACCEPT -->
        Gets a Transformer that expects an input Class object that it will instantiate.
        @param <T>  the output type
        @return the transformer
        @see InstantiateTransformer
        <!-- ACCEPT >=> 683ef797-9f1d-11ea-82a3-333445793454 -->



## Method: `java.org.apache.commons.collections4.TransformerUtils` / `final Class<?>[] paramTypes, final Object[] args)`


        <!-- 683ef798-9f1d-11ea-82a4-333445793454 <=< ACCEPT -->
        Creates a Transformer that expects an input Class object that it will
        instantiate. The constructor used is determined by the arguments specified
        to this method.
        @param <T>  the output type
        @param paramTypes  parameter types for the constructor, can be null
        @param args  the arguments to pass to the constructor, can be null
        @return the transformer
        @throws IllegalArgumentException if the paramTypes and args don't match
        @see InstantiateTransformer
        <!-- ACCEPT >=> 683ef798-9f1d-11ea-82a4-333445793454 -->



## Method: `java.org.apache.commons.collections4.TransformerUtils` / `public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)`


        <!-- 683ef799-9f1d-11ea-82a5-333445793454 <=< ACCEPT -->
        Creates a Transformer that uses the passed in Map to transform the input
        object (as a simple lookup).
        @param <I>  the input type
        @param <O>  the output type
        @param map  the map to use to transform the objects
        @return the transformer, or {@link ConstantTransformer#nullTransformer()} if the
        {@code map} is {@code null}
        @see MapTransformer
        <!-- ACCEPT >=> 683ef799-9f1d-11ea-82a5-333445793454 -->



## Method: `java.org.apache.commons.collections4.TransformerUtils` / `public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)`


        <!-- 683ef79a-9f1d-11ea-82a6-333445793454 <=< ACCEPT -->
        Gets a Transformer that invokes a method on the input object.
        The method must have no parameters. If the input object is null,
        null is returned.
        <p>
        For example, <code>TransformerUtils.invokerTransformer("getName");</code>
        will call the <code>getName/code> method on the input object to
        determine the transformer result.
        @param <I>  the input type
        @param <O>  the output type
        @param methodName  the method name to call on the input object, may not be null
        @return the transformer
        @throws NullPointerException if the methodName is null.
        @see InvokerTransformer
        <!-- ACCEPT >=> 683ef79a-9f1d-11ea-82a6-333445793454 -->



## Method: `java.org.apache.commons.collections4.TransformerUtils` / `final Object[] args)`


        <!-- 683ef79b-9f1d-11ea-82a7-333445793454 <=< ACCEPT -->
        Gets a Transformer that invokes a method on the input object.
        The method parameters are specified. If the input object is {@code null},
        {@code null} is returned.
        @param <I>  the input type
        @param <O>  the output type
        @param methodName  the name of the method
        @param paramTypes  the parameter types
        @param args  the arguments
        @return the transformer
        @throws NullPointerException if the method name is null
        @throws IllegalArgumentException if the paramTypes and args don't match
        @see InvokerTransformer
        <!-- ACCEPT >=> 683ef79b-9f1d-11ea-82a7-333445793454 -->



## Method: `java.org.apache.commons.collections4.TransformerUtils` / `public static <T> Transformer<T, String> stringValueTransformer()`


        <!-- 683ef79c-9f1d-11ea-82a8-333445793454 <=< ACCEPT -->
        Gets a transformer that returns a <code>java.lang.String</code>
        representation of the input object. This is achieved via the
        <code>toString</code> method, <code>null</code> returns 'null'.
        @param <T>  the input type
        @return the transformer
        @see StringValueTransformer
        <!-- ACCEPT >=> 683ef79c-9f1d-11ea-82a8-333445793454 -->



# File: `java.org.apache.commons.collections4.Trie`

## Interface: `java.org.apache.commons.collections4.Trie` / `public interface Trie<K, V> extends IterableSortedMap<K, V>`


        <!-- 683ef79d-9f1d-11ea-82a9-333445793454 <=< ACCEPT -->
        Defines the interface for a prefix tree, an ordered tree data structure. For
        more information, see <a href="http://en.wikipedia.org/wiki/Trie">Tries</a>.
        @since 4.0
        @version $Id$
        <!-- ACCEPT >=> 683ef79d-9f1d-11ea-82a9-333445793454 -->



## Method: `java.org.apache.commons.collections4.Trie` / `SortedMap<K, V> prefixMap(K key)`


        <!-- 683ef79e-9f1d-11ea-82aa-333445793454 <=< ACCEPT -->
        Returns a view of this {@link Trie} of all elements that are prefixed
        by the given key.
        <p>
        In a {@link Trie} with fixed size keys, this is essentially a
        {@link #get(Object)} operation.
        <p>
        For example, if the {@link Trie} contains 'Anna', 'Anael',
        'Analu', 'Andreas', 'Andrea', 'Andres', and 'Anatole', then
        a lookup of 'And' would return 'Andreas', 'Andrea', and 'Andres'.
        @param key  the key used in the search
        @return a {@link SortedMap} view of this {@link Trie} with all elements whose
        key is prefixed by the search key
        <!-- ACCEPT >=> 683ef79e-9f1d-11ea-82aa-333445793454 -->



# File: `java.org.apache.commons.collections4.TrieUtils`

## Class: `java.org.apache.commons.collections4.TrieUtils` / `public class TrieUtils`


        <!-- 683ef79f-9f1d-11ea-82ab-333445793454 <=< ACCEPT -->
        A collection of {@link Trie} utilities.
        @since 4.0
        @version $Id$
        <!-- ACCEPT >=> 683ef79f-9f1d-11ea-82ab-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.TrieUtils` / `private TrieUtils()`


        <!-- 683f1e9d-9f1d-11ea-82ac-333445793454 <=< ACCEPT -->
        {@link TrieUtils} should not normally be instantiated.
        <!-- ACCEPT >=> 683f1e9d-9f1d-11ea-82ac-333445793454 -->



## Method: `java.org.apache.commons.collections4.TrieUtils` / `public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)`


        <!-- 683f1e9e-9f1d-11ea-82ad-333445793454 <=< ACCEPT -->
        Returns an unmodifiable instance of a {@link Trie}
        @param <K>  the key type
        @param <V>  the value type
        @param trie  the trie to make unmodifiable, must not be null
        @return an unmodifiable trie backed by the given trie
        @throws NullPointerException if trie is null
        @see java.util.Collections#unmodifiableMap(java.util.Map)
        <!-- ACCEPT >=> 683f1e9e-9f1d-11ea-82ad-333445793454 -->



# File: `java.org.apache.commons.collections4.Unmodifiable`

## Interface: `java.org.apache.commons.collections4.Unmodifiable` / `public interface Unmodifiable`


        <!-- 683f1e9f-9f1d-11ea-82ae-333445793454 <=< ACCEPT -->
        Marker interface for collections, maps and iterators that are unmodifiable.
        <p>
        This interface enables testing such as:
        <pre>
        if (coll instanceof Unmodifiable) {
        coll = new ArrayList(coll);
        }
        // now we know coll is modifiable
        </pre>
        Of course all this only works if you use the Unmodifiable classes defined
        in this library. If you use the JDK unmodifiable class via {@code java.util Collections}
        then the interface won't be there.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 683f1e9f-9f1d-11ea-82ae-333445793454 -->



# File: `java.org.apache.commons.collections4.bag.AbstractBagDecorator`

## Class: `java.org.apache.commons.collections4.bag.AbstractBagDecorator` / `extends AbstractCollectionDecorator<E> implements Bag<E>`


        <!-- 683f1ea0-9f1d-11ea-82af-333445793454 <=< ACCEPT -->
        Decorates another <code>Bag</code> to provide additional behaviour.
        <p>
        Methods are forwarded directly to the decorated bag.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 683f1ea0-9f1d-11ea-82af-333445793454 -->



## Field: `java.org.apache.commons.collections4.bag.AbstractBagDecorator` / `private static final long serialVersionUID`


        <!-- 683f1ea1-9f1d-11ea-82b0-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 683f1ea1-9f1d-11ea-82b0-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bag.AbstractBagDecorator` / `protected AbstractBagDecorator()`


        <!-- 683f1ea2-9f1d-11ea-82b1-333445793454 <=< ACCEPT -->
        Constructor only used in deserialization, do not use otherwise.
        @since 3.1
        <!-- ACCEPT >=> 683f1ea2-9f1d-11ea-82b1-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bag.AbstractBagDecorator` / `protected AbstractBagDecorator(final Bag<E> bag)`


        <!-- 683f1ea3-9f1d-11ea-82b2-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param bag  the bag to decorate, must not be null
        @throws NullPointerException if bag is null
        <!-- ACCEPT >=> 683f1ea3-9f1d-11ea-82b2-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.AbstractBagDecorator` / `protected Bag<E> decorated()`


        <!-- 683f1ea4-9f1d-11ea-82b3-333445793454 <=< ACCEPT -->
        Gets the bag being decorated.
        @return the decorated bag
        <!-- ACCEPT >=> 683f1ea4-9f1d-11ea-82b3-333445793454 -->



# File: `java.org.apache.commons.collections4.bag.AbstractMapBag`

## Class: `java.org.apache.commons.collections4.bag.AbstractMapBag` / `public abstract class AbstractMapBag<E> implements Bag<E>`


        <!-- 683f1ea5-9f1d-11ea-82b4-333445793454 <=< ACCEPT -->
        Abstract implementation of the {@link Bag} interface to simplify the creation
        of subclass implementations.
        <p>
        Subclasses specify a Map implementation to use as the internal storage. The
        map will be used to map bag elements to a number; the number represents the
        number of occurrences of that element in the bag.
        @since 3.0 (previously DefaultMapBag v2.0)
        @version $Id$
        <!-- ACCEPT >=> 683f1ea5-9f1d-11ea-82b4-333445793454 -->



## Field: `java.org.apache.commons.collections4.bag.AbstractMapBag` / `private transient Map<E, MutableInteger> map`


        <!-- 683f1ea6-9f1d-11ea-82b5-333445793454 <=< ACCEPT -->
        The map to use to store the data
        <!-- ACCEPT >=> 683f1ea6-9f1d-11ea-82b5-333445793454 -->



## Field: `java.org.apache.commons.collections4.bag.AbstractMapBag` / `private int size`


        <!-- 683f1ea7-9f1d-11ea-82b6-333445793454 <=< ACCEPT -->
        The current total size of the bag
        <!-- ACCEPT >=> 683f1ea7-9f1d-11ea-82b6-333445793454 -->



## Field: `java.org.apache.commons.collections4.bag.AbstractMapBag` / `private transient int modCount`


        <!-- 683f1ea8-9f1d-11ea-82b7-333445793454 <=< ACCEPT -->
        The modification count for fail fast iterators
        <!-- ACCEPT >=> 683f1ea8-9f1d-11ea-82b7-333445793454 -->



## Field: `java.org.apache.commons.collections4.bag.AbstractMapBag` / `private transient Set<E> uniqueSet`


        <!-- 683f1ea9-9f1d-11ea-82b8-333445793454 <=< ACCEPT -->
        Unique view of the elements
        <!-- ACCEPT >=> 683f1ea9-9f1d-11ea-82b8-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bag.AbstractMapBag` / `protected AbstractMapBag()`


        <!-- 683f1eaa-9f1d-11ea-82b9-333445793454 <=< ACCEPT -->
        Constructor needed for subclass serialisation.
        <!-- ACCEPT >=> 683f1eaa-9f1d-11ea-82b9-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bag.AbstractMapBag` / `protected AbstractMapBag(final Map<E, MutableInteger> map)`


        <!-- 683f1eab-9f1d-11ea-82ba-333445793454 <=< ACCEPT -->
        Constructor that assigns the specified Map as the backing store. The map
        must be empty and non-null.
        @param map the map to assign
        <!-- ACCEPT >=> 683f1eab-9f1d-11ea-82ba-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.AbstractMapBag` / `protected Map<E, MutableInteger> getMap()`


        <!-- 683f1eac-9f1d-11ea-82bb-333445793454 <=< ACCEPT -->
        Utility method for implementations to access the map that backs this bag.
        Not intended for interactive use outside of subclasses.
        @return the map being used by the Bag
        <!-- ACCEPT >=> 683f1eac-9f1d-11ea-82bb-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.AbstractMapBag` / `public int size()`


        <!-- 683f1ead-9f1d-11ea-82bc-333445793454 <=< ACCEPT -->
        Returns the number of elements in this bag.
        @return current size of the bag
        <!-- ACCEPT >=> 683f1ead-9f1d-11ea-82bc-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.AbstractMapBag` / `public boolean isEmpty()`


        <!-- 683f1eae-9f1d-11ea-82bd-333445793454 <=< ACCEPT -->
        Returns true if the underlying map is empty.
        @return true if bag is empty
        <!-- ACCEPT >=> 683f1eae-9f1d-11ea-82bd-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.AbstractMapBag` / `public int getCount(final Object object)`


        <!-- 683f1eaf-9f1d-11ea-82be-333445793454 <=< ACCEPT -->
        Returns the number of occurrence of the given element in this bag by
        looking up its count in the underlying map.
        @param object the object to search for
        @return the number of occurrences of the object, zero if not found
        <!-- ACCEPT >=> 683f1eaf-9f1d-11ea-82be-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.AbstractMapBag` / `public boolean contains(final Object object)`


        <!-- 683f1eb0-9f1d-11ea-82bf-333445793454 <=< ACCEPT -->
        Determines if the bag contains the given element by checking if the
        underlying map contains the element as a key.
        @param object the object to search for
        @return true if the bag contains the given element
        <!-- ACCEPT >=> 683f1eb0-9f1d-11ea-82bf-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.AbstractMapBag` / `public boolean containsAll(final Collection<?> coll)`


        <!-- 683f45a7-9f1d-11ea-82c0-333445793454 <=< ACCEPT -->
        Determines if the bag contains the given elements.
        @param coll the collection to check against
        @return <code>true</code> if the Bag contains all the collection
        <!-- ACCEPT >=> 683f45a7-9f1d-11ea-82c0-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.AbstractMapBag` / `boolean containsAll(final Bag<?> other)`


        <!-- 683f45a8-9f1d-11ea-82c1-333445793454 <=< ACCEPT -->
        Returns <code>true</code> if the bag contains all elements in the given
        collection, respecting cardinality.
        @param other the bag to check against
        @return <code>true</code> if the Bag contains all the collection
        <!-- ACCEPT >=> 683f45a8-9f1d-11ea-82c1-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.AbstractMapBag` / `public Iterator<E> iterator()`


        <!-- 683f45a9-9f1d-11ea-82c2-333445793454 <=< ACCEPT -->
        Gets an iterator over the bag elements. Elements present in the Bag more
        than once will be returned repeatedly.
        @return the iterator
        <!-- ACCEPT >=> 683f45a9-9f1d-11ea-82c2-333445793454 -->



## Class: `java.org.apache.commons.collections4.bag.AbstractMapBag` / `static class BagIterator<E> implements Iterator<E>`


        <!-- 683f45aa-9f1d-11ea-82c3-333445793454 <=< ACCEPT -->
        Inner class iterator for the Bag.
        <!-- ACCEPT >=> 683f45aa-9f1d-11ea-82c3-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bag.AbstractMapBag` / `public BagIterator(final AbstractMapBag<E> parent)`


        <!-- 683f45ab-9f1d-11ea-82c4-333445793454 <=< ACCEPT -->
        Constructor.
        @param parent the parent bag
        <!-- ACCEPT >=> 683f45ab-9f1d-11ea-82c4-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.AbstractMapBag` / `public boolean hasNext()`


        <!-- 683f45ac-9f1d-11ea-82c5-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <!-- ACCEPT >=> 683f45ac-9f1d-11ea-82c5-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.AbstractMapBag` / `public E next()`


        <!-- 683f45ad-9f1d-11ea-82c6-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <!-- ACCEPT >=> 683f45ad-9f1d-11ea-82c6-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.AbstractMapBag` / `public void remove()`


        <!-- 683f45ae-9f1d-11ea-82c7-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <!-- ACCEPT >=> 683f45ae-9f1d-11ea-82c7-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.AbstractMapBag` / `public boolean add(final E object)`


        <!-- 683f45af-9f1d-11ea-82c8-333445793454 <=< ACCEPT -->
        Adds a new element to the bag, incrementing its count in the underlying map.
        @param object the object to add
        @return <code>true</code> if the object was not already in the <code>uniqueSet</code>
        <!-- ACCEPT >=> 683f45af-9f1d-11ea-82c8-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.AbstractMapBag` / `public boolean add(final E object, final int nCopies)`


        <!-- 683f45b0-9f1d-11ea-82c9-333445793454 <=< ACCEPT -->
        Adds a new element to the bag, incrementing its count in the map.
        @param object the object to search for
        @param nCopies the number of copies to add
        @return <code>true</code> if the object was not already in the <code>uniqueSet</code>
        <!-- ACCEPT >=> 683f45b0-9f1d-11ea-82c9-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.AbstractMapBag` / `public boolean addAll(final Collection<? extends E> coll)`


        <!-- 683f45b1-9f1d-11ea-82ca-333445793454 <=< ACCEPT -->
        Invokes {@link #add(Object)} for each element in the given collection.
        @param coll the collection to add
        @return <code>true</code> if this call changed the bag
        <!-- ACCEPT >=> 683f45b1-9f1d-11ea-82ca-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.AbstractMapBag` / `public void clear()`


        <!-- 683f45b2-9f1d-11ea-82cb-333445793454 <=< ACCEPT -->
        Clears the bag by clearing the underlying map.
        <!-- ACCEPT >=> 683f45b2-9f1d-11ea-82cb-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.AbstractMapBag` / `public boolean remove(final Object object)`


        <!-- 683f45b3-9f1d-11ea-82cc-333445793454 <=< ACCEPT -->
        Removes all copies of the specified object from the bag.
        @param object the object to remove
        @return true if the bag changed
        <!-- ACCEPT >=> 683f45b3-9f1d-11ea-82cc-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.AbstractMapBag` / `public boolean remove(final Object object, final int nCopies)`


        <!-- 683f45b4-9f1d-11ea-82cd-333445793454 <=< ACCEPT -->
        Removes a specified number of copies of an object from the bag.
        @param object the object to remove
        @param nCopies the number of copies to remove
        @return true if the bag changed
        <!-- ACCEPT >=> 683f45b4-9f1d-11ea-82cd-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.AbstractMapBag` / `public boolean removeAll(final Collection<?> coll)`


        <!-- 683f45b5-9f1d-11ea-82ce-333445793454 <=< ACCEPT -->
        Removes objects from the bag according to their count in the specified
        collection.
        @param coll the collection to use
        @return true if the bag changed
        <!-- ACCEPT >=> 683f45b5-9f1d-11ea-82ce-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.AbstractMapBag` / `public boolean retainAll(final Collection<?> coll)`


        <!-- 683f45b6-9f1d-11ea-82cf-333445793454 <=< ACCEPT -->
        Remove any members of the bag that are not in the given bag, respecting
        cardinality.
        @param coll the collection to retain
        @return true if this call changed the collection
        <!-- ACCEPT >=> 683f45b6-9f1d-11ea-82cf-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.AbstractMapBag` / `boolean retainAll(final Bag<?> other)`


        <!-- 683f45b7-9f1d-11ea-82d0-333445793454 <=< ACCEPT -->
        Remove any members of the bag that are not in the given bag, respecting
        cardinality.
        @see #retainAll(Collection)
        @param other the bag to retain
        @return <code>true</code> if this call changed the collection
        <!-- ACCEPT >=> 683f45b7-9f1d-11ea-82d0-333445793454 -->



## Class: `java.org.apache.commons.collections4.bag.AbstractMapBag` / `protected static class MutableInteger`


        <!-- 683f45b8-9f1d-11ea-82d1-333445793454 <=< ACCEPT -->
        Mutable integer class for storing the data.
        <!-- ACCEPT >=> 683f45b8-9f1d-11ea-82d1-333445793454 -->



## Field: `java.org.apache.commons.collections4.bag.AbstractMapBag` / `protected int value`


        <!-- 683f45b9-9f1d-11ea-82d2-333445793454 <=< ACCEPT -->
        The value of this mutable.
        <!-- ACCEPT >=> 683f45b9-9f1d-11ea-82d2-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bag.AbstractMapBag` / `MutableInteger(final int value)`


        <!-- 683f45ba-9f1d-11ea-82d3-333445793454 <=< ACCEPT -->
        Constructor.
        @param value the initial value
        <!-- ACCEPT >=> 683f45ba-9f1d-11ea-82d3-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.AbstractMapBag` / `public Object[] toArray()`


        <!-- 683f6cb3-9f1d-11ea-82d4-333445793454 <=< ACCEPT -->
        Returns an array of all of this bag's elements.
        @return an array of all of this bag's elements
        <!-- ACCEPT >=> 683f6cb3-9f1d-11ea-82d4-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.AbstractMapBag` / `public <T> T[] toArray(T[] array)`


        <!-- 683f6cb4-9f1d-11ea-82d5-333445793454 <=< ACCEPT -->
        Returns an array of all of this bag's elements.
        If the input array has more elements than are in the bag,
        trailing elements will be set to null.
        @param <T> the type of the array elements
        @param array the array to populate
        @return an array of all of this bag's elements
        @throws ArrayStoreException if the runtime type of the specified array is not
        a supertype of the runtime type of the elements in this list
        @throws NullPointerException if the specified array is null
        <!-- ACCEPT >=> 683f6cb4-9f1d-11ea-82d5-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.AbstractMapBag` / `public Set<E> uniqueSet()`


        <!-- 683f6cb5-9f1d-11ea-82d6-333445793454 <=< ACCEPT -->
        Returns an unmodifiable view of the underlying map's key set.
        @return the set of unique elements in this bag
        <!-- ACCEPT >=> 683f6cb5-9f1d-11ea-82d6-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.AbstractMapBag` / `protected void doWriteObject(final ObjectOutputStream out) throws IOException`


        <!-- 683f6cb6-9f1d-11ea-82d7-333445793454 <=< ACCEPT -->
        Write the map out using a custom routine.
        @param out the output stream
        @throws IOException any of the usual I/O related exceptions
        <!-- ACCEPT >=> 683f6cb6-9f1d-11ea-82d7-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.AbstractMapBag` / `throws IOException, ClassNotFoundException`


        <!-- 683f6cb7-9f1d-11ea-82d8-333445793454 <=< ACCEPT -->
        Read the map in using a custom routine.
        @param map the map to use
        @param in the input stream
        @throws IOException any of the usual I/O related exceptions
        @throws ClassNotFoundException if the stream contains an object which class can not be loaded
        @throws ClassCastException if the stream does not contain the correct objects
        <!-- ACCEPT >=> 683f6cb7-9f1d-11ea-82d8-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.AbstractMapBag` / `public boolean equals(final Object object)`


        <!-- 683f6cb8-9f1d-11ea-82d9-333445793454 <=< ACCEPT -->
        Compares this Bag to another. This Bag equals another Bag if it contains
        the same number of occurrences of the same elements.
        @param object the Bag to compare to
        @return true if equal
        <!-- ACCEPT >=> 683f6cb8-9f1d-11ea-82d9-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.AbstractMapBag` / `public int hashCode()`


        <!-- 683f6cb9-9f1d-11ea-82da-333445793454 <=< ACCEPT -->
        Gets a hash code for the Bag compatible with the definition of equals.
        The hash code is defined as the sum total of a hash code for each
        element. The per element hash code is defined as
        <code>(e==null ? 0 : e.hashCode()) ^ noOccurances)</code>. This hash code
        is compatible with the Set interface.
        @return the hash code of the Bag
        <!-- ACCEPT >=> 683f6cb9-9f1d-11ea-82da-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.AbstractMapBag` / `public String toString()`


        <!-- 683f6cba-9f1d-11ea-82db-333445793454 <=< ACCEPT -->
        Implement a toString() method suitable for debugging.
        @return a debugging toString
        <!-- ACCEPT >=> 683f6cba-9f1d-11ea-82db-333445793454 -->



# File: `java.org.apache.commons.collections4.bag.AbstractSortedBagDecorator`

## Class: `java.org.apache.commons.collections4.bag.AbstractSortedBagDecorator` / `extends AbstractBagDecorator<E> implements SortedBag<E>`


        <!-- 683f6cbb-9f1d-11ea-82dc-333445793454 <=< ACCEPT -->
        Decorates another <code>SortedBag</code> to provide additional behaviour.
        <p>
        Methods are forwarded directly to the decorated bag.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 683f6cbb-9f1d-11ea-82dc-333445793454 -->



## Field: `java.org.apache.commons.collections4.bag.AbstractSortedBagDecorator` / `private static final long serialVersionUID`


        <!-- 683f6cbc-9f1d-11ea-82dd-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 683f6cbc-9f1d-11ea-82dd-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bag.AbstractSortedBagDecorator` / `protected AbstractSortedBagDecorator()`


        <!-- 683f6cbd-9f1d-11ea-82de-333445793454 <=< ACCEPT -->
        Constructor only used in deserialization, do not use otherwise.
        @since 3.1
        <!-- ACCEPT >=> 683f6cbd-9f1d-11ea-82de-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bag.AbstractSortedBagDecorator` / `protected AbstractSortedBagDecorator(final SortedBag<E> bag)`


        <!-- 683f6cbe-9f1d-11ea-82df-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param bag  the bag to decorate, must not be null
        @throws NullPointerException if bag is null
        <!-- ACCEPT >=> 683f6cbe-9f1d-11ea-82df-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.AbstractSortedBagDecorator` / `protected SortedBag<E> decorated()`


        <!-- 683f6cbf-9f1d-11ea-82e0-333445793454 <=< ACCEPT -->
        Gets the bag being decorated.
        @return the decorated bag
        <!-- ACCEPT >=> 683f6cbf-9f1d-11ea-82e0-333445793454 -->



# File: `java.org.apache.commons.collections4.bag.CollectionBag`

## Class: `java.org.apache.commons.collections4.bag.CollectionBag` / `public final class CollectionBag<E> extends AbstractBagDecorator<E>`


        <!-- 683f6cc0-9f1d-11ea-82e1-333445793454 <=< ACCEPT -->
        Decorates another {@link Bag} to comply with the Collection contract.
        <p>
        By decorating an existing {@link Bag} instance with a {@link CollectionBag},
        it can be safely passed on to methods that require Collection types that
        are fully compliant with the Collection contract.
        <p>
        The method javadoc highlights the differences compared to the original Bag interface.
        @see Bag
        @param <E> the type held in the bag
        @since 4.0
        @version $Id$
        <!-- ACCEPT >=> 683f6cc0-9f1d-11ea-82e1-333445793454 -->



## Field: `java.org.apache.commons.collections4.bag.CollectionBag` / `private static final long serialVersionUID`


        <!-- 683f6cc1-9f1d-11ea-82e2-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 683f6cc1-9f1d-11ea-82e2-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.CollectionBag` / `public static <E> Bag<E> collectionBag(final Bag<E> bag)`


        <!-- 683f6cc2-9f1d-11ea-82e3-333445793454 <=< ACCEPT -->
        Factory method to create a bag that complies to the Collection contract.
        @param <E> the type of the elements in the bag
        @param bag  the bag to decorate, must not be null
        @return a Bag that complies to the Collection contract
        @throws NullPointerException if bag is null
        <!-- ACCEPT >=> 683f6cc2-9f1d-11ea-82e3-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bag.CollectionBag` / `public CollectionBag(final Bag<E> bag)`


        <!-- 683f6cc3-9f1d-11ea-82e4-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param bag  the bag to decorate, must not be null
        @throws NullPointerException if bag is null
        <!-- ACCEPT >=> 683f6cc3-9f1d-11ea-82e4-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.CollectionBag` / `private void writeObject(final ObjectOutputStream out) throws IOException`


        <!-- 683f6cc4-9f1d-11ea-82e5-333445793454 <=< ACCEPT -->
        Write the collection out using a custom routine.
        @param out  the output stream
        @throws IOException
        <!-- ACCEPT >=> 683f6cc4-9f1d-11ea-82e5-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.CollectionBag` / `private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException`


        <!-- 683f93bc-9f1d-11ea-82e6-333445793454 <=< ACCEPT -->
        Read the collection in using a custom routine.
        @param in  the input stream
        @throws IOException
        @throws ClassNotFoundException
        @throws ClassCastException if deserialised object has wrong type
        <!-- ACCEPT >=> 683f93bc-9f1d-11ea-82e6-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.CollectionBag` / `public boolean containsAll(final Collection<?> coll)`


        <!-- 683f93bd-9f1d-11ea-82e7-333445793454 <=< ACCEPT -->
        <i>(Change)</i>
        Returns <code>true</code> if the bag contains all elements in
        the given collection, <b>not</b> respecting cardinality. That is,
        if the given collection <code>coll</code> contains at least one of
        every object contained in this object.
        @param coll  the collection to check against
        @return <code>true</code> if the Bag contains at least one of every object in the collection
        <!-- ACCEPT >=> 683f93bd-9f1d-11ea-82e7-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.CollectionBag` / `public boolean add(final E object)`


        <!-- 683f93be-9f1d-11ea-82e8-333445793454 <=< ACCEPT -->
        <i>(Change)</i>
        Adds one copy of the specified object to the Bag.
        <p>
        Since this method always increases the size of the bag, it
        will always return <code>true</code>.
        @param object  the object to add
        @return <code>true</code>, always
        <!-- ACCEPT >=> 683f93be-9f1d-11ea-82e8-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.CollectionBag` / `public boolean remove(final Object object)`


        <!-- 683f93bf-9f1d-11ea-82e9-333445793454 <=< ACCEPT -->
        <i>(Change)</i>
        Removes the first occurrence of the given object from the bag.
        <p>
        This will also remove the object from the {@link #uniqueSet()} if the
        bag contains no occurrence anymore of the object after this operation.
        @param object  the object to remove
        @return <code>true</code> if this call changed the collection
        <!-- ACCEPT >=> 683f93bf-9f1d-11ea-82e9-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.CollectionBag` / `public boolean removeAll(final Collection<?> coll)`


        <!-- 683f93c0-9f1d-11ea-82ea-333445793454 <=< ACCEPT -->
        <i>(Change)</i>
        Remove all elements represented in the given collection,
        <b>not</b> respecting cardinality. That is, remove <i>all</i>
        occurrences of every object contained in the given collection.
        @param coll  the collection to remove
        @return <code>true</code> if this call changed the collection
        <!-- ACCEPT >=> 683f93c0-9f1d-11ea-82ea-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.CollectionBag` / `public boolean retainAll(final Collection<?> coll)`


        <!-- 683f93c1-9f1d-11ea-82eb-333445793454 <=< ACCEPT -->
        <i>(Change)</i>
        Remove any members of the bag that are not in the given collection,
        <i>not</i> respecting cardinality. That is, any object in the given
        collection <code>coll</code> will be retained in the bag with the same
        number of copies prior to this operation. All other objects will be
        completely removed from this bag.
        <p>
        This implementation iterates over the elements of this bag, checking
        each element in turn to see if it's contained in <code>coll</code>.
        If it's not contained, it's removed from this bag. As a consequence,
        it is advised to use a collection type for <code>coll</code> that provides
        a fast (e.g. O(1)) implementation of {@link Collection#contains(Object)}.
        @param coll  the collection to retain
        @return <code>true</code> if this call changed the collection
        <!-- ACCEPT >=> 683f93c1-9f1d-11ea-82eb-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.CollectionBag` / `public boolean add(final E object, final int count)`


        <!-- 683f93c2-9f1d-11ea-82ec-333445793454 <=< ACCEPT -->
        <i>(Change)</i>
        Adds <code>count</code> copies of the specified object to the Bag.
        <p>
        Since this method always increases the size of the bag, it
        will always return <code>true</code>.
        @param object  the object to add
        @param count  the number of copies to add
        @return <code>true</code>, always
        <!-- ACCEPT >=> 683f93c2-9f1d-11ea-82ec-333445793454 -->



# File: `java.org.apache.commons.collections4.bag.CollectionSortedBag`

## Class: `java.org.apache.commons.collections4.bag.CollectionSortedBag` / `public final class CollectionSortedBag<E> extends AbstractSortedBagDecorator<E>`


        <!-- 683f93c3-9f1d-11ea-82ed-333445793454 <=< ACCEPT -->
        Decorates another {@link SortedBag} to comply with the Collection contract.
        @since 4.0
        @version $Id$
        <!-- ACCEPT >=> 683f93c3-9f1d-11ea-82ed-333445793454 -->



## Field: `java.org.apache.commons.collections4.bag.CollectionSortedBag` / `private static final long serialVersionUID`


        <!-- 683f93c4-9f1d-11ea-82ee-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 683f93c4-9f1d-11ea-82ee-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.CollectionSortedBag` / `public static <E> SortedBag<E> collectionSortedBag(final SortedBag<E> bag)`


        <!-- 683f93c5-9f1d-11ea-82ef-333445793454 <=< ACCEPT -->
        Factory method to create a sorted bag that complies to the Collection contract.
        @param <E> the type of the elements in the bag
        @param bag  the sorted bag to decorate, must not be null
        @return a SortedBag that complies to the Collection contract
        @throws NullPointerException if bag is null
        <!-- ACCEPT >=> 683f93c5-9f1d-11ea-82ef-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bag.CollectionSortedBag` / `public CollectionSortedBag(final SortedBag<E> bag)`


        <!-- 683f93c6-9f1d-11ea-82f0-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param bag  the sorted bag to decorate, must not be null
        @throws NullPointerException if bag is null
        <!-- ACCEPT >=> 683f93c6-9f1d-11ea-82f0-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.CollectionSortedBag` / `private void writeObject(final ObjectOutputStream out) throws IOException`


        <!-- 683f93c7-9f1d-11ea-82f1-333445793454 <=< ACCEPT -->
        Write the collection out using a custom routine.
        @param out  the output stream
        @throws IOException
        <!-- ACCEPT >=> 683f93c7-9f1d-11ea-82f1-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.CollectionSortedBag` / `private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException`


        <!-- 683f93c8-9f1d-11ea-82f2-333445793454 <=< ACCEPT -->
        Read the collection in using a custom routine.
        @param in  the input stream
        @throws IOException
        @throws ClassNotFoundException
        @throws ClassCastException if deserialised object has wrong type
        <!-- ACCEPT >=> 683f93c8-9f1d-11ea-82f2-333445793454 -->



# File: `java.org.apache.commons.collections4.bag.HashBag`

## Class: `java.org.apache.commons.collections4.bag.HashBag` / `public class HashBag<E> extends AbstractMapBag<E> implements Serializable`


        <!-- 683f93c9-9f1d-11ea-82f3-333445793454 <=< ACCEPT -->
        Implements {@code Bag}, using a {@link HashMap} to provide the
        data storage. This is the standard implementation of a bag.
        <p>
        A {@code Bag} stores each object in the collection together with a
        count of occurrences. Extra methods on the interface allow multiple copies
        of an object to be added or removed at once. It is important to read the
        interface javadoc carefully as several methods violate the
        {@link Collection} interface specification.
        @since 3.0 (previously in main package v2.0)
        @version $Id$
        <!-- ACCEPT >=> 683f93c9-9f1d-11ea-82f3-333445793454 -->



## Field: `java.org.apache.commons.collections4.bag.HashBag` / `private static final long serialVersionUID`


        <!-- 683f93ca-9f1d-11ea-82f4-333445793454 <=< ACCEPT -->
        Serial version lock
        <!-- ACCEPT >=> 683f93ca-9f1d-11ea-82f4-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bag.HashBag` / `public HashBag()`


        <!-- 683f93cb-9f1d-11ea-82f5-333445793454 <=< ACCEPT -->
        Constructs an empty {@link HashBag}.
        <!-- ACCEPT >=> 683f93cb-9f1d-11ea-82f5-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bag.HashBag` / `public HashBag(final Collection<? extends E> coll)`


        <!-- 683f93cc-9f1d-11ea-82f6-333445793454 <=< ACCEPT -->
        Constructs a bag containing all the members of the given collection.
        @param coll  a collection to copy into this bag
        <!-- ACCEPT >=> 683f93cc-9f1d-11ea-82f6-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.HashBag` / `private void writeObject(final ObjectOutputStream out) throws IOException`


        <!-- 683fbabd-9f1d-11ea-82f7-333445793454 <=< ACCEPT -->
        Write the bag out using a custom routine.
        <!-- ACCEPT >=> 683fbabd-9f1d-11ea-82f7-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.HashBag` / `private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException`


        <!-- 683fbabe-9f1d-11ea-82f8-333445793454 <=< ACCEPT -->
        Read the bag in using a custom routine.
        <!-- ACCEPT >=> 683fbabe-9f1d-11ea-82f8-333445793454 -->



# File: `java.org.apache.commons.collections4.bag.PredicatedBag`

## Class: `java.org.apache.commons.collections4.bag.PredicatedBag` / `public class PredicatedBag<E> extends PredicatedCollection<E> implements Bag<E>`


        <!-- 683fbabf-9f1d-11ea-82f9-333445793454 <=< ACCEPT -->
        Decorates another {@link Bag} to validate that additions
        match a specified predicate.
        <p>
        This bag exists to provide validation for the decorated bag.
        It is normally created to decorate an empty bag.
        If an object cannot be added to the bag, an {@link IllegalArgumentException} is thrown.
        <p>
        One usage would be to ensure that no null entries are added to the bag.
        <pre>
        Bag bag = PredicatedBag.predicatedBag(new HashBag(), NotNullPredicate.INSTANCE);
        </pre>
        <p>
        This class is Serializable from Commons Collections 3.1.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 683fbabf-9f1d-11ea-82f9-333445793454 -->



## Field: `java.org.apache.commons.collections4.bag.PredicatedBag` / `private static final long serialVersionUID`


        <!-- 683fbac0-9f1d-11ea-82fa-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 683fbac0-9f1d-11ea-82fa-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.PredicatedBag` / `public static <E> PredicatedBag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)`


        <!-- 683fbac1-9f1d-11ea-82fb-333445793454 <=< ACCEPT -->
        Factory method to create a predicated (validating) bag.
        <p>
        If there are any elements already in the bag being decorated, they
        are validated.
        @param <E> the type of the elements in the bag
        @param bag  the bag to decorate, must not be null
        @param predicate  the predicate to use for validation, must not be null
        @return a new predicated Bag
        @throws NullPointerException if bag or predicate is null
        @throws IllegalArgumentException if the bag contains invalid elements
        @since 4.0
        <!-- ACCEPT >=> 683fbac1-9f1d-11ea-82fb-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bag.PredicatedBag` / `protected PredicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)`


        <!-- 683fbac2-9f1d-11ea-82fc-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        <p>
        If there are any elements already in the bag being decorated, they
        are validated.
        @param bag  the bag to decorate, must not be null
        @param predicate  the predicate to use for validation, must not be null
        @throws NullPointerException if bag or predicate is null
        @throws IllegalArgumentException if the bag contains invalid elements
        <!-- ACCEPT >=> 683fbac2-9f1d-11ea-82fc-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.PredicatedBag` / `protected Bag<E> decorated()`


        <!-- 683fbac3-9f1d-11ea-82fd-333445793454 <=< ACCEPT -->
        Gets the decorated bag.
        @return the decorated bag
        <!-- ACCEPT >=> 683fbac3-9f1d-11ea-82fd-333445793454 -->



# File: `java.org.apache.commons.collections4.bag.PredicatedSortedBag`

## Class: `java.org.apache.commons.collections4.bag.PredicatedSortedBag` / `public class PredicatedSortedBag<E> extends PredicatedBag<E> implements SortedBag<E>`


        <!-- 683fbac4-9f1d-11ea-82fe-333445793454 <=< ACCEPT -->
        Decorates another {@link SortedBag} to validate that additions
        match a specified predicate.
        <p>
        This bag exists to provide validation for the decorated bag.
        It is normally created to decorate an empty bag.
        If an object cannot be added to the bag, an {@link IllegalArgumentException} is thrown.
        <p>
        One usage would be to ensure that no null entries are added to the bag.
        <pre>
        SortedBag bag = PredicatedSortedBag.predicatedSortedBag(new TreeBag(), NotNullPredicate.INSTANCE);
        </pre>
        <p>
        This class is Serializable from Commons Collections 3.1.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 683fbac4-9f1d-11ea-82fe-333445793454 -->



## Field: `java.org.apache.commons.collections4.bag.PredicatedSortedBag` / `private static final long serialVersionUID`


        <!-- 683fbac5-9f1d-11ea-82ff-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 683fbac5-9f1d-11ea-82ff-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.PredicatedSortedBag` / `final Predicate<? super E> predicate)`


        <!-- 683fbac6-9f1d-11ea-8300-333445793454 <=< ACCEPT -->
        Factory method to create a predicated (validating) bag.
        <p>
        If there are any elements already in the bag being decorated, they
        are validated.
        @param <E> the type of the elements in the bag
        @param bag  the bag to decorate, must not be null
        @param predicate  the predicate to use for validation, must not be null
        @return a new predicated SortedBag
        @throws NullPointerException if bag or predicate is null
        @throws IllegalArgumentException if the bag contains invalid elements
        @since 4.0
        <!-- ACCEPT >=> 683fbac6-9f1d-11ea-8300-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bag.PredicatedSortedBag` / `protected PredicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)`


        <!-- 683fbac7-9f1d-11ea-8301-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        <p>If there are any elements already in the bag being decorated, they
        are validated.
        @param bag  the bag to decorate, must not be null
        @param predicate  the predicate to use for validation, must not be null
        @throws NullPointerException if bag or predicate is null
        @throws IllegalArgumentException if the bag contains invalid elements
        <!-- ACCEPT >=> 683fbac7-9f1d-11ea-8301-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.PredicatedSortedBag` / `protected SortedBag<E> decorated()`


        <!-- 683fbac8-9f1d-11ea-8302-333445793454 <=< ACCEPT -->
        Gets the decorated sorted bag.
        @return the decorated bag
        <!-- ACCEPT >=> 683fbac8-9f1d-11ea-8302-333445793454 -->



# File: `java.org.apache.commons.collections4.bag.SynchronizedBag`

## Class: `java.org.apache.commons.collections4.bag.SynchronizedBag` / `public class SynchronizedBag<E> extends SynchronizedCollection<E> implements Bag<E>`


        <!-- 683fbac9-9f1d-11ea-8303-333445793454 <=< ACCEPT -->
        Decorates another {@link Bag} to synchronize its behaviour
        for a multi-threaded environment.
        <p>
        Methods are synchronized, then forwarded to the decorated bag.
        Iterators must be separately synchronized around the loop.
        <p>
        This class is Serializable from Commons Collections 3.1.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 683fbac9-9f1d-11ea-8303-333445793454 -->



## Field: `java.org.apache.commons.collections4.bag.SynchronizedBag` / `private static final long serialVersionUID`


        <!-- 683fbaca-9f1d-11ea-8304-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 683fbaca-9f1d-11ea-8304-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.SynchronizedBag` / `public static <E> SynchronizedBag<E> synchronizedBag(final Bag<E> bag)`


        <!-- 683fbacb-9f1d-11ea-8305-333445793454 <=< ACCEPT -->
        Factory method to create a synchronized bag.
        @param <E> the type of the elements in the bag
        @param bag  the bag to decorate, must not be null
        @return a new synchronized Bag
        @throws NullPointerException if bag is null
        @since 4.0
        <!-- ACCEPT >=> 683fbacb-9f1d-11ea-8305-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bag.SynchronizedBag` / `protected SynchronizedBag(final Bag<E> bag)`


        <!-- 683fe1be-9f1d-11ea-8306-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param bag  the bag to decorate, must not be null
        @throws NullPointerException if bag is null
        <!-- ACCEPT >=> 683fe1be-9f1d-11ea-8306-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bag.SynchronizedBag` / `protected SynchronizedBag(final Bag<E> bag, final Object lock)`


        <!-- 683fe1bf-9f1d-11ea-8307-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param bag  the bag to decorate, must not be null
        @param lock  the lock to use, must not be null
        @throws NullPointerException if bag or lock is null
        <!-- ACCEPT >=> 683fe1bf-9f1d-11ea-8307-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.SynchronizedBag` / `protected Bag<E> getBag()`


        <!-- 683fe1c0-9f1d-11ea-8308-333445793454 <=< ACCEPT -->
        Gets the bag being decorated.
        @return the decorated bag
        <!-- ACCEPT >=> 683fe1c0-9f1d-11ea-8308-333445793454 -->



## Class: `java.org.apache.commons.collections4.bag.SynchronizedBag` / `class SynchronizedBagSet extends SynchronizedCollection<E> implements Set<E>`


        <!-- 683fe1c1-9f1d-11ea-8309-333445793454 <=< ACCEPT -->
        Synchronized Set for the Bag class.
        <!-- ACCEPT >=> 683fe1c1-9f1d-11ea-8309-333445793454 -->



## Field: `java.org.apache.commons.collections4.bag.SynchronizedBag` / `private static final long serialVersionUID`


        <!-- 683fe1c2-9f1d-11ea-830a-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 683fe1c2-9f1d-11ea-830a-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bag.SynchronizedBag` / `SynchronizedBagSet(final Set<E> set, final Object lock)`


        <!-- 683fe1c3-9f1d-11ea-830b-333445793454 <=< ACCEPT -->
        Constructor.
        @param set  the set to decorate
        @param lock  the lock to use, shared with the bag
        <!-- ACCEPT >=> 683fe1c3-9f1d-11ea-830b-333445793454 -->



# File: `java.org.apache.commons.collections4.bag.SynchronizedSortedBag`

## Class: `java.org.apache.commons.collections4.bag.SynchronizedSortedBag` / `public class SynchronizedSortedBag<E> extends SynchronizedBag<E> implements SortedBag<E>`


        <!-- 683fe1c4-9f1d-11ea-830c-333445793454 <=< ACCEPT -->
        Decorates another {@link SortedBag} to synchronize its behaviour
        for a multi-threaded environment.
        <p>
        Methods are synchronized, then forwarded to the decorated bag.
        Iterators must be separately synchronized around the loop.
        <p>
        This class is Serializable from Commons Collections 3.1.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 683fe1c4-9f1d-11ea-830c-333445793454 -->



## Field: `java.org.apache.commons.collections4.bag.SynchronizedSortedBag` / `private static final long serialVersionUID`


        <!-- 683fe1c5-9f1d-11ea-830d-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 683fe1c5-9f1d-11ea-830d-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.SynchronizedSortedBag` / `public static <E> SynchronizedSortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)`


        <!-- 683fe1c6-9f1d-11ea-830e-333445793454 <=< ACCEPT -->
        Factory method to create a synchronized sorted bag.
        @param <E> the type of the elements in the bag
        @param bag  the bag to decorate, must not be null
        @return a new synchronized SortedBag
        @throws NullPointerException if bag is null
        @since 4.0
        <!-- ACCEPT >=> 683fe1c6-9f1d-11ea-830e-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bag.SynchronizedSortedBag` / `protected SynchronizedSortedBag(final SortedBag<E> bag)`


        <!-- 683fe1c7-9f1d-11ea-830f-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param bag  the bag to decorate, must not be null
        @throws NullPointerException if bag is null
        <!-- ACCEPT >=> 683fe1c7-9f1d-11ea-830f-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bag.SynchronizedSortedBag` / `protected SynchronizedSortedBag(final Bag<E> bag, final Object lock)`


        <!-- 683fe1c8-9f1d-11ea-8310-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param bag  the bag to decorate, must not be null
        @param lock  the lock to use, must not be null
        @throws NullPointerException if bag or lock is null
        <!-- ACCEPT >=> 683fe1c8-9f1d-11ea-8310-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.SynchronizedSortedBag` / `protected SortedBag<E> getSortedBag()`


        <!-- 683fe1c9-9f1d-11ea-8311-333445793454 <=< ACCEPT -->
        Gets the bag being decorated.
        @return the decorated bag
        <!-- ACCEPT >=> 683fe1c9-9f1d-11ea-8311-333445793454 -->



# File: `java.org.apache.commons.collections4.bag.TransformedBag`

## Class: `java.org.apache.commons.collections4.bag.TransformedBag` / `public class TransformedBag<E> extends TransformedCollection<E> implements Bag<E>`


        <!-- 683fe1ca-9f1d-11ea-8312-333445793454 <=< ACCEPT -->
        Decorates another {@link Bag} to transform objects that are added.
        <p>
        The add methods are affected by this class.
        Thus objects must be removed or searched for using their transformed form.
        For example, if the transformation converts Strings to Integers, you must
        use the Integer form to remove objects.
        <p>
        This class is Serializable from Commons Collections 3.1.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 683fe1ca-9f1d-11ea-8312-333445793454 -->



## Field: `java.org.apache.commons.collections4.bag.TransformedBag` / `private static final long serialVersionUID`


        <!-- 683fe1cb-9f1d-11ea-8313-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 683fe1cb-9f1d-11ea-8313-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.TransformedBag` / `public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)`


        <!-- 683fe1cc-9f1d-11ea-8314-333445793454 <=< ACCEPT -->
        Factory method to create a transforming bag.
        <p>
        If there are any elements already in the bag being decorated, they
        are NOT transformed. Contrast this with {@link #transformedBag(Bag, Transformer)}.
        @param <E> the type of the elements in the bag
        @param bag  the bag to decorate, must not be null
        @param transformer  the transformer to use for conversion, must not be null
        @return a new transformed Bag
        @throws NullPointerException if bag or transformer is null
        @since 4.0
        <!-- ACCEPT >=> 683fe1cc-9f1d-11ea-8314-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.TransformedBag` / `public static <E> Bag<E> transformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)`


        <!-- 683fe1cd-9f1d-11ea-8315-333445793454 <=< ACCEPT -->
        Factory method to create a transforming bag that will transform
        existing contents of the specified bag.
        <p>
        If there are any elements already in the bag being decorated, they
        will be transformed by this method.
        Contrast this with {@link #transformingBag(Bag, Transformer)}.
        @param <E> the type of the elements in the bag
        @param bag  the bag to decorate, must not be null
        @param transformer  the transformer to use for conversion, must not be null
        @return a new transformed Bag
        @throws NullPointerException if bag or transformer is null
        @since 4.0
        <!-- ACCEPT >=> 683fe1cd-9f1d-11ea-8315-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bag.TransformedBag` / `protected TransformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)`


        <!-- 683fe1ce-9f1d-11ea-8316-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        <p>
        If there are any elements already in the bag being decorated, they
        are NOT transformed.
        @param bag  the bag to decorate, must not be null
        @param transformer  the transformer to use for conversion, must not be null
        @throws NullPointerException if bag or transformer is null
        <!-- ACCEPT >=> 683fe1ce-9f1d-11ea-8316-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.TransformedBag` / `protected Bag<E> getBag()`


        <!-- 683fe1cf-9f1d-11ea-8317-333445793454 <=< ACCEPT -->
        Gets the decorated bag.
        @return the decorated bag
        <!-- ACCEPT >=> 683fe1cf-9f1d-11ea-8317-333445793454 -->



# File: `java.org.apache.commons.collections4.bag.TransformedSortedBag`

## Class: `java.org.apache.commons.collections4.bag.TransformedSortedBag` / `public class TransformedSortedBag<E> extends TransformedBag<E> implements SortedBag<E>`


        <!-- 683fe1d0-9f1d-11ea-8318-333445793454 <=< ACCEPT -->
        Decorates another {@link SortedBag} to transform objects that are added.
        <p>
        The add methods are affected by this class.
        Thus objects must be removed or searched for using their transformed form.
        For example, if the transformation converts Strings to Integers, you must
        use the Integer form to remove objects.
        <p>
        This class is Serializable from Commons Collections 3.1.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 683fe1d0-9f1d-11ea-8318-333445793454 -->



## Field: `java.org.apache.commons.collections4.bag.TransformedSortedBag` / `private static final long serialVersionUID`


        <!-- 683fe1d1-9f1d-11ea-8319-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 683fe1d1-9f1d-11ea-8319-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.TransformedSortedBag` / `final Transformer<? super E, ? extends E> transformer)`


        <!-- 683fe1d2-9f1d-11ea-831a-333445793454 <=< ACCEPT -->
        Factory method to create a transforming sorted bag.
        <p>
        If there are any elements already in the bag being decorated, they
        are NOT transformed. Contrast this with {@link #transformedSortedBag(SortedBag, Transformer)}.
        @param <E> the type of the elements in the bag
        @param bag  the bag to decorate, must not be null
        @param transformer  the transformer to use for conversion, must not be null
        @return a new transformed SortedBag
        @throws NullPointerException if bag or transformer is null
        @since 4.0
        <!-- ACCEPT >=> 683fe1d2-9f1d-11ea-831a-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.TransformedSortedBag` / `final Transformer<? super E, ? extends E> transformer)`


        <!-- 684008c6-9f1d-11ea-831b-333445793454 <=< ACCEPT -->
        Factory method to create a transforming sorted bag that will transform
        existing contents of the specified sorted bag.
        <p>
        If there are any elements already in the bag being decorated, they
        will be transformed by this method.
        Contrast this with {@link #transformingSortedBag(SortedBag, Transformer)}.
        @param <E> the type of the elements in the bag
        @param bag  the bag to decorate, must not be null
        @param transformer  the transformer to use for conversion, must not be null
        @return a new transformed SortedBag
        @throws NullPointerException if bag or transformer is null
        @since 4.0
        <!-- ACCEPT >=> 684008c6-9f1d-11ea-831b-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bag.TransformedSortedBag` / `protected TransformedSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)`


        <!-- 684008c7-9f1d-11ea-831c-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        <p>
        If there are any elements already in the bag being decorated, they
        are NOT transformed.
        @param bag  the bag to decorate, must not be null
        @param transformer  the transformer to use for conversion, must not be null
        @throws NullPointerException if bag or transformer is null
        <!-- ACCEPT >=> 684008c7-9f1d-11ea-831c-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.TransformedSortedBag` / `protected SortedBag<E> getSortedBag()`


        <!-- 684008c8-9f1d-11ea-831d-333445793454 <=< ACCEPT -->
        Gets the decorated bag.
        @return the decorated bag
        <!-- ACCEPT >=> 684008c8-9f1d-11ea-831d-333445793454 -->



# File: `java.org.apache.commons.collections4.bag.TreeBag`

## Class: `java.org.apache.commons.collections4.bag.TreeBag` / `public class TreeBag<E> extends AbstractMapBag<E> implements SortedBag<E>, Serializable`


        <!-- 684008c9-9f1d-11ea-831e-333445793454 <=< ACCEPT -->
        Implements {@link SortedBag}, using a {@link TreeMap} to provide the data storage.
        This is the standard implementation of a sorted bag.
        <p>
        Order will be maintained among the bag members and can be viewed through the iterator.
        <p>
        A {@link org.apache.commons.collections4.Bag Bag} stores each object in the collection
        together with a count of occurrences. Extra methods on the interface allow multiple
        copies of an object to be added or removed at once. It is important to read the interface
        javadoc carefully as several methods violate the {@link Collection} interface specification.
        @since 3.0 (previously in main package v2.0)
        @version $Id$
        <!-- ACCEPT >=> 684008c9-9f1d-11ea-831e-333445793454 -->



## Field: `java.org.apache.commons.collections4.bag.TreeBag` / `private static final long serialVersionUID`


        <!-- 684008ca-9f1d-11ea-831f-333445793454 <=< ACCEPT -->
        Serial version lock
        <!-- ACCEPT >=> 684008ca-9f1d-11ea-831f-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bag.TreeBag` / `public TreeBag()`


        <!-- 684008cb-9f1d-11ea-8320-333445793454 <=< ACCEPT -->
        Constructs an empty {@link TreeBag}.
        <!-- ACCEPT >=> 684008cb-9f1d-11ea-8320-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bag.TreeBag` / `public TreeBag(final Comparator<? super E> comparator)`


        <!-- 684008cc-9f1d-11ea-8321-333445793454 <=< ACCEPT -->
        Constructs an empty bag that maintains order on its unique representative
        members according to the given {@link Comparator}.
        @param comparator the comparator to use
        <!-- ACCEPT >=> 684008cc-9f1d-11ea-8321-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bag.TreeBag` / `public TreeBag(final Collection<? extends E> coll)`


        <!-- 684008cd-9f1d-11ea-8322-333445793454 <=< ACCEPT -->
        Constructs a {@link TreeBag} containing all the members of the
        specified collection.
        @param coll the collection to copy into the bag
        <!-- ACCEPT >=> 684008cd-9f1d-11ea-8322-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.TreeBag` / `public boolean add(final E object)`


        <!-- 684008ce-9f1d-11ea-8323-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        @throws IllegalArgumentException if the object to be added does not implement
        {@link Comparable} and the {@link TreeBag} is using natural ordering
        @throws NullPointerException if the specified key is null and this bag uses
        natural ordering, or its comparator does not permit null keys
        <!-- ACCEPT >=> 684008ce-9f1d-11ea-8323-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.TreeBag` / `private void writeObject(final ObjectOutputStream out) throws IOException`


        <!-- 684008cf-9f1d-11ea-8324-333445793454 <=< ACCEPT -->
        Write the bag out using a custom routine.
        <!-- ACCEPT >=> 684008cf-9f1d-11ea-8324-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.TreeBag` / `private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException`


        <!-- 684008d0-9f1d-11ea-8325-333445793454 <=< ACCEPT -->
        Read the bag in using a custom routine.
        <!-- ACCEPT >=> 684008d0-9f1d-11ea-8325-333445793454 -->



# File: `java.org.apache.commons.collections4.bag.UnmodifiableBag`

## Class: `java.org.apache.commons.collections4.bag.UnmodifiableBag` / `extends AbstractBagDecorator<E> implements Unmodifiable`


        <!-- 684008d1-9f1d-11ea-8326-333445793454 <=< ACCEPT -->
        Decorates another {@link Bag} to ensure it can't be altered.
        <p>
        This class is Serializable from Commons Collections 3.1.
        <p>
        Attempts to modify it will result in an UnsupportedOperationException.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 684008d1-9f1d-11ea-8326-333445793454 -->



## Field: `java.org.apache.commons.collections4.bag.UnmodifiableBag` / `private static final long serialVersionUID`


        <!-- 68402fd5-9f1d-11ea-8327-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 68402fd5-9f1d-11ea-8327-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.UnmodifiableBag` / `public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)`


        <!-- 68402fd6-9f1d-11ea-8328-333445793454 <=< ACCEPT -->
        Factory method to create an unmodifiable bag.
        <p>
        If the bag passed in is already unmodifiable, it is returned.
        @param <E> the type of the elements in the bag
        @param bag  the bag to decorate, must not be null
        @return an unmodifiable Bag
        @throws NullPointerException if bag is null
        @since 4.0
        <!-- ACCEPT >=> 68402fd6-9f1d-11ea-8328-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bag.UnmodifiableBag` / `private UnmodifiableBag(final Bag<? extends E> bag)`


        <!-- 68402fd7-9f1d-11ea-8329-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param bag  the bag to decorate, must not be null
        @throws NullPointerException if bag is null
        <!-- ACCEPT >=> 68402fd7-9f1d-11ea-8329-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.UnmodifiableBag` / `private void writeObject(final ObjectOutputStream out) throws IOException`


        <!-- 68402fd8-9f1d-11ea-832a-333445793454 <=< ACCEPT -->
        Write the collection out using a custom routine.
        @param out  the output stream
        @throws IOException
        <!-- ACCEPT >=> 68402fd8-9f1d-11ea-832a-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.UnmodifiableBag` / `private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException`


        <!-- 68402fd9-9f1d-11ea-832b-333445793454 <=< ACCEPT -->
        Read the collection in using a custom routine.
        @param in  the input stream
        @throws IOException
        @throws ClassNotFoundException
        @throws ClassCastException if deserialised object has wrong type
        <!-- ACCEPT >=> 68402fd9-9f1d-11ea-832b-333445793454 -->



# File: `java.org.apache.commons.collections4.bag.UnmodifiableSortedBag`

## Class: `java.org.apache.commons.collections4.bag.UnmodifiableSortedBag` / `extends AbstractSortedBagDecorator<E> implements Unmodifiable`


        <!-- 68402fda-9f1d-11ea-832c-333445793454 <=< ACCEPT -->
        Decorates another {@link SortedBag} to ensure it can't be altered.
        <p>
        This class is Serializable from Commons Collections 3.1.
        <p>
        Attempts to modify it will result in an UnsupportedOperationException.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 68402fda-9f1d-11ea-832c-333445793454 -->



## Field: `java.org.apache.commons.collections4.bag.UnmodifiableSortedBag` / `private static final long serialVersionUID`


        <!-- 68402fdb-9f1d-11ea-832d-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 68402fdb-9f1d-11ea-832d-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.UnmodifiableSortedBag` / `public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)`


        <!-- 68402fdc-9f1d-11ea-832e-333445793454 <=< ACCEPT -->
        Factory method to create an unmodifiable bag.
        <p>
        If the bag passed in is already unmodifiable, it is returned.
        @param <E> the type of the elements in the bag
        @param bag  the bag to decorate, must not be null
        @return an unmodifiable SortedBag
        @throws NullPointerException if bag is null
        @since 4.0
        <!-- ACCEPT >=> 68402fdc-9f1d-11ea-832e-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bag.UnmodifiableSortedBag` / `private UnmodifiableSortedBag(final SortedBag<E> bag)`


        <!-- 68402fdd-9f1d-11ea-832f-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param bag  the bag to decorate, must not be null
        @throws NullPointerException if bag is null
        <!-- ACCEPT >=> 68402fdd-9f1d-11ea-832f-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.UnmodifiableSortedBag` / `private void writeObject(final ObjectOutputStream out) throws IOException`


        <!-- 68402fde-9f1d-11ea-8330-333445793454 <=< ACCEPT -->
        Write the collection out using a custom routine.
        @param out  the output stream
        @throws IOException
        <!-- ACCEPT >=> 68402fde-9f1d-11ea-8330-333445793454 -->



## Method: `java.org.apache.commons.collections4.bag.UnmodifiableSortedBag` / `private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException`


        <!-- 68402fdf-9f1d-11ea-8331-333445793454 <=< ACCEPT -->
        Read the collection in using a custom routine.
        @param in  the input stream
        @throws IOException
        @throws ClassNotFoundException
        @throws ClassCastException if deserialised object has wrong type
        <!-- ACCEPT >=> 68402fdf-9f1d-11ea-8331-333445793454 -->



# File: `java.org.apache.commons.collections4.bag.package-info`

## Package: `java.org.apache.commons.collections4.bag.package-info` / `package org.apache.commons.collections4.bag`


        <!-- 68402fe0-9f1d-11ea-8332-333445793454 <=< ACCEPT -->
        This package contains implementations of the {@link org.apache.commons.collections4.Bag Bag} and
        {@link org.apache.commons.collections4.SortedBag SortedBag} interfaces.
        A bag stores an object and a count of the number of occurrences of the object.
        <p>
        The following implementations are provided in the package:
        <ul>
        <li>HashBag - implementation that uses a HashMap to store the data
        <li>TreeBag - implementation that uses a TreeMap to store the data
        </ul>
        <p>
        The following decorators are provided in the package:
        <ul>
        <li>Synchronized - synchronizes method access for multi-threaded environments
        <li>Unmodifiable - ensures the bag cannot be altered
        <li>Predicated - ensures that only elements that are valid according to a predicate can be added
        <li>Transformed - transforms each element added to the bag
        <li>Collection - ensures compliance with the java.util.Collection contract
        </ul>
        @version $Id$
        <!-- ACCEPT >=> 68402fe0-9f1d-11ea-8332-333445793454 -->



# File: `java.org.apache.commons.collections4.bidimap.AbstractBidiMapDecorator`

## Class: `java.org.apache.commons.collections4.bidimap.AbstractBidiMapDecorator` / `extends AbstractMapDecorator<K, V> implements BidiMap<K, V>`


        <!-- 68402fe1-9f1d-11ea-8333-333445793454 <=< ACCEPT -->
        Provides a base decorator that enables additional functionality to be added
        to a BidiMap via decoration.
        <p>
        Methods are forwarded directly to the decorated map.
        <p>
        This implementation does not perform any special processing with the map views.
        Instead it simply returns the set/collection from the wrapped map. This may be
        undesirable, for example if you are trying to write a validating implementation
        it would provide a loophole around the validation.
        But, you might want that loophole, so this class is kept simple.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 68402fe1-9f1d-11ea-8333-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bidimap.AbstractBidiMapDecorator` / `protected AbstractBidiMapDecorator(final BidiMap<K, V> map)`


        <!-- 68402fe2-9f1d-11ea-8334-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param map  the map to decorate, must not be null
        @throws NullPointerException if the collection is null
        <!-- ACCEPT >=> 68402fe2-9f1d-11ea-8334-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.AbstractBidiMapDecorator` / `protected BidiMap<K, V> decorated()`


        <!-- 68402fe3-9f1d-11ea-8335-333445793454 <=< ACCEPT -->
        Gets the map being decorated.
        @return the decorated map
        <!-- ACCEPT >=> 68402fe3-9f1d-11ea-8335-333445793454 -->



# File: `java.org.apache.commons.collections4.bidimap.AbstractDualBidiMap`

## Class: `java.org.apache.commons.collections4.bidimap.AbstractDualBidiMap` / `public abstract class AbstractDualBidiMap<K, V> implements BidiMap<K, V>`


        <!-- 68402fe4-9f1d-11ea-8336-333445793454 <=< ACCEPT -->
        Abstract {@link BidiMap} implemented using two maps.
        <p>
        An implementation can be written simply by implementing the
        {@link #createBidiMap(Map, Map, BidiMap)} method.
        @see DualHashBidiMap
        @see DualTreeBidiMap
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 68402fe4-9f1d-11ea-8336-333445793454 -->



## Field: `java.org.apache.commons.collections4.bidimap.AbstractDualBidiMap` / `transient Map<K, V> normalMap`


        <!-- 68402fe5-9f1d-11ea-8337-333445793454 <=< ACCEPT -->
        Normal delegate map.
        <!-- ACCEPT >=> 68402fe5-9f1d-11ea-8337-333445793454 -->



## Field: `java.org.apache.commons.collections4.bidimap.AbstractDualBidiMap` / `transient Map<V, K> reverseMap`


        <!-- 68402fe6-9f1d-11ea-8338-333445793454 <=< ACCEPT -->
        Reverse delegate map.
        <!-- ACCEPT >=> 68402fe6-9f1d-11ea-8338-333445793454 -->



## Field: `java.org.apache.commons.collections4.bidimap.AbstractDualBidiMap` / `transient BidiMap<V, K> inverseBidiMap`


        <!-- 68402fe7-9f1d-11ea-8339-333445793454 <=< ACCEPT -->
        Inverse view of this map.
        <!-- ACCEPT >=> 68402fe7-9f1d-11ea-8339-333445793454 -->



## Field: `java.org.apache.commons.collections4.bidimap.AbstractDualBidiMap` / `transient Set<K> keySet`


        <!-- 68402fe8-9f1d-11ea-833a-333445793454 <=< ACCEPT -->
        View of the keys.
        <!-- ACCEPT >=> 68402fe8-9f1d-11ea-833a-333445793454 -->



## Field: `java.org.apache.commons.collections4.bidimap.AbstractDualBidiMap` / `transient Set<V> values`


        <!-- 684056da-9f1d-11ea-833b-333445793454 <=< ACCEPT -->
        View of the values.
        <!-- ACCEPT >=> 684056da-9f1d-11ea-833b-333445793454 -->



## Field: `java.org.apache.commons.collections4.bidimap.AbstractDualBidiMap` / `transient Set<Map.Entry<K, V>> entrySet`


        <!-- 684056db-9f1d-11ea-833c-333445793454 <=< ACCEPT -->
        View of the entries.
        <!-- ACCEPT >=> 684056db-9f1d-11ea-833c-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bidimap.AbstractDualBidiMap` / `protected AbstractDualBidiMap()`


        <!-- 684056dc-9f1d-11ea-833d-333445793454 <=< ACCEPT -->
        Creates an empty map, initialised by <code>createMap</code>.
        <p>
        This constructor remains in place for deserialization.
        All other usage is deprecated in favour of
        {@link #AbstractDualBidiMap(Map, Map)}.
        <!-- ACCEPT >=> 684056dc-9f1d-11ea-833d-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bidimap.AbstractDualBidiMap` / `protected AbstractDualBidiMap(final Map<K, V> normalMap, final Map<V, K> reverseMap)`


        <!-- 684056dd-9f1d-11ea-833e-333445793454 <=< ACCEPT -->
        Creates an empty map using the two maps specified as storage.
        <p>
        The two maps must be a matching pair, normal and reverse.
        They will typically both be empty.
        <p>
        Neither map is validated, so nulls may be passed in.
        If you choose to do this then the subclass constructor must populate
        the <code>maps[]</code> instance variable itself.
        @param normalMap  the normal direction map
        @param reverseMap  the reverse direction map
        @since 3.1
        <!-- ACCEPT >=> 684056dd-9f1d-11ea-833e-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bidimap.AbstractDualBidiMap` / `final BidiMap<V, K> inverseBidiMap)`


        <!-- 684056de-9f1d-11ea-833f-333445793454 <=< ACCEPT -->
        Constructs a map that decorates the specified maps,
        used by the subclass <code>createBidiMap</code> implementation.
        @param normalMap  the normal direction map
        @param reverseMap  the reverse direction map
        @param inverseBidiMap  the inverse BidiMap
        <!-- ACCEPT >=> 684056de-9f1d-11ea-833f-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.AbstractDualBidiMap` / `protected abstract BidiMap<V, K> createBidiMap(Map<V, K> normalMap, Map<K, V> reverseMap, BidiMap<K, V> inverseMap)`


        <!-- 684056df-9f1d-11ea-8340-333445793454 <=< ACCEPT -->
        Creates a new instance of the subclass.
        @param normalMap  the normal direction map
        @param reverseMap  the reverse direction map
        @param inverseMap  this map, which is the inverse in the new map
        @return the inverse map
        <!-- ACCEPT >=> 684056df-9f1d-11ea-8340-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.AbstractDualBidiMap` / `public MapIterator<K, V> mapIterator()`


        <!-- 684056e0-9f1d-11ea-8341-333445793454 <=< ACCEPT -->
        Obtains a <code>MapIterator</code> over the map.
        The iterator implements <code>ResetableMapIterator</code>.
        This implementation relies on the entrySet iterator.
        <p>
        The setValue() methods only allow a new value to be set.
        If the value being set is already in the map, an IllegalArgumentException
        is thrown (as setValue cannot change the size of the map).
        @return a map iterator
        <!-- ACCEPT >=> 684056e0-9f1d-11ea-8341-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.AbstractDualBidiMap` / `public Set<K> keySet()`


        <!-- 684056e1-9f1d-11ea-8342-333445793454 <=< ACCEPT -->
        Gets a keySet view of the map.
        Changes made on the view are reflected in the map.
        The set supports remove and clear but not add.
        @return the keySet view
        <!-- ACCEPT >=> 684056e1-9f1d-11ea-8342-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.AbstractDualBidiMap` / `protected Iterator<K> createKeySetIterator(final Iterator<K> iterator)`


        <!-- 684056e2-9f1d-11ea-8343-333445793454 <=< ACCEPT -->
        Creates a key set iterator.
        Subclasses can override this to return iterators with different properties.
        @param iterator  the iterator to decorate
        @return the keySet iterator
        <!-- ACCEPT >=> 684056e2-9f1d-11ea-8343-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.AbstractDualBidiMap` / `public Set<V> values()`


        <!-- 684056e3-9f1d-11ea-8344-333445793454 <=< ACCEPT -->
        Gets a values view of the map.
        Changes made on the view are reflected in the map.
        The set supports remove and clear but not add.
        @return the values view
        <!-- ACCEPT >=> 684056e3-9f1d-11ea-8344-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.AbstractDualBidiMap` / `protected Iterator<V> createValuesIterator(final Iterator<V> iterator)`


        <!-- 684056e4-9f1d-11ea-8345-333445793454 <=< ACCEPT -->
        Creates a values iterator.
        Subclasses can override this to return iterators with different properties.
        @param iterator  the iterator to decorate
        @return the values iterator
        <!-- ACCEPT >=> 684056e4-9f1d-11ea-8345-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.AbstractDualBidiMap` / `public Set<Map.Entry<K, V>> entrySet()`


        <!-- 684056e5-9f1d-11ea-8346-333445793454 <=< ACCEPT -->
        Gets an entrySet view of the map.
        Changes made on the set are reflected in the map.
        The set supports remove and clear but not add.
        <p>
        The Map Entry setValue() method only allow a new value to be set.
        If the value being set is already in the map, an IllegalArgumentException
        is thrown (as setValue cannot change the size of the map).
        @return the entrySet view
        <!-- ACCEPT >=> 684056e5-9f1d-11ea-8346-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.AbstractDualBidiMap` / `protected Iterator<Map.Entry<K, V>> createEntrySetIterator(final Iterator<Map.Entry<K, V>> iterator)`


        <!-- 684056e6-9f1d-11ea-8347-333445793454 <=< ACCEPT -->
        Creates an entry set iterator.
        Subclasses can override this to return iterators with different properties.
        @param iterator  the iterator to decorate
        @return the entrySet iterator
        <!-- ACCEPT >=> 684056e6-9f1d-11ea-8347-333445793454 -->



## Class: `java.org.apache.commons.collections4.bidimap.AbstractDualBidiMap` / `protected static abstract class View<K, V, E> extends AbstractCollectionDecorator<E>`


        <!-- 684056e7-9f1d-11ea-8348-333445793454 <=< ACCEPT -->
        Inner class View.
        <!-- ACCEPT >=> 684056e7-9f1d-11ea-8348-333445793454 -->



## Field: `java.org.apache.commons.collections4.bidimap.AbstractDualBidiMap` / `private static final long serialVersionUID`


        <!-- 684056e8-9f1d-11ea-8349-333445793454 <=< ACCEPT -->
        Generated serial version ID.
        <!-- ACCEPT >=> 684056e8-9f1d-11ea-8349-333445793454 -->



## Field: `java.org.apache.commons.collections4.bidimap.AbstractDualBidiMap` / `protected final AbstractDualBidiMap<K, V> parent`


        <!-- 684056e9-9f1d-11ea-834a-333445793454 <=< ACCEPT -->
        The parent map
        <!-- ACCEPT >=> 684056e9-9f1d-11ea-834a-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bidimap.AbstractDualBidiMap` / `protected View(final Collection<E> coll, final AbstractDualBidiMap<K, V> parent)`


        <!-- 684056ea-9f1d-11ea-834b-333445793454 <=< ACCEPT -->
        Constructs a new view of the BidiMap.
        @param coll  the collection view being decorated
        @param parent  the parent BidiMap
        <!-- ACCEPT >=> 684056ea-9f1d-11ea-834b-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.AbstractDualBidiMap` / `public boolean retainAll(final Collection<?> coll)`


        <!-- 684056eb-9f1d-11ea-834c-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <p>
        This implementation iterates over the elements of this bidi map, checking each element in
        turn to see if it's contained in <code>coll</code>. If it's not contained, it's removed
        from this bidi map. As a consequence, it is advised to use a collection type for
        <code>coll</code> that provides a fast (e.g. O(1)) implementation of
        {@link Collection#contains(Object)}.
        <!-- ACCEPT >=> 684056eb-9f1d-11ea-834c-333445793454 -->



## Class: `java.org.apache.commons.collections4.bidimap.AbstractDualBidiMap` / `protected static class KeySet<K> extends View<K, Object, K> implements Set<K>`


        <!-- 684056ec-9f1d-11ea-834d-333445793454 <=< ACCEPT -->
        Inner class KeySet.
        <!-- ACCEPT >=> 684056ec-9f1d-11ea-834d-333445793454 -->



## Field: `java.org.apache.commons.collections4.bidimap.AbstractDualBidiMap` / `private static final long serialVersionUID`


        <!-- 684056ed-9f1d-11ea-834e-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 684056ed-9f1d-11ea-834e-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bidimap.AbstractDualBidiMap` / `protected KeySet(final AbstractDualBidiMap<K, ?> parent)`


        <!-- 684056ee-9f1d-11ea-834f-333445793454 <=< ACCEPT -->
        Constructs a new view of the BidiMap.
        @param parent  the parent BidiMap
        <!-- ACCEPT >=> 684056ee-9f1d-11ea-834f-333445793454 -->



## Class: `java.org.apache.commons.collections4.bidimap.AbstractDualBidiMap` / `protected static class KeySetIterator<K> extends AbstractIteratorDecorator<K>`


        <!-- 68407de4-9f1d-11ea-8350-333445793454 <=< ACCEPT -->
        Inner class KeySetIterator.
        <!-- ACCEPT >=> 68407de4-9f1d-11ea-8350-333445793454 -->



## Field: `java.org.apache.commons.collections4.bidimap.AbstractDualBidiMap` / `protected final AbstractDualBidiMap<K, ?> parent`


        <!-- 68407de5-9f1d-11ea-8351-333445793454 <=< ACCEPT -->
        The parent map
        <!-- ACCEPT >=> 68407de5-9f1d-11ea-8351-333445793454 -->



## Field: `java.org.apache.commons.collections4.bidimap.AbstractDualBidiMap` / `protected K lastKey`


        <!-- 68407de6-9f1d-11ea-8352-333445793454 <=< ACCEPT -->
        The last returned key
        <!-- ACCEPT >=> 68407de6-9f1d-11ea-8352-333445793454 -->



## Field: `java.org.apache.commons.collections4.bidimap.AbstractDualBidiMap` / `protected boolean canRemove`


        <!-- 68407de7-9f1d-11ea-8353-333445793454 <=< ACCEPT -->
        Whether remove is allowed at present
        <!-- ACCEPT >=> 68407de7-9f1d-11ea-8353-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bidimap.AbstractDualBidiMap` / `protected KeySetIterator(final Iterator<K> iterator, final AbstractDualBidiMap<K, ?> parent)`


        <!-- 68407de8-9f1d-11ea-8354-333445793454 <=< ACCEPT -->
        Constructor.
        @param iterator  the iterator to decorate
        @param parent  the parent map
        <!-- ACCEPT >=> 68407de8-9f1d-11ea-8354-333445793454 -->



## Class: `java.org.apache.commons.collections4.bidimap.AbstractDualBidiMap` / `protected static class Values<V> extends View<Object, V, V> implements Set<V>`


        <!-- 68407de9-9f1d-11ea-8355-333445793454 <=< ACCEPT -->
        Inner class Values.
        <!-- ACCEPT >=> 68407de9-9f1d-11ea-8355-333445793454 -->



## Field: `java.org.apache.commons.collections4.bidimap.AbstractDualBidiMap` / `private static final long serialVersionUID`


        <!-- 68407dea-9f1d-11ea-8356-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 68407dea-9f1d-11ea-8356-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bidimap.AbstractDualBidiMap` / `protected Values(final AbstractDualBidiMap<?, V> parent)`


        <!-- 68407deb-9f1d-11ea-8357-333445793454 <=< ACCEPT -->
        Constructs a new view of the BidiMap.
        @param parent  the parent BidiMap
        <!-- ACCEPT >=> 68407deb-9f1d-11ea-8357-333445793454 -->



## Class: `java.org.apache.commons.collections4.bidimap.AbstractDualBidiMap` / `protected static class ValuesIterator<V> extends AbstractIteratorDecorator<V>`


        <!-- 68407dec-9f1d-11ea-8358-333445793454 <=< ACCEPT -->
        Inner class ValuesIterator.
        <!-- ACCEPT >=> 68407dec-9f1d-11ea-8358-333445793454 -->



## Field: `java.org.apache.commons.collections4.bidimap.AbstractDualBidiMap` / `protected final AbstractDualBidiMap<Object, V> parent`


        <!-- 68407ded-9f1d-11ea-8359-333445793454 <=< ACCEPT -->
        The parent map
        <!-- ACCEPT >=> 68407ded-9f1d-11ea-8359-333445793454 -->



## Field: `java.org.apache.commons.collections4.bidimap.AbstractDualBidiMap` / `protected V lastValue`


        <!-- 68407dee-9f1d-11ea-835a-333445793454 <=< ACCEPT -->
        The last returned value
        <!-- ACCEPT >=> 68407dee-9f1d-11ea-835a-333445793454 -->



## Field: `java.org.apache.commons.collections4.bidimap.AbstractDualBidiMap` / `protected boolean canRemove`


        <!-- 68407def-9f1d-11ea-835b-333445793454 <=< ACCEPT -->
        Whether remove is allowed at present
        <!-- ACCEPT >=> 68407def-9f1d-11ea-835b-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bidimap.AbstractDualBidiMap` / `protected ValuesIterator(final Iterator<V> iterator, final AbstractDualBidiMap<?, V> parent)`


        <!-- 68407df0-9f1d-11ea-835c-333445793454 <=< ACCEPT -->
        Constructor.
        @param iterator  the iterator to decorate
        @param parent  the parent map
        <!-- ACCEPT >=> 68407df0-9f1d-11ea-835c-333445793454 -->



## Class: `java.org.apache.commons.collections4.bidimap.AbstractDualBidiMap` / `protected static class EntrySet<K, V> extends View<K, V, Map.Entry<K, V>> implements Set<Map.Entry<K, V>>`


        <!-- 68407df1-9f1d-11ea-835d-333445793454 <=< ACCEPT -->
        Inner class EntrySet.
        <!-- ACCEPT >=> 68407df1-9f1d-11ea-835d-333445793454 -->



## Field: `java.org.apache.commons.collections4.bidimap.AbstractDualBidiMap` / `private static final long serialVersionUID`


        <!-- 68407df2-9f1d-11ea-835e-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 68407df2-9f1d-11ea-835e-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bidimap.AbstractDualBidiMap` / `protected EntrySet(final AbstractDualBidiMap<K, V> parent)`


        <!-- 68407df3-9f1d-11ea-835f-333445793454 <=< ACCEPT -->
        Constructs a new view of the BidiMap.
        @param parent  the parent BidiMap
        <!-- ACCEPT >=> 68407df3-9f1d-11ea-835f-333445793454 -->



## Class: `java.org.apache.commons.collections4.bidimap.AbstractDualBidiMap` / `protected static class EntrySetIterator<K, V> extends AbstractIteratorDecorator<Map.Entry<K, V>>`


        <!-- 68407df4-9f1d-11ea-8360-333445793454 <=< ACCEPT -->
        Inner class EntrySetIterator.
        <!-- ACCEPT >=> 68407df4-9f1d-11ea-8360-333445793454 -->



## Field: `java.org.apache.commons.collections4.bidimap.AbstractDualBidiMap` / `protected final AbstractDualBidiMap<K, V> parent`


        <!-- 68407df5-9f1d-11ea-8361-333445793454 <=< ACCEPT -->
        The parent map
        <!-- ACCEPT >=> 68407df5-9f1d-11ea-8361-333445793454 -->



## Field: `java.org.apache.commons.collections4.bidimap.AbstractDualBidiMap` / `protected Map.Entry<K, V> last`


        <!-- 68407df6-9f1d-11ea-8362-333445793454 <=< ACCEPT -->
        The last returned entry
        <!-- ACCEPT >=> 68407df6-9f1d-11ea-8362-333445793454 -->



## Field: `java.org.apache.commons.collections4.bidimap.AbstractDualBidiMap` / `protected boolean canRemove`


        <!-- 68407df7-9f1d-11ea-8363-333445793454 <=< ACCEPT -->
        Whether remove is allowed at present
        <!-- ACCEPT >=> 68407df7-9f1d-11ea-8363-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bidimap.AbstractDualBidiMap` / `protected EntrySetIterator(final Iterator<Map.Entry<K, V>> iterator, final AbstractDualBidiMap<K, V> parent)`


        <!-- 68407df8-9f1d-11ea-8364-333445793454 <=< ACCEPT -->
        Constructor.
        @param iterator  the iterator to decorate
        @param parent  the parent map
        <!-- ACCEPT >=> 68407df8-9f1d-11ea-8364-333445793454 -->



## Class: `java.org.apache.commons.collections4.bidimap.AbstractDualBidiMap` / `protected static class MapEntry<K, V> extends AbstractMapEntryDecorator<K, V>`


        <!-- 68407df9-9f1d-11ea-8365-333445793454 <=< ACCEPT -->
        Inner class MapEntry.
        <!-- ACCEPT >=> 68407df9-9f1d-11ea-8365-333445793454 -->



## Field: `java.org.apache.commons.collections4.bidimap.AbstractDualBidiMap` / `protected final AbstractDualBidiMap<K, V> parent`


        <!-- 68407dfa-9f1d-11ea-8366-333445793454 <=< ACCEPT -->
        The parent map
        <!-- ACCEPT >=> 68407dfa-9f1d-11ea-8366-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bidimap.AbstractDualBidiMap` / `protected MapEntry(final Map.Entry<K, V> entry, final AbstractDualBidiMap<K, V> parent)`


        <!-- 68407dfb-9f1d-11ea-8367-333445793454 <=< ACCEPT -->
        Constructor.
        @param entry  the entry to decorate
        @param parent  the parent map
        <!-- ACCEPT >=> 68407dfb-9f1d-11ea-8367-333445793454 -->



## Class: `java.org.apache.commons.collections4.bidimap.AbstractDualBidiMap` / `protected static class BidiMapIterator<K, V> implements MapIterator<K, V>, ResettableIterator<K>`


        <!-- 68407dfc-9f1d-11ea-8368-333445793454 <=< ACCEPT -->
        Inner class MapIterator.
        <!-- ACCEPT >=> 68407dfc-9f1d-11ea-8368-333445793454 -->



## Field: `java.org.apache.commons.collections4.bidimap.AbstractDualBidiMap` / `protected final AbstractDualBidiMap<K, V> parent`


        <!-- 68407dfd-9f1d-11ea-8369-333445793454 <=< ACCEPT -->
        The parent map
        <!-- ACCEPT >=> 68407dfd-9f1d-11ea-8369-333445793454 -->



## Field: `java.org.apache.commons.collections4.bidimap.AbstractDualBidiMap` / `protected Iterator<Map.Entry<K, V>> iterator`


        <!-- 68407dfe-9f1d-11ea-836a-333445793454 <=< ACCEPT -->
        The iterator being wrapped
        <!-- ACCEPT >=> 68407dfe-9f1d-11ea-836a-333445793454 -->



## Field: `java.org.apache.commons.collections4.bidimap.AbstractDualBidiMap` / `protected Map.Entry<K, V> last`


        <!-- 6840a4ed-9f1d-11ea-836b-333445793454 <=< ACCEPT -->
        The last returned entry
        <!-- ACCEPT >=> 6840a4ed-9f1d-11ea-836b-333445793454 -->



## Field: `java.org.apache.commons.collections4.bidimap.AbstractDualBidiMap` / `protected boolean canRemove`


        <!-- 6840a4ee-9f1d-11ea-836c-333445793454 <=< ACCEPT -->
        Whether remove is allowed at present
        <!-- ACCEPT >=> 6840a4ee-9f1d-11ea-836c-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bidimap.AbstractDualBidiMap` / `protected BidiMapIterator(final AbstractDualBidiMap<K, V> parent)`


        <!-- 6840a4ef-9f1d-11ea-836d-333445793454 <=< ACCEPT -->
        Constructor.
        @param parent  the parent map
        <!-- ACCEPT >=> 6840a4ef-9f1d-11ea-836d-333445793454 -->



# File: `java.org.apache.commons.collections4.bidimap.AbstractOrderedBidiMapDecorator`

## Class: `java.org.apache.commons.collections4.bidimap.AbstractOrderedBidiMapDecorator` / `implements OrderedBidiMap<K, V>`


        <!-- 6840a4f0-9f1d-11ea-836e-333445793454 <=< ACCEPT -->
        Provides a base decorator that enables additional functionality to be added
        to an OrderedBidiMap via decoration.
        <p>
        Methods are forwarded directly to the decorated map.
        <p>
        This implementation does not perform any special processing with the map views.
        Instead it simply returns the inverse from the wrapped map. This may be
        undesirable, for example if you are trying to write a validating implementation
        it would provide a loophole around the validation.
        But, you might want that loophole, so this class is kept simple.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 6840a4f0-9f1d-11ea-836e-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bidimap.AbstractOrderedBidiMapDecorator` / `protected AbstractOrderedBidiMapDecorator(final OrderedBidiMap<K, V> map)`


        <!-- 6840a4f1-9f1d-11ea-836f-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param map  the map to decorate, must not be null
        @throws NullPointerException if the collection is null
        <!-- ACCEPT >=> 6840a4f1-9f1d-11ea-836f-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.AbstractOrderedBidiMapDecorator` / `protected OrderedBidiMap<K, V> decorated()`


        <!-- 6840a4f2-9f1d-11ea-8370-333445793454 <=< ACCEPT -->
        Gets the map being decorated.
        @return the decorated map
        <!-- ACCEPT >=> 6840a4f2-9f1d-11ea-8370-333445793454 -->



# File: `java.org.apache.commons.collections4.bidimap.AbstractSortedBidiMapDecorator`

## Class: `java.org.apache.commons.collections4.bidimap.AbstractSortedBidiMapDecorator` / `extends AbstractOrderedBidiMapDecorator<K, V> implements SortedBidiMap<K, V>`


        <!-- 6840a4f3-9f1d-11ea-8371-333445793454 <=< ACCEPT -->
        Provides a base decorator that enables additional functionality to be added
        to a SortedBidiMap via decoration.
        <p>
        Methods are forwarded directly to the decorated map.
        <p>
        This implementation does not perform any special processing with the map views.
        Instead it simply returns the inverse from the wrapped map. This may be
        undesirable, for example if you are trying to write a validating implementation
        it would provide a loophole around the validation.
        But, you might want that loophole, so this class is kept simple.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 6840a4f3-9f1d-11ea-8371-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bidimap.AbstractSortedBidiMapDecorator` / `public AbstractSortedBidiMapDecorator(final SortedBidiMap<K, V> map)`


        <!-- 6840a4f4-9f1d-11ea-8372-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param map  the map to decorate, must not be null
        @throws NullPointerException if the collection is null
        <!-- ACCEPT >=> 6840a4f4-9f1d-11ea-8372-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.AbstractSortedBidiMapDecorator` / `protected SortedBidiMap<K, V> decorated()`


        <!-- 6840a4f5-9f1d-11ea-8373-333445793454 <=< ACCEPT -->
        Gets the map being decorated.
        @return the decorated map
        <!-- ACCEPT >=> 6840a4f5-9f1d-11ea-8373-333445793454 -->



# File: `java.org.apache.commons.collections4.bidimap.DualHashBidiMap`

## Class: `java.org.apache.commons.collections4.bidimap.DualHashBidiMap` / `public class DualHashBidiMap<K, V> extends AbstractDualBidiMap<K, V> implements Serializable`


        <!-- 6840a4f6-9f1d-11ea-8374-333445793454 <=< ACCEPT -->
        Implementation of {@link BidiMap} that uses two {@link HashMap} instances.
        <p>
        Two {@link HashMap} instances are used in this class.
        This provides fast lookups at the expense of storing two sets of map entries.
        Commons Collections would welcome the addition of a direct hash-based
        implementation of the {@link BidiMap} interface.
        <p>
        NOTE: From Commons Collections 3.1, all subclasses will use {@link HashMap}
        and the flawed <code>createMap</code> method is ignored.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 6840a4f6-9f1d-11ea-8374-333445793454 -->



## Field: `java.org.apache.commons.collections4.bidimap.DualHashBidiMap` / `private static final long serialVersionUID`


        <!-- 6840a4f7-9f1d-11ea-8375-333445793454 <=< ACCEPT -->
        Ensure serialization compatibility
        <!-- ACCEPT >=> 6840a4f7-9f1d-11ea-8375-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bidimap.DualHashBidiMap` / `public DualHashBidiMap()`


        <!-- 6840a4f8-9f1d-11ea-8376-333445793454 <=< ACCEPT -->
        Creates an empty <code>HashBidiMap</code>.
        <!-- ACCEPT >=> 6840a4f8-9f1d-11ea-8376-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bidimap.DualHashBidiMap` / `public DualHashBidiMap(final Map<? extends K, ? extends V> map)`


        <!-- 6840a4f9-9f1d-11ea-8377-333445793454 <=< ACCEPT -->
        Constructs a <code>HashBidiMap</code> and copies the mappings from
        specified <code>Map</code>.
        @param map  the map whose mappings are to be placed in this map
        <!-- ACCEPT >=> 6840a4f9-9f1d-11ea-8377-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bidimap.DualHashBidiMap` / `final BidiMap<V, K> inverseBidiMap)`


        <!-- 6840a4fa-9f1d-11ea-8378-333445793454 <=< ACCEPT -->
        Constructs a <code>HashBidiMap</code> that decorates the specified maps.
        @param normalMap  the normal direction map
        @param reverseMap  the reverse direction map
        @param inverseBidiMap  the inverse BidiMap
        <!-- ACCEPT >=> 6840a4fa-9f1d-11ea-8378-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.DualHashBidiMap` / `final BidiMap<K, V> inverseBidiMap)`


        <!-- 6840a4fb-9f1d-11ea-8379-333445793454 <=< ACCEPT -->
        Creates a new instance of this object.
        @param normalMap  the normal direction map
        @param reverseMap  the reverse direction map
        @param inverseBidiMap  the inverse BidiMap
        @return new bidi map
        <!-- ACCEPT >=> 6840a4fb-9f1d-11ea-8379-333445793454 -->



# File: `java.org.apache.commons.collections4.bidimap.DualLinkedHashBidiMap`

## Class: `java.org.apache.commons.collections4.bidimap.DualLinkedHashBidiMap` / `public class DualLinkedHashBidiMap<K, V> extends AbstractDualBidiMap<K, V> implements Serializable`


        <!-- 6840a4fc-9f1d-11ea-837a-333445793454 <=< ACCEPT -->
        Implementation of <code>BidiMap</code> that uses two <code>LinkedHashMap</code> instances.
        <p>
        Two <code>LinkedHashMap</code> instances are used in this class.
        This provides fast lookups at the expense of storing two sets of map entries and two linked lists.
        @version $Id$
        @since 4.0
        <!-- ACCEPT >=> 6840a4fc-9f1d-11ea-837a-333445793454 -->



## Field: `java.org.apache.commons.collections4.bidimap.DualLinkedHashBidiMap` / `private static final long serialVersionUID`


        <!-- 6840a4fd-9f1d-11ea-837b-333445793454 <=< ACCEPT -->
        Ensure serialization compatibility
        <!-- ACCEPT >=> 6840a4fd-9f1d-11ea-837b-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bidimap.DualLinkedHashBidiMap` / `public DualLinkedHashBidiMap()`


        <!-- 6840a4fe-9f1d-11ea-837c-333445793454 <=< ACCEPT -->
        Creates an empty <code>HashBidiMap</code>.
        <!-- ACCEPT >=> 6840a4fe-9f1d-11ea-837c-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bidimap.DualLinkedHashBidiMap` / `public DualLinkedHashBidiMap(final Map<? extends K, ? extends V> map)`


        <!-- 6840a4ff-9f1d-11ea-837d-333445793454 <=< ACCEPT -->
        Constructs a <code>LinkedHashBidiMap</code> and copies the mappings from
        specified <code>Map</code>.
        @param map the map whose mappings are to be placed in this map
        <!-- ACCEPT >=> 6840a4ff-9f1d-11ea-837d-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bidimap.DualLinkedHashBidiMap` / `final BidiMap<V, K> inverseBidiMap)`


        <!-- 6840a500-9f1d-11ea-837e-333445793454 <=< ACCEPT -->
        Constructs a <code>LinkedHashBidiMap</code> that decorates the specified maps.
        @param normalMap      the normal direction map
        @param reverseMap     the reverse direction map
        @param inverseBidiMap the inverse BidiMap
        <!-- ACCEPT >=> 6840a500-9f1d-11ea-837e-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.DualLinkedHashBidiMap` / `final BidiMap<K, V> inverseBidiMap)`


        <!-- 6840a501-9f1d-11ea-837f-333445793454 <=< ACCEPT -->
        Creates a new instance of this object.
        @param normalMap      the normal direction map
        @param reverseMap     the reverse direction map
        @param inverseBidiMap the inverse BidiMap
        @return new bidi map
        <!-- ACCEPT >=> 6840a501-9f1d-11ea-837f-333445793454 -->



# File: `java.org.apache.commons.collections4.bidimap.DualTreeBidiMap`

## Class: `java.org.apache.commons.collections4.bidimap.DualTreeBidiMap` / `implements SortedBidiMap<K, V>, Serializable`


        <!-- 6840cbf7-9f1d-11ea-8380-333445793454 <=< ACCEPT -->
        Implementation of {@link BidiMap} that uses two {@link TreeMap} instances.
        <p>
        The setValue() method on iterators will succeed only if the new value being set is
        not already in the bidimap.
        <p>
        When considering whether to use this class, the {@link TreeBidiMap} class should
        also be considered. It implements the interface using a dedicated design, and does
        not store each object twice, which can save on memory use.
        <p>
        NOTE: From Commons Collections 3.1, all subclasses will use {@link TreeMap}
        and the flawed <code>createMap</code> method is ignored.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 6840cbf7-9f1d-11ea-8380-333445793454 -->



## Field: `java.org.apache.commons.collections4.bidimap.DualTreeBidiMap` / `private static final long serialVersionUID`


        <!-- 6840cbf8-9f1d-11ea-8381-333445793454 <=< ACCEPT -->
        Ensure serialization compatibility
        <!-- ACCEPT >=> 6840cbf8-9f1d-11ea-8381-333445793454 -->



## Field: `java.org.apache.commons.collections4.bidimap.DualTreeBidiMap` / `private final Comparator<? super K> comparator`


        <!-- 6840cbf9-9f1d-11ea-8382-333445793454 <=< ACCEPT -->
        The key comparator to use
        <!-- ACCEPT >=> 6840cbf9-9f1d-11ea-8382-333445793454 -->



## Field: `java.org.apache.commons.collections4.bidimap.DualTreeBidiMap` / `private final Comparator<? super V> valueComparator`


        <!-- 6840cbfa-9f1d-11ea-8383-333445793454 <=< ACCEPT -->
        The value comparator to use
        <!-- ACCEPT >=> 6840cbfa-9f1d-11ea-8383-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bidimap.DualTreeBidiMap` / `public DualTreeBidiMap()`


        <!-- 6840cbfb-9f1d-11ea-8384-333445793454 <=< ACCEPT -->
        Creates an empty <code>DualTreeBidiMap</code>
        <!-- ACCEPT >=> 6840cbfb-9f1d-11ea-8384-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bidimap.DualTreeBidiMap` / `public DualTreeBidiMap(final Map<? extends K, ? extends V> map)`


        <!-- 6840cbfc-9f1d-11ea-8385-333445793454 <=< ACCEPT -->
        Constructs a <code>DualTreeBidiMap</code> and copies the mappings from
        specified <code>Map</code>.
        @param map  the map whose mappings are to be placed in this map
        <!-- ACCEPT >=> 6840cbfc-9f1d-11ea-8385-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bidimap.DualTreeBidiMap` / `public DualTreeBidiMap(final Comparator<? super K> keyComparator, final Comparator<? super V> valueComparator)`


        <!-- 6840cbfd-9f1d-11ea-8386-333445793454 <=< ACCEPT -->
        Constructs a {@link DualTreeBidiMap} using the specified {@link Comparator}.
        @param keyComparator  the comparator
        @param valueComparator  the values comparator to use
        <!-- ACCEPT >=> 6840cbfd-9f1d-11ea-8386-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bidimap.DualTreeBidiMap` / `final BidiMap<V, K> inverseBidiMap)`


        <!-- 6840cbfe-9f1d-11ea-8387-333445793454 <=< ACCEPT -->
        Constructs a {@link DualTreeBidiMap} that decorates the specified maps.
        @param normalMap  the normal direction map
        @param reverseMap  the reverse direction map
        @param inverseBidiMap  the inverse BidiMap
        <!-- ACCEPT >=> 6840cbfe-9f1d-11ea-8387-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.DualTreeBidiMap` / `final BidiMap<K, V> inverseMap)`


        <!-- 6840cbff-9f1d-11ea-8388-333445793454 <=< ACCEPT -->
        Creates a new instance of this object.
        @param normalMap  the normal direction map
        @param reverseMap  the reverse direction map
        @param inverseMap  the inverse BidiMap
        @return new bidi map
        <!-- ACCEPT >=> 6840cbff-9f1d-11ea-8388-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.DualTreeBidiMap` / `public OrderedMapIterator<K, V> mapIterator()`


        <!-- 6840cc00-9f1d-11ea-8389-333445793454 <=< ACCEPT -->
        Obtains an ordered map iterator.
        <p>
        This implementation copies the elements to an ArrayList in order to
        provide the forward/backward behaviour.
        @return a new ordered map iterator
        <!-- ACCEPT >=> 6840cc00-9f1d-11ea-8389-333445793454 -->



## Class: `java.org.apache.commons.collections4.bidimap.DualTreeBidiMap` / `protected static class ViewMap<K, V> extends AbstractSortedMapDecorator<K, V>`


        <!-- 6840cc01-9f1d-11ea-838a-333445793454 <=< ACCEPT -->
        Internal sorted map view.
        <!-- ACCEPT >=> 6840cc01-9f1d-11ea-838a-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bidimap.DualTreeBidiMap` / `protected ViewMap(final DualTreeBidiMap<K, V> bidi, final SortedMap<K, V> sm)`


        <!-- 6840cc02-9f1d-11ea-838b-333445793454 <=< ACCEPT -->
        Constructor.
        @param bidi  the parent bidi map
        @param sm  the subMap sorted map
        <!-- ACCEPT >=> 6840cc02-9f1d-11ea-838b-333445793454 -->



## Class: `java.org.apache.commons.collections4.bidimap.DualTreeBidiMap` / `protected static class BidiOrderedMapIterator<K, V> implements OrderedMapIterator<K, V>, ResettableIterator<K>`


        <!-- 6840cc03-9f1d-11ea-838c-333445793454 <=< ACCEPT -->
        Inner class MapIterator.
        <!-- ACCEPT >=> 6840cc03-9f1d-11ea-838c-333445793454 -->



## Field: `java.org.apache.commons.collections4.bidimap.DualTreeBidiMap` / `private final AbstractDualBidiMap<K, V> parent`


        <!-- 6840cc04-9f1d-11ea-838d-333445793454 <=< ACCEPT -->
        The parent map
        <!-- ACCEPT >=> 6840cc04-9f1d-11ea-838d-333445793454 -->



## Field: `java.org.apache.commons.collections4.bidimap.DualTreeBidiMap` / `private ListIterator<Map.Entry<K, V>> iterator`


        <!-- 6840cc05-9f1d-11ea-838e-333445793454 <=< ACCEPT -->
        The iterator being decorated
        <!-- ACCEPT >=> 6840cc05-9f1d-11ea-838e-333445793454 -->



## Field: `java.org.apache.commons.collections4.bidimap.DualTreeBidiMap` / `private Map.Entry<K, V> last`


        <!-- 6840cc06-9f1d-11ea-838f-333445793454 <=< ACCEPT -->
        The last returned entry
        <!-- ACCEPT >=> 6840cc06-9f1d-11ea-838f-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bidimap.DualTreeBidiMap` / `protected BidiOrderedMapIterator(final AbstractDualBidiMap<K, V> parent)`


        <!-- 6840cc07-9f1d-11ea-8390-333445793454 <=< ACCEPT -->
        Constructor.
        @param parent  the parent map
        <!-- ACCEPT >=> 6840cc07-9f1d-11ea-8390-333445793454 -->



# File: `java.org.apache.commons.collections4.bidimap.TreeBidiMap`

## Class: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `implements OrderedBidiMap<K, V>, Serializable`


        <!-- 6840cc08-9f1d-11ea-8391-333445793454 <=< ACCEPT -->
        Red-Black tree-based implementation of BidiMap where all objects added
        implement the <code>Comparable</code> interface.
        <p>
        This class guarantees that the map will be in both ascending key order
        and ascending value order, sorted according to the natural order for
        the key's and value's classes.
        <p>
        This Map is intended for applications that need to be able to look
        up a key-value pairing by either key or value, and need to do so
        with equal efficiency.
        <p>
        While that goal could be accomplished by taking a pair of TreeMaps
        and redirecting requests to the appropriate TreeMap (e.g.,
        containsKey would be directed to the TreeMap that maps values to
        keys, containsValue would be directed to the TreeMap that maps keys
        to values), there are problems with that implementation.
        If the data contained in the TreeMaps is large, the cost of redundant
        storage becomes significant. The {@link DualTreeBidiMap} and
        {@link DualHashBidiMap} implementations use this approach.
        <p>
        This solution keeps minimizes the data storage by holding data only once.
        The red-black algorithm is based on {@link java.util.TreeMap}, but has been modified
        to simultaneously map a tree node by key and by value. This doubles the
        cost of put operations (but so does using two TreeMaps), and nearly doubles
        the cost of remove operations (there is a savings in that the lookup of the
        node to be removed only has to be performed once). And since only one node
        contains the key and value, storage is significantly less than that
        required by two TreeMaps.
        <p>
        The Map.Entry instances returned by the appropriate methods will
        not allow setValue() and will throw an
        UnsupportedOperationException on attempts to call that method.
        @since 3.0 (previously DoubleOrderedMap v2.0)
        @version $Id$
        <!-- ACCEPT >=> 6840cc08-9f1d-11ea-8391-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `private DataElement(final String description)`


        <!-- 6840cc09-9f1d-11ea-8392-333445793454 <=< ACCEPT -->
        Create a new TreeBidiMap.DataElement.
        @param description  the description for the element
        <!-- ACCEPT >=> 6840cc09-9f1d-11ea-8392-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `public TreeBidiMap()`


        <!-- 6840cc0a-9f1d-11ea-8393-333445793454 <=< ACCEPT -->
        Constructs a new empty TreeBidiMap.
        <!-- ACCEPT >=> 6840cc0a-9f1d-11ea-8393-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `public TreeBidiMap(final Map<? extends K, ? extends V> map)`


        <!-- 6840cc0b-9f1d-11ea-8394-333445793454 <=< ACCEPT -->
        Constructs a new TreeBidiMap by copying an existing Map.
        @param map  the map to copy
        @throws ClassCastException if the keys/values in the map are
        not Comparable or are not mutually comparable
        @throws NullPointerException if any key or value in the map is null
        <!-- ACCEPT >=> 6840cc0b-9f1d-11ea-8394-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `public int size()`


        <!-- 6840cc0c-9f1d-11ea-8395-333445793454 <=< ACCEPT -->
        Returns the number of key-value mappings in this map.
        @return the number of key-value mappings in this map
        <!-- ACCEPT >=> 6840cc0c-9f1d-11ea-8395-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `public boolean isEmpty()`


        <!-- 6840f301-9f1d-11ea-8396-333445793454 <=< ACCEPT -->
        Checks whether the map is empty or not.
        @return true if the map is empty
        <!-- ACCEPT >=> 6840f301-9f1d-11ea-8396-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `public boolean containsKey(final Object key)`


        <!-- 6840f302-9f1d-11ea-8397-333445793454 <=< ACCEPT -->
        Checks whether this map contains the a mapping for the specified key.
        <p>
        The key must implement <code>Comparable</code>.
        @param key  key whose presence in this map is to be tested
        @return true if this map contains a mapping for the specified key
        @throws ClassCastException if the key is of an inappropriate type
        @throws NullPointerException if the key is null
        <!-- ACCEPT >=> 6840f302-9f1d-11ea-8397-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `public boolean containsValue(final Object value)`


        <!-- 6840f303-9f1d-11ea-8398-333445793454 <=< ACCEPT -->
        Checks whether this map contains the a mapping for the specified value.
        <p>
        The value must implement <code>Comparable</code>.
        @param value  value whose presence in this map is to be tested
        @return true if this map contains a mapping for the specified value
        @throws ClassCastException if the value is of an inappropriate type
        @throws NullPointerException if the value is null
        <!-- ACCEPT >=> 6840f303-9f1d-11ea-8398-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `public V get(final Object key)`


        <!-- 6840f304-9f1d-11ea-8399-333445793454 <=< ACCEPT -->
        Gets the value to which this map maps the specified key.
        Returns null if the map contains no mapping for this key.
        <p>
        The key must implement <code>Comparable</code>.
        @param key  key whose associated value is to be returned
        @return the value to which this map maps the specified key,
        or null if the map contains no mapping for this key
        @throws ClassCastException if the key is of an inappropriate type
        @throws NullPointerException if the key is null
        <!-- ACCEPT >=> 6840f304-9f1d-11ea-8399-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `public V put(final K key, final V value)`


        <!-- 6840f305-9f1d-11ea-839a-333445793454 <=< ACCEPT -->
        Puts the key-value pair into the map, replacing any previous pair.
        <p>
        When adding a key-value pair, the value may already exist in the map
        against a different key. That mapping is removed, to ensure that the
        value only occurs once in the inverse map.
        <pre>
        BidiMap map1 = new TreeBidiMap();
        map.put("A","B");  // contains A mapped to B, as per Map
        map.put("A","C");  // contains A mapped to C, as per Map
        BidiMap map2 = new TreeBidiMap();
        map.put("A","B");  // contains A mapped to B, as per Map
        map.put("C","B");  // contains C mapped to B, key A is removed
        </pre>
        <p>
        Both key and value must implement <code>Comparable</code>.
        @param key  key with which the specified value is to be  associated
        @param value  value to be associated with the specified key
        @return the previous value for the key
        @throws ClassCastException if the key is of an inappropriate type
        @throws NullPointerException if the key is null
        <!-- ACCEPT >=> 6840f305-9f1d-11ea-839a-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `public void putAll(final Map<? extends K, ? extends V> map)`


        <!-- 6840f306-9f1d-11ea-839b-333445793454 <=< ACCEPT -->
        Puts all the mappings from the specified map into this map.
        <p>
        All keys and values must implement <code>Comparable</code>.
        @param map  the map to copy from
        <!-- ACCEPT >=> 6840f306-9f1d-11ea-839b-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `public V remove(final Object key)`


        <!-- 6840f307-9f1d-11ea-839c-333445793454 <=< ACCEPT -->
        Removes the mapping for this key from this map if present.
        <p>
        The key must implement <code>Comparable</code>.
        @param key  key whose mapping is to be removed from the map.
        @return previous value associated with specified key,
        or null if there was no mapping for key.
        @throws ClassCastException if the key is of an inappropriate type
        @throws NullPointerException if the key is null
        <!-- ACCEPT >=> 6840f307-9f1d-11ea-839c-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `public void clear()`


        <!-- 6840f308-9f1d-11ea-839d-333445793454 <=< ACCEPT -->
        Removes all mappings from this map.
        <!-- ACCEPT >=> 6840f308-9f1d-11ea-839d-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `public K getKey(final Object value)`


        <!-- 6840f309-9f1d-11ea-839e-333445793454 <=< ACCEPT -->
        Returns the key to which this map maps the specified value.
        Returns null if the map contains no mapping for this value.
        <p>
        The value must implement <code>Comparable</code>.
        @param value  value whose associated key is to be returned.
        @return the key to which this map maps the specified value,
        or null if the map contains no mapping for this value.
        @throws ClassCastException if the value is of an inappropriate type
        @throws NullPointerException if the value is null
        <!-- ACCEPT >=> 6840f309-9f1d-11ea-839e-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `public K removeValue(final Object value)`


        <!-- 6840f30a-9f1d-11ea-839f-333445793454 <=< ACCEPT -->
        Removes the mapping for this value from this map if present.
        <p>
        The value must implement <code>Comparable</code>.
        @param value  value whose mapping is to be removed from the map
        @return previous key associated with specified value,
        or null if there was no mapping for value.
        @throws ClassCastException if the value is of an inappropriate type
        @throws NullPointerException if the value is null
        <!-- ACCEPT >=> 6840f30a-9f1d-11ea-839f-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `public K firstKey()`


        <!-- 6840f30b-9f1d-11ea-83a0-333445793454 <=< ACCEPT -->
        Gets the first (lowest) key currently in this map.
        @return the first (lowest) key currently in this sorted map
        @throws NoSuchElementException if this map is empty
        <!-- ACCEPT >=> 6840f30b-9f1d-11ea-83a0-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `public K lastKey()`


        <!-- 6840f30c-9f1d-11ea-83a1-333445793454 <=< ACCEPT -->
        Gets the last (highest) key currently in this map.
        @return the last (highest) key currently in this sorted map
        @throws NoSuchElementException if this map is empty
        <!-- ACCEPT >=> 6840f30c-9f1d-11ea-83a1-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `public K nextKey(final K key)`


        <!-- 6840f30d-9f1d-11ea-83a2-333445793454 <=< ACCEPT -->
        Gets the next key after the one specified.
        <p>
        The key must implement <code>Comparable</code>.
        @param key the key to search for next from
        @return the next key, null if no match or at end
        <!-- ACCEPT >=> 6840f30d-9f1d-11ea-83a2-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `public K previousKey(final K key)`


        <!-- 6840f30e-9f1d-11ea-83a3-333445793454 <=< ACCEPT -->
        Gets the previous key before the one specified.
        <p>
        The key must implement <code>Comparable</code>.
        @param key the key to search for previous from
        @return the previous key, null if no match or at start
        <!-- ACCEPT >=> 6840f30e-9f1d-11ea-83a3-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `public Set<K> keySet()`


        <!-- 6840f30f-9f1d-11ea-83a4-333445793454 <=< ACCEPT -->
        Returns a set view of the keys contained in this map in key order.
        <p>
        The set is backed by the map, so changes to the map are reflected in
        the set, and vice-versa. If the map is modified while an iteration over
        the set is in progress, the results of the iteration are undefined.
        <p>
        The set supports element removal, which removes the corresponding mapping
        from the map. It does not support the add or addAll operations.
        @return a set view of the keys contained in this map.
        <!-- ACCEPT >=> 6840f30f-9f1d-11ea-83a4-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `public Set<V> values()`


        <!-- 6840f310-9f1d-11ea-83a5-333445793454 <=< ACCEPT -->
        Returns a set view of the values contained in this map in key order.
        The returned object can be cast to a Set.
        <p>
        The set is backed by the map, so changes to the map are reflected in
        the set, and vice-versa. If the map is modified while an iteration over
        the set is in progress, the results of the iteration are undefined.
        <p>
        The set supports element removal, which removes the corresponding mapping
        from the map. It does not support the add or addAll operations.
        @return a set view of the values contained in this map.
        <!-- ACCEPT >=> 6840f310-9f1d-11ea-83a5-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `public Set<Map.Entry<K, V>> entrySet()`


        <!-- 6840f311-9f1d-11ea-83a6-333445793454 <=< ACCEPT -->
        Returns a set view of the entries contained in this map in key order.
        For simple iteration through the map, the MapIterator is quicker.
        <p>
        The set is backed by the map, so changes to the map are reflected in
        the set, and vice-versa. If the map is modified while an iteration over
        the set is in progress, the results of the iteration are undefined.
        <p>
        The set supports element removal, which removes the corresponding mapping
        from the map. It does not support the add or addAll operations.
        The returned MapEntry objects do not support setValue.
        @return a set view of the values contained in this map.
        <!-- ACCEPT >=> 6840f311-9f1d-11ea-83a6-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `public OrderedBidiMap<V, K> inverseBidiMap()`


        <!-- 68411a0a-9f1d-11ea-83a7-333445793454 <=< ACCEPT -->
        Gets the inverse map for comparison.
        @return the inverse map
        <!-- ACCEPT >=> 68411a0a-9f1d-11ea-83a7-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `public boolean equals(final Object obj)`


        <!-- 68411a0b-9f1d-11ea-83a8-333445793454 <=< ACCEPT -->
        Compares for equals as per the API.
        @param obj  the object to compare to
        @return true if equal
        <!-- ACCEPT >=> 68411a0b-9f1d-11ea-83a8-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `public int hashCode()`


        <!-- 68411a0c-9f1d-11ea-83a9-333445793454 <=< ACCEPT -->
        Gets the hash code value for this map as per the API.
        @return the hash code value for this map
        <!-- ACCEPT >=> 68411a0c-9f1d-11ea-83a9-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `public String toString()`


        <!-- 68411a0d-9f1d-11ea-83aa-333445793454 <=< ACCEPT -->
        Returns a string version of this Map in standard format.
        @return a standard format string version of the map
        <!-- ACCEPT >=> 68411a0d-9f1d-11ea-83aa-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `private void doPut(final K key, final V value)`


        <!-- 68411a0e-9f1d-11ea-83ab-333445793454 <=< ACCEPT -->
        Put logic.
        @param key  the key, always the main map key
        @param value  the value, always the main map value
        <!-- ACCEPT >=> 68411a0e-9f1d-11ea-83ab-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `private <T extends Comparable<T>> Node<K, V> lookup(final Object data, final DataElement dataElement)`


        <!-- 68411a0f-9f1d-11ea-83ac-333445793454 <=< ACCEPT -->
        do the actual lookup of a piece of data
        @param data the key or value to be looked up
        @param index  the KEY or VALUE int
        @return the desired Node, or null if there is no mapping of the
        specified data
        <!-- ACCEPT >=> 68411a0f-9f1d-11ea-83ac-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement)`


        <!-- 68411a10-9f1d-11ea-83ad-333445793454 <=< ACCEPT -->
        get the next larger node from the specified node
        @param node the node to be searched from
        @param index  the KEY or VALUE int
        @return the specified node
        <!-- ACCEPT >=> 68411a10-9f1d-11ea-83ad-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `private Node<K, V> nextSmaller(final Node<K, V> node, final DataElement dataElement)`


        <!-- 68411a11-9f1d-11ea-83ae-333445793454 <=< ACCEPT -->
        get the next larger node from the specified node
        @param node the node to be searched from
        @param index  the KEY or VALUE int
        @return the specified node
        <!-- ACCEPT >=> 68411a11-9f1d-11ea-83ae-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `private static <T extends Comparable<T>> int compare(final T o1, final T o2)`


        <!-- 68411a12-9f1d-11ea-83af-333445793454 <=< ACCEPT -->
        Compare two objects
        @param o1  the first object
        @param o2  the second object
        @return negative value if o1 &lt; o2; 0 if o1 == o2; positive
        value if o1 &gt; o2
        <!-- ACCEPT >=> 68411a12-9f1d-11ea-83af-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `private Node<K, V> leastNode(final Node<K, V> node, final DataElement dataElement)`


        <!-- 68411a13-9f1d-11ea-83b0-333445793454 <=< ACCEPT -->
        Find the least node from a given node.
        @param node  the node from which we will start searching
        @param index  the KEY or VALUE int
        @return the smallest node, from the specified node, in the
        specified mapping
        <!-- ACCEPT >=> 68411a13-9f1d-11ea-83b0-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `private Node<K, V> greatestNode(final Node<K, V> node, final DataElement dataElement)`


        <!-- 68411a14-9f1d-11ea-83b1-333445793454 <=< ACCEPT -->
        Find the greatest node from a given node.
        @param node  the node from which we will start searching
        @param index  the KEY or VALUE int
        @return the greatest node, from the specified node
        <!-- ACCEPT >=> 68411a14-9f1d-11ea-83b1-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `private void copyColor(final Node<K, V> from, final Node<K, V> to, final DataElement dataElement)`


        <!-- 68411a15-9f1d-11ea-83b2-333445793454 <=< ACCEPT -->
        copy the color from one node to another, dealing with the fact
        that one or both nodes may, in fact, be null
        @param from the node whose color we're copying; may be null
        @param to the node whose color we're changing; may be null
        @param index  the KEY or VALUE int
        <!-- ACCEPT >=> 68411a15-9f1d-11ea-83b2-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `private static boolean isRed(final Node<?, ?> node, final DataElement dataElement)`


        <!-- 68411a16-9f1d-11ea-83b3-333445793454 <=< ACCEPT -->
        is the specified node red? if the node does not exist, no, it's
        black, thank you
        @param node the node (may be null) in question
        @param index  the KEY or VALUE int
        <!-- ACCEPT >=> 68411a16-9f1d-11ea-83b3-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `private static boolean isBlack(final Node<?, ?> node, final DataElement dataElement)`


        <!-- 68411a17-9f1d-11ea-83b4-333445793454 <=< ACCEPT -->
        is the specified black red? if the node does not exist, sure,
        it's black, thank you
        @param node the node (may be null) in question
        @param index  the KEY or VALUE int
        <!-- ACCEPT >=> 68411a17-9f1d-11ea-83b4-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `private static void makeRed(final Node<?, ?> node, final DataElement dataElement)`


        <!-- 68411a18-9f1d-11ea-83b5-333445793454 <=< ACCEPT -->
        force a node (if it exists) red
        @param node the node (may be null) in question
        @param index  the KEY or VALUE int
        <!-- ACCEPT >=> 68411a18-9f1d-11ea-83b5-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `private static void makeBlack(final Node<?, ?> node, final DataElement dataElement)`


        <!-- 68411a19-9f1d-11ea-83b6-333445793454 <=< ACCEPT -->
        force a node (if it exists) black
        @param node the node (may be null) in question
        @param index  the KEY or VALUE int
        <!-- ACCEPT >=> 68411a19-9f1d-11ea-83b6-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `private Node<K, V> getGrandParent(final Node<K, V> node, final DataElement dataElement)`


        <!-- 68411a1a-9f1d-11ea-83b7-333445793454 <=< ACCEPT -->
        get a node's grandparent. mind you, the node, its parent, or
        its grandparent may not exist. no problem
        @param node the node (may be null) in question
        @param index  the KEY or VALUE int
        <!-- ACCEPT >=> 68411a1a-9f1d-11ea-83b7-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `private Node<K, V> getParent(final Node<K, V> node, final DataElement dataElement)`


        <!-- 68411a1b-9f1d-11ea-83b8-333445793454 <=< ACCEPT -->
        get a node's parent. mind you, the node, or its parent, may not
        exist. no problem
        @param node the node (may be null) in question
        @param index  the KEY or VALUE int
        <!-- ACCEPT >=> 68411a1b-9f1d-11ea-83b8-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `private Node<K, V> getRightChild(final Node<K, V> node, final DataElement dataElement)`


        <!-- 68411a1c-9f1d-11ea-83b9-333445793454 <=< ACCEPT -->
        get a node's right child. mind you, the node may not exist. no
        problem
        @param node the node (may be null) in question
        @param index  the KEY or VALUE int
        <!-- ACCEPT >=> 68411a1c-9f1d-11ea-83b9-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `private Node<K, V> getLeftChild(final Node<K, V> node, final DataElement dataElement)`


        <!-- 68411a1d-9f1d-11ea-83ba-333445793454 <=< ACCEPT -->
        get a node's left child. mind you, the node may not exist. no
        problem
        @param node the node (may be null) in question
        @param index  the KEY or VALUE int
        <!-- ACCEPT >=> 68411a1d-9f1d-11ea-83ba-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `private void rotateLeft(final Node<K, V> node, final DataElement dataElement)`


        <!-- 68411a1e-9f1d-11ea-83bb-333445793454 <=< ACCEPT -->
        do a rotate left. standard fare in the world of balanced trees
        @param node the node to be rotated
        @param index  the KEY or VALUE int
        <!-- ACCEPT >=> 68411a1e-9f1d-11ea-83bb-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `private void rotateRight(final Node<K, V> node, final DataElement dataElement)`


        <!-- 68411a1f-9f1d-11ea-83bc-333445793454 <=< ACCEPT -->
        do a rotate right. standard fare in the world of balanced trees
        @param node the node to be rotated
        @param index  the KEY or VALUE int
        <!-- ACCEPT >=> 68411a1f-9f1d-11ea-83bc-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `private void doRedBlackInsert(final Node<K, V> insertedNode, final DataElement dataElement)`


        <!-- 68411a20-9f1d-11ea-83bd-333445793454 <=< ACCEPT -->
        complicated red-black insert stuff. Based on Sun's TreeMap
        implementation, though it's barely recognizable any more
        @param insertedNode the node to be inserted
        @param dataElement  the KEY or VALUE int
        <!-- ACCEPT >=> 68411a20-9f1d-11ea-83bd-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `private void doRedBlackDelete(final Node<K, V> deletedNode)`


        <!-- 68414115-9f1d-11ea-83be-333445793454 <=< ACCEPT -->
        complicated red-black delete stuff. Based on Sun's TreeMap
        implementation, though it's barely recognizable any more
        @param deletedNode the node to be deleted
        <!-- ACCEPT >=> 68414115-9f1d-11ea-83be-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement)`


        <!-- 68414116-9f1d-11ea-83bf-333445793454 <=< ACCEPT -->
        complicated red-black delete stuff. Based on Sun's TreeMap
        implementation, though it's barely recognizable any more. This
        rebalances the tree (somewhat, as red-black trees are not
        perfectly balanced -- perfect balancing takes longer)
        @param replacementNode the node being replaced
        @param dataElement  the KEY or VALUE int
        <!-- ACCEPT >=> 68414116-9f1d-11ea-83bf-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `private void swapPosition(final Node<K, V> x, final Node<K, V> y, final DataElement dataElement)`


        <!-- 68414117-9f1d-11ea-83c0-333445793454 <=< ACCEPT -->
        swap two nodes (except for their content), taking care of
        special cases where one is the other's parent ... hey, it
        happens.
        @param x one node
        @param y another node
        @param dataElement  the KEY or VALUE int
        <!-- ACCEPT >=> 68414117-9f1d-11ea-83c0-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `private static void checkNonNullComparable(final Object o, final DataElement dataElement)`


        <!-- 68414118-9f1d-11ea-83c1-333445793454 <=< ACCEPT -->
        check if an object is fit to be proper input ... has to be
        Comparable and non-null
        @param o the object being checked
        @param index  the KEY or VALUE int (used to put the right word in the
        exception message)
        @throws NullPointerException if o is null
        @throws ClassCastException if o is not Comparable
        <!-- ACCEPT >=> 68414118-9f1d-11ea-83c1-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `private static void checkKey(final Object key)`


        <!-- 68414119-9f1d-11ea-83c2-333445793454 <=< ACCEPT -->
        check a key for validity (non-null and implements Comparable)
        @param key the key to be checked
        @throws NullPointerException if key is null
        @throws ClassCastException if key is not Comparable
        <!-- ACCEPT >=> 68414119-9f1d-11ea-83c2-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `private static void checkValue(final Object value)`


        <!-- 6841411a-9f1d-11ea-83c3-333445793454 <=< ACCEPT -->
        check a value for validity (non-null and implements Comparable)
        @param value the value to be checked
        @throws NullPointerException if value is null
        @throws ClassCastException if value is not Comparable
        <!-- ACCEPT >=> 6841411a-9f1d-11ea-83c3-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `private static void checkKeyAndValue(final Object key, final Object value)`


        <!-- 6841411b-9f1d-11ea-83c4-333445793454 <=< ACCEPT -->
        check a key and a value for validity (non-null and implements
        Comparable)
        @param key the key to be checked
        @param value the value to be checked
        @throws NullPointerException if key or value is null
        @throws ClassCastException if key or value is not Comparable
        <!-- ACCEPT >=> 6841411b-9f1d-11ea-83c4-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `private void modify()`


        <!-- 6841411c-9f1d-11ea-83c5-333445793454 <=< ACCEPT -->
        increment the modification count -- used to check for
        concurrent modification of the map through the map and through
        an Iterator from one of its Set or Collection views
        <!-- ACCEPT >=> 6841411c-9f1d-11ea-83c5-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `private void grow()`


        <!-- 6841411d-9f1d-11ea-83c6-333445793454 <=< ACCEPT -->
        bump up the size and note that the map has changed
        <!-- ACCEPT >=> 6841411d-9f1d-11ea-83c6-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `private void shrink()`


        <!-- 6841411e-9f1d-11ea-83c7-333445793454 <=< ACCEPT -->
        decrement the size and note that the map has changed
        <!-- ACCEPT >=> 6841411e-9f1d-11ea-83c7-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `private void insertValue(final Node<K, V> newNode) throws IllegalArgumentException`


        <!-- 6841411f-9f1d-11ea-83c8-333445793454 <=< ACCEPT -->
        insert a node by its value
        @param newNode the node to be inserted
        @throws IllegalArgumentException if the node already exists
        in the value mapping
        <!-- ACCEPT >=> 6841411f-9f1d-11ea-83c8-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `private boolean doEquals(final Object obj, final DataElement dataElement)`


        <!-- 68414120-9f1d-11ea-83c9-333445793454 <=< ACCEPT -->
        Compares for equals as per the API.
        @param obj  the object to compare to
        @param type  the KEY or VALUE int
        @return true if equal
        <!-- ACCEPT >=> 68414120-9f1d-11ea-83c9-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `private int doHashCode(final DataElement dataElement)`


        <!-- 68414121-9f1d-11ea-83ca-333445793454 <=< ACCEPT -->
        Gets the hash code value for this map as per the API.
        @param type  the KEY or VALUE int
        @return the hash code value for this map
        <!-- ACCEPT >=> 68414121-9f1d-11ea-83ca-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `private String doToString(final DataElement dataElement)`


        <!-- 68414122-9f1d-11ea-83cb-333445793454 <=< ACCEPT -->
        Gets the string form of this map as per AbstractMap.
        @param type  the KEY or VALUE int
        @return the string form of this map
        <!-- ACCEPT >=> 68414122-9f1d-11ea-83cb-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `private void readObject(final ObjectInputStream stream) throws IOException, ClassNotFoundException`


        <!-- 68414123-9f1d-11ea-83cc-333445793454 <=< ACCEPT -->
        Reads the content of the stream.
        <!-- ACCEPT >=> 68414123-9f1d-11ea-83cc-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `private void writeObject(final ObjectOutputStream stream) throws IOException`


        <!-- 68414124-9f1d-11ea-83cd-333445793454 <=< ACCEPT -->
        Writes the content to the stream for serialization.
        <!-- ACCEPT >=> 68414124-9f1d-11ea-83cd-333445793454 -->



## Class: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `abstract class View<E> extends AbstractSet<E>`


        <!-- 68414125-9f1d-11ea-83ce-333445793454 <=< ACCEPT -->
        A view of this map.
        <!-- ACCEPT >=> 68414125-9f1d-11ea-83ce-333445793454 -->



## Field: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `final DataElement orderType`


        <!-- 68414126-9f1d-11ea-83cf-333445793454 <=< ACCEPT -->
        Whether to return KEY or VALUE order.
        <!-- ACCEPT >=> 68414126-9f1d-11ea-83cf-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `View(final DataElement orderType)`


        <!-- 68414127-9f1d-11ea-83d0-333445793454 <=< ACCEPT -->
        Constructor.
        @param orderType  the KEY or VALUE int for the order
        @param main  the main map
        <!-- ACCEPT >=> 68414127-9f1d-11ea-83d0-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `public KeyView(final DataElement orderType)`


        <!-- 68414128-9f1d-11ea-83d1-333445793454 <=< ACCEPT -->
        Create a new TreeBidiMap.KeyView.
        <!-- ACCEPT >=> 68414128-9f1d-11ea-83d1-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `public ValueView(final DataElement orderType)`


        <!-- 68414129-9f1d-11ea-83d2-333445793454 <=< ACCEPT -->
        Create a new TreeBidiMap.ValueView.
        <!-- ACCEPT >=> 68414129-9f1d-11ea-83d2-333445793454 -->



## Class: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `class EntryView extends View<Map.Entry<K, V>>`


        <!-- 6841412a-9f1d-11ea-83d3-333445793454 <=< ACCEPT -->
        A view of this map.
        <!-- ACCEPT >=> 6841412a-9f1d-11ea-83d3-333445793454 -->



## Class: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `class InverseEntryView extends View<Map.Entry<V, K>>`


        <!-- 6841412b-9f1d-11ea-83d4-333445793454 <=< ACCEPT -->
        A view of this map.
        <!-- ACCEPT >=> 6841412b-9f1d-11ea-83d4-333445793454 -->



## Class: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `abstract class ViewIterator`


        <!-- 6841412c-9f1d-11ea-83d5-333445793454 <=< ACCEPT -->
        An iterator over the map.
        <!-- ACCEPT >=> 6841412c-9f1d-11ea-83d5-333445793454 -->



## Field: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `private final DataElement orderType`


        <!-- 6841681e-9f1d-11ea-83d6-333445793454 <=< ACCEPT -->
        Whether to return KEY or VALUE order.
        <!-- ACCEPT >=> 6841681e-9f1d-11ea-83d6-333445793454 -->



## Field: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `Node<K, V> lastReturnedNode`


        <!-- 6841681f-9f1d-11ea-83d7-333445793454 <=< ACCEPT -->
        The last node returned by the iterator.
        <!-- ACCEPT >=> 6841681f-9f1d-11ea-83d7-333445793454 -->



## Field: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `private Node<K, V> nextNode`


        <!-- 68416820-9f1d-11ea-83d8-333445793454 <=< ACCEPT -->
        The next node to be returned by the iterator.
        <!-- ACCEPT >=> 68416820-9f1d-11ea-83d8-333445793454 -->



## Field: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `private Node<K, V> previousNode`


        <!-- 68416821-9f1d-11ea-83d9-333445793454 <=< ACCEPT -->
        The previous node in the sequence returned by the iterator.
        <!-- ACCEPT >=> 68416821-9f1d-11ea-83d9-333445793454 -->



## Field: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `private int expectedModifications`


        <!-- 68416822-9f1d-11ea-83da-333445793454 <=< ACCEPT -->
        The modification count.
        <!-- ACCEPT >=> 68416822-9f1d-11ea-83da-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `ViewIterator(final DataElement orderType)`


        <!-- 68416823-9f1d-11ea-83db-333445793454 <=< ACCEPT -->
        Constructor.
        @param orderType  the KEY or VALUE int for the order
        @param main  the main map
        <!-- ACCEPT >=> 68416823-9f1d-11ea-83db-333445793454 -->



## Class: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `class ViewMapIterator extends ViewIterator implements OrderedMapIterator<K, V>`


        <!-- 68416824-9f1d-11ea-83dc-333445793454 <=< ACCEPT -->
        An iterator over the map.
        <!-- ACCEPT >=> 68416824-9f1d-11ea-83dc-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `ViewMapIterator(final DataElement orderType)`


        <!-- 68416825-9f1d-11ea-83dd-333445793454 <=< ACCEPT -->
        Constructor.
        <!-- ACCEPT >=> 68416825-9f1d-11ea-83dd-333445793454 -->



## Class: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `class InverseViewMapIterator extends ViewIterator implements OrderedMapIterator<V, K>`


        <!-- 68416826-9f1d-11ea-83de-333445793454 <=< ACCEPT -->
        An iterator over the map.
        <!-- ACCEPT >=> 68416826-9f1d-11ea-83de-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `public InverseViewMapIterator(final DataElement orderType)`


        <!-- 68416827-9f1d-11ea-83df-333445793454 <=< ACCEPT -->
        Create a new TreeBidiMap.InverseViewMapIterator.
        <!-- ACCEPT >=> 68416827-9f1d-11ea-83df-333445793454 -->



## Class: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `class ViewMapEntryIterator extends ViewIterator implements OrderedIterator<Map.Entry<K, V>>`


        <!-- 68416828-9f1d-11ea-83e0-333445793454 <=< ACCEPT -->
        An iterator over the map entries.
        <!-- ACCEPT >=> 68416828-9f1d-11ea-83e0-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `ViewMapEntryIterator()`


        <!-- 68416829-9f1d-11ea-83e1-333445793454 <=< ACCEPT -->
        Constructor.
        <!-- ACCEPT >=> 68416829-9f1d-11ea-83e1-333445793454 -->



## Class: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `class InverseViewMapEntryIterator extends ViewIterator implements OrderedIterator<Map.Entry<V, K>>`


        <!-- 6841682a-9f1d-11ea-83e2-333445793454 <=< ACCEPT -->
        An iterator over the inverse map entries.
        <!-- ACCEPT >=> 6841682a-9f1d-11ea-83e2-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `InverseViewMapEntryIterator()`


        <!-- 6841682b-9f1d-11ea-83e3-333445793454 <=< ACCEPT -->
        Constructor.
        <!-- ACCEPT >=> 6841682b-9f1d-11ea-83e3-333445793454 -->



## Class: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `static class Node<K extends Comparable<K>, V extends Comparable<V>> implements Map.Entry<K, V>, KeyValue<K, V>`


        <!-- 6841682c-9f1d-11ea-83e4-333445793454 <=< ACCEPT -->
        A node used to store the data.
        <!-- ACCEPT >=> 6841682c-9f1d-11ea-83e4-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `Node(final K key, final V value)`


        <!-- 6841682d-9f1d-11ea-83e5-333445793454 <=< ACCEPT -->
        Make a new cell with given key and value, and with null
        links, and black (true) colors.
        @param key
        @param value
        <!-- ACCEPT >=> 6841682d-9f1d-11ea-83e5-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `private void setParent(final Node<K, V> node, final DataElement dataElement)`


        <!-- 6841682e-9f1d-11ea-83e6-333445793454 <=< ACCEPT -->
        Set this node's parent node.
        @param node  the new parent node
        @param index  the KEY or VALUE int
        <!-- ACCEPT >=> 6841682e-9f1d-11ea-83e6-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `private Node<K, V> getParent(final DataElement dataElement)`


        <!-- 6841682f-9f1d-11ea-83e7-333445793454 <=< ACCEPT -->
        Get the parent node.
        @param index  the KEY or VALUE int
        @return the parent node, may be null
        <!-- ACCEPT >=> 6841682f-9f1d-11ea-83e7-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `private void swapColors(final Node<K, V> node, final DataElement dataElement)`


        <!-- 68416830-9f1d-11ea-83e8-333445793454 <=< ACCEPT -->
        Exchange colors with another node.
        @param node  the node to swap with
        @param index  the KEY or VALUE int
        <!-- ACCEPT >=> 68416830-9f1d-11ea-83e8-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `private boolean isBlack(final DataElement dataElement)`


        <!-- 68416831-9f1d-11ea-83e9-333445793454 <=< ACCEPT -->
        Is this node black?
        @param index  the KEY or VALUE int
        @return true if black (which is represented as a true boolean)
        <!-- ACCEPT >=> 68416831-9f1d-11ea-83e9-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `private boolean isRed(final DataElement dataElement)`


        <!-- 68416832-9f1d-11ea-83ea-333445793454 <=< ACCEPT -->
        Is this node red?
        @param index  the KEY or VALUE int
        @return true if non-black
        <!-- ACCEPT >=> 68416832-9f1d-11ea-83ea-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `private void setBlack(final DataElement dataElement)`


        <!-- 68416833-9f1d-11ea-83eb-333445793454 <=< ACCEPT -->
        Make this node black.
        @param index  the KEY or VALUE int
        <!-- ACCEPT >=> 68416833-9f1d-11ea-83eb-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `private void setRed(final DataElement dataElement)`


        <!-- 68416834-9f1d-11ea-83ec-333445793454 <=< ACCEPT -->
        Make this node red.
        @param index  the KEY or VALUE int
        <!-- ACCEPT >=> 68416834-9f1d-11ea-83ec-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `private void copyColor(final Node<K, V> node, final DataElement dataElement)`


        <!-- 68416835-9f1d-11ea-83ed-333445793454 <=< ACCEPT -->
        Make this node the same color as another
        @param node  the node whose color we're adopting
        @param index  the KEY or VALUE int
        <!-- ACCEPT >=> 68416835-9f1d-11ea-83ed-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `public K getKey()`


        <!-- 68416836-9f1d-11ea-83ee-333445793454 <=< ACCEPT -->
        Gets the key.
        @return the key corresponding to this entry.
        <!-- ACCEPT >=> 68416836-9f1d-11ea-83ee-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `public V getValue()`


        <!-- 68416837-9f1d-11ea-83ef-333445793454 <=< ACCEPT -->
        Gets the value.
        @return the value corresponding to this entry.
        <!-- ACCEPT >=> 68416837-9f1d-11ea-83ef-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `public V setValue(final V ignored) throws UnsupportedOperationException`


        <!-- 68418f28-9f1d-11ea-83f0-333445793454 <=< ACCEPT -->
        Optional operation that is not permitted in this implementation
        @param ignored
        @return does not return
        @throws UnsupportedOperationException always
        <!-- ACCEPT >=> 68418f28-9f1d-11ea-83f0-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `public boolean equals(final Object obj)`


        <!-- 68418f29-9f1d-11ea-83f1-333445793454 <=< ACCEPT -->
        Compares the specified object with this entry for equality.
        Returns true if the given object is also a map entry and
        the two entries represent the same mapping.
        @param obj  the object to be compared for equality with this entry.
        @return true if the specified object is equal to this entry.
        <!-- ACCEPT >=> 68418f29-9f1d-11ea-83f1-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `public int hashCode()`


        <!-- 68418f2a-9f1d-11ea-83f2-333445793454 <=< ACCEPT -->
        @return the hash code value for this map entry.
        <!-- ACCEPT >=> 68418f2a-9f1d-11ea-83f2-333445793454 -->



## Class: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `class Inverse implements OrderedBidiMap<V, K>`


        <!-- 68418f2b-9f1d-11ea-83f3-333445793454 <=< ACCEPT -->
        The inverse map implementation.
        <!-- ACCEPT >=> 68418f2b-9f1d-11ea-83f3-333445793454 -->



## Field: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `private Set<V> inverseKeySet`


        <!-- 68418f2c-9f1d-11ea-83f4-333445793454 <=< ACCEPT -->
        Store the keySet once created.
        <!-- ACCEPT >=> 68418f2c-9f1d-11ea-83f4-333445793454 -->



## Field: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `private Set<K> inverseValuesSet`


        <!-- 68418f2d-9f1d-11ea-83f5-333445793454 <=< ACCEPT -->
        Store the valuesSet once created.
        <!-- ACCEPT >=> 68418f2d-9f1d-11ea-83f5-333445793454 -->



## Field: `java.org.apache.commons.collections4.bidimap.TreeBidiMap` / `private Set<Map.Entry<V, K>> inverseEntrySet`


        <!-- 68418f2e-9f1d-11ea-83f6-333445793454 <=< ACCEPT -->
        Store the entrySet once created.
        <!-- ACCEPT >=> 68418f2e-9f1d-11ea-83f6-333445793454 -->



# File: `java.org.apache.commons.collections4.bidimap.UnmodifiableBidiMap`

## Class: `java.org.apache.commons.collections4.bidimap.UnmodifiableBidiMap` / `extends AbstractBidiMapDecorator<K, V> implements Unmodifiable`


        <!-- 68418f2f-9f1d-11ea-83f7-333445793454 <=< ACCEPT -->
        Decorates another {@link BidiMap} to ensure it can't be altered.
        <p>
        Attempts to modify it will result in an UnsupportedOperationException.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 68418f2f-9f1d-11ea-83f7-333445793454 -->



## Field: `java.org.apache.commons.collections4.bidimap.UnmodifiableBidiMap` / `private UnmodifiableBidiMap<V, K> inverse`


        <!-- 68418f30-9f1d-11ea-83f8-333445793454 <=< ACCEPT -->
        The inverse unmodifiable map
        <!-- ACCEPT >=> 68418f30-9f1d-11ea-83f8-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.UnmodifiableBidiMap` / `public static <K, V> BidiMap<K, V> unmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map)`


        <!-- 68418f31-9f1d-11ea-83f9-333445793454 <=< ACCEPT -->
        Factory method to create an unmodifiable map.
        <p>
        If the map passed in is already unmodifiable, it is returned.
        @param <K> the key type
        @param <V> the value type
        @param map  the map to decorate, must not be null
        @return an unmodifiable BidiMap
        @throws NullPointerException if map is null
        @since 4.0
        <!-- ACCEPT >=> 68418f31-9f1d-11ea-83f9-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bidimap.UnmodifiableBidiMap` / `private UnmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map)`


        <!-- 68418f32-9f1d-11ea-83fa-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param map  the map to decorate, must not be null
        @throws NullPointerException if map is null
        <!-- ACCEPT >=> 68418f32-9f1d-11ea-83fa-333445793454 -->



# File: `java.org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMap`

## Class: `java.org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMap` / `extends AbstractOrderedBidiMapDecorator<K, V> implements Unmodifiable`


        <!-- 68418f33-9f1d-11ea-83fb-333445793454 <=< ACCEPT -->
        Decorates another {@link OrderedBidiMap} to ensure it can't be altered.
        <p>
        Attempts to modify it will result in an UnsupportedOperationException.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 68418f33-9f1d-11ea-83fb-333445793454 -->



## Field: `java.org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMap` / `private UnmodifiableOrderedBidiMap<V, K> inverse`


        <!-- 68418f34-9f1d-11ea-83fc-333445793454 <=< ACCEPT -->
        The inverse unmodifiable map
        <!-- ACCEPT >=> 68418f34-9f1d-11ea-83fc-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMap` / `final OrderedBidiMap<? extends K, ? extends V> map)`


        <!-- 68418f35-9f1d-11ea-83fd-333445793454 <=< ACCEPT -->
        Factory method to create an unmodifiable map.
        <p>
        If the map passed in is already unmodifiable, it is returned.
        @param <K> the key type
        @param <V> the value type
        @param map  the map to decorate, must not be null
        @return an unmodifiable OrderedBidiMap
        @throws NullPointerException if map is null
        @since 4.0
        <!-- ACCEPT >=> 68418f35-9f1d-11ea-83fd-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMap` / `private UnmodifiableOrderedBidiMap(final OrderedBidiMap<? extends K, ? extends V> map)`


        <!-- 68418f36-9f1d-11ea-83fe-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param map  the map to decorate, must not be null
        @throws NullPointerException if map is null
        <!-- ACCEPT >=> 68418f36-9f1d-11ea-83fe-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.UnmodifiableOrderedBidiMap` / `public OrderedBidiMap<V, K> inverseOrderedBidiMap()`


        <!-- 68418f37-9f1d-11ea-83ff-333445793454 <=< ACCEPT -->
        Gets an unmodifiable view of this map where the keys and values are reversed.
        @return an inverted unmodifiable bidirectional map
        <!-- ACCEPT >=> 68418f37-9f1d-11ea-83ff-333445793454 -->



# File: `java.org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMap`

## Class: `java.org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMap` / `extends AbstractSortedBidiMapDecorator<K, V> implements Unmodifiable`


        <!-- 68418f38-9f1d-11ea-8400-333445793454 <=< ACCEPT -->
        Decorates another {@link SortedBidiMap} to ensure it can't be altered.
        <p>
        Attempts to modify it will result in an {@link UnsupportedOperationException}.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 68418f38-9f1d-11ea-8400-333445793454 -->



## Field: `java.org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMap` / `private UnmodifiableSortedBidiMap<V, K> inverse`


        <!-- 68418f39-9f1d-11ea-8401-333445793454 <=< ACCEPT -->
        The inverse unmodifiable map
        <!-- ACCEPT >=> 68418f39-9f1d-11ea-8401-333445793454 -->



## Method: `java.org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMap` / `public static <K, V> SortedBidiMap<K, V> unmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map)`


        <!-- 68418f3a-9f1d-11ea-8402-333445793454 <=< ACCEPT -->
        Factory method to create an unmodifiable map.
        <p>
        If the map passed in is already unmodifiable, it is returned.
        @param <K> the key type
        @param <V> the value type
        @param map  the map to decorate, must not be null
        @return an unmodifiable SortedBidiMap
        @throws NullPointerException if map is null
        @since 4.0
        <!-- ACCEPT >=> 68418f3a-9f1d-11ea-8402-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.bidimap.UnmodifiableSortedBidiMap` / `private UnmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map)`


        <!-- 68418f3b-9f1d-11ea-8403-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param map  the map to decorate, must not be null
        @throws NullPointerException if map is null
        <!-- ACCEPT >=> 68418f3b-9f1d-11ea-8403-333445793454 -->



# File: `java.org.apache.commons.collections4.bidimap.package-info`

## Package: `java.org.apache.commons.collections4.bidimap.package-info` / `package org.apache.commons.collections4.bidimap`


        <!-- 68418f3c-9f1d-11ea-8404-333445793454 <=< ACCEPT -->
        This package contains implementations of the
        {@link org.apache.commons.collections4.BidiMap BidiMap},
        {@link org.apache.commons.collections4.OrderedBidiMap OrderedBidiMap} and
        {@link org.apache.commons.collections4.SortedBidiMap SortedBidiMap} interfaces.
        A BidiMap is an extension to Map that allows keys and values to be looked up with equal ease.
        One example usage is a system communicating to a legacy datasource that must convert codes
        from the new format to the old format and vice versa.
        <p>
        The following implementations are provided in the package:
        <ul>
        <li>DualHashBidiMap - uses two HashMaps to implement BidiMap
        <li>DualLinkedHashBidiMap - uses two LinkedHashMaps to implement BidiMap
        <li>DualTreeBidiMap - uses two TreeMaps to implement SortedBidiMap
        <li>TreeBidiMap - red-black tree implementation of OrderedBidiMap
        </ul>
        <p>
        The following decorators are provided in the package:
        <ul>
        <li>Unmodifiable - ensures the map cannot be altered
        </ul>
        @version $Id$
        <!-- ACCEPT >=> 68418f3c-9f1d-11ea-8404-333445793454 -->



# File: `java.org.apache.commons.collections4.collection.AbstractCollectionDecorator`

## Class: `java.org.apache.commons.collections4.collection.AbstractCollectionDecorator` / `implements Collection<E>, Serializable`


        <!-- 6841b631-9f1d-11ea-8405-333445793454 <=< ACCEPT -->
        Decorates another <code>Collection</code> to provide additional behaviour.
        <p>
        Each method call made on this <code>Collection</code> is forwarded to the
        decorated <code>Collection</code>. This class is used as a framework on which
        to build to extensions such as synchronized and unmodifiable behaviour. The
        main advantage of decoration is that one decorator can wrap any implementation
        of <code>Collection</code>, whereas sub-classing requires a new class to be
        written for each implementation.
        <p>
        This implementation does not perform any special processing with
        {@link #iterator()}. Instead it simply returns the value from the
        wrapped collection. This may be undesirable, for example if you are trying
        to write an unmodifiable implementation it might provide a loophole.
        <p>
        This implementation does not forward the hashCode and equals methods through
        to the backing object, but relies on Object's implementation. This is necessary
        to preserve the symmetry of equals. Custom definitions of equality are usually
        based on an interface, such as Set or List, so that the implementation of equals
        can cast the object being tested for equality to the custom interface.
        AbstractCollectionDecorator does not implement such custom interfaces directly;
        they are implemented only in subclasses. Therefore, forwarding equals would break
        symmetry, as the forwarding object might consider itself equal to the object being
        tested, but the reverse could not be true. This behavior is consistent with the
        JDK's collection wrappers, such as {@link java.util.Collections#unmodifiableCollection(Collection)}.
        Use an interface-specific subclass of AbstractCollectionDecorator, such as
        AbstractListDecorator, to preserve equality behavior, or override equals directly.
        @param <E> the type of the elements in the collection
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 6841b631-9f1d-11ea-8405-333445793454 -->



## Field: `java.org.apache.commons.collections4.collection.AbstractCollectionDecorator` / `private static final long serialVersionUID`


        <!-- 6841b632-9f1d-11ea-8406-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 6841b632-9f1d-11ea-8406-333445793454 -->



## Field: `java.org.apache.commons.collections4.collection.AbstractCollectionDecorator` / `private Collection<E> collection`


        <!-- 6841b633-9f1d-11ea-8407-333445793454 <=< ACCEPT -->
        The collection being decorated
        <!-- ACCEPT >=> 6841b633-9f1d-11ea-8407-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.collection.AbstractCollectionDecorator` / `protected AbstractCollectionDecorator()`


        <!-- 6841b634-9f1d-11ea-8408-333445793454 <=< ACCEPT -->
        Constructor only used in deserialization, do not use otherwise.
        @since 3.1
        <!-- ACCEPT >=> 6841b634-9f1d-11ea-8408-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.collection.AbstractCollectionDecorator` / `protected AbstractCollectionDecorator(final Collection<E> coll)`


        <!-- 6841b635-9f1d-11ea-8409-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param coll  the collection to decorate, must not be null
        @throws NullPointerException if the collection is null
        <!-- ACCEPT >=> 6841b635-9f1d-11ea-8409-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.AbstractCollectionDecorator` / `protected Collection<E> decorated()`


        <!-- 6841b636-9f1d-11ea-840a-333445793454 <=< ACCEPT -->
        Gets the collection being decorated.
        All access to the decorated collection goes via this method.
        @return the decorated collection
        <!-- ACCEPT >=> 6841b636-9f1d-11ea-840a-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.AbstractCollectionDecorator` / `protected void setCollection(final Collection<E> coll)`


        <!-- 6841b637-9f1d-11ea-840b-333445793454 <=< ACCEPT -->
        Sets the collection being decorated.
        <p>
        <b>NOTE:</b> this method should only be used during deserialization
        @param coll  the decorated collection
        <!-- ACCEPT >=> 6841b637-9f1d-11ea-840b-333445793454 -->



# File: `java.org.apache.commons.collections4.collection.CompositeCollection`

## Class: `java.org.apache.commons.collections4.collection.CompositeCollection` / `public class CompositeCollection<E> implements Collection<E>, Serializable`


        <!-- 6841b638-9f1d-11ea-840c-333445793454 <=< ACCEPT -->
        Decorates a collection of other collections to provide a single unified view.
        <p>
        Changes made to this collection will actually be made on the decorated collection.
        Add and remove operations require the use of a pluggable strategy. If no
        strategy is provided then add and remove are unsupported.
        @param <E> the type of the elements in the collection
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 6841b638-9f1d-11ea-840c-333445793454 -->



## Field: `java.org.apache.commons.collections4.collection.CompositeCollection` / `private static final long serialVersionUID`


        <!-- 6841b639-9f1d-11ea-840d-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 6841b639-9f1d-11ea-840d-333445793454 -->



## Field: `java.org.apache.commons.collections4.collection.CompositeCollection` / `private CollectionMutator<E> mutator`


        <!-- 6841b63a-9f1d-11ea-840e-333445793454 <=< ACCEPT -->
        CollectionMutator to handle changes to the collection
        <!-- ACCEPT >=> 6841b63a-9f1d-11ea-840e-333445793454 -->



## Field: `java.org.apache.commons.collections4.collection.CompositeCollection` / `private final List<Collection<E>> all`


        <!-- 6841b63b-9f1d-11ea-840f-333445793454 <=< ACCEPT -->
        Collections in the composite
        <!-- ACCEPT >=> 6841b63b-9f1d-11ea-840f-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.collection.CompositeCollection` / `public CompositeCollection()`


        <!-- 6841b63c-9f1d-11ea-8410-333445793454 <=< ACCEPT -->
        Create an empty CompositeCollection.
        <!-- ACCEPT >=> 6841b63c-9f1d-11ea-8410-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.collection.CompositeCollection` / `public CompositeCollection(final Collection<E> compositeCollection)`


        <!-- 6841b63d-9f1d-11ea-8411-333445793454 <=< ACCEPT -->
        Create a Composite Collection with one collection.
        @param compositeCollection  the Collection to be appended to the composite
        <!-- ACCEPT >=> 6841b63d-9f1d-11ea-8411-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.collection.CompositeCollection` / `final Collection<E> compositeCollection2)`


        <!-- 6841b63e-9f1d-11ea-8412-333445793454 <=< ACCEPT -->
        Create a Composite Collection with two collections.
        @param compositeCollection1  the Collection to be appended to the composite
        @param compositeCollection2  the Collection to be appended to the composite
        <!-- ACCEPT >=> 6841b63e-9f1d-11ea-8412-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.collection.CompositeCollection` / `public CompositeCollection(final Collection<E>... compositeCollections)`


        <!-- 6841b63f-9f1d-11ea-8413-333445793454 <=< ACCEPT -->
        Create a Composite Collection with an array of collections.
        @param compositeCollections  the collections to composite
        <!-- ACCEPT >=> 6841b63f-9f1d-11ea-8413-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.CompositeCollection` / `public int size()`


        <!-- 6841b640-9f1d-11ea-8414-333445793454 <=< ACCEPT -->
        Gets the size of this composite collection.
        <p>
        This implementation calls <code>size()</code> on each collection.
        @return total number of elements in all contained containers
        <!-- ACCEPT >=> 6841b640-9f1d-11ea-8414-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.CompositeCollection` / `public boolean isEmpty()`


        <!-- 6841b641-9f1d-11ea-8415-333445793454 <=< ACCEPT -->
        Checks whether this composite collection is empty.
        <p>
        This implementation calls <code>isEmpty()</code> on each collection.
        @return true if all of the contained collections are empty
        <!-- ACCEPT >=> 6841b641-9f1d-11ea-8415-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.CompositeCollection` / `public boolean contains(final Object obj)`


        <!-- 6841b642-9f1d-11ea-8416-333445793454 <=< ACCEPT -->
        Checks whether this composite collection contains the object.
        <p>
        This implementation calls <code>contains()</code> on each collection.
        @param obj  the object to search for
        @return true if obj is contained in any of the contained collections
        <!-- ACCEPT >=> 6841b642-9f1d-11ea-8416-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.CompositeCollection` / `public Iterator<E> iterator()`


        <!-- 6841b643-9f1d-11ea-8417-333445793454 <=< ACCEPT -->
        Gets an iterator over all the collections in this composite.
        <p>
        This implementation uses an <code>IteratorChain</code>.
        @return an <code>IteratorChain</code> instance which supports
        <code>remove()</code>. Iteration occurs over contained collections in
        the order they were added, but this behavior should not be relied upon.
        @see IteratorChain
        <!-- ACCEPT >=> 6841b643-9f1d-11ea-8417-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.CompositeCollection` / `public Object[] toArray()`


        <!-- 6841dd3c-9f1d-11ea-8418-333445793454 <=< ACCEPT -->
        Returns an array containing all of the elements in this composite.
        @return an object array of all the elements in the collection
        <!-- ACCEPT >=> 6841dd3c-9f1d-11ea-8418-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.CompositeCollection` / `public <T> T[] toArray(final T[] array)`


        <!-- 6841dd3d-9f1d-11ea-8419-333445793454 <=< ACCEPT -->
        Returns an object array, populating the supplied array if possible.
        See <code>Collection</code> interface for full details.
        @param <T>  the type of the elements in the collection
        @param array  the array to use, populating if possible
        @return an array of all the elements in the collection
        <!-- ACCEPT >=> 6841dd3d-9f1d-11ea-8419-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.CompositeCollection` / `public boolean add(final E obj)`


        <!-- 6841dd3e-9f1d-11ea-841a-333445793454 <=< ACCEPT -->
        Adds an object to the collection, throwing UnsupportedOperationException
        unless a CollectionMutator strategy is specified.
        @param obj  the object to add
        @return {@code true} if the collection was modified
        @throws UnsupportedOperationException if CollectionMutator hasn't been set
        @throws UnsupportedOperationException if add is unsupported
        @throws ClassCastException if the object cannot be added due to its type
        @throws NullPointerException if the object cannot be added because its null
        @throws IllegalArgumentException if the object cannot be added
        <!-- ACCEPT >=> 6841dd3e-9f1d-11ea-841a-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.CompositeCollection` / `public boolean remove(final Object obj)`


        <!-- 6841dd3f-9f1d-11ea-841b-333445793454 <=< ACCEPT -->
        Removes an object from the collection, throwing UnsupportedOperationException
        unless a CollectionMutator strategy is specified.
        @param obj  the object being removed
        @return true if the collection is changed
        @throws UnsupportedOperationException if removed is unsupported
        @throws ClassCastException if the object cannot be removed due to its type
        @throws NullPointerException if the object cannot be removed because its null
        @throws IllegalArgumentException if the object cannot be removed
        <!-- ACCEPT >=> 6841dd3f-9f1d-11ea-841b-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.CompositeCollection` / `public boolean containsAll(final Collection<?> coll)`


        <!-- 6841dd40-9f1d-11ea-841c-333445793454 <=< ACCEPT -->
        Checks whether this composite contains all the elements in the specified collection.
        <p>
        This implementation calls <code>contains()</code> for each element in the
        specified collection.
        @param coll  the collection to check for
        @return true if all elements contained
        <!-- ACCEPT >=> 6841dd40-9f1d-11ea-841c-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.CompositeCollection` / `public boolean addAll(final Collection<? extends E> coll)`


        <!-- 6841dd41-9f1d-11ea-841d-333445793454 <=< ACCEPT -->
        Adds a collection of elements to this collection, throwing
        UnsupportedOperationException unless a CollectionMutator strategy is specified.
        @param coll  the collection to add
        @return true if the collection was modified
        @throws UnsupportedOperationException if CollectionMutator hasn't been set
        @throws UnsupportedOperationException if add is unsupported
        @throws ClassCastException if the object cannot be added due to its type
        @throws NullPointerException if the object cannot be added because its null
        @throws IllegalArgumentException if the object cannot be added
        <!-- ACCEPT >=> 6841dd41-9f1d-11ea-841d-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.CompositeCollection` / `public boolean removeAll(final Collection<?> coll)`


        <!-- 6841dd42-9f1d-11ea-841e-333445793454 <=< ACCEPT -->
        Removes the elements in the specified collection from this composite collection.
        <p>
        This implementation calls <code>removeAll</code> on each collection.
        @param coll  the collection to remove
        @return true if the collection was modified
        @throws UnsupportedOperationException if removeAll is unsupported
        <!-- ACCEPT >=> 6841dd42-9f1d-11ea-841e-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.CompositeCollection` / `public boolean retainAll(final Collection<?> coll)`


        <!-- 6841dd43-9f1d-11ea-841f-333445793454 <=< ACCEPT -->
        Retains all the elements in the specified collection in this composite collection,
        removing all others.
        <p>
        This implementation calls <code>retainAll()</code> on each collection.
        @param coll  the collection to remove
        @return true if the collection was modified
        @throws UnsupportedOperationException if retainAll is unsupported
        <!-- ACCEPT >=> 6841dd43-9f1d-11ea-841f-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.CompositeCollection` / `public void clear()`


        <!-- 6841dd44-9f1d-11ea-8420-333445793454 <=< ACCEPT -->
        Removes all of the elements from this collection .
        <p>
        This implementation calls <code>clear()</code> on each collection.
        @throws UnsupportedOperationException if clear is unsupported
        <!-- ACCEPT >=> 6841dd44-9f1d-11ea-8420-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.CompositeCollection` / `public void setMutator(final CollectionMutator<E> mutator)`


        <!-- 6841dd45-9f1d-11ea-8421-333445793454 <=< ACCEPT -->
        Specify a CollectionMutator strategy instance to handle changes.
        @param mutator  the mutator to use
        <!-- ACCEPT >=> 6841dd45-9f1d-11ea-8421-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.CompositeCollection` / `public void addComposited(final Collection<E> compositeCollection)`


        <!-- 6841dd46-9f1d-11ea-8422-333445793454 <=< ACCEPT -->
        Add these Collections to the list of collections in this composite
        @param compositeCollection  the Collection to be appended to the composite
        <!-- ACCEPT >=> 6841dd46-9f1d-11ea-8422-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.CompositeCollection` / `final Collection<E> compositeCollection2)`


        <!-- 6841dd47-9f1d-11ea-8423-333445793454 <=< ACCEPT -->
        Add these Collections to the list of collections in this composite
        @param compositeCollection1  the Collection to be appended to the composite
        @param compositeCollection2  the Collection to be appended to the composite
        <!-- ACCEPT >=> 6841dd47-9f1d-11ea-8423-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.CompositeCollection` / `public void addComposited(final Collection<E>... compositeCollections)`


        <!-- 6841dd48-9f1d-11ea-8424-333445793454 <=< ACCEPT -->
        Add these Collections to the list of collections in this composite
        @param compositeCollections  the Collections to be appended to the composite
        <!-- ACCEPT >=> 6841dd48-9f1d-11ea-8424-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.CompositeCollection` / `public void removeComposited(final Collection<E> coll)`


        <!-- 6841dd49-9f1d-11ea-8425-333445793454 <=< ACCEPT -->
        Removes a collection from the those being decorated in this composite.
        @param coll  collection to be removed
        <!-- ACCEPT >=> 6841dd49-9f1d-11ea-8425-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.CompositeCollection` / `public Collection<E> toCollection()`


        <!-- 6841dd4a-9f1d-11ea-8426-333445793454 <=< ACCEPT -->
        Returns a new collection containing all of the elements
        @return A new ArrayList containing all of the elements in this composite.
        The new collection is <i>not</i> backed by this composite.
        <!-- ACCEPT >=> 6841dd4a-9f1d-11ea-8426-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.CompositeCollection` / `public List<Collection<E>> getCollections()`


        <!-- 6841dd4b-9f1d-11ea-8427-333445793454 <=< ACCEPT -->
        Gets the collections being decorated.
        @return Unmodifiable list of all collections in this composite.
        <!-- ACCEPT >=> 6841dd4b-9f1d-11ea-8427-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.CompositeCollection` / `protected CollectionMutator<E> getMutator()`


        <!-- 6841dd4c-9f1d-11ea-8428-333445793454 <=< ACCEPT -->
        Get the collection mutator to be used for this CompositeCollection.
        @return CollectionMutator<E>
        <!-- ACCEPT >=> 6841dd4c-9f1d-11ea-8428-333445793454 -->



## Interface: `java.org.apache.commons.collections4.collection.CompositeCollection` / `public interface CollectionMutator<E> extends Serializable`


        <!-- 6841dd4d-9f1d-11ea-8429-333445793454 <=< ACCEPT -->
        Pluggable strategy to handle changes to the composite.
        @param <E> the element being held in the collection
        <!-- ACCEPT >=> 6841dd4d-9f1d-11ea-8429-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.CompositeCollection` / `boolean add(CompositeCollection<E> composite, List<Collection<E>> collections, E obj)`


        <!-- 6841dd4e-9f1d-11ea-842a-333445793454 <=< ACCEPT -->
        Called when an object is to be added to the composite.
        @param composite  the CompositeCollection being changed
        @param collections  all of the Collection instances in this CompositeCollection
        @param obj  the object being added
        @return true if the collection is changed
        @throws UnsupportedOperationException if add is unsupported
        @throws ClassCastException if the object cannot be added due to its type
        @throws NullPointerException if the object cannot be added because its null
        @throws IllegalArgumentException if the object cannot be added
        <!-- ACCEPT >=> 6841dd4e-9f1d-11ea-842a-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.CompositeCollection` / `Collection<? extends E> coll)`


        <!-- 6841dd4f-9f1d-11ea-842b-333445793454 <=< ACCEPT -->
        Called when a collection is to be added to the composite.
        @param composite  the CompositeCollection being changed
        @param collections  all of the Collection instances in this CompositeCollection
        @param coll  the collection being added
        @return true if the collection is changed
        @throws UnsupportedOperationException if add is unsupported
        @throws ClassCastException if the object cannot be added due to its type
        @throws NullPointerException if the object cannot be added because its null
        @throws IllegalArgumentException if the object cannot be added
        <!-- ACCEPT >=> 6841dd4f-9f1d-11ea-842b-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.CompositeCollection` / `Object obj)`


        <!-- 68420446-9f1d-11ea-842c-333445793454 <=< ACCEPT -->
        Called when an object is to be removed to the composite.
        @param composite  the CompositeCollection being changed
        @param collections  all of the Collection instances in this CompositeCollection
        @param obj  the object being removed
        @return true if the collection is changed
        @throws UnsupportedOperationException if removed is unsupported
        @throws ClassCastException if the object cannot be removed due to its type
        @throws NullPointerException if the object cannot be removed because its null
        @throws IllegalArgumentException if the object cannot be removed
        <!-- ACCEPT >=> 68420446-9f1d-11ea-842c-333445793454 -->



# File: `java.org.apache.commons.collections4.collection.IndexedCollection`

## Class: `java.org.apache.commons.collections4.collection.IndexedCollection` / `public class IndexedCollection<K, C> extends AbstractCollectionDecorator<C>`


        <!-- 68420447-9f1d-11ea-842d-333445793454 <=< ACCEPT -->
        An IndexedCollection is a Map-like view onto a Collection. It accepts a
        keyTransformer to define how the keys are converted from the values.
        <p>
        Modifications made to this decorator modify the index as well as the
        decorated {@link Collection}. However, modifications to the underlying
        {@link Collection} will not update the index and it will get out of sync.
        <p>
        If modification of the decorated {@link Collection} is unavoidable, then a
        call to {@link #reindex()} will update the index to the current contents of
        the {@link Collection}.
        @param <K> the type of object in the index.
        @param <C> the type of object in the collection.
        @since 4.0
        @version $Id$
        <!-- ACCEPT >=> 68420447-9f1d-11ea-842d-333445793454 -->



## Field: `java.org.apache.commons.collections4.collection.IndexedCollection` / `private static final long serialVersionUID`


        <!-- 68420448-9f1d-11ea-842e-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 68420448-9f1d-11ea-842e-333445793454 -->



## Field: `java.org.apache.commons.collections4.collection.IndexedCollection` / `private final Transformer<C, K> keyTransformer`


        <!-- 68420449-9f1d-11ea-842f-333445793454 <=< ACCEPT -->
        The {@link Transformer} for generating index keys.
        <!-- ACCEPT >=> 68420449-9f1d-11ea-842f-333445793454 -->



## Field: `java.org.apache.commons.collections4.collection.IndexedCollection` / `private final MultiMap<K, C> index`


        <!-- 6842044a-9f1d-11ea-8430-333445793454 <=< ACCEPT -->
        The map of indexes to collected objects.
        <!-- ACCEPT >=> 6842044a-9f1d-11ea-8430-333445793454 -->



## Field: `java.org.apache.commons.collections4.collection.IndexedCollection` / `private final boolean uniqueIndex`


        <!-- 6842044b-9f1d-11ea-8431-333445793454 <=< ACCEPT -->
        The uniqueness constraint for the index.
        <!-- ACCEPT >=> 6842044b-9f1d-11ea-8431-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.IndexedCollection` / `final Transformer<C, K> keyTransformer)`


        <!-- 6842044c-9f1d-11ea-8432-333445793454 <=< ACCEPT -->
        Create an {@link IndexedCollection} for a unique index.
        <p>
        If an element is added, which maps to an existing key, an {@link IllegalArgumentException}
        will be thrown.
        @param <K> the index object type.
        @param <C> the collection type.
        @param coll the decorated {@link Collection}.
        @param keyTransformer the {@link Transformer} for generating index keys.
        @return the created {@link IndexedCollection}.
        <!-- ACCEPT >=> 6842044c-9f1d-11ea-8432-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.IndexedCollection` / `final Transformer<C, K> keyTransformer)`


        <!-- 6842044d-9f1d-11ea-8433-333445793454 <=< ACCEPT -->
        Create an {@link IndexedCollection} for a non-unique index.
        @param <K> the index object type.
        @param <C> the collection type.
        @param coll the decorated {@link Collection}.
        @param keyTransformer the {@link Transformer} for generating index keys.
        @return the created {@link IndexedCollection}.
        <!-- ACCEPT >=> 6842044d-9f1d-11ea-8433-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.collection.IndexedCollection` / `final MultiMap<K, C> map, final boolean uniqueIndex)`


        <!-- 6842044e-9f1d-11ea-8434-333445793454 <=< ACCEPT -->
        Create a {@link IndexedCollection}.
        @param coll  decorated {@link Collection}
        @param keyTransformer  {@link Transformer} for generating index keys
        @param map  map to use as index
        @param uniqueIndex  if the index shall enforce uniqueness of index keys
        <!-- ACCEPT >=> 6842044e-9f1d-11ea-8434-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.IndexedCollection` / `public boolean add(final C object)`


        <!-- 6842044f-9f1d-11ea-8435-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        @throws IllegalArgumentException if the object maps to an existing key and the index
        enforces a uniqueness constraint
        <!-- ACCEPT >=> 6842044f-9f1d-11ea-8435-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.IndexedCollection` / `public boolean contains(final Object object)`


        <!-- 68420450-9f1d-11ea-8436-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <p>
        Note: uses the index for fast lookup
        <!-- ACCEPT >=> 68420450-9f1d-11ea-8436-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.IndexedCollection` / `public boolean containsAll(final Collection<?> coll)`


        <!-- 68420451-9f1d-11ea-8437-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <p>
        Note: uses the index for fast lookup
        <!-- ACCEPT >=> 68420451-9f1d-11ea-8437-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.IndexedCollection` / `public C get(final K key)`


        <!-- 68420452-9f1d-11ea-8438-333445793454 <=< ACCEPT -->
        Get the element associated with the given key.
        <p>
        In case of a non-unique index, this method will return the first
        value associated with the given key. To retrieve all elements associated
        with a key, use {@link #values(Object)}.
        @param key  key to look up
        @return element found
        @see #values(Object)
        <!-- ACCEPT >=> 68420452-9f1d-11ea-8438-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.IndexedCollection` / `public Collection<C> values(final K key)`


        <!-- 68420453-9f1d-11ea-8439-333445793454 <=< ACCEPT -->
        Get all elements associated with the given key.
        @param key  key to look up
        @return a collection of elements found, or null if {@code contains(key) == false}
        <!-- ACCEPT >=> 68420453-9f1d-11ea-8439-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.IndexedCollection` / `public void reindex()`


        <!-- 68420454-9f1d-11ea-843a-333445793454 <=< ACCEPT -->
        Clears the index and re-indexes the entire decorated {@link Collection}.
        <!-- ACCEPT >=> 68420454-9f1d-11ea-843a-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.IndexedCollection` / `private void addToIndex(final C object)`


        <!-- 68420455-9f1d-11ea-843b-333445793454 <=< ACCEPT -->
        Provides checking for adding the index.
        @param object the object to index
        @throws IllegalArgumentException if the object maps to an existing key and the index
        enforces a uniqueness constraint
        <!-- ACCEPT >=> 68420455-9f1d-11ea-843b-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.IndexedCollection` / `private void removeFromIndex(final C object)`


        <!-- 68420456-9f1d-11ea-843c-333445793454 <=< ACCEPT -->
        Removes an object from the index.
        @param object the object to remove
        <!-- ACCEPT >=> 68420456-9f1d-11ea-843c-333445793454 -->



# File: `java.org.apache.commons.collections4.collection.PredicatedCollection`

## Class: `java.org.apache.commons.collections4.collection.PredicatedCollection` / `public class PredicatedCollection<E> extends AbstractCollectionDecorator<E>`


        <!-- 68420457-9f1d-11ea-843d-333445793454 <=< ACCEPT -->
        Decorates another {@link Collection} to validate that additions
        match a specified predicate.
        <p>
        This collection exists to provide validation for the decorated collection.
        It is normally created to decorate an empty collection.
        If an object cannot be added to the collection, an IllegalArgumentException is thrown.
        <p>
        One usage would be to ensure that no null entries are added to the collection:
        <pre>
        Collection coll = PredicatedCollection.predicatedCollection(new ArrayList(), NotNullPredicate.INSTANCE);
        </pre>
        <p>
        This class is Serializable from Commons Collections 3.1.
        @param <E> the type of the elements in the collection
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 68420457-9f1d-11ea-843d-333445793454 -->



## Field: `java.org.apache.commons.collections4.collection.PredicatedCollection` / `private static final long serialVersionUID`


        <!-- 68420458-9f1d-11ea-843e-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 68420458-9f1d-11ea-843e-333445793454 -->



## Field: `java.org.apache.commons.collections4.collection.PredicatedCollection` / `protected final Predicate<? super E> predicate`


        <!-- 68420459-9f1d-11ea-843f-333445793454 <=< ACCEPT -->
        The predicate to use
        <!-- ACCEPT >=> 68420459-9f1d-11ea-843f-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.PredicatedCollection` / `public static <E> Builder<E> builder(final Predicate<? super E> predicate)`


        <!-- 68422b4b-9f1d-11ea-8440-333445793454 <=< ACCEPT -->
        Returns a Builder with the given predicate.
        @param <E>  the element type
        @param predicate  the predicate to use
        @return a new Builder for predicated collections
        @since 4.1
        <!-- ACCEPT >=> 68422b4b-9f1d-11ea-8440-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.PredicatedCollection` / `public static <E> Builder<E> notNullBuilder()`


        <!-- 68422b4c-9f1d-11ea-8441-333445793454 <=< ACCEPT -->
        Returns a Builder with a NotNullPredicate.
        @param <E>  the element type
        @return a new Builder for predicated collections that ignores null values.
        @since 4.1
        <!-- ACCEPT >=> 68422b4c-9f1d-11ea-8441-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.PredicatedCollection` / `final Predicate<? super T> predicate)`


        <!-- 68422b4d-9f1d-11ea-8442-333445793454 <=< ACCEPT -->
        Factory method to create a predicated (validating) collection.
        <p>
        If there are any elements already in the collection being decorated, they
        are validated.
        @param <T> the type of the elements in the collection
        @param coll  the collection to decorate, must not be null
        @param predicate  the predicate to use for validation, must not be null
        @return a new predicated collection
        @throws NullPointerException if collection or predicate is null
        @throws IllegalArgumentException if the collection contains invalid elements
        @since 4.0
        <!-- ACCEPT >=> 68422b4d-9f1d-11ea-8442-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.collection.PredicatedCollection` / `protected PredicatedCollection(final Collection<E> coll, final Predicate<? super E> predicate)`


        <!-- 68422b4e-9f1d-11ea-8443-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        <p>
        If there are any elements already in the collection being decorated, they
        are validated.
        @param coll  the collection to decorate, must not be null
        @param predicate  the predicate to use for validation, must not be null
        @throws NullPointerException if collection or predicate is null
        @throws IllegalArgumentException if the collection contains invalid elements
        <!-- ACCEPT >=> 68422b4e-9f1d-11ea-8443-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.PredicatedCollection` / `protected void validate(final E object)`


        <!-- 68422b4f-9f1d-11ea-8444-333445793454 <=< ACCEPT -->
        Validates the object being added to ensure it matches the predicate.
        <p>
        The predicate itself should not throw an exception, but return false to
        indicate that the object cannot be added.
        @param object  the object being added
        @throws IllegalArgumentException if the add is invalid
        <!-- ACCEPT >=> 68422b4f-9f1d-11ea-8444-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.PredicatedCollection` / `public boolean add(final E object)`


        <!-- 68422b50-9f1d-11ea-8445-333445793454 <=< ACCEPT -->
        Override to validate the object being added to ensure it matches
        the predicate.
        @param object  the object being added
        @return the result of adding to the underlying collection
        @throws IllegalArgumentException if the add is invalid
        <!-- ACCEPT >=> 68422b50-9f1d-11ea-8445-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.PredicatedCollection` / `public boolean addAll(final Collection<? extends E> coll)`


        <!-- 68422b51-9f1d-11ea-8446-333445793454 <=< ACCEPT -->
        Override to validate the objects being added to ensure they match
        the predicate. If any one fails, no update is made to the underlying
        collection.
        @param coll  the collection being added
        @return the result of adding to the underlying collection
        @throws IllegalArgumentException if the add is invalid
        <!-- ACCEPT >=> 68422b51-9f1d-11ea-8446-333445793454 -->



## Class: `java.org.apache.commons.collections4.collection.PredicatedCollection` / `public static class Builder<E>`


        <!-- 68422b52-9f1d-11ea-8447-333445793454 <=< ACCEPT -->
        Builder for creating predicated collections.
        <p>
        Create a Builder with a predicate to validate elements against, then add any elements
        to the builder. Elements that fail the predicate will be added to a rejected list.
        Finally create or decorate a collection using the createPredicated[List,Set,Bag,Queue] methods.
        <p>
        An example:
        <pre>
        Predicate&lt;String&gt; predicate = NotNullPredicate.notNullPredicate();
        PredicatedCollectionBuilder&lt;String&gt; builder = PredicatedCollection.builder(predicate);
        builder.add("item1");
        builder.add(null);
        builder.add("item2");
        List&lt;String&gt; predicatedList = builder.createPredicatedList();
        </pre>
        <p>
        At the end of the code fragment above predicatedList is protected by the predicate supplied
        to the builder and it contains item1 and item2.
        <p>
        More elements can be added to the builder once a predicated collection has been created,
        but these elements will not be reflected in already created collections.
        @param <E>  the element type
        @since 4.1
        <!-- ACCEPT >=> 68422b52-9f1d-11ea-8447-333445793454 -->



## Field: `java.org.apache.commons.collections4.collection.PredicatedCollection` / `private final Predicate<? super E> predicate`


        <!-- 68422b53-9f1d-11ea-8448-333445793454 <=< ACCEPT -->
        The predicate to use.
        <!-- ACCEPT >=> 68422b53-9f1d-11ea-8448-333445793454 -->



## Field: `java.org.apache.commons.collections4.collection.PredicatedCollection` / `private final List<E> accepted`


        <!-- 68422b54-9f1d-11ea-8449-333445793454 <=< ACCEPT -->
        The buffer containing valid elements.
        <!-- ACCEPT >=> 68422b54-9f1d-11ea-8449-333445793454 -->



## Field: `java.org.apache.commons.collections4.collection.PredicatedCollection` / `private final List<E> rejected`


        <!-- 68422b55-9f1d-11ea-844a-333445793454 <=< ACCEPT -->
        The buffer containing rejected elements.
        <!-- ACCEPT >=> 68422b55-9f1d-11ea-844a-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.collection.PredicatedCollection` / `public Builder(final Predicate<? super E> predicate)`


        <!-- 68422b56-9f1d-11ea-844b-333445793454 <=< ACCEPT -->
        Constructs a PredicatedCollectionBuilder with the specified Predicate.
        @param predicate  the predicate to use
        @throws NullPointerException if predicate is null
        <!-- ACCEPT >=> 68422b56-9f1d-11ea-844b-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.PredicatedCollection` / `public Builder<E> add(final E item)`


        <!-- 68422b57-9f1d-11ea-844c-333445793454 <=< ACCEPT -->
        Adds the item to the builder.
        <p>
        If the predicate is true, it is added to the list of accepted elements,
        otherwise it is added to the rejected list.
        @param item  the element to add
        @return the PredicatedCollectionBuilder.
        <!-- ACCEPT >=> 68422b57-9f1d-11ea-844c-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.PredicatedCollection` / `public Builder<E> addAll(final Collection<? extends E> items)`


        <!-- 68422b58-9f1d-11ea-844d-333445793454 <=< ACCEPT -->
        Adds all elements from the given collection to the builder.
        <p>
        All elements for which the predicate evaluates to true will be added to the
        list of accepted elements, otherwise they are added to the rejected list.
        @param items  the elements to add to the builder
        @return the PredicatedCollectionBuilder.
        <!-- ACCEPT >=> 68422b58-9f1d-11ea-844d-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.PredicatedCollection` / `public List<E> createPredicatedList()`


        <!-- 68425263-9f1d-11ea-844e-333445793454 <=< ACCEPT -->
        Create a new predicated list filled with the accepted elements.
        <p>
        The builder is not modified by this method, so it is possible to create more collections
        or add more elements afterwards. Further changes will not propagate to the returned list.
        @return a new predicated list.
        <!-- ACCEPT >=> 68425263-9f1d-11ea-844e-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.PredicatedCollection` / `public List<E> createPredicatedList(final List<E> list)`


        <!-- 68425264-9f1d-11ea-844f-333445793454 <=< ACCEPT -->
        Decorates the given list with validating behavior using the predicate. All accepted elements
        are appended to the list. If the list already contains elements, they are validated.
        <p>
        The builder is not modified by this method, so it is possible to create more collections
        or add more elements afterwards. Further changes will not propagate to the returned list.
        @param list  the List to decorate, must not be null
        @return the decorated list.
        @throws NullPointerException if list is null
        @throws IllegalArgumentException if list contains invalid elements
        <!-- ACCEPT >=> 68425264-9f1d-11ea-844f-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.PredicatedCollection` / `public Set<E> createPredicatedSet()`


        <!-- 68425265-9f1d-11ea-8450-333445793454 <=< ACCEPT -->
        Create a new predicated set filled with the accepted elements.
        <p>
        The builder is not modified by this method, so it is possible to create more collections
        or add more elements afterwards. Further changes will not propagate to the returned set.
        @return a new predicated set.
        <!-- ACCEPT >=> 68425265-9f1d-11ea-8450-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.PredicatedCollection` / `public Set<E> createPredicatedSet(final Set<E> set)`


        <!-- 68425266-9f1d-11ea-8451-333445793454 <=< ACCEPT -->
        Decorates the given list with validating behavior using the predicate. All accepted elements
        are appended to the set. If the set already contains elements, they are validated.
        <p>
        The builder is not modified by this method, so it is possible to create more collections
        or add more elements afterwards. Further changes will not propagate to the returned set.
        @param set  the set to decorate, must not be null
        @return the decorated set.
        @throws NullPointerException if set is null
        @throws IllegalArgumentException if set contains invalid elements
        <!-- ACCEPT >=> 68425266-9f1d-11ea-8451-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.PredicatedCollection` / `public MultiSet<E> createPredicatedMultiSet()`


        <!-- 68425267-9f1d-11ea-8452-333445793454 <=< ACCEPT -->
        Create a new predicated multiset filled with the accepted elements.
        <p>
        The builder is not modified by this method, so it is possible to create more collections
        or add more elements afterwards. Further changes will not propagate to the returned multiset.
        @return a new predicated multiset.
        <!-- ACCEPT >=> 68425267-9f1d-11ea-8452-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.PredicatedCollection` / `public MultiSet<E> createPredicatedMultiSet(final MultiSet<E> multiset)`


        <!-- 68425268-9f1d-11ea-8453-333445793454 <=< ACCEPT -->
        Decorates the given multiset with validating behavior using the predicate. All accepted elements
        are appended to the multiset. If the multiset already contains elements, they are validated.
        <p>
        The builder is not modified by this method, so it is possible to create more collections
        or add more elements afterwards. Further changes will not propagate to the returned multiset.
        @param multiset  the multiset to decorate, must not be null
        @return the decorated multiset.
        @throws NullPointerException if multiset is null
        @throws IllegalArgumentException if multiset contains invalid elements
        <!-- ACCEPT >=> 68425268-9f1d-11ea-8453-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.PredicatedCollection` / `public Bag<E> createPredicatedBag()`


        <!-- 68425269-9f1d-11ea-8454-333445793454 <=< ACCEPT -->
        Create a new predicated bag filled with the accepted elements.
        <p>
        The builder is not modified by this method, so it is possible to create more collections
        or add more elements afterwards. Further changes will not propagate to the returned bag.
        @return a new predicated bag.
        <!-- ACCEPT >=> 68425269-9f1d-11ea-8454-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.PredicatedCollection` / `public Bag<E> createPredicatedBag(final Bag<E> bag)`


        <!-- 6842526a-9f1d-11ea-8455-333445793454 <=< ACCEPT -->
        Decorates the given bag with validating behavior using the predicate. All accepted elements
        are appended to the bag. If the bag already contains elements, they are validated.
        <p>
        The builder is not modified by this method, so it is possible to create more collections
        or add more elements afterwards. Further changes will not propagate to the returned bag.
        @param bag  the bag to decorate, must not be null
        @return the decorated bag.
        @throws NullPointerException if bag is null
        @throws IllegalArgumentException if bag contains invalid elements
        <!-- ACCEPT >=> 6842526a-9f1d-11ea-8455-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.PredicatedCollection` / `public Queue<E> createPredicatedQueue()`


        <!-- 6842526b-9f1d-11ea-8456-333445793454 <=< ACCEPT -->
        Create a new predicated queue filled with the accepted elements.
        <p>
        The builder is not modified by this method, so it is possible to create more collections
        or add more elements afterwards. Further changes will not propagate to the returned queue.
        @return a new predicated queue.
        <!-- ACCEPT >=> 6842526b-9f1d-11ea-8456-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.PredicatedCollection` / `public Queue<E> createPredicatedQueue(final Queue<E> queue)`


        <!-- 6842526c-9f1d-11ea-8457-333445793454 <=< ACCEPT -->
        Decorates the given queue with validating behavior using the predicate. All accepted elements
        are appended to the queue. If the queue already contains elements, they are validated.
        <p>
        The builder is not modified by this method, so it is possible to create more collections
        or add more elements afterwards. Further changes will not propagate to the returned queue.
        @param queue  the queue to decorate, must not be null
        @return the decorated queue.
        @throws NullPointerException if queue is null
        @throws IllegalArgumentException if queue contains invalid elements
        <!-- ACCEPT >=> 6842526c-9f1d-11ea-8457-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.PredicatedCollection` / `public Collection<E> rejectedElements()`


        <!-- 6842526d-9f1d-11ea-8458-333445793454 <=< ACCEPT -->
        Returns an unmodifiable collection containing all rejected elements.
        @return an unmodifiable collection
        <!-- ACCEPT >=> 6842526d-9f1d-11ea-8458-333445793454 -->



# File: `java.org.apache.commons.collections4.collection.SynchronizedCollection`

## Class: `java.org.apache.commons.collections4.collection.SynchronizedCollection` / `public class SynchronizedCollection<E> implements Collection<E>, Serializable`


        <!-- 6842526e-9f1d-11ea-8459-333445793454 <=< ACCEPT -->
        Decorates another {@link Collection} to synchronize its behaviour
        for a multi-threaded environment.
        <p>
        Iterators must be manually synchronized:
        <pre>
        synchronized (coll) {
        Iterator it = coll.iterator();
        // do stuff with iterator
        }
        </pre>
        <p>
        This class is Serializable from Commons Collections 3.1.
        @param <E> the type of the elements in the collection
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 6842526e-9f1d-11ea-8459-333445793454 -->



## Field: `java.org.apache.commons.collections4.collection.SynchronizedCollection` / `private static final long serialVersionUID`


        <!-- 68427972-9f1d-11ea-845a-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 68427972-9f1d-11ea-845a-333445793454 -->



## Field: `java.org.apache.commons.collections4.collection.SynchronizedCollection` / `private final Collection<E> collection`


        <!-- 68427973-9f1d-11ea-845b-333445793454 <=< ACCEPT -->
        The collection to decorate
        <!-- ACCEPT >=> 68427973-9f1d-11ea-845b-333445793454 -->



## Field: `java.org.apache.commons.collections4.collection.SynchronizedCollection` / `protected final Object lock`


        <!-- 68427974-9f1d-11ea-845c-333445793454 <=< ACCEPT -->
        The object to lock on, needed for List/SortedSet views
        <!-- ACCEPT >=> 68427974-9f1d-11ea-845c-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.SynchronizedCollection` / `public static <T> SynchronizedCollection<T> synchronizedCollection(final Collection<T> coll)`


        <!-- 68427975-9f1d-11ea-845d-333445793454 <=< ACCEPT -->
        Factory method to create a synchronized collection.
        @param <T> the type of the elements in the collection
        @param coll  the collection to decorate, must not be null
        @return a new synchronized collection
        @throws NullPointerException if collection is null
        @since 4.0
        <!-- ACCEPT >=> 68427975-9f1d-11ea-845d-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.collection.SynchronizedCollection` / `protected SynchronizedCollection(final Collection<E> collection)`


        <!-- 68427976-9f1d-11ea-845e-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param collection  the collection to decorate, must not be null
        @throws NullPointerException if the collection is null
        <!-- ACCEPT >=> 68427976-9f1d-11ea-845e-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.collection.SynchronizedCollection` / `protected SynchronizedCollection(final Collection<E> collection, final Object lock)`


        <!-- 68427977-9f1d-11ea-845f-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param collection  the collection to decorate, must not be null
        @param lock  the lock object to use, must not be null
        @throws NullPointerException if the collection or lock is null
        <!-- ACCEPT >=> 68427977-9f1d-11ea-845f-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.SynchronizedCollection` / `protected Collection<E> decorated()`


        <!-- 68427978-9f1d-11ea-8460-333445793454 <=< ACCEPT -->
        Gets the collection being decorated.
        @return the decorated collection
        <!-- ACCEPT >=> 68427978-9f1d-11ea-8460-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.SynchronizedCollection` / `public Iterator<E> iterator()`


        <!-- 68427979-9f1d-11ea-8461-333445793454 <=< ACCEPT -->
        Iterators must be manually synchronized.
        <pre>
        synchronized (coll) {
        Iterator it = coll.iterator();
        // do stuff with iterator
        }
        </pre>
        @return an iterator that must be manually synchronized on the collection
        <!-- ACCEPT >=> 68427979-9f1d-11ea-8461-333445793454 -->



# File: `java.org.apache.commons.collections4.collection.TransformedCollection`

## Class: `java.org.apache.commons.collections4.collection.TransformedCollection` / `public class TransformedCollection<E> extends AbstractCollectionDecorator<E>`


        <!-- 6842797a-9f1d-11ea-8462-333445793454 <=< ACCEPT -->
        Decorates another {@link Collection} to transform objects that are added.
        <p>
        The add methods are affected by this class.
        Thus objects must be removed or searched for using their transformed form.
        For example, if the transformation converts Strings to Integers, you must
        use the Integer form to remove objects.
        <p>
        This class is Serializable from Commons Collections 3.1.
        @param <E> the type of the elements in the collection
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 6842797a-9f1d-11ea-8462-333445793454 -->



## Field: `java.org.apache.commons.collections4.collection.TransformedCollection` / `private static final long serialVersionUID`


        <!-- 6842797b-9f1d-11ea-8463-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 6842797b-9f1d-11ea-8463-333445793454 -->



## Field: `java.org.apache.commons.collections4.collection.TransformedCollection` / `protected final Transformer<? super E, ? extends E> transformer`


        <!-- 6842797c-9f1d-11ea-8464-333445793454 <=< ACCEPT -->
        The transformer to use
        <!-- ACCEPT >=> 6842797c-9f1d-11ea-8464-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.TransformedCollection` / `final Transformer<? super E, ? extends E> transformer)`


        <!-- 6842797d-9f1d-11ea-8465-333445793454 <=< ACCEPT -->
        Factory method to create a transforming collection.
        <p>
        If there are any elements already in the collection being decorated, they
        are NOT transformed.
        Contrast this with {@link #transformedCollection(Collection, Transformer)}.
        @param <E> the type of the elements in the collection
        @param coll  the collection to decorate, must not be null
        @param transformer  the transformer to use for conversion, must not be null
        @return a new transformed collection
        @throws NullPointerException if collection or transformer is null
        @since 4.0
        <!-- ACCEPT >=> 6842797d-9f1d-11ea-8465-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.TransformedCollection` / `final Transformer<? super E, ? extends E> transformer)`


        <!-- 6842797e-9f1d-11ea-8466-333445793454 <=< ACCEPT -->
        Factory method to create a transforming collection that will transform
        existing contents of the specified collection.
        <p>
        If there are any elements already in the collection being decorated, they
        will be transformed by this method.
        Contrast this with {@link #transformingCollection(Collection, Transformer)}.
        @param <E> the type of the elements in the collection
        @param collection  the collection to decorate, must not be null
        @param transformer  the transformer to use for conversion, must not be null
        @return a new transformed Collection
        @throws NullPointerException if collection or transformer is null
        @since 4.0
        <!-- ACCEPT >=> 6842797e-9f1d-11ea-8466-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.collection.TransformedCollection` / `protected TransformedCollection(final Collection<E> coll, final Transformer<? super E, ? extends E> transformer)`


        <!-- 6842797f-9f1d-11ea-8467-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        <p>
        If there are any elements already in the collection being decorated, they
        are NOT transformed.
        @param coll  the collection to decorate, must not be null
        @param transformer  the transformer to use for conversion, must not be null
        @throws NullPointerException if collection or transformer is null
        <!-- ACCEPT >=> 6842797f-9f1d-11ea-8467-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.TransformedCollection` / `protected E transform(final E object)`


        <!-- 68427980-9f1d-11ea-8468-333445793454 <=< ACCEPT -->
        Transforms an object.
        <p>
        The transformer itself may throw an exception if necessary.
        @param object  the object to transform
        @return a transformed object
        <!-- ACCEPT >=> 68427980-9f1d-11ea-8468-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.TransformedCollection` / `protected Collection<E> transform(final Collection<? extends E> coll)`


        <!-- 68427981-9f1d-11ea-8469-333445793454 <=< ACCEPT -->
        Transforms a collection.
        <p>
        The transformer itself may throw an exception if necessary.
        @param coll  the collection to transform
        @return a transformed object
        <!-- ACCEPT >=> 68427981-9f1d-11ea-8469-333445793454 -->



# File: `java.org.apache.commons.collections4.collection.UnmodifiableBoundedCollection`

## Class: `java.org.apache.commons.collections4.collection.UnmodifiableBoundedCollection` / `implements BoundedCollection<E>, Unmodifiable`


        <!-- 6842a076-9f1d-11ea-846a-333445793454 <=< ACCEPT -->
        {@link UnmodifiableBoundedCollection} decorates another
        {@link BoundedCollection} to ensure it can't be altered.
        <p>
        If a BoundedCollection is first wrapped in some other collection decorator,
        such as synchronized or predicated, the BoundedCollection methods are no
        longer accessible.
        The factory on this class will attempt to retrieve the bounded nature by
        examining the package scope variables.
        <p>
        This class is Serializable from Commons Collections 3.1.
        <p>
        Attempts to modify it will result in an UnsupportedOperationException.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 6842a076-9f1d-11ea-846a-333445793454 -->



## Field: `java.org.apache.commons.collections4.collection.UnmodifiableBoundedCollection` / `private static final long serialVersionUID`


        <!-- 6842a077-9f1d-11ea-846b-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 6842a077-9f1d-11ea-846b-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.UnmodifiableBoundedCollection` / `public static <E> BoundedCollection<E> unmodifiableBoundedCollection(final BoundedCollection<? extends E> coll)`


        <!-- 6842a078-9f1d-11ea-846c-333445793454 <=< ACCEPT -->
        Factory method to create an unmodifiable bounded collection.
        @param <E> the type of the elements in the collection
        @param coll  the <code>BoundedCollection</code> to decorate, must not be null
        @return a new unmodifiable bounded collection
        @throws NullPointerException if {@code coll} is {@code null}
        @since 4.0
        <!-- ACCEPT >=> 6842a078-9f1d-11ea-846c-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.UnmodifiableBoundedCollection` / `public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll)`


        <!-- 6842a079-9f1d-11ea-846d-333445793454 <=< ACCEPT -->
        Factory method to create an unmodifiable bounded collection.
        <p>
        This method is capable of drilling down through up to 1000 other decorators
        to find a suitable BoundedCollection.
        @param <E> the type of the elements in the collection
        @param coll  the <code>BoundedCollection</code> to decorate, must not be null
        @return a new unmodifiable bounded collection
        @throws NullPointerException if coll is null
        @throws IllegalArgumentException if coll is not a {@code BoundedCollection}
        @since 4.0
        <!-- ACCEPT >=> 6842a079-9f1d-11ea-846d-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.collection.UnmodifiableBoundedCollection` / `private UnmodifiableBoundedCollection(final BoundedCollection<? extends E> coll)`


        <!-- 6842a07a-9f1d-11ea-846e-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param coll  the collection to decorate, must not be null
        @throws NullPointerException if coll is null
        <!-- ACCEPT >=> 6842a07a-9f1d-11ea-846e-333445793454 -->



# File: `java.org.apache.commons.collections4.collection.UnmodifiableCollection`

## Class: `java.org.apache.commons.collections4.collection.UnmodifiableCollection` / `implements Unmodifiable`


        <!-- 6842a07b-9f1d-11ea-846f-333445793454 <=< ACCEPT -->
        Decorates another {@link Collection} to ensure it can't be altered.
        <p>
        This class is Serializable from Commons Collections 3.1.
        <p>
        Attempts to modify it will result in an UnsupportedOperationException.
        @param <E> the type of the elements in the collection
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 6842a07b-9f1d-11ea-846f-333445793454 -->



## Field: `java.org.apache.commons.collections4.collection.UnmodifiableCollection` / `private static final long serialVersionUID`


        <!-- 6842a07c-9f1d-11ea-8470-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 6842a07c-9f1d-11ea-8470-333445793454 -->



## Method: `java.org.apache.commons.collections4.collection.UnmodifiableCollection` / `public static <T> Collection<T> unmodifiableCollection(final Collection<? extends T> coll)`


        <!-- 6842a07d-9f1d-11ea-8471-333445793454 <=< ACCEPT -->
        Factory method to create an unmodifiable collection.
        <p>
        If the collection passed in is already unmodifiable, it is returned.
        @param <T> the type of the elements in the collection
        @param coll  the collection to decorate, must not be null
        @return an unmodifiable collection
        @throws NullPointerException if collection is null
        @since 4.0
        <!-- ACCEPT >=> 6842a07d-9f1d-11ea-8471-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.collection.UnmodifiableCollection` / `private UnmodifiableCollection(final Collection<? extends E> coll)`


        <!-- 6842a07e-9f1d-11ea-8472-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param coll  the collection to decorate, must not be null
        @throws NullPointerException if collection is null
        <!-- ACCEPT >=> 6842a07e-9f1d-11ea-8472-333445793454 -->



# File: `java.org.apache.commons.collections4.collection.package-info`

## Package: `java.org.apache.commons.collections4.collection.package-info` / `package org.apache.commons.collections4.collection`


        <!-- 6842a07f-9f1d-11ea-8473-333445793454 <=< ACCEPT -->
        This package contains implementations of the
        {@link java.util.Collection Collection} interface.
        <p>
        The following implementations are provided in the package:
        <ul>
        <li>CompositeCollection - a collection that combines multiple collections into one
        </ul>
        The following decorators are provided in the package:
        <ul>
        <li>Synchronized - synchronizes method access for multi-threaded environments
        <li>Unmodifiable - ensures the collection cannot be altered
        <li>Predicated - ensures that only elements that are valid according to a predicate can be added
        <li>Transformed - transforms elements as they are added
        <li>Indexed - provides a map-like view onto another collection
        </ul>
        @version $Id$
        <!-- ACCEPT >=> 6842a07f-9f1d-11ea-8473-333445793454 -->



# File: `java.org.apache.commons.collections4.comparators.BooleanComparator`

## Class: `java.org.apache.commons.collections4.comparators.BooleanComparator` / `public final class BooleanComparator implements Comparator<Boolean>, Serializable`


        <!-- 6842a080-9f1d-11ea-8474-333445793454 <=< ACCEPT -->
        A {@link Comparator} for {@link Boolean} objects that can sort either
        true or false first.
        <p>
        @see #getTrueFirstComparator()
        @see #getFalseFirstComparator()
        @see #booleanComparator(boolean)
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 6842a080-9f1d-11ea-8474-333445793454 -->



## Field: `java.org.apache.commons.collections4.comparators.BooleanComparator` / `private static final long serialVersionUID`


        <!-- 6842a081-9f1d-11ea-8475-333445793454 <=< ACCEPT -->
        Serialization version.
        <!-- ACCEPT >=> 6842a081-9f1d-11ea-8475-333445793454 -->



## Field: `java.org.apache.commons.collections4.comparators.BooleanComparator` / `private static final BooleanComparator TRUE_FIRST`


        <!-- 6842a082-9f1d-11ea-8476-333445793454 <=< ACCEPT -->
        Constant "true first" reference.
        <!-- ACCEPT >=> 6842a082-9f1d-11ea-8476-333445793454 -->



## Field: `java.org.apache.commons.collections4.comparators.BooleanComparator` / `private static final BooleanComparator FALSE_FIRST`


        <!-- 6842a083-9f1d-11ea-8477-333445793454 <=< ACCEPT -->
        Constant "false first" reference.
        <!-- ACCEPT >=> 6842a083-9f1d-11ea-8477-333445793454 -->



## Field: `java.org.apache.commons.collections4.comparators.BooleanComparator` / `private boolean trueFirst`


        <!-- 6842a084-9f1d-11ea-8478-333445793454 <=< ACCEPT -->
        <code>true</code> iff <code>true</code> values sort before <code>false</code> values.
        <!-- ACCEPT >=> 6842a084-9f1d-11ea-8478-333445793454 -->



## Method: `java.org.apache.commons.collections4.comparators.BooleanComparator` / `public static BooleanComparator getTrueFirstComparator()`


        <!-- 6842a085-9f1d-11ea-8479-333445793454 <=< ACCEPT -->
        Returns a BooleanComparator instance that sorts
        <code>true</code> values before <code>false</code> values.
        <p />
        Clients are encouraged to use the value returned from
        this method instead of constructing a new instance
        to reduce allocation and garbage collection overhead when
        multiple BooleanComparators may be used in the same
        virtual machine.
        @return the true first singleton BooleanComparator
        <!-- ACCEPT >=> 6842a085-9f1d-11ea-8479-333445793454 -->



## Method: `java.org.apache.commons.collections4.comparators.BooleanComparator` / `public static BooleanComparator getFalseFirstComparator()`


        <!-- 6842a086-9f1d-11ea-847a-333445793454 <=< ACCEPT -->
        Returns a BooleanComparator instance that sorts
        <code>false</code> values before <code>true</code> values.
        <p />
        Clients are encouraged to use the value returned from
        this method instead of constructing a new instance
        to reduce allocation and garbage collection overhead when
        multiple BooleanComparators may be used in the same
        virtual machine.
        @return the false first singleton BooleanComparator
        <!-- ACCEPT >=> 6842a086-9f1d-11ea-847a-333445793454 -->



## Method: `java.org.apache.commons.collections4.comparators.BooleanComparator` / `public static BooleanComparator booleanComparator(final boolean trueFirst)`


        <!-- 6842c781-9f1d-11ea-847b-333445793454 <=< ACCEPT -->
        Returns a BooleanComparator instance that sorts
        <code><i>trueFirst</i></code> values before
        <code>&#x21;<i>trueFirst</i></code> values.
        <p />
        Clients are encouraged to use the value returned from
        this method instead of constructing a new instance
        to reduce allocation and garbage collection overhead when
        multiple BooleanComparators may be used in the same
        virtual machine.
        @param trueFirst when <code>true</code>, sort
        <code>true</code> <code>Boolean</code>s before <code>false</code>
        @return a singleton BooleanComparator instance
        @since 4.0
        <!-- ACCEPT >=> 6842c781-9f1d-11ea-847b-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.comparators.BooleanComparator` / `public BooleanComparator()`


        <!-- 6842c782-9f1d-11ea-847c-333445793454 <=< ACCEPT -->
        Creates a <code>BooleanComparator</code> that sorts
        <code>false</code> values before <code>true</code> values.
        <p>
        Equivalent to {@link #BooleanComparator(boolean) BooleanComparator(false)}.
        <p>
        Please use the static factory instead whenever possible.
        <!-- ACCEPT >=> 6842c782-9f1d-11ea-847c-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.comparators.BooleanComparator` / `public BooleanComparator(final boolean trueFirst)`


        <!-- 6842c783-9f1d-11ea-847d-333445793454 <=< ACCEPT -->
        Creates a <code>BooleanComparator</code> that sorts
        <code><i>trueFirst</i></code> values before
        <code>&#x21;<i>trueFirst</i></code> values.
        <p>
        Please use the static factories instead whenever possible.
        @param trueFirst when <code>true</code>, sort
        <code>true</code> boolean values before <code>false</code>
        <!-- ACCEPT >=> 6842c783-9f1d-11ea-847d-333445793454 -->



## Method: `java.org.apache.commons.collections4.comparators.BooleanComparator` / `public int compare(final Boolean b1, final Boolean b2)`


        <!-- 6842c784-9f1d-11ea-847e-333445793454 <=< ACCEPT -->
        Compares two non-<code>null</code> <code>Boolean</code> objects
        according to the value of {@link #sortsTrueFirst()}.
        @param b1  the first boolean to compare
        @param b2  the second boolean to compare
        @return negative if obj1 is less, positive if greater, zero if equal
        @throws NullPointerException when either argument <code>null</code>
        <!-- ACCEPT >=> 6842c784-9f1d-11ea-847e-333445793454 -->



## Method: `java.org.apache.commons.collections4.comparators.BooleanComparator` / `public int hashCode()`


        <!-- 6842c785-9f1d-11ea-847f-333445793454 <=< ACCEPT -->
        Implement a hash code for this comparator that is consistent with
        {@link #equals(Object) equals}.
        @return a hash code for this comparator.
        <!-- ACCEPT >=> 6842c785-9f1d-11ea-847f-333445793454 -->



## Method: `java.org.apache.commons.collections4.comparators.BooleanComparator` / `public boolean equals(final Object object)`


        <!-- 6842c786-9f1d-11ea-8480-333445793454 <=< ACCEPT -->
        Returns <code>true</code> iff <i>that</i> Object is
        is a {@link Comparator} whose ordering is known to be
        equivalent to mine.
        <p>
        This implementation returns <code>true</code>
        iff <code><i>that</i></code> is a {@link BooleanComparator}
        whose value of {@link #sortsTrueFirst()} is equal to mine.
        @param object  the object to compare to
        @return true if equal
        <!-- ACCEPT >=> 6842c786-9f1d-11ea-8480-333445793454 -->



## Method: `java.org.apache.commons.collections4.comparators.BooleanComparator` / `public boolean sortsTrueFirst()`


        <!-- 6842c787-9f1d-11ea-8481-333445793454 <=< ACCEPT -->
        Returns <code>true</code> iff
        I sort <code>true</code> values before
        <code>false</code> values.  In other words,
        returns <code>true</code> iff
        {@link #compare(Boolean,Boolean) compare(Boolean.FALSE,Boolean.TRUE)}
        returns a positive value.
        @return the trueFirst flag
        <!-- ACCEPT >=> 6842c787-9f1d-11ea-8481-333445793454 -->



# File: `java.org.apache.commons.collections4.comparators.ComparableComparator`

## Class: `java.org.apache.commons.collections4.comparators.ComparableComparator` / `public class ComparableComparator<E extends Comparable<? super E>> implements Comparator<E>, Serializable`


        <!-- 6842c788-9f1d-11ea-8482-333445793454 <=< ACCEPT -->
        A {@link Comparator Comparator} that compares {@link Comparable Comparable}
        objects.
        <p>
        This Comparator is useful, for example, for enforcing the natural order in
        custom implementations of {@link java.util.SortedSet SortedSet} and
        {@link java.util.SortedMap SortedMap}.
        <p>
        Note: In the 2.0 and 2.1 releases of Commons Collections, this class would
        throw a {@link ClassCastException} if either of the arguments to
        {@link #compare(Object, Object) compare} were <code>null</code>, not
        {@link Comparable Comparable}, or for which
        {@link Comparable#compareTo(Object) compareTo} gave inconsistent results.
        This is no longer the case. See {@link #compare(Object, Object) compare} for
        details.
        @since 2.0
        @version $Id$
        @see java.util.Collections#reverseOrder()
        <!-- ACCEPT >=> 6842c788-9f1d-11ea-8482-333445793454 -->



## Field: `java.org.apache.commons.collections4.comparators.ComparableComparator` / `private static final long serialVersionUID`


        <!-- 6842c789-9f1d-11ea-8483-333445793454 <=< ACCEPT -->
        Serialization version.
        <!-- ACCEPT >=> 6842c789-9f1d-11ea-8483-333445793454 -->



## Field: `java.org.apache.commons.collections4.comparators.ComparableComparator` / `public static final ComparableComparator INSTANCE`


        <!-- 6842c78a-9f1d-11ea-8484-333445793454 <=< ACCEPT -->
        The singleton instance.
        <!-- ACCEPT >=> 6842c78a-9f1d-11ea-8484-333445793454 -->



## Method: `java.org.apache.commons.collections4.comparators.ComparableComparator` / `public static <E extends Comparable<? super E>> ComparableComparator<E> comparableComparator()`


        <!-- 6842c78b-9f1d-11ea-8485-333445793454 <=< ACCEPT -->
        Gets the singleton instance of a ComparableComparator.
        <p>
        Developers are encouraged to use the comparator returned from this method
        instead of constructing a new instance to reduce allocation and GC overhead
        when multiple comparable comparators may be used in the same VM.
        @param <E>  the element type
        @return the singleton ComparableComparator
        @since 4.0
        <!-- ACCEPT >=> 6842c78b-9f1d-11ea-8485-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.comparators.ComparableComparator` / `public ComparableComparator()`


        <!-- 6842c78c-9f1d-11ea-8486-333445793454 <=< ACCEPT -->
        Constructor whose use should be avoided.
        <p>
        Please use the {@link #comparableComparator()} method whenever possible.
        <!-- ACCEPT >=> 6842c78c-9f1d-11ea-8486-333445793454 -->



## Method: `java.org.apache.commons.collections4.comparators.ComparableComparator` / `public int compare(final E obj1, final E obj2)`


        <!-- 6842c78d-9f1d-11ea-8487-333445793454 <=< ACCEPT -->
        Compare the two {@link Comparable Comparable} arguments.
        This method is equivalent to:
        <pre>((Comparable)obj1).compareTo(obj2)</pre>
        @param obj1  the first object to compare
        @param obj2  the second object to compare
        @return negative if obj1 is less, positive if greater, zero if equal
        @throws NullPointerException if <i>obj1</i> is <code>null</code>,
        or when <code>((Comparable)obj1).compareTo(obj2)</code> does
        @throws ClassCastException if <i>obj1</i> is not a <code>Comparable</code>,
        or when <code>((Comparable)obj1).compareTo(obj2)</code> does
        <!-- ACCEPT >=> 6842c78d-9f1d-11ea-8487-333445793454 -->



## Method: `java.org.apache.commons.collections4.comparators.ComparableComparator` / `public int hashCode()`


        <!-- 6842c78e-9f1d-11ea-8488-333445793454 <=< ACCEPT -->
        Implement a hash code for this comparator that is consistent with
        {@link #equals(Object) equals}.
        @return a hash code for this comparator.
        @since 3.0
        <!-- ACCEPT >=> 6842c78e-9f1d-11ea-8488-333445793454 -->



## Method: `java.org.apache.commons.collections4.comparators.ComparableComparator` / `public boolean equals(final Object object)`


        <!-- 6842c78f-9f1d-11ea-8489-333445793454 <=< ACCEPT -->
        Returns {@code true} iff <i>that</i> Object is is a {@link Comparator Comparator}
        whose ordering is known to be equivalent to mine.
        <p>
        This implementation returns {@code true} iff
        <code><i>object</i>.{@link Object#getClass() getClass()}</code> equals
        <code>this.getClass()</code>. Subclasses may want to override this behavior to remain
        consistent with the {@link Comparator#equals(Object)} contract.
        @param object  the object to compare with
        @return {@code true} if equal
        @since 3.0
        <!-- ACCEPT >=> 6842c78f-9f1d-11ea-8489-333445793454 -->



# File: `java.org.apache.commons.collections4.comparators.ComparatorChain`

## Class: `java.org.apache.commons.collections4.comparators.ComparatorChain` / `public class ComparatorChain<E> implements Comparator<E>, Serializable`


        <!-- 6842c790-9f1d-11ea-848a-333445793454 <=< ACCEPT -->
        A ComparatorChain is a Comparator that wraps one or more Comparators in
        sequence. The ComparatorChain calls each Comparator in sequence until either
        1) any single Comparator returns a non-zero result (and that result is then
        returned), or 2) the ComparatorChain is exhausted (and zero is returned).
        This type of sorting is very similar to multi-column sorting in SQL, and this
        class allows Java classes to emulate that kind of behaviour when sorting a
        List.
        <p>
        To further facilitate SQL-like sorting, the order of any single Comparator in
        the list can be reversed.
        <p>
        Calling a method that adds new Comparators or changes the ascend/descend sort
        <i>after compare(Object, Object) has been called</i> will result in an
        UnsupportedOperationException. However, <i>take care</i> to not alter the
        underlying List of Comparators or the BitSet that defines the sort order.
        <p>
        Instances of ComparatorChain are not synchronized. The class is not
        thread-safe at construction time, but it <i>is</i> thread-safe to perform
        multiple comparisons after all the setup operations are complete.
        @since 2.0
        @version $Id$
        <!-- ACCEPT >=> 6842c790-9f1d-11ea-848a-333445793454 -->



## Field: `java.org.apache.commons.collections4.comparators.ComparatorChain` / `private static final long serialVersionUID`


        <!-- 6842ee89-9f1d-11ea-848b-333445793454 <=< ACCEPT -->
        Serialization version from Collections 2.0.
        <!-- ACCEPT >=> 6842ee89-9f1d-11ea-848b-333445793454 -->



## Field: `java.org.apache.commons.collections4.comparators.ComparatorChain` / `private final List<Comparator<E>> comparatorChain`


        <!-- 6842ee8a-9f1d-11ea-848c-333445793454 <=< ACCEPT -->
        The list of comparators in the chain.
        <!-- ACCEPT >=> 6842ee8a-9f1d-11ea-848c-333445793454 -->



## Field: `java.org.apache.commons.collections4.comparators.ComparatorChain` / `private BitSet orderingBits`


        <!-- 6842ee8b-9f1d-11ea-848d-333445793454 <=< ACCEPT -->
        Order - false (clear) = ascend; true (set) = descend.
        <!-- ACCEPT >=> 6842ee8b-9f1d-11ea-848d-333445793454 -->



## Field: `java.org.apache.commons.collections4.comparators.ComparatorChain` / `private boolean isLocked`


        <!-- 6842ee8c-9f1d-11ea-848e-333445793454 <=< ACCEPT -->
        Whether the chain has been "locked".
        <!-- ACCEPT >=> 6842ee8c-9f1d-11ea-848e-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.comparators.ComparatorChain` / `public ComparatorChain()`


        <!-- 6842ee8d-9f1d-11ea-848f-333445793454 <=< ACCEPT -->
        Construct a ComparatorChain with no Comparators.
        You must add at least one Comparator before calling
        the compare(Object,Object) method, or an
        UnsupportedOperationException is thrown
        <!-- ACCEPT >=> 6842ee8d-9f1d-11ea-848f-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.comparators.ComparatorChain` / `public ComparatorChain(final Comparator<E> comparator)`


        <!-- 6842ee8e-9f1d-11ea-8490-333445793454 <=< ACCEPT -->
        Construct a ComparatorChain with a single Comparator,
        sorting in the forward order
        @param comparator First comparator in the Comparator chain
        <!-- ACCEPT >=> 6842ee8e-9f1d-11ea-8490-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.comparators.ComparatorChain` / `public ComparatorChain(final Comparator<E> comparator, final boolean reverse)`


        <!-- 6842ee8f-9f1d-11ea-8491-333445793454 <=< ACCEPT -->
        Construct a Comparator chain with a single Comparator,
        sorting in the given order
        @param comparator First Comparator in the ComparatorChain
        @param reverse    false = forward sort; true = reverse sort
        <!-- ACCEPT >=> 6842ee8f-9f1d-11ea-8491-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.comparators.ComparatorChain` / `public ComparatorChain(final List<Comparator<E>> list)`


        <!-- 6842ee90-9f1d-11ea-8492-333445793454 <=< ACCEPT -->
        Construct a ComparatorChain from the Comparators in the
        List.  All Comparators will default to the forward
        sort order.
        @param list   List of Comparators
        @see #ComparatorChain(List,BitSet)
        <!-- ACCEPT >=> 6842ee90-9f1d-11ea-8492-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.comparators.ComparatorChain` / `public ComparatorChain(final List<Comparator<E>> list, final BitSet bits)`


        <!-- 6842ee91-9f1d-11ea-8493-333445793454 <=< ACCEPT -->
        Construct a ComparatorChain from the Comparators in the
        given List.  The sort order of each column will be
        drawn from the given BitSet.  When determining the sort
        order for Comparator at index <i>i</i> in the List,
        the ComparatorChain will call BitSet.get(<i>i</i>).
        If that method returns <i>false</i>, the forward
        sort order is used; a return value of <i>true</i>
        indicates reverse sort order.
        @param list   List of Comparators.  NOTE: This constructor does not perform a
        defensive copy of the list
        @param bits   Sort order for each Comparator.  Extra bits are ignored,
        unless extra Comparators are added by another method.
        <!-- ACCEPT >=> 6842ee91-9f1d-11ea-8493-333445793454 -->



## Method: `java.org.apache.commons.collections4.comparators.ComparatorChain` / `public void addComparator(final Comparator<E> comparator)`


        <!-- 6842ee92-9f1d-11ea-8494-333445793454 <=< ACCEPT -->
        Add a Comparator to the end of the chain using the
        forward sort order
        @param comparator Comparator with the forward sort order
        <!-- ACCEPT >=> 6842ee92-9f1d-11ea-8494-333445793454 -->



## Method: `java.org.apache.commons.collections4.comparators.ComparatorChain` / `public void addComparator(final Comparator<E> comparator, final boolean reverse)`


        <!-- 6842ee93-9f1d-11ea-8495-333445793454 <=< ACCEPT -->
        Add a Comparator to the end of the chain using the
        given sort order
        @param comparator Comparator to add to the end of the chain
        @param reverse    false = forward sort order; true = reverse sort order
        <!-- ACCEPT >=> 6842ee93-9f1d-11ea-8495-333445793454 -->



## Method: `java.org.apache.commons.collections4.comparators.ComparatorChain` / `public void setComparator(final int index, final Comparator<E> comparator) throws IndexOutOfBoundsException`


        <!-- 6842ee94-9f1d-11ea-8496-333445793454 <=< ACCEPT -->
        Replace the Comparator at the given index, maintaining
        the existing sort order.
        @param index      index of the Comparator to replace
        @param comparator Comparator to place at the given index
        @exception IndexOutOfBoundsException
        if index &lt; 0 or index &gt;= size()
        <!-- ACCEPT >=> 6842ee94-9f1d-11ea-8496-333445793454 -->



## Method: `java.org.apache.commons.collections4.comparators.ComparatorChain` / `public void setComparator(final int index, final Comparator<E> comparator, final boolean reverse)`


        <!-- 6842ee95-9f1d-11ea-8497-333445793454 <=< ACCEPT -->
        Replace the Comparator at the given index in the
        ComparatorChain, using the given sort order
        @param index      index of the Comparator to replace
        @param comparator Comparator to set
        @param reverse    false = forward sort order; true = reverse sort order
        <!-- ACCEPT >=> 6842ee95-9f1d-11ea-8497-333445793454 -->



## Method: `java.org.apache.commons.collections4.comparators.ComparatorChain` / `public void setForwardSort(final int index)`


        <!-- 6842ee96-9f1d-11ea-8498-333445793454 <=< ACCEPT -->
        Change the sort order at the given index in the
        ComparatorChain to a forward sort.
        @param index  Index of the ComparatorChain
        <!-- ACCEPT >=> 6842ee96-9f1d-11ea-8498-333445793454 -->



## Method: `java.org.apache.commons.collections4.comparators.ComparatorChain` / `public void setReverseSort(final int index)`


        <!-- 6842ee97-9f1d-11ea-8499-333445793454 <=< ACCEPT -->
        Change the sort order at the given index in the
        ComparatorChain to a reverse sort.
        @param index  Index of the ComparatorChain
        <!-- ACCEPT >=> 6842ee97-9f1d-11ea-8499-333445793454 -->



## Method: `java.org.apache.commons.collections4.comparators.ComparatorChain` / `public int size()`


        <!-- 6842ee98-9f1d-11ea-849a-333445793454 <=< ACCEPT -->
        Number of Comparators in the current ComparatorChain.
        @return Comparator count
        <!-- ACCEPT >=> 6842ee98-9f1d-11ea-849a-333445793454 -->



## Method: `java.org.apache.commons.collections4.comparators.ComparatorChain` / `public boolean isLocked()`


        <!-- 6842ee99-9f1d-11ea-849b-333445793454 <=< ACCEPT -->
        Determine if modifications can still be made to the
        ComparatorChain.  ComparatorChains cannot be modified
        once they have performed a comparison.
        @return true = ComparatorChain cannot be modified; false =
        ComparatorChain can still be modified.
        <!-- ACCEPT >=> 6842ee99-9f1d-11ea-849b-333445793454 -->



## Method: `java.org.apache.commons.collections4.comparators.ComparatorChain` / `private void checkLocked()`


        <!-- 6842ee9a-9f1d-11ea-849c-333445793454 <=< ACCEPT -->
        Throws an exception if the {@link ComparatorChain} is locked.
        @throws UnsupportedOperationException if the {@link ComparatorChain} is locked
        <!-- ACCEPT >=> 6842ee9a-9f1d-11ea-849c-333445793454 -->



## Method: `java.org.apache.commons.collections4.comparators.ComparatorChain` / `private void checkChainIntegrity()`


        <!-- 6842ee9b-9f1d-11ea-849d-333445793454 <=< ACCEPT -->
        Throws an exception if the {@link ComparatorChain} is empty.
        @throws UnsupportedOperationException if the {@link ComparatorChain} is empty
        <!-- ACCEPT >=> 6842ee9b-9f1d-11ea-849d-333445793454 -->



## Method: `java.org.apache.commons.collections4.comparators.ComparatorChain` / `public int compare(final E o1, final E o2) throws UnsupportedOperationException`


        <!-- 6842ee9c-9f1d-11ea-849e-333445793454 <=< ACCEPT -->
        Perform comparisons on the Objects as per
        Comparator.compare(o1,o2).
        @param o1  the first object to compare
        @param o2  the second object to compare
        @return -1, 0, or 1
        @throws UnsupportedOperationException if the ComparatorChain does not contain at least one Comparator
        <!-- ACCEPT >=> 6842ee9c-9f1d-11ea-849e-333445793454 -->



## Method: `java.org.apache.commons.collections4.comparators.ComparatorChain` / `public int hashCode()`


        <!-- 6842ee9d-9f1d-11ea-849f-333445793454 <=< ACCEPT -->
        Implement a hash code for this comparator that is consistent with
        {@link #equals(Object) equals}.
        @return a suitable hash code
        @since 3.0
        <!-- ACCEPT >=> 6842ee9d-9f1d-11ea-849f-333445793454 -->



## Method: `java.org.apache.commons.collections4.comparators.ComparatorChain` / `public boolean equals(final Object object)`


        <!-- 68431593-9f1d-11ea-84a0-333445793454 <=< ACCEPT -->
        Returns <code>true</code> iff <i>that</i> Object is
        is a {@link Comparator} whose ordering is known to be
        equivalent to mine.
        <p>
        This implementation returns <code>true</code>
        iff <code><i>object</i>.{@link Object#getClass() getClass()}</code>
        equals <code>this.getClass()</code>, and the underlying
        comparators and order bits are equal.
        Subclasses may want to override this behavior to remain consistent
        with the {@link Comparator#equals(Object)} contract.
        @param object  the object to compare with
        @return true if equal
        @since 3.0
        <!-- ACCEPT >=> 68431593-9f1d-11ea-84a0-333445793454 -->



# File: `java.org.apache.commons.collections4.comparators.FixedOrderComparator`

## Class: `java.org.apache.commons.collections4.comparators.FixedOrderComparator` / `public class FixedOrderComparator<T> implements Comparator<T>, Serializable`


        <!-- 68431594-9f1d-11ea-84a1-333445793454 <=< ACCEPT -->
        A Comparator which imposes a specific order on a specific set of Objects.
        Objects are presented to the FixedOrderComparator in a specified order and
        subsequent calls to {@link #compare(Object, Object) compare} yield that order.
        For example:
        <pre>
        String[] planets = {"Mercury", "Venus", "Earth", "Mars"};
        FixedOrderComparator distanceFromSun = new FixedOrderComparator(planets);
        Arrays.sort(planets);                     // Sort to alphabetical order
        Arrays.sort(planets, distanceFromSun);    // Back to original order
        </pre>
        <p>
        Once <code>compare</code> has been called, the FixedOrderComparator is locked
        and attempts to modify it yield an UnsupportedOperationException.
        <p>
        Instances of FixedOrderComparator are not synchronized.  The class is not
        thread-safe at construction time, but it is thread-safe to perform
        multiple comparisons  after all the setup operations are complete.
        <p>
        This class is Serializable from Commons Collections 4.0.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 68431594-9f1d-11ea-84a1-333445793454 -->



## Field: `java.org.apache.commons.collections4.comparators.FixedOrderComparator` / `private static final long serialVersionUID`


        <!-- 68431595-9f1d-11ea-84a2-333445793454 <=< ACCEPT -->
        Serialization version from Collections 4.0.
        <!-- ACCEPT >=> 68431595-9f1d-11ea-84a2-333445793454 -->



## Enum: `java.org.apache.commons.collections4.comparators.FixedOrderComparator` / `public static enum UnknownObjectBehavior`


        <!-- 68431596-9f1d-11ea-84a3-333445793454 <=< ACCEPT -->
        Unknown object behavior enum.
        @since 4.0
        <!-- ACCEPT >=> 68431596-9f1d-11ea-84a3-333445793454 -->



## Field: `java.org.apache.commons.collections4.comparators.FixedOrderComparator` / `private final Map<T, Integer> map`


        <!-- 68431597-9f1d-11ea-84a4-333445793454 <=< ACCEPT -->
        Internal map of object to position
        <!-- ACCEPT >=> 68431597-9f1d-11ea-84a4-333445793454 -->



## Field: `java.org.apache.commons.collections4.comparators.FixedOrderComparator` / `private int counter`


        <!-- 68431598-9f1d-11ea-84a5-333445793454 <=< ACCEPT -->
        Counter used in determining the position in the map
        <!-- ACCEPT >=> 68431598-9f1d-11ea-84a5-333445793454 -->



## Field: `java.org.apache.commons.collections4.comparators.FixedOrderComparator` / `private boolean isLocked`


        <!-- 68431599-9f1d-11ea-84a6-333445793454 <=< ACCEPT -->
        Is the comparator locked against further change
        <!-- ACCEPT >=> 68431599-9f1d-11ea-84a6-333445793454 -->



## Field: `java.org.apache.commons.collections4.comparators.FixedOrderComparator` / `private UnknownObjectBehavior unknownObjectBehavior`


        <!-- 6843159a-9f1d-11ea-84a7-333445793454 <=< ACCEPT -->
        The behaviour in the case of an unknown object
        <!-- ACCEPT >=> 6843159a-9f1d-11ea-84a7-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.comparators.FixedOrderComparator` / `public FixedOrderComparator()`


        <!-- 6843159b-9f1d-11ea-84a8-333445793454 <=< ACCEPT -->
        Constructs an empty FixedOrderComparator.
        <!-- ACCEPT >=> 6843159b-9f1d-11ea-84a8-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.comparators.FixedOrderComparator` / `public FixedOrderComparator(final T... items)`


        <!-- 6843159c-9f1d-11ea-84a9-333445793454 <=< ACCEPT -->
        Constructs a FixedOrderComparator which uses the order of the given array
        to compare the objects.
        <p>
        The array is copied, so later changes will not affect the comparator.
        @param items  the items that the comparator can compare in order
        @throws NullPointerException if the array is null
        <!-- ACCEPT >=> 6843159c-9f1d-11ea-84a9-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.comparators.FixedOrderComparator` / `public FixedOrderComparator(final List<T> items)`


        <!-- 6843159d-9f1d-11ea-84aa-333445793454 <=< ACCEPT -->
        Constructs a FixedOrderComparator which uses the order of the given list
        to compare the objects.
        <p>
        The list is copied, so later changes will not affect the comparator.
        @param items  the items that the comparator can compare in order
        @throws NullPointerException if the list is null
        <!-- ACCEPT >=> 6843159d-9f1d-11ea-84aa-333445793454 -->



## Method: `java.org.apache.commons.collections4.comparators.FixedOrderComparator` / `public boolean isLocked()`


        <!-- 6843159e-9f1d-11ea-84ab-333445793454 <=< ACCEPT -->
        Returns true if modifications cannot be made to the FixedOrderComparator.
        FixedOrderComparators cannot be modified once they have performed a comparison.
        @return true if attempts to change the FixedOrderComparator yield an
        UnsupportedOperationException, false if it can be changed.
        <!-- ACCEPT >=> 6843159e-9f1d-11ea-84ab-333445793454 -->



## Method: `java.org.apache.commons.collections4.comparators.FixedOrderComparator` / `protected void checkLocked()`


        <!-- 6843159f-9f1d-11ea-84ac-333445793454 <=< ACCEPT -->
        Checks to see whether the comparator is now locked against further changes.
        @throws UnsupportedOperationException if the comparator is locked
        <!-- ACCEPT >=> 6843159f-9f1d-11ea-84ac-333445793454 -->



## Method: `java.org.apache.commons.collections4.comparators.FixedOrderComparator` / `public UnknownObjectBehavior getUnknownObjectBehavior()`


        <!-- 684315a0-9f1d-11ea-84ad-333445793454 <=< ACCEPT -->
        Gets the behavior for comparing unknown objects.
        @return {@link UnknownObjectBehavior}
        <!-- ACCEPT >=> 684315a0-9f1d-11ea-84ad-333445793454 -->



## Method: `java.org.apache.commons.collections4.comparators.FixedOrderComparator` / `public void setUnknownObjectBehavior(final UnknownObjectBehavior unknownObjectBehavior)`


        <!-- 684315a1-9f1d-11ea-84ae-333445793454 <=< ACCEPT -->
        Sets the behavior for comparing unknown objects.
        @param unknownObjectBehavior  the flag for unknown behaviour -
        UNKNOWN_AFTER, UNKNOWN_BEFORE or UNKNOWN_THROW_EXCEPTION
        @throws UnsupportedOperationException if a comparison has been performed
        @throws NullPointerException if unknownObjectBehavior is null
        <!-- ACCEPT >=> 684315a1-9f1d-11ea-84ae-333445793454 -->



## Method: `java.org.apache.commons.collections4.comparators.FixedOrderComparator` / `public boolean add(final T obj)`


        <!-- 684315a2-9f1d-11ea-84af-333445793454 <=< ACCEPT -->
        Adds an item, which compares as after all items known to the Comparator.
        If the item is already known to the Comparator, its old position is
        replaced with the new position.
        @param obj  the item to be added to the Comparator.
        @return true if obj has been added for the first time, false if
        it was already known to the Comparator.
        @throws UnsupportedOperationException if a comparison has already been made
        <!-- ACCEPT >=> 684315a2-9f1d-11ea-84af-333445793454 -->



## Method: `java.org.apache.commons.collections4.comparators.FixedOrderComparator` / `public boolean addAsEqual(final T existingObj, final T newObj)`


        <!-- 684315a3-9f1d-11ea-84b0-333445793454 <=< ACCEPT -->
        Adds a new item, which compares as equal to the given existing item.
        @param existingObj  an item already in the Comparator's set of
        known objects
        @param newObj  an item to be added to the Comparator's set of
        known objects
        @return true if newObj has been added for the first time, false if
        it was already known to the Comparator.
        @throws IllegalArgumentException if existingObject is not in the
        Comparator's set of known objects.
        @throws UnsupportedOperationException if a comparison has already been made
        <!-- ACCEPT >=> 684315a3-9f1d-11ea-84b0-333445793454 -->



## Method: `java.org.apache.commons.collections4.comparators.FixedOrderComparator` / `public int compare(final T obj1, final T obj2)`


        <!-- 684315a4-9f1d-11ea-84b1-333445793454 <=< ACCEPT -->
        Compares two objects according to the order of this Comparator.
        <p>
        It is important to note that this class will throw an IllegalArgumentException
        in the case of an unrecognised object. This is not specified in the
        Comparator interface, but is the most appropriate exception.
        @param obj1  the first object to compare
        @param obj2  the second object to compare
        @return negative if obj1 is less, positive if greater, zero if equal
        @throws IllegalArgumentException if obj1 or obj2 are not known
        to this Comparator and an alternative behavior has not been set
        via {@link #setUnknownObjectBehavior(UnknownObjectBehavior)}.
        <!-- ACCEPT >=> 684315a4-9f1d-11ea-84b1-333445793454 -->



## Method: `java.org.apache.commons.collections4.comparators.FixedOrderComparator` / `public int hashCode()`


        <!-- 684315a5-9f1d-11ea-84b2-333445793454 <=< ACCEPT -->
        Implement a hash code for this comparator that is consistent with
        {@link #equals(Object) equals}.
        @return a hash code for this comparator.
        <!-- ACCEPT >=> 684315a5-9f1d-11ea-84b2-333445793454 -->



## Method: `java.org.apache.commons.collections4.comparators.FixedOrderComparator` / `public boolean equals(final Object object)`


        <!-- 684315a6-9f1d-11ea-84b3-333445793454 <=< ACCEPT -->
        Returns <code>true</code> iff <i>that</i> Object is
        is a {@link Comparator} whose ordering is known to be
        equivalent to mine.
        <p>
        This implementation returns <code>true</code>
        iff <code><i>that</i></code> is a {@link FixedOrderComparator}
        whose attributes are equal to mine.
        @param object  the object to compare to
        @return true if equal
        <!-- ACCEPT >=> 684315a6-9f1d-11ea-84b3-333445793454 -->



# File: `java.org.apache.commons.collections4.comparators.NullComparator`

## Class: `java.org.apache.commons.collections4.comparators.NullComparator` / `public class NullComparator<E> implements Comparator<E>, Serializable`


        <!-- 68433c9e-9f1d-11ea-84b4-333445793454 <=< ACCEPT -->
        A Comparator that will compare nulls to be either lower or higher than
        other objects.
        @since 2.0
        @version $Id$
        <!-- ACCEPT >=> 68433c9e-9f1d-11ea-84b4-333445793454 -->



## Field: `java.org.apache.commons.collections4.comparators.NullComparator` / `private static final long serialVersionUID`


        <!-- 68433c9f-9f1d-11ea-84b5-333445793454 <=< ACCEPT -->
        Serialization version.
        <!-- ACCEPT >=> 68433c9f-9f1d-11ea-84b5-333445793454 -->



## Field: `java.org.apache.commons.collections4.comparators.NullComparator` / `private final Comparator<? super E> nonNullComparator`


        <!-- 68433ca0-9f1d-11ea-84b6-333445793454 <=< ACCEPT -->
        The comparator to use when comparing two non-<code>null</code> objects.
        <!-- ACCEPT >=> 68433ca0-9f1d-11ea-84b6-333445793454 -->



## Field: `java.org.apache.commons.collections4.comparators.NullComparator` / `private final boolean nullsAreHigh`


        <!-- 68433ca1-9f1d-11ea-84b7-333445793454 <=< ACCEPT -->
        Specifies whether a <code>null</code> are compared as higher than
        non-<code>null</code> objects.
        <!-- ACCEPT >=> 68433ca1-9f1d-11ea-84b7-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.comparators.NullComparator` / `public NullComparator()`


        <!-- 68433ca2-9f1d-11ea-84b8-333445793454 <=< ACCEPT -->
        Construct an instance that sorts <code>null</code> higher than any
        non-<code>null</code> object it is compared with. When comparing two
        non-<code>null</code> objects, the {@link ComparableComparator} is
        used.
        <!-- ACCEPT >=> 68433ca2-9f1d-11ea-84b8-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.comparators.NullComparator` / `public NullComparator(final Comparator<? super E> nonNullComparator)`


        <!-- 68433ca3-9f1d-11ea-84b9-333445793454 <=< ACCEPT -->
        Construct an instance that sorts <code>null</code> higher than any
        non-<code>null</code> object it is compared with.  When comparing two
        non-<code>null</code> objects, the specified {@link Comparator} is
        used.
        @param nonNullComparator the comparator to use when comparing two
        non-<code>null</code> objects.  This argument cannot be
        <code>null</code>
        @exception NullPointerException if <code>nonNullComparator</code> is
        <code>null</code>
        <!-- ACCEPT >=> 68433ca3-9f1d-11ea-84b9-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.comparators.NullComparator` / `public NullComparator(final boolean nullsAreHigh)`


        <!-- 68433ca4-9f1d-11ea-84ba-333445793454 <=< ACCEPT -->
        Construct an instance that sorts <code>null</code> higher or lower than
        any non-<code>null</code> object it is compared with.  When comparing
        two non-<code>null</code> objects, the {@link ComparableComparator} is
        used.
        @param nullsAreHigh a <code>true</code> value indicates that
        <code>null</code> should be compared as higher than a
        non-<code>null</code> object.  A <code>false</code> value indicates
        that <code>null</code> should be compared as lower than a
        non-<code>null</code> object.
        <!-- ACCEPT >=> 68433ca4-9f1d-11ea-84ba-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.comparators.NullComparator` / `public NullComparator(final Comparator<? super E> nonNullComparator, final boolean nullsAreHigh)`


        <!-- 68433ca5-9f1d-11ea-84bb-333445793454 <=< ACCEPT -->
        Construct an instance that sorts <code>null</code> higher or lower than
        any non-<code>null</code> object it is compared with.  When comparing
        two non-<code>null</code> objects, the specified {@link Comparator} is
        used.
        @param nonNullComparator the comparator to use when comparing two
        non-<code>null</code> objects. This argument cannot be
        <code>null</code>
        @param nullsAreHigh a <code>true</code> value indicates that
        <code>null</code> should be compared as higher than a
        non-<code>null</code> object.  A <code>false</code> value indicates
        that <code>null</code> should be compared as lower than a
        non-<code>null</code> object.
        @exception NullPointerException if <code>nonNullComparator</code> is
        <code>null</code>
        <!-- ACCEPT >=> 68433ca5-9f1d-11ea-84bb-333445793454 -->



## Method: `java.org.apache.commons.collections4.comparators.NullComparator` / `public int compare(final E o1, final E o2)`


        <!-- 68433ca6-9f1d-11ea-84bc-333445793454 <=< ACCEPT -->
        Perform a comparison between two objects.  If both objects are
        <code>null</code>, a <code>0</code> value is returned.  If one object
        is <code>null</code> and the other is not, the result is determined on
        whether the Comparator was constructed to have nulls as higher or lower
        than other objects.  If neither object is <code>null</code>, an
        underlying comparator specified in the constructor (or the default) is
        used to compare the non-<code>null</code> objects.
        @param o1  the first object to compare
        @param o2  the object to compare it to.
        @return <code>-1</code> if <code>o1</code> is "lower" than (less than,
        before, etc.) <code>o2</code>; <code>1</code> if <code>o1</code> is
        "higher" than (greater than, after, etc.) <code>o2</code>; or
        <code>0</code> if <code>o1</code> and <code>o2</code> are equal.
        <!-- ACCEPT >=> 68433ca6-9f1d-11ea-84bc-333445793454 -->



## Method: `java.org.apache.commons.collections4.comparators.NullComparator` / `public int hashCode()`


        <!-- 68433ca7-9f1d-11ea-84bd-333445793454 <=< ACCEPT -->
        Implement a hash code for this comparator that is consistent with
        {@link #equals(Object)}.
        @return a hash code for this comparator.
        <!-- ACCEPT >=> 68433ca7-9f1d-11ea-84bd-333445793454 -->



## Method: `java.org.apache.commons.collections4.comparators.NullComparator` / `public boolean equals(final Object obj)`


        <!-- 68433ca8-9f1d-11ea-84be-333445793454 <=< ACCEPT -->
        Determines whether the specified object represents a comparator that is
        equal to this comparator.
        @param obj  the object to compare this comparator with.
        @return <code>true</code> if the specified object is a NullComparator
        with equivalent <code>null</code> comparison behavior
        (i.e. <code>null</code> high or low) and with equivalent underlying
        non-<code>null</code> object comparators.
        <!-- ACCEPT >=> 68433ca8-9f1d-11ea-84be-333445793454 -->



# File: `java.org.apache.commons.collections4.comparators.ReverseComparator`

## Class: `java.org.apache.commons.collections4.comparators.ReverseComparator` / `public class ReverseComparator<E> implements Comparator<E>, Serializable`


        <!-- 68433ca9-9f1d-11ea-84bf-333445793454 <=< ACCEPT -->
        Reverses the order of another comparator by reversing the arguments
        to its {@link #compare(Object, Object) compare} method.
        @since 2.0
        @version $Id$
        @see java.util.Collections#reverseOrder()
        <!-- ACCEPT >=> 68433ca9-9f1d-11ea-84bf-333445793454 -->



## Field: `java.org.apache.commons.collections4.comparators.ReverseComparator` / `private static final long serialVersionUID`


        <!-- 68433caa-9f1d-11ea-84c0-333445793454 <=< ACCEPT -->
        Serialization version from Collections 2.0.
        <!-- ACCEPT >=> 68433caa-9f1d-11ea-84c0-333445793454 -->



## Field: `java.org.apache.commons.collections4.comparators.ReverseComparator` / `private final Comparator<? super E> comparator`


        <!-- 68433cab-9f1d-11ea-84c1-333445793454 <=< ACCEPT -->
        The comparator being decorated.
        <!-- ACCEPT >=> 68433cab-9f1d-11ea-84c1-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.comparators.ReverseComparator` / `public ReverseComparator()`


        <!-- 68433cac-9f1d-11ea-84c2-333445793454 <=< ACCEPT -->
        Creates a comparator that compares objects based on the inverse of their
        natural ordering.  Using this Constructor will create a ReverseComparator
        that is functionally identical to the Comparator returned by
        java.util.Collections.<b>reverseOrder()</b>.
        @see java.util.Collections#reverseOrder()
        <!-- ACCEPT >=> 68433cac-9f1d-11ea-84c2-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.comparators.ReverseComparator` / `public ReverseComparator(final Comparator<? super E> comparator)`


        <!-- 68433cad-9f1d-11ea-84c3-333445793454 <=< ACCEPT -->
        Creates a comparator that inverts the comparison
        of the given comparator.  If you pass in <code>null</code>,
        the ReverseComparator defaults to reversing the
        natural order, as per {@link java.util.Collections#reverseOrder()}.
        @param comparator Comparator to reverse
        <!-- ACCEPT >=> 68433cad-9f1d-11ea-84c3-333445793454 -->



## Method: `java.org.apache.commons.collections4.comparators.ReverseComparator` / `public int compare(final E obj1, final E obj2)`


        <!-- 68433cae-9f1d-11ea-84c4-333445793454 <=< ACCEPT -->
        Compares two objects in reverse order.
        @param obj1  the first object to compare
        @param obj2  the second object to compare
        @return negative if obj1 is less, positive if greater, zero if equal
        <!-- ACCEPT >=> 68433cae-9f1d-11ea-84c4-333445793454 -->



## Method: `java.org.apache.commons.collections4.comparators.ReverseComparator` / `public int hashCode()`


        <!-- 684363a8-9f1d-11ea-84c5-333445793454 <=< ACCEPT -->
        Implement a hash code for this comparator that is consistent with
        {@link #equals(Object) equals}.
        @return a suitable hash code
        @since 3.0
        <!-- ACCEPT >=> 684363a8-9f1d-11ea-84c5-333445793454 -->



## Method: `java.org.apache.commons.collections4.comparators.ReverseComparator` / `public boolean equals(final Object object)`


        <!-- 684363a9-9f1d-11ea-84c6-333445793454 <=< ACCEPT -->
        Returns <code>true</code> iff <i>that</i> Object is
        is a {@link Comparator} whose ordering is known to be
        equivalent to mine.
        <p>
        This implementation returns <code>true</code>
        iff <code><i>object</i>.{@link Object#getClass() getClass()}</code>
        equals <code>this.getClass()</code>, and the underlying
        comparators are equal.
        Subclasses may want to override this behavior to remain consistent
        with the {@link Comparator#equals(Object) equals} contract.
        @param object  the object to compare to
        @return true if equal
        @since 3.0
        <!-- ACCEPT >=> 684363a9-9f1d-11ea-84c6-333445793454 -->



# File: `java.org.apache.commons.collections4.comparators.TransformingComparator`

## Class: `java.org.apache.commons.collections4.comparators.TransformingComparator` / `public class TransformingComparator<I, O> implements Comparator<I>, Serializable`


        <!-- 684363aa-9f1d-11ea-84c7-333445793454 <=< ACCEPT -->
        Decorates another Comparator with transformation behavior. That is, the
        return value from the transform operation will be passed to the decorated
        {@link Comparator#compare(Object,Object) compare} method.
        <p>
        This class is Serializable from Commons Collections 4.0.
        @since 2.1
        @version $Id$
        @see org.apache.commons.collections4.Transformer
        @see org.apache.commons.collections4.comparators.ComparableComparator
        <!-- ACCEPT >=> 684363aa-9f1d-11ea-84c7-333445793454 -->



## Field: `java.org.apache.commons.collections4.comparators.TransformingComparator` / `private static final long serialVersionUID`


        <!-- 684363ab-9f1d-11ea-84c8-333445793454 <=< ACCEPT -->
        Serialization version from Collections 4.0.
        <!-- ACCEPT >=> 684363ab-9f1d-11ea-84c8-333445793454 -->



## Field: `java.org.apache.commons.collections4.comparators.TransformingComparator` / `private final Comparator<O> decorated`


        <!-- 684363ac-9f1d-11ea-84c9-333445793454 <=< ACCEPT -->
        The decorated comparator.
        <!-- ACCEPT >=> 684363ac-9f1d-11ea-84c9-333445793454 -->



## Field: `java.org.apache.commons.collections4.comparators.TransformingComparator` / `private final Transformer<? super I, ? extends O> transformer`


        <!-- 684363ad-9f1d-11ea-84ca-333445793454 <=< ACCEPT -->
        The transformer being used.
        <!-- ACCEPT >=> 684363ad-9f1d-11ea-84ca-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.comparators.TransformingComparator` / `public TransformingComparator(final Transformer<? super I, ? extends O> transformer)`


        <!-- 684363ae-9f1d-11ea-84cb-333445793454 <=< ACCEPT -->
        Constructs an instance with the given Transformer and a
        {@link ComparableComparator ComparableComparator}.
        @param transformer what will transform the arguments to <code>compare</code>
        <!-- ACCEPT >=> 684363ae-9f1d-11ea-84cb-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.comparators.TransformingComparator` / `final Comparator<O> decorated)`


        <!-- 684363af-9f1d-11ea-84cc-333445793454 <=< ACCEPT -->
        Constructs an instance with the given Transformer and Comparator.
        @param transformer  what will transform the arguments to <code>compare</code>
        @param decorated  the decorated Comparator
        <!-- ACCEPT >=> 684363af-9f1d-11ea-84cc-333445793454 -->



## Method: `java.org.apache.commons.collections4.comparators.TransformingComparator` / `public int compare(final I obj1, final I obj2)`


        <!-- 684363b0-9f1d-11ea-84cd-333445793454 <=< ACCEPT -->
        Returns the result of comparing the values from the transform operation.
        @param obj1  the first object to transform then compare
        @param obj2  the second object to transform then compare
        @return negative if obj1 is less, positive if greater, zero if equal
        <!-- ACCEPT >=> 684363b0-9f1d-11ea-84cd-333445793454 -->



## Method: `java.org.apache.commons.collections4.comparators.TransformingComparator` / `public int hashCode()`


        <!-- 684363b1-9f1d-11ea-84ce-333445793454 <=< ACCEPT -->
        Implement a hash code for this comparator that is consistent with
        {@link #equals(Object) equals}.
        @return a hash code for this comparator.
        <!-- ACCEPT >=> 684363b1-9f1d-11ea-84ce-333445793454 -->



## Method: `java.org.apache.commons.collections4.comparators.TransformingComparator` / `public boolean equals(final Object object)`


        <!-- 684363b2-9f1d-11ea-84cf-333445793454 <=< ACCEPT -->
        Returns <code>true</code> iff <i>that</i> Object is
        is a {@link Comparator} whose ordering is known to be
        equivalent to mine.
        <p>
        This implementation returns <code>true</code>
        iff <code><i>that</i></code> is a {@link TransformingComparator}
        whose attributes are equal to mine.
        @param object  the object to compare to
        @return true if equal
        <!-- ACCEPT >=> 684363b2-9f1d-11ea-84cf-333445793454 -->



# File: `java.org.apache.commons.collections4.comparators.package-info`

## Package: `java.org.apache.commons.collections4.comparators.package-info` / `package org.apache.commons.collections4.comparators`


        <!-- 684363b3-9f1d-11ea-84d0-333445793454 <=< ACCEPT -->
        This package contains implementations of the
        {@link java.util.Comparator Comparator} interface.
        <p>
        You may also consider using
        {@link org.apache.commons.collections4.ComparatorUtils ComparatorUtils},
        which is a single class that uses static methods to construct instances
        of the classes in this package.
        @version $Id$
        <!-- ACCEPT >=> 684363b3-9f1d-11ea-84d0-333445793454 -->



# File: `java.org.apache.commons.collections4.functors.AbstractQuantifierPredicate`

## Class: `java.org.apache.commons.collections4.functors.AbstractQuantifierPredicate` / `public abstract class AbstractQuantifierPredicate<T> implements PredicateDecorator<T>, Serializable`


        <!-- 684363b4-9f1d-11ea-84d1-333445793454 <=< ACCEPT -->
        Abstract base class for quantification predicates, e.g. All, Any, None.
        @since 4.0
        @version $Id$
        <!-- ACCEPT >=> 684363b4-9f1d-11ea-84d1-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.AbstractQuantifierPredicate` / `private static final long serialVersionUID`


        <!-- 684363b5-9f1d-11ea-84d2-333445793454 <=< ACCEPT -->
        Serial version UID
        <!-- ACCEPT >=> 684363b5-9f1d-11ea-84d2-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.AbstractQuantifierPredicate` / `protected final Predicate<? super T>[] iPredicates`


        <!-- 684363b6-9f1d-11ea-84d3-333445793454 <=< ACCEPT -->
        The array of predicates to call
        <!-- ACCEPT >=> 684363b6-9f1d-11ea-84d3-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.AbstractQuantifierPredicate` / `public AbstractQuantifierPredicate(final Predicate<? super T>... predicates)`


        <!-- 684363b7-9f1d-11ea-84d4-333445793454 <=< ACCEPT -->
        Constructor that performs no validation.
        @param predicates  the predicates to check, not cloned, not null
        <!-- ACCEPT >=> 684363b7-9f1d-11ea-84d4-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.AbstractQuantifierPredicate` / `public Predicate<? super T>[] getPredicates()`


        <!-- 684363b8-9f1d-11ea-84d5-333445793454 <=< ACCEPT -->
        Gets the predicates.
        @return a copy of the predicates
        @since 3.1
        <!-- ACCEPT >=> 684363b8-9f1d-11ea-84d5-333445793454 -->



# File: `java.org.apache.commons.collections4.functors.AllPredicate`

## Class: `java.org.apache.commons.collections4.functors.AllPredicate` / `public final class AllPredicate<T> extends AbstractQuantifierPredicate<T>`


        <!-- 684363b9-9f1d-11ea-84d6-333445793454 <=< ACCEPT -->
        Predicate implementation that returns true if all the
        predicates return true.
        If the array of predicates is empty, then this predicate returns true.
        <p>
        NOTE: In versions prior to 3.2 an array size of zero or one
        threw an exception.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 684363b9-9f1d-11ea-84d6-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.AllPredicate` / `private static final long serialVersionUID`


        <!-- 684363ba-9f1d-11ea-84d7-333445793454 <=< ACCEPT -->
        Serial version UID
        <!-- ACCEPT >=> 684363ba-9f1d-11ea-84d7-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.AllPredicate` / `public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)`


        <!-- 684363bb-9f1d-11ea-84d8-333445793454 <=< ACCEPT -->
        Factory to create the predicate.
        <p>
        If the array is size zero, the predicate always returns true.
        If the array is size one, then that predicate is returned.
        @param <T> the type that the predicate queries
        @param predicates  the predicates to check, cloned, not null
        @return the <code>all</code> predicate
        @throws NullPointerException if the predicates array is null
        @throws NullPointerException if any predicate in the array is null
        <!-- ACCEPT >=> 684363bb-9f1d-11ea-84d8-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.AllPredicate` / `public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)`


        <!-- 68438ab0-9f1d-11ea-84d9-333445793454 <=< ACCEPT -->
        Factory to create the predicate.
        <p>
        If the collection is size zero, the predicate always returns true.
        If the collection is size one, then that predicate is returned.
        @param <T> the type that the predicate queries
        @param predicates  the predicates to check, cloned, not null
        @return the <code>all</code> predicate
        @throws NullPointerException if the predicates array is null
        @throws NullPointerException if any predicate in the array is null
        <!-- ACCEPT >=> 68438ab0-9f1d-11ea-84d9-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.AllPredicate` / `public AllPredicate(final Predicate<? super T>... predicates)`


        <!-- 68438ab1-9f1d-11ea-84da-333445793454 <=< ACCEPT -->
        Constructor that performs no validation.
        Use <code>allPredicate</code> if you want that.
        @param predicates  the predicates to check, not cloned, not null
        <!-- ACCEPT >=> 68438ab1-9f1d-11ea-84da-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.AllPredicate` / `public boolean evaluate(final T object)`


        <!-- 68438ab2-9f1d-11ea-84db-333445793454 <=< ACCEPT -->
        Evaluates the predicate returning true if all predicates return true.
        @param object  the input object
        @return true if all decorated predicates return true
        <!-- ACCEPT >=> 68438ab2-9f1d-11ea-84db-333445793454 -->



# File: `java.org.apache.commons.collections4.functors.AndPredicate`

## Class: `java.org.apache.commons.collections4.functors.AndPredicate` / `public final class AndPredicate<T> implements PredicateDecorator<T>, Serializable`


        <!-- 68438ab3-9f1d-11ea-84dc-333445793454 <=< ACCEPT -->
        Predicate implementation that returns true if both the predicates return true.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 68438ab3-9f1d-11ea-84dc-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.AndPredicate` / `private static final long serialVersionUID`


        <!-- 68438ab4-9f1d-11ea-84dd-333445793454 <=< ACCEPT -->
        Serial version UID
        <!-- ACCEPT >=> 68438ab4-9f1d-11ea-84dd-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.AndPredicate` / `private final Predicate<? super T> iPredicate1`


        <!-- 68438ab5-9f1d-11ea-84de-333445793454 <=< ACCEPT -->
        The array of predicates to call
        <!-- ACCEPT >=> 68438ab5-9f1d-11ea-84de-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.AndPredicate` / `private final Predicate<? super T> iPredicate2`


        <!-- 68438ab6-9f1d-11ea-84df-333445793454 <=< ACCEPT -->
        The array of predicates to call
        <!-- ACCEPT >=> 68438ab6-9f1d-11ea-84df-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.AndPredicate` / `final Predicate<? super T> predicate2)`


        <!-- 68438ab7-9f1d-11ea-84e0-333445793454 <=< ACCEPT -->
        Factory to create the predicate.
        @param <T> the type that the predicate queries
        @param predicate1  the first predicate to check, not null
        @param predicate2  the second predicate to check, not null
        @return the <code>and</code> predicate
        @throws NullPointerException if either predicate is null
        <!-- ACCEPT >=> 68438ab7-9f1d-11ea-84e0-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.AndPredicate` / `public AndPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)`


        <!-- 68438ab8-9f1d-11ea-84e1-333445793454 <=< ACCEPT -->
        Constructor that performs no validation.
        Use <code>andPredicate</code> if you want that.
        @param predicate1  the first predicate to check, not null
        @param predicate2  the second predicate to check, not null
        <!-- ACCEPT >=> 68438ab8-9f1d-11ea-84e1-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.AndPredicate` / `public boolean evaluate(final T object)`


        <!-- 68438ab9-9f1d-11ea-84e2-333445793454 <=< ACCEPT -->
        Evaluates the predicate returning true if both predicates return true.
        @param object  the input object
        @return true if both decorated predicates return true
        <!-- ACCEPT >=> 68438ab9-9f1d-11ea-84e2-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.AndPredicate` / `public Predicate<? super T>[] getPredicates()`


        <!-- 68438aba-9f1d-11ea-84e3-333445793454 <=< ACCEPT -->
        Gets the two predicates being decorated as an array.
        @return the predicates
        @since 3.1
        <!-- ACCEPT >=> 68438aba-9f1d-11ea-84e3-333445793454 -->



# File: `java.org.apache.commons.collections4.functors.AnyPredicate`

## Class: `java.org.apache.commons.collections4.functors.AnyPredicate` / `public final class AnyPredicate<T> extends AbstractQuantifierPredicate<T>`


        <!-- 68438abb-9f1d-11ea-84e4-333445793454 <=< ACCEPT -->
        Predicate implementation that returns true if any of the
        predicates return true.
        If the array of predicates is empty, then this predicate returns false.
        <p>
        NOTE: In versions prior to 3.2 an array size of zero or one
        threw an exception.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 68438abb-9f1d-11ea-84e4-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.AnyPredicate` / `private static final long serialVersionUID`


        <!-- 68438abc-9f1d-11ea-84e5-333445793454 <=< ACCEPT -->
        Serial version UID
        <!-- ACCEPT >=> 68438abc-9f1d-11ea-84e5-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.AnyPredicate` / `public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)`


        <!-- 68438abd-9f1d-11ea-84e6-333445793454 <=< ACCEPT -->
        Factory to create the predicate.
        <p>
        If the array is size zero, the predicate always returns false.
        If the array is size one, then that predicate is returned.
        @param <T> the type that the predicate queries
        @param predicates  the predicates to check, cloned, not null
        @return the <code>any</code> predicate
        @throws NullPointerException if the predicates array is null
        @throws NullPointerException if any predicate in the array is null
        <!-- ACCEPT >=> 68438abd-9f1d-11ea-84e6-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.AnyPredicate` / `public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)`


        <!-- 68438abe-9f1d-11ea-84e7-333445793454 <=< ACCEPT -->
        Factory to create the predicate.
        <p>
        If the collection is size zero, the predicate always returns false.
        If the collection is size one, then that predicate is returned.
        @param <T> the type that the predicate queries
        @param predicates  the predicates to check, cloned, not null
        @return the <code>all</code> predicate
        @throws NullPointerException if the predicates array is null
        @throws NullPointerException if any predicate in the array is null
        <!-- ACCEPT >=> 68438abe-9f1d-11ea-84e7-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.AnyPredicate` / `public AnyPredicate(final Predicate<? super T>... predicates)`


        <!-- 68438abf-9f1d-11ea-84e8-333445793454 <=< ACCEPT -->
        Constructor that performs no validation.
        Use <code>anyPredicate</code> if you want that.
        @param predicates  the predicates to check, not cloned, not null
        <!-- ACCEPT >=> 68438abf-9f1d-11ea-84e8-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.AnyPredicate` / `public boolean evaluate(final T object)`


        <!-- 68438ac0-9f1d-11ea-84e9-333445793454 <=< ACCEPT -->
        Evaluates the predicate returning true if any predicate returns true.
        @param object  the input object
        @return true if any decorated predicate return true
        <!-- ACCEPT >=> 68438ac0-9f1d-11ea-84e9-333445793454 -->



# File: `java.org.apache.commons.collections4.functors.CatchAndRethrowClosure`

## Class: `java.org.apache.commons.collections4.functors.CatchAndRethrowClosure` / `public abstract class CatchAndRethrowClosure<E> implements Closure<E>`


        <!-- 68438ac1-9f1d-11ea-84ea-333445793454 <=< ACCEPT -->
        {@link Closure} that catches any checked exception and re-throws it as a
        {@link FunctorException} runtime exception. Example usage:
        <pre>
        // Create a catch and re-throw closure via anonymous subclass
        CatchAndRethrowClosure&lt;String&gt; writer = new ThrowingClosure() {
        private java.io.Writer out = // some writer
        protected void executeAndThrow(String input) throws IOException {
        out.write(input); // throwing of IOException allowed
        }
        };
        // use catch and re-throw closure
        java.util.List<String> strList = // some list
        try {
        CollctionUtils.forAllDo(strList, writer);
        } catch (FunctorException ex) {
        Throwable originalError = ex.getCause();
        // handle error
        }
        </pre>
        @since 4.0
        @version $Id$
        <!-- ACCEPT >=> 68438ac1-9f1d-11ea-84ea-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.CatchAndRethrowClosure` / `public void execute(final E input)`


        <!-- 68438ac2-9f1d-11ea-84eb-333445793454 <=< ACCEPT -->
        Execute this closure on the specified input object.
        @param input the input to execute on
        @throws FunctorException (runtime) if the closure execution resulted in a
        checked exception.
        <!-- ACCEPT >=> 68438ac2-9f1d-11ea-84eb-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.CatchAndRethrowClosure` / `protected abstract void executeAndThrow(E input) throws Throwable`


        <!-- 6843b1bc-9f1d-11ea-84ec-333445793454 <=< ACCEPT -->
        Execute this closure on the specified input object.
        @param input the input to execute on
        @throws Throwable if the closure execution resulted in a checked
        exception.
        <!-- ACCEPT >=> 6843b1bc-9f1d-11ea-84ec-333445793454 -->



# File: `java.org.apache.commons.collections4.functors.ChainedClosure`

## Class: `java.org.apache.commons.collections4.functors.ChainedClosure` / `public class ChainedClosure<E> implements Closure<E>, Serializable`


        <!-- 6843b1bd-9f1d-11ea-84ed-333445793454 <=< ACCEPT -->
        Closure implementation that chains the specified closures together.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 6843b1bd-9f1d-11ea-84ed-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.ChainedClosure` / `private static final long serialVersionUID`


        <!-- 6843b1be-9f1d-11ea-84ee-333445793454 <=< ACCEPT -->
        Serial version UID
        <!-- ACCEPT >=> 6843b1be-9f1d-11ea-84ee-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.ChainedClosure` / `private final Closure<? super E>[] iClosures`


        <!-- 6843b1bf-9f1d-11ea-84ef-333445793454 <=< ACCEPT -->
        The closures to call in turn
        <!-- ACCEPT >=> 6843b1bf-9f1d-11ea-84ef-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.ChainedClosure` / `public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)`


        <!-- 6843b1c0-9f1d-11ea-84f0-333445793454 <=< ACCEPT -->
        Factory method that performs validation and copies the parameter array.
        @param <E> the type that the closure acts on
        @param closures  the closures to chain, copied, no nulls
        @return the <code>chained</code> closure
        @throws NullPointerException if the closures array is null
        @throws NullPointerException if any closure in the array is null
        <!-- ACCEPT >=> 6843b1c0-9f1d-11ea-84f0-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.ChainedClosure` / `public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)`


        <!-- 6843b1c1-9f1d-11ea-84f1-333445793454 <=< ACCEPT -->
        Create a new Closure that calls each closure in turn, passing the
        result into the next closure. The ordering is that of the iterator()
        method on the collection.
        @param <E> the type that the closure acts on
        @param closures  a collection of closures to chain
        @return the <code>chained</code> closure
        @throws NullPointerException if the closures collection is null
        @throws NullPointerException if any closure in the collection is null
        <!-- ACCEPT >=> 6843b1c1-9f1d-11ea-84f1-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.ChainedClosure` / `private ChainedClosure(final boolean clone, final Closure<? super E>... closures)`


        <!-- 6843b1c2-9f1d-11ea-84f2-333445793454 <=< ACCEPT -->
        Hidden constructor for the use by the static factory methods.
        @param clone  if {@code true} the input argument will be cloned
        @param closures  the closures to chain, no nulls
        <!-- ACCEPT >=> 6843b1c2-9f1d-11ea-84f2-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.ChainedClosure` / `public ChainedClosure(final Closure<? super E>... closures)`


        <!-- 6843b1c3-9f1d-11ea-84f3-333445793454 <=< ACCEPT -->
        Constructor that performs no validation.
        Use <code>chainedClosure</code> if you want that.
        @param closures  the closures to chain, copied, no nulls
        <!-- ACCEPT >=> 6843b1c3-9f1d-11ea-84f3-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.ChainedClosure` / `public void execute(final E input)`


        <!-- 6843b1c4-9f1d-11ea-84f4-333445793454 <=< ACCEPT -->
        Execute a list of closures.
        @param input  the input object passed to each closure
        <!-- ACCEPT >=> 6843b1c4-9f1d-11ea-84f4-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.ChainedClosure` / `public Closure<? super E>[] getClosures()`


        <!-- 6843b1c5-9f1d-11ea-84f5-333445793454 <=< ACCEPT -->
        Gets the closures.
        @return a copy of the closures
        @since 3.1
        <!-- ACCEPT >=> 6843b1c5-9f1d-11ea-84f5-333445793454 -->



# File: `java.org.apache.commons.collections4.functors.ChainedTransformer`

## Class: `java.org.apache.commons.collections4.functors.ChainedTransformer` / `public class ChainedTransformer<T> implements Transformer<T, T>, Serializable`


        <!-- 6843b1c6-9f1d-11ea-84f6-333445793454 <=< ACCEPT -->
        Transformer implementation that chains the specified transformers together.
        <p>
        The input object is passed to the first transformer. The transformed result
        is passed to the second transformer and so on.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 6843b1c6-9f1d-11ea-84f6-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.ChainedTransformer` / `private static final long serialVersionUID`


        <!-- 6843b1c7-9f1d-11ea-84f7-333445793454 <=< ACCEPT -->
        Serial version UID
        <!-- ACCEPT >=> 6843b1c7-9f1d-11ea-84f7-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.ChainedTransformer` / `private final Transformer<? super T, ? extends T>[] iTransformers`


        <!-- 6843b1c8-9f1d-11ea-84f8-333445793454 <=< ACCEPT -->
        The transformers to call in turn
        <!-- ACCEPT >=> 6843b1c8-9f1d-11ea-84f8-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.ChainedTransformer` / `public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)`


        <!-- 6843b1c9-9f1d-11ea-84f9-333445793454 <=< ACCEPT -->
        Factory method that performs validation and copies the parameter array.
        @param <T>  the object type
        @param transformers  the transformers to chain, copied, no nulls
        @return the <code>chained</code> transformer
        @throws NullPointerException if the transformers array is null
        @throws NullPointerException if any transformer in the array is null
        <!-- ACCEPT >=> 6843b1c9-9f1d-11ea-84f9-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.ChainedTransformer` / `final Collection<? extends Transformer<? super T, ? extends T>> transformers)`


        <!-- 6843b1ca-9f1d-11ea-84fa-333445793454 <=< ACCEPT -->
        Create a new Transformer that calls each transformer in turn, passing the
        result into the next transformer. The ordering is that of the iterator()
        method on the collection.
        @param <T>  the object type
        @param transformers  a collection of transformers to chain
        @return the <code>chained</code> transformer
        @throws NullPointerException if the transformers collection is null
        @throws NullPointerException if any transformer in the collection is null
        <!-- ACCEPT >=> 6843b1ca-9f1d-11ea-84fa-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.ChainedTransformer` / `private ChainedTransformer(final boolean clone, final Transformer<? super T, ? extends T>[] transformers)`


        <!-- 6843b1cb-9f1d-11ea-84fb-333445793454 <=< ACCEPT -->
        Hidden constructor for the use by the static factory methods.
        @param clone  if {@code true} the input argument will be cloned
        @param transformers  the transformers to chain, no nulls
        <!-- ACCEPT >=> 6843b1cb-9f1d-11ea-84fb-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.ChainedTransformer` / `public ChainedTransformer(final Transformer<? super T, ? extends T>... transformers)`


        <!-- 6843b1cc-9f1d-11ea-84fc-333445793454 <=< ACCEPT -->
        Constructor that performs no validation.
        Use <code>chainedTransformer</code> if you want that.
        @param transformers  the transformers to chain, copied, no nulls
        <!-- ACCEPT >=> 6843b1cc-9f1d-11ea-84fc-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.ChainedTransformer` / `public T transform(T object)`


        <!-- 6843d8c2-9f1d-11ea-84fd-333445793454 <=< ACCEPT -->
        Transforms the input to result via each decorated transformer
        @param object  the input object passed to the first transformer
        @return the transformed result
        <!-- ACCEPT >=> 6843d8c2-9f1d-11ea-84fd-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.ChainedTransformer` / `public Transformer<? super T, ? extends T>[] getTransformers()`


        <!-- 6843d8c3-9f1d-11ea-84fe-333445793454 <=< ACCEPT -->
        Gets the transformers.
        @return a copy of the transformers
        @since 3.1
        <!-- ACCEPT >=> 6843d8c3-9f1d-11ea-84fe-333445793454 -->



# File: `java.org.apache.commons.collections4.functors.CloneTransformer`

## Class: `java.org.apache.commons.collections4.functors.CloneTransformer` / `public class CloneTransformer<T> implements Transformer<T, T>`


        <!-- 6843d8c4-9f1d-11ea-84ff-333445793454 <=< ACCEPT -->
        Transformer implementation that returns a clone of the input object.
        <p>
        Clone is performed using <code>PrototypeFactory.prototypeFactory(input).create()</code>.
        <p>
        <b>WARNING:</b> from v4.1 onwards this class will <b>not</b> be serializable anymore
        in order to prevent potential remote code execution exploits. Please refer to
        <a href="https://issues.apache.org/jira/browse/COLLECTIONS-580">COLLECTIONS-580</a>
        for more details.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 6843d8c4-9f1d-11ea-84ff-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.CloneTransformer` / `public static final Transformer INSTANCE`


        <!-- 6843d8c5-9f1d-11ea-8500-333445793454 <=< ACCEPT -->
        Singleton predicate instance
        <!-- ACCEPT >=> 6843d8c5-9f1d-11ea-8500-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.CloneTransformer` / `public static <T> Transformer<T, T> cloneTransformer()`


        <!-- 6843d8c6-9f1d-11ea-8501-333445793454 <=< ACCEPT -->
        Factory returning the singleton instance.
        @param <T>  the type of the objects to be cloned
        @return the singleton instance
        @since 3.1
        <!-- ACCEPT >=> 6843d8c6-9f1d-11ea-8501-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.CloneTransformer` / `private CloneTransformer()`


        <!-- 6843d8c7-9f1d-11ea-8502-333445793454 <=< ACCEPT -->
        Constructor.
        <!-- ACCEPT >=> 6843d8c7-9f1d-11ea-8502-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.CloneTransformer` / `public T transform(final T input)`


        <!-- 6843d8c8-9f1d-11ea-8503-333445793454 <=< ACCEPT -->
        Transforms the input to result by cloning it.
        @param input  the input object to transform
        @return the transformed result
        <!-- ACCEPT >=> 6843d8c8-9f1d-11ea-8503-333445793454 -->



# File: `java.org.apache.commons.collections4.functors.ClosureTransformer`

## Class: `java.org.apache.commons.collections4.functors.ClosureTransformer` / `public class ClosureTransformer<T> implements Transformer<T, T>, Serializable`


        <!-- 6843d8c9-9f1d-11ea-8504-333445793454 <=< ACCEPT -->
        Transformer implementation that calls a Closure using the input object
        and then returns the input.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 6843d8c9-9f1d-11ea-8504-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.ClosureTransformer` / `private static final long serialVersionUID`


        <!-- 6843d8ca-9f1d-11ea-8505-333445793454 <=< ACCEPT -->
        Serial version UID
        <!-- ACCEPT >=> 6843d8ca-9f1d-11ea-8505-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.ClosureTransformer` / `private final Closure<? super T> iClosure`


        <!-- 6843d8cb-9f1d-11ea-8506-333445793454 <=< ACCEPT -->
        The closure to wrap
        <!-- ACCEPT >=> 6843d8cb-9f1d-11ea-8506-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.ClosureTransformer` / `public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure)`


        <!-- 6843d8cc-9f1d-11ea-8507-333445793454 <=< ACCEPT -->
        Factory method that performs validation.
        @param <T>  the type of the object to transform
        @param closure  the closure to call, not null
        @return the <code>closure</code> transformer
        @throws NullPointerException if the closure is null
        <!-- ACCEPT >=> 6843d8cc-9f1d-11ea-8507-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.ClosureTransformer` / `public ClosureTransformer(final Closure<? super T> closure)`


        <!-- 6843d8cd-9f1d-11ea-8508-333445793454 <=< ACCEPT -->
        Constructor that performs no validation.
        Use <code>closureTransformer</code> if you want that.
        @param closure  the closure to call, not null
        <!-- ACCEPT >=> 6843d8cd-9f1d-11ea-8508-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.ClosureTransformer` / `public T transform(final T input)`


        <!-- 6843d8ce-9f1d-11ea-8509-333445793454 <=< ACCEPT -->
        Transforms the input to result by executing a closure.
        @param input  the input object to transform
        @return the transformed result
        <!-- ACCEPT >=> 6843d8ce-9f1d-11ea-8509-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.ClosureTransformer` / `public Closure<? super T> getClosure()`


        <!-- 6843d8cf-9f1d-11ea-850a-333445793454 <=< ACCEPT -->
        Gets the closure.
        @return the closure
        @since 3.1
        <!-- ACCEPT >=> 6843d8cf-9f1d-11ea-850a-333445793454 -->



# File: `java.org.apache.commons.collections4.functors.ComparatorPredicate`

## Class: `java.org.apache.commons.collections4.functors.ComparatorPredicate` / `public class ComparatorPredicate<T> implements Predicate<T>, Serializable`


        <!-- 6843d8d0-9f1d-11ea-850b-333445793454 <=< ACCEPT -->
        Predicate that compares the input object with the one stored in the predicate using a comparator.
        In addition, the comparator result can be evaluated in accordance to a supplied criterion value.
        In order to demonstrate the use of the predicate, the following variables are declared:
        <pre>
        Integer ONE = Integer.valueOf(1);
        Integer TWO = Integer.valueOf(2);
        Comparator comparator = new Comparator() {
        public int compare(Object first, Object second) {
        return ((Integer) second) - ((Integer) first);
        }
        };
        </pre>
        Using the declared variables, the <code>ComparatorPredicate</code> can be used used in the
        following way:
        <pre>
        ComparatorPredicate.comparatorPredicate(ONE, comparator).evaluate(TWO);
        </pre>
        The input variable <code>TWO</code> in compared to the stored variable <code>ONE</code> using
        the supplied <code>comparator</code>. This is the default usage of the predicate and will return
        <code>true</code> if the underlying comparator returns <code>0</code>. In addition to the default
        usage of the predicate, it is possible to evaluate the comparator's result in several ways. The
        following {@link Criterion} enumeration values are provided by the predicate:
        </p>
        <ul>
        <li>EQUAL</li>
        <li>GREATER</li>
        <li>GREATER_OR_EQUAL</li>
        <li>LESS</li>
        <li>LESS_OR_EQUAL</li>
        </ul>
        The following examples demonstrates how these constants can be used in order to manipulate the
        evaluation of a comparator result.
        <pre>
        ComparatorPredicate.comparatorPredicate(ONE, comparator,<b>ComparatorPredicate.Criterion.GREATER</b>).evaluate(TWO);
        </pre>
        The input variable TWO is compared to the stored variable ONE using the supplied <code>comparator</code>
        using the <code>GREATER</code> evaluation criterion constant. This instructs the predicate to
        return <code>true</code> if the comparator returns a value greater than <code>0</code>.
        @since 4.0
        @version $Id$
        <!-- ACCEPT >=> 6843d8d0-9f1d-11ea-850b-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.ComparatorPredicate` / `private final T object`


        <!-- 6843d8d1-9f1d-11ea-850c-333445793454 <=< ACCEPT -->
        The internal object to compare with
        <!-- ACCEPT >=> 6843d8d1-9f1d-11ea-850c-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.ComparatorPredicate` / `private final Comparator<T> comparator`


        <!-- 6843ffce-9f1d-11ea-850d-333445793454 <=< ACCEPT -->
        The comparator to use for comparison
        <!-- ACCEPT >=> 6843ffce-9f1d-11ea-850d-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.ComparatorPredicate` / `private final Criterion criterion`


        <!-- 6843ffcf-9f1d-11ea-850e-333445793454 <=< ACCEPT -->
        The comparison evaluation criterion to use
        <!-- ACCEPT >=> 6843ffcf-9f1d-11ea-850e-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.ComparatorPredicate` / `public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator)`


        <!-- 6843ffd0-9f1d-11ea-850f-333445793454 <=< ACCEPT -->
        Factory to create the comparator predicate
        @param <T> the type that the predicate queries
        @param object  the object to compare to
        @param comparator  the comparator to use for comparison
        @return the predicate
        @throws NullPointerException if comparator is null
        <!-- ACCEPT >=> 6843ffd0-9f1d-11ea-850f-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.ComparatorPredicate` / `final Criterion criterion)`


        <!-- 6843ffd1-9f1d-11ea-8510-333445793454 <=< ACCEPT -->
        Factory to create the comparator predicate
        @param <T> the type that the predicate queries
        @param object  the object to compare to
        @param comparator  the comparator to use for comparison
        @param criterion  the criterion to use to evaluate comparison
        @return the predicate
        @throws NullPointerException if comparator or criterion is null
        <!-- ACCEPT >=> 6843ffd1-9f1d-11ea-8510-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.ComparatorPredicate` / `public ComparatorPredicate(final T object, final Comparator<T> comparator, final Criterion criterion)`


        <!-- 6843ffd2-9f1d-11ea-8511-333445793454 <=< ACCEPT -->
        Constructor that performs no validation.
        Use <code>comparatorPredicate</code> if you want that.
        @param object  the object to compare to
        @param comparator  the comparator to use for comparison
        @param criterion  the criterion to use to evaluate comparison
        <!-- ACCEPT >=> 6843ffd2-9f1d-11ea-8511-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.ComparatorPredicate` / `public boolean evaluate(final T target)`


        <!-- 6843ffd3-9f1d-11ea-8512-333445793454 <=< ACCEPT -->
        Evaluates the predicate. The predicate evaluates to <code>true</code> in the following cases:
        <ul>
        <li><code>comparator.compare(object, input) == 0 && criterion == EQUAL</code></li>
        <li><code>comparator.compare(object, input) < 0 && criterion == LESS</code></li>
        <li><code>comparator.compare(object, input) > 0 && criterion == GREATER</code></li>
        <li><code>comparator.compare(object, input) >= 0 && criterion == GREATER_OR_EQUAL</code></li>
        <li><code>comparator.compare(object, input) <= 0 && criterion == LESS_OR_EQUAL</code></li>
        </ul>
        @see org.apache.commons.collections4.Predicate#evaluate(java.lang.Object)
        @see java.util.Comparator#compare(java.lang.Object first, java.lang.Object second)
        @param target  the target object to compare to
        @return {@code true} if the comparison succeeds according to the selected criterion
        @throws IllegalStateException if the criterion is invalid (really not possible)
        <!-- ACCEPT >=> 6843ffd3-9f1d-11ea-8512-333445793454 -->



# File: `java.org.apache.commons.collections4.functors.ConstantFactory`

## Class: `java.org.apache.commons.collections4.functors.ConstantFactory` / `public class ConstantFactory<T> implements Factory<T>, Serializable`


        <!-- 6843ffd4-9f1d-11ea-8513-333445793454 <=< ACCEPT -->
        Factory implementation that returns the same constant each time.
        <p>
        No check is made that the object is immutable. In general, only immutable
        objects should use the constant factory. Mutable objects should
        use the prototype factory.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 6843ffd4-9f1d-11ea-8513-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.ConstantFactory` / `private static final long serialVersionUID`


        <!-- 6843ffd5-9f1d-11ea-8514-333445793454 <=< ACCEPT -->
        Serial version UID
        <!-- ACCEPT >=> 6843ffd5-9f1d-11ea-8514-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.ConstantFactory` / `public static final Factory NULL_INSTANCE`


        <!-- 6843ffd6-9f1d-11ea-8515-333445793454 <=< ACCEPT -->
        Returns null each time
        <!-- ACCEPT >=> 6843ffd6-9f1d-11ea-8515-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.ConstantFactory` / `private final T iConstant`


        <!-- 6843ffd7-9f1d-11ea-8516-333445793454 <=< ACCEPT -->
        The closures to call in turn
        <!-- ACCEPT >=> 6843ffd7-9f1d-11ea-8516-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.ConstantFactory` / `public static <T> Factory<T> constantFactory(final T constantToReturn)`


        <!-- 6843ffd8-9f1d-11ea-8517-333445793454 <=< ACCEPT -->
        Factory method that performs validation.
        @param <T>  the type of the constant
        @param constantToReturn  the constant object to return each time in the factory
        @return the <code>constant</code> factory.
        <!-- ACCEPT >=> 6843ffd8-9f1d-11ea-8517-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.ConstantFactory` / `public ConstantFactory(final T constantToReturn)`


        <!-- 6843ffd9-9f1d-11ea-8518-333445793454 <=< ACCEPT -->
        Constructor that performs no validation.
        Use <code>constantFactory</code> if you want that.
        @param constantToReturn  the constant to return each time
        <!-- ACCEPT >=> 6843ffd9-9f1d-11ea-8518-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.ConstantFactory` / `public T create()`


        <!-- 6843ffda-9f1d-11ea-8519-333445793454 <=< ACCEPT -->
        Always return constant.
        @return the stored constant value
        <!-- ACCEPT >=> 6843ffda-9f1d-11ea-8519-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.ConstantFactory` / `public T getConstant()`


        <!-- 6843ffdb-9f1d-11ea-851a-333445793454 <=< ACCEPT -->
        Gets the constant.
        @return the constant
        @since 3.1
        <!-- ACCEPT >=> 6843ffdb-9f1d-11ea-851a-333445793454 -->



# File: `java.org.apache.commons.collections4.functors.ConstantTransformer`

## Class: `java.org.apache.commons.collections4.functors.ConstantTransformer` / `public class ConstantTransformer<I, O> implements Transformer<I, O>, Serializable`


        <!-- 6843ffdc-9f1d-11ea-851b-333445793454 <=< ACCEPT -->
        Transformer implementation that returns the same constant each time.
        <p>
        No check is made that the object is immutable. In general, only immutable
        objects should use the constant factory. Mutable objects should
        use the prototype factory.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 6843ffdc-9f1d-11ea-851b-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.ConstantTransformer` / `private static final long serialVersionUID`


        <!-- 6843ffdd-9f1d-11ea-851c-333445793454 <=< ACCEPT -->
        Serial version UID
        <!-- ACCEPT >=> 6843ffdd-9f1d-11ea-851c-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.ConstantTransformer` / `public static final Transformer NULL_INSTANCE`


        <!-- 6843ffde-9f1d-11ea-851d-333445793454 <=< ACCEPT -->
        Returns null each time
        <!-- ACCEPT >=> 6843ffde-9f1d-11ea-851d-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.ConstantTransformer` / `private final O iConstant`


        <!-- 684426db-9f1d-11ea-851e-333445793454 <=< ACCEPT -->
        The closures to call in turn
        <!-- ACCEPT >=> 684426db-9f1d-11ea-851e-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.ConstantTransformer` / `public static <I, O> Transformer<I, O> nullTransformer()`


        <!-- 684426dc-9f1d-11ea-851f-333445793454 <=< ACCEPT -->
        Get a typed null instance.
        @param <I>  the input type
        @param <O>  the output type
        @return Transformer<I, O> that always returns null.
        <!-- ACCEPT >=> 684426dc-9f1d-11ea-851f-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.ConstantTransformer` / `public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)`


        <!-- 684426dd-9f1d-11ea-8520-333445793454 <=< ACCEPT -->
        Transformer method that performs validation.
        @param <I>  the input type
        @param <O>  the output type
        @param constantToReturn  the constant object to return each time in the factory
        @return the <code>constant</code> factory.
        <!-- ACCEPT >=> 684426dd-9f1d-11ea-8520-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.ConstantTransformer` / `public ConstantTransformer(final O constantToReturn)`


        <!-- 684426de-9f1d-11ea-8521-333445793454 <=< ACCEPT -->
        Constructor that performs no validation.
        Use <code>constantTransformer</code> if you want that.
        @param constantToReturn  the constant to return each time
        <!-- ACCEPT >=> 684426de-9f1d-11ea-8521-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.ConstantTransformer` / `public O transform(final I input)`


        <!-- 684426df-9f1d-11ea-8522-333445793454 <=< ACCEPT -->
        Transforms the input by ignoring it and returning the stored constant instead.
        @param input  the input object which is ignored
        @return the stored constant
        <!-- ACCEPT >=> 684426df-9f1d-11ea-8522-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.ConstantTransformer` / `public O getConstant()`


        <!-- 684426e0-9f1d-11ea-8523-333445793454 <=< ACCEPT -->
        Gets the constant.
        @return the constant
        @since 3.1
        <!-- ACCEPT >=> 684426e0-9f1d-11ea-8523-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.ConstantTransformer` / `public boolean equals(final Object obj)`


        <!-- 684426e1-9f1d-11ea-8524-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <!-- ACCEPT >=> 684426e1-9f1d-11ea-8524-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.ConstantTransformer` / `public int hashCode()`


        <!-- 684426e2-9f1d-11ea-8525-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <!-- ACCEPT >=> 684426e2-9f1d-11ea-8525-333445793454 -->



# File: `java.org.apache.commons.collections4.functors.DefaultEquator`

## Class: `java.org.apache.commons.collections4.functors.DefaultEquator` / `public class DefaultEquator<T> implements Equator<T>, Serializable`


        <!-- 684426e3-9f1d-11ea-8526-333445793454 <=< ACCEPT -->
        Default {@link Equator} implementation.
        @param <T>  the types of object this {@link Equator} can evaluate.
        @since 4.0
        @version $Id$
        <!-- ACCEPT >=> 684426e3-9f1d-11ea-8526-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.DefaultEquator` / `private static final long serialVersionUID`


        <!-- 684426e4-9f1d-11ea-8527-333445793454 <=< ACCEPT -->
        Serial version UID
        <!-- ACCEPT >=> 684426e4-9f1d-11ea-8527-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.DefaultEquator` / `public static final DefaultEquator INSTANCE`


        <!-- 684426e5-9f1d-11ea-8528-333445793454 <=< ACCEPT -->
        Static instance
        <!-- ACCEPT >=> 684426e5-9f1d-11ea-8528-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.DefaultEquator` / `public static final int HASHCODE_NULL`


        <!-- 684426e6-9f1d-11ea-8529-333445793454 <=< ACCEPT -->
        Hashcode used for <code>null</code> objects.
        <!-- ACCEPT >=> 684426e6-9f1d-11ea-8529-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.DefaultEquator` / `public static <T> DefaultEquator<T> defaultEquator()`


        <!-- 684426e7-9f1d-11ea-852a-333445793454 <=< ACCEPT -->
        Factory returning the typed singleton instance.
        @param <T>  the object type
        @return the singleton instance
        <!-- ACCEPT >=> 684426e7-9f1d-11ea-852a-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.DefaultEquator` / `private DefaultEquator()`


        <!-- 684426e8-9f1d-11ea-852b-333445793454 <=< ACCEPT -->
        Restricted constructor.
        <!-- ACCEPT >=> 684426e8-9f1d-11ea-852b-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.DefaultEquator` / `public boolean equate(final T o1, final T o2)`


        <!-- 684426e9-9f1d-11ea-852c-333445793454 <=< ACCEPT -->
        {@inheritDoc} Delegates to {@link Object#equals(Object)}.
        <!-- ACCEPT >=> 684426e9-9f1d-11ea-852c-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.DefaultEquator` / `public int hash(final T o)`


        <!-- 684426ea-9f1d-11ea-852d-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        @return <code>o.hashCode()</code> if <code>o</code> is non-
        <code>null</code>, else {@link #HASHCODE_NULL}.
        <!-- ACCEPT >=> 684426ea-9f1d-11ea-852d-333445793454 -->



# File: `java.org.apache.commons.collections4.functors.EqualPredicate`

## Class: `java.org.apache.commons.collections4.functors.EqualPredicate` / `public final class EqualPredicate<T> implements Predicate<T>, Serializable`


        <!-- 684426eb-9f1d-11ea-852e-333445793454 <=< ACCEPT -->
        Predicate implementation that returns true if the input is the same object
        as the one stored in this predicate by equals.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 684426eb-9f1d-11ea-852e-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.EqualPredicate` / `private static final long serialVersionUID`


        <!-- 684426ec-9f1d-11ea-852f-333445793454 <=< ACCEPT -->
        Serial version UID
        <!-- ACCEPT >=> 684426ec-9f1d-11ea-852f-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.EqualPredicate` / `private final T iValue`


        <!-- 684426ed-9f1d-11ea-8530-333445793454 <=< ACCEPT -->
        The value to compare to
        <!-- ACCEPT >=> 684426ed-9f1d-11ea-8530-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.EqualPredicate` / `private final Equator<T> equator`


        <!-- 684426ee-9f1d-11ea-8531-333445793454 <=< ACCEPT -->
        The equator to use for comparison
        <!-- ACCEPT >=> 684426ee-9f1d-11ea-8531-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.EqualPredicate` / `public static <T> Predicate<T> equalPredicate(final T object)`


        <!-- 684426ef-9f1d-11ea-8532-333445793454 <=< ACCEPT -->
        Factory to create the predicate.
        @param <T> the type that the predicate queries
        @param object  the object to compare to
        @return the predicate
        <!-- ACCEPT >=> 684426ef-9f1d-11ea-8532-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.EqualPredicate` / `public static <T> Predicate<T> equalPredicate(final T object, final Equator<T> equator)`


        <!-- 68444ddf-9f1d-11ea-8533-333445793454 <=< ACCEPT -->
        Factory to create the identity predicate.
        @param <T> the type that the predicate queries
        @param object  the object to compare to
        @param equator  the equator to use for comparison
        @return the predicate
        @since 4.0
        <!-- ACCEPT >=> 68444ddf-9f1d-11ea-8533-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.EqualPredicate` / `public EqualPredicate(final T object)`


        <!-- 68444de0-9f1d-11ea-8534-333445793454 <=< ACCEPT -->
        Constructor that performs no validation.
        Use <code>equalPredicate</code> if you want that.
        @param object  the object to compare to
        <!-- ACCEPT >=> 68444de0-9f1d-11ea-8534-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.EqualPredicate` / `public EqualPredicate(final T object, final Equator<T> equator)`


        <!-- 68444de1-9f1d-11ea-8535-333445793454 <=< ACCEPT -->
        Constructor that performs no validation.
        Use <code>equalPredicate</code> if you want that.
        @param object  the object to compare to
        @param equator  the equator to use for comparison
        @since 4.0
        <!-- ACCEPT >=> 68444de1-9f1d-11ea-8535-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.EqualPredicate` / `public boolean evaluate(final T object)`


        <!-- 68444de2-9f1d-11ea-8536-333445793454 <=< ACCEPT -->
        Evaluates the predicate returning true if the input equals the stored value.
        @param object  the input object
        @return true if input object equals stored value
        <!-- ACCEPT >=> 68444de2-9f1d-11ea-8536-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.EqualPredicate` / `public Object getValue()`


        <!-- 68444de3-9f1d-11ea-8537-333445793454 <=< ACCEPT -->
        Gets the value.
        @return the value
        @since 3.1
        <!-- ACCEPT >=> 68444de3-9f1d-11ea-8537-333445793454 -->



# File: `java.org.apache.commons.collections4.functors.ExceptionClosure`

## Class: `java.org.apache.commons.collections4.functors.ExceptionClosure` / `public final class ExceptionClosure<E> implements Closure<E>, Serializable`


        <!-- 68444de4-9f1d-11ea-8538-333445793454 <=< ACCEPT -->
        Closure implementation that always throws an exception.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 68444de4-9f1d-11ea-8538-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.ExceptionClosure` / `private static final long serialVersionUID`


        <!-- 68444de5-9f1d-11ea-8539-333445793454 <=< ACCEPT -->
        Serial version UID
        <!-- ACCEPT >=> 68444de5-9f1d-11ea-8539-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.ExceptionClosure` / `public static final Closure INSTANCE`


        <!-- 68444de6-9f1d-11ea-853a-333445793454 <=< ACCEPT -->
        Singleton predicate instance
        <!-- ACCEPT >=> 68444de6-9f1d-11ea-853a-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.ExceptionClosure` / `public static <E> Closure<E> exceptionClosure()`


        <!-- 68444de7-9f1d-11ea-853b-333445793454 <=< ACCEPT -->
        Factory returning the singleton instance.
        @param <E> the type that the closure acts on
        @return the singleton instance
        @since 3.1
        <!-- ACCEPT >=> 68444de7-9f1d-11ea-853b-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.ExceptionClosure` / `private ExceptionClosure()`


        <!-- 68444de8-9f1d-11ea-853c-333445793454 <=< ACCEPT -->
        Restricted constructor.
        <!-- ACCEPT >=> 68444de8-9f1d-11ea-853c-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.ExceptionClosure` / `public void execute(final E input)`


        <!-- 68444de9-9f1d-11ea-853d-333445793454 <=< ACCEPT -->
        Always throw an exception.
        @param input  the input object
        @throws FunctorException always
        <!-- ACCEPT >=> 68444de9-9f1d-11ea-853d-333445793454 -->



# File: `java.org.apache.commons.collections4.functors.ExceptionFactory`

## Class: `java.org.apache.commons.collections4.functors.ExceptionFactory` / `public final class ExceptionFactory<T> implements Factory<T>, Serializable`


        <!-- 68444dea-9f1d-11ea-853e-333445793454 <=< ACCEPT -->
        Factory implementation that always throws an exception.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 68444dea-9f1d-11ea-853e-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.ExceptionFactory` / `private static final long serialVersionUID`


        <!-- 68444deb-9f1d-11ea-853f-333445793454 <=< ACCEPT -->
        Serial version UID
        <!-- ACCEPT >=> 68444deb-9f1d-11ea-853f-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.ExceptionFactory` / `public static final Factory INSTANCE`


        <!-- 68444dec-9f1d-11ea-8540-333445793454 <=< ACCEPT -->
        Singleton predicate instance
        <!-- ACCEPT >=> 68444dec-9f1d-11ea-8540-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.ExceptionFactory` / `public static <T> Factory<T> exceptionFactory()`


        <!-- 68444ded-9f1d-11ea-8541-333445793454 <=< ACCEPT -->
        Factory returning the singleton instance.
        @param <T>  the type the factory creates
        @return the singleton instance
        @since 3.1
        <!-- ACCEPT >=> 68444ded-9f1d-11ea-8541-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.ExceptionFactory` / `private ExceptionFactory()`


        <!-- 68444dee-9f1d-11ea-8542-333445793454 <=< ACCEPT -->
        Restricted constructor.
        <!-- ACCEPT >=> 68444dee-9f1d-11ea-8542-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.ExceptionFactory` / `public T create()`


        <!-- 68444def-9f1d-11ea-8543-333445793454 <=< ACCEPT -->
        Always throws an exception.
        @return never
        @throws FunctorException always
        <!-- ACCEPT >=> 68444def-9f1d-11ea-8543-333445793454 -->



# File: `java.org.apache.commons.collections4.functors.ExceptionPredicate`

## Class: `java.org.apache.commons.collections4.functors.ExceptionPredicate` / `public final class ExceptionPredicate<T> implements Predicate<T>, Serializable`


        <!-- 68444df0-9f1d-11ea-8544-333445793454 <=< ACCEPT -->
        Predicate implementation that always throws an exception.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 68444df0-9f1d-11ea-8544-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.ExceptionPredicate` / `private static final long serialVersionUID`


        <!-- 68444df1-9f1d-11ea-8545-333445793454 <=< ACCEPT -->
        Serial version UID
        <!-- ACCEPT >=> 68444df1-9f1d-11ea-8545-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.ExceptionPredicate` / `public static final Predicate INSTANCE`


        <!-- 68444df2-9f1d-11ea-8546-333445793454 <=< ACCEPT -->
        Singleton predicate instance
        <!-- ACCEPT >=> 68444df2-9f1d-11ea-8546-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.ExceptionPredicate` / `public static <T> Predicate<T> exceptionPredicate()`


        <!-- 68444df3-9f1d-11ea-8547-333445793454 <=< ACCEPT -->
        Factory returning the singleton instance.
        @param <T>  the object type
        @return the singleton instance
        @since 3.1
        <!-- ACCEPT >=> 68444df3-9f1d-11ea-8547-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.ExceptionPredicate` / `private ExceptionPredicate()`


        <!-- 684474f1-9f1d-11ea-8548-333445793454 <=< ACCEPT -->
        Restricted constructor.
        <!-- ACCEPT >=> 684474f1-9f1d-11ea-8548-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.ExceptionPredicate` / `public boolean evaluate(final T object)`


        <!-- 684474f2-9f1d-11ea-8549-333445793454 <=< ACCEPT -->
        Evaluates the predicate always throwing an exception.
        @param object  the input object
        @return never
        @throws FunctorException always
        <!-- ACCEPT >=> 684474f2-9f1d-11ea-8549-333445793454 -->



# File: `java.org.apache.commons.collections4.functors.ExceptionTransformer`

## Class: `java.org.apache.commons.collections4.functors.ExceptionTransformer` / `public final class ExceptionTransformer<I, O> implements Transformer<I, O>, Serializable`


        <!-- 684474f3-9f1d-11ea-854a-333445793454 <=< ACCEPT -->
        Transformer implementation that always throws an exception.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 684474f3-9f1d-11ea-854a-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.ExceptionTransformer` / `private static final long serialVersionUID`


        <!-- 684474f4-9f1d-11ea-854b-333445793454 <=< ACCEPT -->
        Serial version UID
        <!-- ACCEPT >=> 684474f4-9f1d-11ea-854b-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.ExceptionTransformer` / `public static final Transformer INSTANCE`


        <!-- 684474f5-9f1d-11ea-854c-333445793454 <=< ACCEPT -->
        Singleton predicate instance
        <!-- ACCEPT >=> 684474f5-9f1d-11ea-854c-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.ExceptionTransformer` / `public static <I, O> Transformer<I, O> exceptionTransformer()`


        <!-- 684474f6-9f1d-11ea-854d-333445793454 <=< ACCEPT -->
        Factory returning the singleton instance.
        @param <I>  the input type
        @param <O>  the output type
        @return the singleton instance
        @since 3.1
        <!-- ACCEPT >=> 684474f6-9f1d-11ea-854d-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.ExceptionTransformer` / `private ExceptionTransformer()`


        <!-- 684474f7-9f1d-11ea-854e-333445793454 <=< ACCEPT -->
        Restricted constructor.
        <!-- ACCEPT >=> 684474f7-9f1d-11ea-854e-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.ExceptionTransformer` / `public O transform(final I input)`


        <!-- 684474f8-9f1d-11ea-854f-333445793454 <=< ACCEPT -->
        Transforms the input to result by cloning it.
        @param input  the input object to transform
        @return never
        @throws FunctorException always
        <!-- ACCEPT >=> 684474f8-9f1d-11ea-854f-333445793454 -->



# File: `java.org.apache.commons.collections4.functors.FactoryTransformer`

## Class: `java.org.apache.commons.collections4.functors.FactoryTransformer` / `public class FactoryTransformer<I, O> implements Transformer<I, O>, Serializable`


        <!-- 684474f9-9f1d-11ea-8550-333445793454 <=< ACCEPT -->
        Transformer implementation that calls a Factory and returns the result.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 684474f9-9f1d-11ea-8550-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.FactoryTransformer` / `private static final long serialVersionUID`


        <!-- 684474fa-9f1d-11ea-8551-333445793454 <=< ACCEPT -->
        Serial version UID
        <!-- ACCEPT >=> 684474fa-9f1d-11ea-8551-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.FactoryTransformer` / `private final Factory<? extends O> iFactory`


        <!-- 684474fb-9f1d-11ea-8552-333445793454 <=< ACCEPT -->
        The factory to wrap
        <!-- ACCEPT >=> 684474fb-9f1d-11ea-8552-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.FactoryTransformer` / `public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory)`


        <!-- 684474fc-9f1d-11ea-8553-333445793454 <=< ACCEPT -->
        Factory method that performs validation.
        @param <I>  the input type
        @param <O>  the output type
        @param factory  the factory to call, not null
        @return the <code>factory</code> transformer
        @throws NullPointerException if the factory is null
        <!-- ACCEPT >=> 684474fc-9f1d-11ea-8553-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.FactoryTransformer` / `public FactoryTransformer(final Factory<? extends O> factory)`


        <!-- 684474fd-9f1d-11ea-8554-333445793454 <=< ACCEPT -->
        Constructor that performs no validation.
        Use <code>factoryTransformer</code> if you want that.
        @param factory  the factory to call, not null
        <!-- ACCEPT >=> 684474fd-9f1d-11ea-8554-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.FactoryTransformer` / `public O transform(final I input)`


        <!-- 684474fe-9f1d-11ea-8555-333445793454 <=< ACCEPT -->
        Transforms the input by ignoring the input and returning the result of
        calling the decorated factory.
        @param input  the input object to transform
        @return the transformed result
        <!-- ACCEPT >=> 684474fe-9f1d-11ea-8555-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.FactoryTransformer` / `public Factory<? extends O> getFactory()`


        <!-- 684474ff-9f1d-11ea-8556-333445793454 <=< ACCEPT -->
        Gets the factory.
        @return the factory
        @since 3.1
        <!-- ACCEPT >=> 684474ff-9f1d-11ea-8556-333445793454 -->



# File: `java.org.apache.commons.collections4.functors.FalsePredicate`

## Class: `java.org.apache.commons.collections4.functors.FalsePredicate` / `public final class FalsePredicate<T> implements Predicate<T>, Serializable`


        <!-- 68447500-9f1d-11ea-8557-333445793454 <=< ACCEPT -->
        Predicate implementation that always returns false.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 68447500-9f1d-11ea-8557-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.FalsePredicate` / `private static final long serialVersionUID`


        <!-- 68447501-9f1d-11ea-8558-333445793454 <=< ACCEPT -->
        Serial version UID
        <!-- ACCEPT >=> 68447501-9f1d-11ea-8558-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.FalsePredicate` / `public static final Predicate INSTANCE`


        <!-- 68447502-9f1d-11ea-8559-333445793454 <=< ACCEPT -->
        Singleton predicate instance
        <!-- ACCEPT >=> 68447502-9f1d-11ea-8559-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.FalsePredicate` / `public static <T> Predicate<T> falsePredicate()`


        <!-- 68447503-9f1d-11ea-855a-333445793454 <=< ACCEPT -->
        Get a typed instance.
        @param <T> the type that the predicate queries
        @return the singleton instance
        @since 4.0
        <!-- ACCEPT >=> 68447503-9f1d-11ea-855a-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.FalsePredicate` / `private FalsePredicate()`


        <!-- 68449bf4-9f1d-11ea-855b-333445793454 <=< ACCEPT -->
        Restricted constructor.
        <!-- ACCEPT >=> 68449bf4-9f1d-11ea-855b-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.FalsePredicate` / `public boolean evaluate(final T object)`


        <!-- 68449bf5-9f1d-11ea-855c-333445793454 <=< ACCEPT -->
        Evaluates the predicate returning false always.
        @param object  the input object
        @return false always
        <!-- ACCEPT >=> 68449bf5-9f1d-11ea-855c-333445793454 -->



# File: `java.org.apache.commons.collections4.functors.ForClosure`

## Class: `java.org.apache.commons.collections4.functors.ForClosure` / `public class ForClosure<E> implements Closure<E>`


        <!-- 68449bf6-9f1d-11ea-855d-333445793454 <=< ACCEPT -->
        Closure implementation that calls another closure n times, like a for loop.
        <p>
        <b>WARNING:</b> from v4.1 onwards this class will <b>not</b> be serializable anymore
        in order to prevent potential remote code execution exploits. Please refer to
        <a href="https://issues.apache.org/jira/browse/COLLECTIONS-580">COLLECTIONS-580</a>
        for more details.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 68449bf6-9f1d-11ea-855d-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.ForClosure` / `private final int iCount`


        <!-- 68449bf7-9f1d-11ea-855e-333445793454 <=< ACCEPT -->
        The number of times to loop
        <!-- ACCEPT >=> 68449bf7-9f1d-11ea-855e-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.ForClosure` / `private final Closure<? super E> iClosure`


        <!-- 68449bf8-9f1d-11ea-855f-333445793454 <=< ACCEPT -->
        The closure to call
        <!-- ACCEPT >=> 68449bf8-9f1d-11ea-855f-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.ForClosure` / `public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)`


        <!-- 68449bf9-9f1d-11ea-8560-333445793454 <=< ACCEPT -->
        Factory method that performs validation.
        <p>
        A null closure or zero count returns the <code>NOPClosure</code>.
        A count of one returns the specified closure.
        @param <E> the type that the closure acts on
        @param count  the number of times to execute the closure
        @param closure  the closure to execute, not null
        @return the <code>for</code> closure
        <!-- ACCEPT >=> 68449bf9-9f1d-11ea-8560-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.ForClosure` / `public ForClosure(final int count, final Closure<? super E> closure)`


        <!-- 68449bfa-9f1d-11ea-8561-333445793454 <=< ACCEPT -->
        Constructor that performs no validation.
        Use <code>forClosure</code> if you want that.
        @param count  the number of times to execute the closure
        @param closure  the closure to execute, not null
        <!-- ACCEPT >=> 68449bfa-9f1d-11ea-8561-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.ForClosure` / `public void execute(final E input)`


        <!-- 68449bfb-9f1d-11ea-8562-333445793454 <=< ACCEPT -->
        Executes the closure <code>count</code> times.
        @param input  the input object
        <!-- ACCEPT >=> 68449bfb-9f1d-11ea-8562-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.ForClosure` / `public Closure<? super E> getClosure()`


        <!-- 68449bfc-9f1d-11ea-8563-333445793454 <=< ACCEPT -->
        Gets the closure.
        @return the closure
        @since 3.1
        <!-- ACCEPT >=> 68449bfc-9f1d-11ea-8563-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.ForClosure` / `public int getCount()`


        <!-- 68449bfd-9f1d-11ea-8564-333445793454 <=< ACCEPT -->
        Gets the count.
        @return the count
        @since 3.1
        <!-- ACCEPT >=> 68449bfd-9f1d-11ea-8564-333445793454 -->



# File: `java.org.apache.commons.collections4.functors.FunctorUtils`

## Class: `java.org.apache.commons.collections4.functors.FunctorUtils` / `class FunctorUtils`


        <!-- 68449bfe-9f1d-11ea-8565-333445793454 <=< ACCEPT -->
        Internal utilities for functors.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 68449bfe-9f1d-11ea-8565-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.FunctorUtils` / `private FunctorUtils()`


        <!-- 6844c2f6-9f1d-11ea-8566-333445793454 <=< ACCEPT -->
        Restricted constructor.
        <!-- ACCEPT >=> 6844c2f6-9f1d-11ea-8566-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.FunctorUtils` / `static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates)`


        <!-- 6844c2f7-9f1d-11ea-8567-333445793454 <=< ACCEPT -->
        Clone the predicates to ensure that the internal reference can't be messed with.
        Due to the {@link Predicate#evaluate(T)} method, Predicate<? super T> is
        able to be coerced to Predicate<T> without casting issues.
        @param predicates  the predicates to copy
        @return the cloned predicates
        <!-- ACCEPT >=> 6844c2f7-9f1d-11ea-8567-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.FunctorUtils` / `static <T> Predicate<T> coerce(final Predicate<? super T> predicate)`


        <!-- 6844c2f8-9f1d-11ea-8568-333445793454 <=< ACCEPT -->
        A very simple method that coerces Predicate<? super T> to Predicate<T>.
        Due to the {@link Predicate#evaluate(T)} method, Predicate<? super T> is
        able to be coerced to Predicate<T> without casting issues.
        <p>This method exists
        simply as centralised documentation and atomic unchecked warning
        suppression.
        @param <T> the type of object the returned predicate should "accept"
        @param predicate the predicate to coerce.
        @return the coerced predicate.
        <!-- ACCEPT >=> 6844c2f8-9f1d-11ea-8568-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.FunctorUtils` / `static void validate(final Predicate<?>... predicates)`


        <!-- 6844c2f9-9f1d-11ea-8569-333445793454 <=< ACCEPT -->
        Validate the predicates to ensure that all is well.
        @param predicates  the predicates to validate
        <!-- ACCEPT >=> 6844c2f9-9f1d-11ea-8569-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.FunctorUtils` / `static <T> Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates)`


        <!-- 6844c2fa-9f1d-11ea-856a-333445793454 <=< ACCEPT -->
        Validate the predicates to ensure that all is well.
        @param predicates  the predicates to validate
        @return predicate array
        <!-- ACCEPT >=> 6844c2fa-9f1d-11ea-856a-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.FunctorUtils` / `static <E> Closure<E>[] copy(final Closure<? super E>... closures)`


        <!-- 6844c2fb-9f1d-11ea-856b-333445793454 <=< ACCEPT -->
        Clone the closures to ensure that the internal reference can't be messed with.
        @param closures  the closures to copy
        @return the cloned closures
        <!-- ACCEPT >=> 6844c2fb-9f1d-11ea-856b-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.FunctorUtils` / `static void validate(final Closure<?>... closures)`


        <!-- 6844c2fc-9f1d-11ea-856c-333445793454 <=< ACCEPT -->
        Validate the closures to ensure that all is well.
        @param closures  the closures to validate
        <!-- ACCEPT >=> 6844c2fc-9f1d-11ea-856c-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.FunctorUtils` / `static <T> Closure<T> coerce(final Closure<? super T> closure)`


        <!-- 6844c2fd-9f1d-11ea-856d-333445793454 <=< ACCEPT -->
        A very simple method that coerces Closure<? super T> to Closure<T>.
        <p>This method exists
        simply as centralised documentation and atomic unchecked warning
        suppression.
        @param <T> the type of object the returned closure should "accept"
        @param closure the closure to coerce.
        @return the coerced closure.
        <!-- ACCEPT >=> 6844c2fd-9f1d-11ea-856d-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.FunctorUtils` / `static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers)`


        <!-- 6844c2fe-9f1d-11ea-856e-333445793454 <=< ACCEPT -->
        Copy method
        @param transformers  the transformers to copy
        @return a clone of the transformers
        <!-- ACCEPT >=> 6844c2fe-9f1d-11ea-856e-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.FunctorUtils` / `static void validate(final Transformer<?, ?>... transformers)`


        <!-- 6844ea0a-9f1d-11ea-856f-333445793454 <=< ACCEPT -->
        Validate method
        @param transformers  the transformers to validate
        <!-- ACCEPT >=> 6844ea0a-9f1d-11ea-856f-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.FunctorUtils` / `static <I, O> Transformer<I, O> coerce(final Transformer<? super I, ? extends O> transformer)`


        <!-- 6844ea0b-9f1d-11ea-8570-333445793454 <=< ACCEPT -->
        A very simple method that coerces Transformer<? super I, ? extends O> to Transformer<I, O>.
        <p>This method exists
        simply as centralised documentation and atomic unchecked warning
        suppression.
        @param <T> the type of object the returned transformer should "accept"
        @param transformer the transformer to coerce.
        @return the coerced transformer.
        <!-- ACCEPT >=> 6844ea0b-9f1d-11ea-8570-333445793454 -->



# File: `java.org.apache.commons.collections4.functors.IdentityPredicate`

## Class: `java.org.apache.commons.collections4.functors.IdentityPredicate` / `public final class IdentityPredicate<T> implements Predicate<T>, Serializable`


        <!-- 6844ea0c-9f1d-11ea-8571-333445793454 <=< ACCEPT -->
        Predicate implementation that returns true if the input is the same object
        as the one stored in this predicate.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 6844ea0c-9f1d-11ea-8571-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.IdentityPredicate` / `private static final long serialVersionUID`


        <!-- 6844ea0d-9f1d-11ea-8572-333445793454 <=< ACCEPT -->
        Serial version UID
        <!-- ACCEPT >=> 6844ea0d-9f1d-11ea-8572-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.IdentityPredicate` / `private final T iValue`


        <!-- 6844ea0e-9f1d-11ea-8573-333445793454 <=< ACCEPT -->
        The value to compare to
        <!-- ACCEPT >=> 6844ea0e-9f1d-11ea-8573-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.IdentityPredicate` / `public static <T> Predicate<T> identityPredicate(final T object)`


        <!-- 6844ea0f-9f1d-11ea-8574-333445793454 <=< ACCEPT -->
        Factory to create the identity predicate.
        @param <T> the type that the predicate queries
        @param object  the object to compare to
        @return the predicate
        <!-- ACCEPT >=> 6844ea0f-9f1d-11ea-8574-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.IdentityPredicate` / `public IdentityPredicate(final T object)`


        <!-- 6844ea10-9f1d-11ea-8575-333445793454 <=< ACCEPT -->
        Constructor that performs no validation.
        Use <code>identityPredicate</code> if you want that.
        @param object  the object to compare to
        <!-- ACCEPT >=> 6844ea10-9f1d-11ea-8575-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.IdentityPredicate` / `public boolean evaluate(final T object)`


        <!-- 6844ea11-9f1d-11ea-8576-333445793454 <=< ACCEPT -->
        Evaluates the predicate returning true if the input object is identical to
        the stored object.
        @param object  the input object
        @return true if input is the same object as the stored value
        <!-- ACCEPT >=> 6844ea11-9f1d-11ea-8576-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.IdentityPredicate` / `public T getValue()`


        <!-- 6844ea12-9f1d-11ea-8577-333445793454 <=< ACCEPT -->
        Gets the value.
        @return the value
        @since 3.1
        <!-- ACCEPT >=> 6844ea12-9f1d-11ea-8577-333445793454 -->



# File: `java.org.apache.commons.collections4.functors.IfClosure`

## Class: `java.org.apache.commons.collections4.functors.IfClosure` / `public class IfClosure<E> implements Closure<E>, Serializable`


        <!-- 6844ea13-9f1d-11ea-8578-333445793454 <=< ACCEPT -->
        Closure implementation acts as an if statement calling one or other closure
        based on a predicate.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 6844ea13-9f1d-11ea-8578-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.IfClosure` / `private static final long serialVersionUID`


        <!-- 6844ea14-9f1d-11ea-8579-333445793454 <=< ACCEPT -->
        Serial version UID
        <!-- ACCEPT >=> 6844ea14-9f1d-11ea-8579-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.IfClosure` / `private final Predicate<? super E> iPredicate`


        <!-- 6844ea15-9f1d-11ea-857a-333445793454 <=< ACCEPT -->
        The test
        <!-- ACCEPT >=> 6844ea15-9f1d-11ea-857a-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.IfClosure` / `private final Closure<? super E> iTrueClosure`


        <!-- 6844ea16-9f1d-11ea-857b-333445793454 <=< ACCEPT -->
        The closure to use if true
        <!-- ACCEPT >=> 6844ea16-9f1d-11ea-857b-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.IfClosure` / `private final Closure<? super E> iFalseClosure`


        <!-- 6844ea17-9f1d-11ea-857c-333445793454 <=< ACCEPT -->
        The closure to use if false
        <!-- ACCEPT >=> 6844ea17-9f1d-11ea-857c-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.IfClosure` / `public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)`


        <!-- 6844ea18-9f1d-11ea-857d-333445793454 <=< ACCEPT -->
        Factory method that performs validation.
        <p>
        This factory creates a closure that performs no action when
        the predicate is false.
        @param <E> the type that the closure acts on
        @param predicate  predicate to switch on
        @param trueClosure  closure used if true
        @return the <code>if</code> closure
        @throws NullPointerException if either argument is null
        @since 3.2
        <!-- ACCEPT >=> 6844ea18-9f1d-11ea-857d-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.IfClosure` / `final Closure<? super E> falseClosure)`


        <!-- 6844ea19-9f1d-11ea-857e-333445793454 <=< ACCEPT -->
        Factory method that performs validation.
        @param <E> the type that the closure acts on
        @param predicate  predicate to switch on
        @param trueClosure  closure used if true
        @param falseClosure  closure used if false
        @return the <code>if</code> closure
        @throws NullPointerException if any argument is null
        <!-- ACCEPT >=> 6844ea19-9f1d-11ea-857e-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.IfClosure` / `public IfClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)`


        <!-- 6844ea1a-9f1d-11ea-857f-333445793454 <=< ACCEPT -->
        Constructor that performs no validation.
        Use <code>ifClosure</code> if you want that.
        <p>
        This constructor creates a closure that performs no action when
        the predicate is false.
        @param predicate  predicate to switch on, not null
        @param trueClosure  closure used if true, not null
        @since 3.2
        <!-- ACCEPT >=> 6844ea1a-9f1d-11ea-857f-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.IfClosure` / `final Closure<? super E> falseClosure)`


        <!-- 6844ea1b-9f1d-11ea-8580-333445793454 <=< ACCEPT -->
        Constructor that performs no validation.
        Use <code>ifClosure</code> if you want that.
        @param predicate  predicate to switch on, not null
        @param trueClosure  closure used if true, not null
        @param falseClosure  closure used if false, not null
        <!-- ACCEPT >=> 6844ea1b-9f1d-11ea-8580-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.IfClosure` / `public void execute(final E input)`


        <!-- 6845110d-9f1d-11ea-8581-333445793454 <=< ACCEPT -->
        Executes the true or false closure according to the result of the predicate.
        @param input  the input object
        <!-- ACCEPT >=> 6845110d-9f1d-11ea-8581-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.IfClosure` / `public Predicate<? super E> getPredicate()`


        <!-- 6845110e-9f1d-11ea-8582-333445793454 <=< ACCEPT -->
        Gets the predicate.
        @return the predicate
        @since 3.1
        <!-- ACCEPT >=> 6845110e-9f1d-11ea-8582-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.IfClosure` / `public Closure<? super E> getTrueClosure()`


        <!-- 6845110f-9f1d-11ea-8583-333445793454 <=< ACCEPT -->
        Gets the closure called when true.
        @return the closure
        @since 3.1
        <!-- ACCEPT >=> 6845110f-9f1d-11ea-8583-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.IfClosure` / `public Closure<? super E> getFalseClosure()`


        <!-- 68451110-9f1d-11ea-8584-333445793454 <=< ACCEPT -->
        Gets the closure called when false.
        @return the closure
        @since 3.1
        <!-- ACCEPT >=> 68451110-9f1d-11ea-8584-333445793454 -->



# File: `java.org.apache.commons.collections4.functors.IfTransformer`

## Class: `java.org.apache.commons.collections4.functors.IfTransformer` / `public class IfTransformer<I, O> implements Transformer<I, O>, Serializable`


        <!-- 68451111-9f1d-11ea-8585-333445793454 <=< ACCEPT -->
        Transformer implementation that will call one of two closures based on whether a predicate evaluates
        as true or false.
        @param <I> The input type for the transformer
        @param <O> The output type for the transformer
        @since 4.1
        @version $Id$
        <!-- ACCEPT >=> 68451111-9f1d-11ea-8585-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.IfTransformer` / `private static final long serialVersionUID`


        <!-- 68451112-9f1d-11ea-8586-333445793454 <=< ACCEPT -->
        Serial version UID
        <!-- ACCEPT >=> 68451112-9f1d-11ea-8586-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.IfTransformer` / `private final Predicate<? super I> iPredicate`


        <!-- 68451113-9f1d-11ea-8587-333445793454 <=< ACCEPT -->
        The test
        <!-- ACCEPT >=> 68451113-9f1d-11ea-8587-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.IfTransformer` / `private final Transformer<? super I, ? extends O> iTrueTransformer`


        <!-- 68451114-9f1d-11ea-8588-333445793454 <=< ACCEPT -->
        The transformer to use if true
        <!-- ACCEPT >=> 68451114-9f1d-11ea-8588-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.IfTransformer` / `private final Transformer<? super I, ? extends O> iFalseTransformer`


        <!-- 68451115-9f1d-11ea-8589-333445793454 <=< ACCEPT -->
        The transformer to use if false
        <!-- ACCEPT >=> 68451115-9f1d-11ea-8589-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.IfTransformer` / `final Transformer<? super I, ? extends O> falseTransformer)`


        <!-- 68451116-9f1d-11ea-858a-333445793454 <=< ACCEPT -->
        Factory method that performs validation.
        @param <I>  input type for the transformer
        @param <O>  output type for the transformer
        @param predicate  predicate to switch on
        @param trueTransformer  transformer used if true
        @param falseTransformer  transformer used if false
        @return the <code>if</code> transformer
        @throws NullPointerException if either argument is null
        <!-- ACCEPT >=> 68451116-9f1d-11ea-858a-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.IfTransformer` / `final Transformer<? super T, ? extends T> trueTransformer)`


        <!-- 68451117-9f1d-11ea-858b-333445793454 <=< ACCEPT -->
        Factory method that performs validation.
        <p>
        This factory creates a transformer that just returns the input object when
        the predicate is false.
        @param <T>  input and output type for the transformer
        @param predicate  predicate to switch on
        @param trueTransformer  transformer used if true
        @return the <code>if</code> transformer
        @throws NullPointerException if either argument is null
        <!-- ACCEPT >=> 68451117-9f1d-11ea-858b-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.IfTransformer` / `final Transformer<? super I, ? extends O> falseTransformer)`


        <!-- 68451118-9f1d-11ea-858c-333445793454 <=< ACCEPT -->
        Constructor that performs no validation.
        Use the static factory method <code>ifTransformer</code> if you want that.
        @param predicate  predicate to switch on, not null
        @param trueTransformer  transformer used if true, not null
        @param falseTransformer  transformer used if false, not null
        <!-- ACCEPT >=> 68451118-9f1d-11ea-858c-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.IfTransformer` / `public O transform(final I input)`


        <!-- 68451119-9f1d-11ea-858d-333445793454 <=< ACCEPT -->
        Transforms the input using the true or false transformer based to the result of the predicate.
        @param input  the input object to transform
        @return the transformed result
        <!-- ACCEPT >=> 68451119-9f1d-11ea-858d-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.IfTransformer` / `public Predicate<? super I> getPredicate()`


        <!-- 6845111a-9f1d-11ea-858e-333445793454 <=< ACCEPT -->
        Gets the predicate.
        @return the predicate
        <!-- ACCEPT >=> 6845111a-9f1d-11ea-858e-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.IfTransformer` / `public Transformer<? super I, ? extends O> getTrueTransformer()`


        <!-- 6845111b-9f1d-11ea-858f-333445793454 <=< ACCEPT -->
        Gets the transformer used when true.
        @return the transformer
        <!-- ACCEPT >=> 6845111b-9f1d-11ea-858f-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.IfTransformer` / `public Transformer<? super I, ? extends O> getFalseTransformer()`


        <!-- 6845111c-9f1d-11ea-8590-333445793454 <=< ACCEPT -->
        Gets the transformer used when false.
        @return the transformer
        <!-- ACCEPT >=> 6845111c-9f1d-11ea-8590-333445793454 -->



# File: `java.org.apache.commons.collections4.functors.InstanceofPredicate`

## Class: `java.org.apache.commons.collections4.functors.InstanceofPredicate` / `public final class InstanceofPredicate implements Predicate<Object>, Serializable`


        <!-- 6845111d-9f1d-11ea-8591-333445793454 <=< ACCEPT -->
        Predicate implementation that returns true if the input is an instanceof
        the type stored in this predicate.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 6845111d-9f1d-11ea-8591-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.InstanceofPredicate` / `private static final long serialVersionUID`


        <!-- 6845111e-9f1d-11ea-8592-333445793454 <=< ACCEPT -->
        Serial version UID
        <!-- ACCEPT >=> 6845111e-9f1d-11ea-8592-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.InstanceofPredicate` / `private final Class<?> iType`


        <!-- 68453813-9f1d-11ea-8593-333445793454 <=< ACCEPT -->
        The type to compare to
        <!-- ACCEPT >=> 68453813-9f1d-11ea-8593-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.InstanceofPredicate` / `public static Predicate<Object> instanceOfPredicate(final Class<?> type)`


        <!-- 68453814-9f1d-11ea-8594-333445793454 <=< ACCEPT -->
        Factory to create the identity predicate.
        @param type  the type to check for, may not be null
        @return the predicate
        @throws NullPointerException if the class is null
        <!-- ACCEPT >=> 68453814-9f1d-11ea-8594-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.InstanceofPredicate` / `public InstanceofPredicate(final Class<?> type)`


        <!-- 68453815-9f1d-11ea-8595-333445793454 <=< ACCEPT -->
        Constructor that performs no validation.
        Use <code>instanceOfPredicate</code> if you want that.
        @param type  the type to check for
        <!-- ACCEPT >=> 68453815-9f1d-11ea-8595-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.InstanceofPredicate` / `public boolean evaluate(final Object object)`


        <!-- 68453816-9f1d-11ea-8596-333445793454 <=< ACCEPT -->
        Evaluates the predicate returning true if the input object is of the correct type.
        @param object  the input object
        @return true if input is of stored type
        <!-- ACCEPT >=> 68453816-9f1d-11ea-8596-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.InstanceofPredicate` / `public Class<?> getType()`


        <!-- 68453817-9f1d-11ea-8597-333445793454 <=< ACCEPT -->
        Gets the type to compare to.
        @return the type
        @since 3.1
        <!-- ACCEPT >=> 68453817-9f1d-11ea-8597-333445793454 -->



# File: `java.org.apache.commons.collections4.functors.InstantiateFactory`

## Class: `java.org.apache.commons.collections4.functors.InstantiateFactory` / `public class InstantiateFactory<T> implements Factory<T>`


        <!-- 68453818-9f1d-11ea-8598-333445793454 <=< ACCEPT -->
        Factory implementation that creates a new object instance by reflection.
        <p>
        <b>WARNING:</b> from v4.1 onwards this class will <b>not</b> be serializable anymore
        in order to prevent potential remote code execution exploits. Please refer to
        <a href="https://issues.apache.org/jira/browse/COLLECTIONS-580">COLLECTIONS-580</a>
        for more details.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 68453818-9f1d-11ea-8598-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.InstantiateFactory` / `private final Class<T> iClassToInstantiate`


        <!-- 68453819-9f1d-11ea-8599-333445793454 <=< ACCEPT -->
        The class to create
        <!-- ACCEPT >=> 68453819-9f1d-11ea-8599-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.InstantiateFactory` / `private final Class<?>[] iParamTypes`


        <!-- 6845381a-9f1d-11ea-859a-333445793454 <=< ACCEPT -->
        The constructor parameter types
        <!-- ACCEPT >=> 6845381a-9f1d-11ea-859a-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.InstantiateFactory` / `private final Object[] iArgs`


        <!-- 6845381b-9f1d-11ea-859b-333445793454 <=< ACCEPT -->
        The constructor arguments
        <!-- ACCEPT >=> 6845381b-9f1d-11ea-859b-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.InstantiateFactory` / `private transient Constructor<T> iConstructor`


        <!-- 6845381c-9f1d-11ea-859c-333445793454 <=< ACCEPT -->
        The constructor
        <!-- ACCEPT >=> 6845381c-9f1d-11ea-859c-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.InstantiateFactory` / `final Object[] args)`


        <!-- 6845381d-9f1d-11ea-859d-333445793454 <=< ACCEPT -->
        Factory method that performs validation.
        @param <T>  the type the factory creates
        @param classToInstantiate  the class to instantiate, not null
        @param paramTypes  the constructor parameter types, cloned
        @param args  the constructor arguments, cloned
        @return a new instantiate factory
        @throws NullPointerException if classToInstantiate is null
        @throws IllegalArgumentException if paramTypes does not match args
        <!-- ACCEPT >=> 6845381d-9f1d-11ea-859d-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.InstantiateFactory` / `public InstantiateFactory(final Class<T> classToInstantiate)`


        <!-- 6845381e-9f1d-11ea-859e-333445793454 <=< ACCEPT -->
        Constructor that performs no validation.
        Use <code>instantiateFactory</code> if you want that.
        @param classToInstantiate  the class to instantiate
        <!-- ACCEPT >=> 6845381e-9f1d-11ea-859e-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.InstantiateFactory` / `public InstantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)`


        <!-- 6845381f-9f1d-11ea-859f-333445793454 <=< ACCEPT -->
        Constructor that performs no validation.
        Use <code>instantiateFactory</code> if you want that.
        @param classToInstantiate  the class to instantiate
        @param paramTypes  the constructor parameter types, cloned
        @param args  the constructor arguments, cloned
        <!-- ACCEPT >=> 6845381f-9f1d-11ea-859f-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.InstantiateFactory` / `private void findConstructor()`


        <!-- 68453820-9f1d-11ea-85a0-333445793454 <=< ACCEPT -->
        Find the Constructor for the class specified.
        <!-- ACCEPT >=> 68453820-9f1d-11ea-85a0-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.InstantiateFactory` / `public T create()`


        <!-- 68453821-9f1d-11ea-85a1-333445793454 <=< ACCEPT -->
        Creates an object using the stored constructor.
        @return the new object
        <!-- ACCEPT >=> 68453821-9f1d-11ea-85a1-333445793454 -->



# File: `java.org.apache.commons.collections4.functors.InstantiateTransformer`

## Class: `java.org.apache.commons.collections4.functors.InstantiateTransformer` / `public class InstantiateTransformer<T> implements Transformer<Class<? extends T>, T>`


        <!-- 68453822-9f1d-11ea-85a2-333445793454 <=< ACCEPT -->
        Transformer implementation that creates a new object instance by reflection.
        <p>
        <b>WARNING:</b> from v4.1 onwards this class will <b>not</b> be serializable anymore
        in order to prevent potential remote code execution exploits. Please refer to
        <a href="https://issues.apache.org/jira/browse/COLLECTIONS-580">COLLECTIONS-580</a>
        for more details.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 68453822-9f1d-11ea-85a2-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.InstantiateTransformer` / `private static final Transformer NO_ARG_INSTANCE`


        <!-- 68453823-9f1d-11ea-85a3-333445793454 <=< ACCEPT -->
        Singleton instance that uses the no arg constructor
        <!-- ACCEPT >=> 68453823-9f1d-11ea-85a3-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.InstantiateTransformer` / `private final Class<?>[] iParamTypes`


        <!-- 68453824-9f1d-11ea-85a4-333445793454 <=< ACCEPT -->
        The constructor parameter types
        <!-- ACCEPT >=> 68453824-9f1d-11ea-85a4-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.InstantiateTransformer` / `private final Object[] iArgs`


        <!-- 68453825-9f1d-11ea-85a5-333445793454 <=< ACCEPT -->
        The constructor arguments
        <!-- ACCEPT >=> 68453825-9f1d-11ea-85a5-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.InstantiateTransformer` / `public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()`


        <!-- 68453826-9f1d-11ea-85a6-333445793454 <=< ACCEPT -->
        Get a typed no-arg instance.
        @param <T>  the type of the objects to be created
        @return Transformer<Class<? extends T>, T>
        <!-- ACCEPT >=> 68453826-9f1d-11ea-85a6-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.InstantiateTransformer` / `final Object[] args)`


        <!-- 68453827-9f1d-11ea-85a7-333445793454 <=< ACCEPT -->
        Transformer method that performs validation.
        @param <T>  the type of the objects to be created
        @param paramTypes  the constructor parameter types
        @param args  the constructor arguments
        @return an instantiate transformer
        @throws IllegalArgumentException if paramTypes does not match args
        <!-- ACCEPT >=> 68453827-9f1d-11ea-85a7-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.InstantiateTransformer` / `private InstantiateTransformer()`


        <!-- 68453828-9f1d-11ea-85a8-333445793454 <=< ACCEPT -->
        Constructor for no arg instance.
        <!-- ACCEPT >=> 68453828-9f1d-11ea-85a8-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.InstantiateTransformer` / `public InstantiateTransformer(final Class<?>[] paramTypes, final Object[] args)`


        <!-- 68453829-9f1d-11ea-85a9-333445793454 <=< ACCEPT -->
        Constructor that performs no validation.
        Use <code>instantiateTransformer</code> if you want that.
        <p>
        Note: from 4.0, the input parameters will be cloned
        @param paramTypes  the constructor parameter types
        @param args  the constructor arguments
        <!-- ACCEPT >=> 68453829-9f1d-11ea-85a9-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.InstantiateTransformer` / `public T transform(final Class<? extends T> input)`


        <!-- 68455f1a-9f1d-11ea-85aa-333445793454 <=< ACCEPT -->
        Transforms the input Class object to a result by instantiation.
        @param input  the input object to transform
        @return the transformed result
        <!-- ACCEPT >=> 68455f1a-9f1d-11ea-85aa-333445793454 -->



# File: `java.org.apache.commons.collections4.functors.InvokerTransformer`

## Class: `java.org.apache.commons.collections4.functors.InvokerTransformer` / `public class InvokerTransformer<I, O> implements Transformer<I, O>`


        <!-- 68455f1b-9f1d-11ea-85ab-333445793454 <=< ACCEPT -->
        Transformer implementation that creates a new object instance by reflection.
        <p>
        <b>WARNING:</b> from v4.1 onwards this class will <b>not</b> be serializable anymore
        in order to prevent potential remote code execution exploits. Please refer to
        <a href="https://issues.apache.org/jira/browse/COLLECTIONS-580">COLLECTIONS-580</a>
        for more details.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 68455f1b-9f1d-11ea-85ab-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.InvokerTransformer` / `private final String iMethodName`


        <!-- 68455f1c-9f1d-11ea-85ac-333445793454 <=< ACCEPT -->
        The method name to call
        <!-- ACCEPT >=> 68455f1c-9f1d-11ea-85ac-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.InvokerTransformer` / `private final Class<?>[] iParamTypes`


        <!-- 68455f1d-9f1d-11ea-85ad-333445793454 <=< ACCEPT -->
        The array of reflection parameter types
        <!-- ACCEPT >=> 68455f1d-9f1d-11ea-85ad-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.InvokerTransformer` / `private final Object[] iArgs`


        <!-- 68455f1e-9f1d-11ea-85ae-333445793454 <=< ACCEPT -->
        The array of reflection arguments
        <!-- ACCEPT >=> 68455f1e-9f1d-11ea-85ae-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.InvokerTransformer` / `public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)`


        <!-- 68455f1f-9f1d-11ea-85af-333445793454 <=< ACCEPT -->
        Gets an instance of this transformer calling a specific method with no arguments.
        @param <I>  the input type
        @param <O>  the output type
        @param methodName  the method name to call
        @return an invoker transformer
        @throws NullPointerException if methodName is null
        @since 3.1
        <!-- ACCEPT >=> 68455f1f-9f1d-11ea-85af-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.InvokerTransformer` / `final Object[] args)`


        <!-- 68455f20-9f1d-11ea-85b0-333445793454 <=< ACCEPT -->
        Gets an instance of this transformer calling a specific method with specific values.
        @param <I>  the input type
        @param <O>  the output type
        @param methodName  the method name to call
        @param paramTypes  the parameter types of the method
        @param args  the arguments to pass to the method
        @return an invoker transformer
        @throws NullPointerException if methodName is null
        @throws IllegalArgumentException if paramTypes does not match args
        <!-- ACCEPT >=> 68455f20-9f1d-11ea-85b0-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.InvokerTransformer` / `private InvokerTransformer(final String methodName)`


        <!-- 68455f21-9f1d-11ea-85b1-333445793454 <=< ACCEPT -->
        Constructor for no arg instance.
        @param methodName  the method to call
        <!-- ACCEPT >=> 68455f21-9f1d-11ea-85b1-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.InvokerTransformer` / `public InvokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)`


        <!-- 68455f22-9f1d-11ea-85b2-333445793454 <=< ACCEPT -->
        Constructor that performs no validation.
        Use <code>invokerTransformer</code> if you want that.
        <p>
        Note: from 4.0, the input parameters will be cloned
        @param methodName  the method to call
        @param paramTypes  the constructor parameter types
        @param args  the constructor arguments
        <!-- ACCEPT >=> 68455f22-9f1d-11ea-85b2-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.InvokerTransformer` / `public O transform(final Object input)`


        <!-- 68455f23-9f1d-11ea-85b3-333445793454 <=< ACCEPT -->
        Transforms the input to result by invoking a method on the input.
        @param input  the input object to transform
        @return the transformed result, null if null input
        <!-- ACCEPT >=> 68455f23-9f1d-11ea-85b3-333445793454 -->



# File: `java.org.apache.commons.collections4.functors.MapTransformer`

## Class: `java.org.apache.commons.collections4.functors.MapTransformer` / `public final class MapTransformer<I, O> implements Transformer<I, O>, Serializable`


        <!-- 68455f24-9f1d-11ea-85b4-333445793454 <=< ACCEPT -->
        Transformer implementation that returns the value held in a specified map
        using the input parameter as a key.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 68455f24-9f1d-11ea-85b4-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.MapTransformer` / `private static final long serialVersionUID`


        <!-- 68455f25-9f1d-11ea-85b5-333445793454 <=< ACCEPT -->
        Serial version UID
        <!-- ACCEPT >=> 68455f25-9f1d-11ea-85b5-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.MapTransformer` / `private final Map<? super I, ? extends O> iMap`


        <!-- 68455f26-9f1d-11ea-85b6-333445793454 <=< ACCEPT -->
        The map of data to lookup in
        <!-- ACCEPT >=> 68455f26-9f1d-11ea-85b6-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.MapTransformer` / `public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)`


        <!-- 68455f27-9f1d-11ea-85b7-333445793454 <=< ACCEPT -->
        Factory to create the transformer.
        <p>
        If the map is null, a transformer that always returns null is returned.
        @param <I>  the input type
        @param <O>  the output type
        @param map the map, not cloned
        @return the transformer
        <!-- ACCEPT >=> 68455f27-9f1d-11ea-85b7-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.MapTransformer` / `private MapTransformer(final Map<? super I, ? extends O> map)`


        <!-- 68455f28-9f1d-11ea-85b8-333445793454 <=< ACCEPT -->
        Constructor that performs no validation.
        Use <code>mapTransformer</code> if you want that.
        @param map  the map to use for lookup, not cloned
        <!-- ACCEPT >=> 68455f28-9f1d-11ea-85b8-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.MapTransformer` / `public O transform(final I input)`


        <!-- 68455f29-9f1d-11ea-85b9-333445793454 <=< ACCEPT -->
        Transforms the input to result by looking it up in a <code>Map</code>.
        @param input  the input object to transform
        @return the transformed result
        <!-- ACCEPT >=> 68455f29-9f1d-11ea-85b9-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.MapTransformer` / `public Map<? super I, ? extends O> getMap()`


        <!-- 68458625-9f1d-11ea-85ba-333445793454 <=< ACCEPT -->
        Gets the map to lookup in.
        @return the map
        @since 3.1
        <!-- ACCEPT >=> 68458625-9f1d-11ea-85ba-333445793454 -->



# File: `java.org.apache.commons.collections4.functors.NOPClosure`

## Class: `java.org.apache.commons.collections4.functors.NOPClosure` / `public final class NOPClosure<E> implements Closure<E>, Serializable`


        <!-- 68458626-9f1d-11ea-85bb-333445793454 <=< ACCEPT -->
        Closure implementation that does nothing.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 68458626-9f1d-11ea-85bb-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.NOPClosure` / `private static final long serialVersionUID`


        <!-- 68458627-9f1d-11ea-85bc-333445793454 <=< ACCEPT -->
        Serial version UID
        <!-- ACCEPT >=> 68458627-9f1d-11ea-85bc-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.NOPClosure` / `public static final Closure INSTANCE`


        <!-- 68458628-9f1d-11ea-85bd-333445793454 <=< ACCEPT -->
        Singleton predicate instance
        <!-- ACCEPT >=> 68458628-9f1d-11ea-85bd-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.NOPClosure` / `public static <E> Closure<E> nopClosure()`


        <!-- 68458629-9f1d-11ea-85be-333445793454 <=< ACCEPT -->
        Factory returning the singleton instance.
        @param <E> the type that the closure acts on
        @return the singleton instance
        @since 3.1
        <!-- ACCEPT >=> 68458629-9f1d-11ea-85be-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.NOPClosure` / `private NOPClosure()`


        <!-- 6845862a-9f1d-11ea-85bf-333445793454 <=< ACCEPT -->
        Constructor.
        <!-- ACCEPT >=> 6845862a-9f1d-11ea-85bf-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.NOPClosure` / `public void execute(final E input)`


        <!-- 6845862b-9f1d-11ea-85c0-333445793454 <=< ACCEPT -->
        Do nothing.
        @param input  the input object
        <!-- ACCEPT >=> 6845862b-9f1d-11ea-85c0-333445793454 -->



# File: `java.org.apache.commons.collections4.functors.NOPTransformer`

## Class: `java.org.apache.commons.collections4.functors.NOPTransformer` / `public class NOPTransformer<T> implements Transformer<T, T>, Serializable`


        <!-- 6845862c-9f1d-11ea-85c1-333445793454 <=< ACCEPT -->
        Transformer implementation that does nothing.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 6845862c-9f1d-11ea-85c1-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.NOPTransformer` / `private static final long serialVersionUID`


        <!-- 6845862d-9f1d-11ea-85c2-333445793454 <=< ACCEPT -->
        Serial version UID
        <!-- ACCEPT >=> 6845862d-9f1d-11ea-85c2-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.NOPTransformer` / `public static final Transformer INSTANCE`


        <!-- 6845862e-9f1d-11ea-85c3-333445793454 <=< ACCEPT -->
        Singleton predicate instance
        <!-- ACCEPT >=> 6845862e-9f1d-11ea-85c3-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.NOPTransformer` / `public static <T> Transformer<T, T> nopTransformer()`


        <!-- 6845862f-9f1d-11ea-85c4-333445793454 <=< ACCEPT -->
        Factory returning the singleton instance.
        @param <T>  the input/output type
        @return the singleton instance
        @since 3.1
        <!-- ACCEPT >=> 6845862f-9f1d-11ea-85c4-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.NOPTransformer` / `private NOPTransformer()`


        <!-- 68458630-9f1d-11ea-85c5-333445793454 <=< ACCEPT -->
        Constructor.
        <!-- ACCEPT >=> 68458630-9f1d-11ea-85c5-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.NOPTransformer` / `public T transform(final T input)`


        <!-- 68458631-9f1d-11ea-85c6-333445793454 <=< ACCEPT -->
        Transforms the input to result by doing nothing.
        @param input  the input object to transform
        @return the transformed result which is the input
        <!-- ACCEPT >=> 68458631-9f1d-11ea-85c6-333445793454 -->



# File: `java.org.apache.commons.collections4.functors.NonePredicate`

## Class: `java.org.apache.commons.collections4.functors.NonePredicate` / `public final class NonePredicate<T> extends AbstractQuantifierPredicate<T>`


        <!-- 68458632-9f1d-11ea-85c7-333445793454 <=< ACCEPT -->
        Predicate implementation that returns true if none of the
        predicates return true.
        If the array of predicates is empty, then this predicate returns true.
        <p>
        NOTE: In versions prior to 3.2 an array size of zero or one
        threw an exception.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 68458632-9f1d-11ea-85c7-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.NonePredicate` / `private static final long serialVersionUID`


        <!-- 68458633-9f1d-11ea-85c8-333445793454 <=< ACCEPT -->
        Serial version UID
        <!-- ACCEPT >=> 68458633-9f1d-11ea-85c8-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.NonePredicate` / `public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)`


        <!-- 68458634-9f1d-11ea-85c9-333445793454 <=< ACCEPT -->
        Factory to create the predicate.
        <p>
        If the array is size zero, the predicate always returns true.
        @param <T> the type that the predicate queries
        @param predicates  the predicates to check, cloned, not null
        @return the <code>any</code> predicate
        @throws NullPointerException if the predicates array is null
        @throws NullPointerException if any predicate in the array is null
        <!-- ACCEPT >=> 68458634-9f1d-11ea-85c9-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.NonePredicate` / `public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)`


        <!-- 68458635-9f1d-11ea-85ca-333445793454 <=< ACCEPT -->
        Factory to create the predicate.
        <p>
        If the collection is size zero, the predicate always returns true.
        @param <T> the type that the predicate queries
        @param predicates  the predicates to check, cloned, not null
        @return the <code>one</code> predicate
        @throws NullPointerException if the predicates array is null
        @throws NullPointerException if any predicate in the array is null
        <!-- ACCEPT >=> 68458635-9f1d-11ea-85ca-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.NonePredicate` / `public NonePredicate(final Predicate<? super T>... predicates)`


        <!-- 68458636-9f1d-11ea-85cb-333445793454 <=< ACCEPT -->
        Constructor that performs no validation.
        Use <code>nonePredicate</code> if you want that.
        @param predicates  the predicates to check, not cloned, not null
        <!-- ACCEPT >=> 68458636-9f1d-11ea-85cb-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.NonePredicate` / `public boolean evaluate(final T object)`


        <!-- 68458637-9f1d-11ea-85cc-333445793454 <=< ACCEPT -->
        Evaluates the predicate returning false if any stored predicate returns false.
        @param object  the input object
        @return true if none of decorated predicates return true
        <!-- ACCEPT >=> 68458637-9f1d-11ea-85cc-333445793454 -->



# File: `java.org.apache.commons.collections4.functors.NotNullPredicate`

## Class: `java.org.apache.commons.collections4.functors.NotNullPredicate` / `public final class NotNullPredicate<T> implements Predicate<T>, Serializable`


        <!-- 68458638-9f1d-11ea-85cd-333445793454 <=< ACCEPT -->
        Predicate implementation that returns true if the input is not null.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 68458638-9f1d-11ea-85cd-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.NotNullPredicate` / `private static final long serialVersionUID`


        <!-- 68458639-9f1d-11ea-85ce-333445793454 <=< ACCEPT -->
        Serial version UID
        <!-- ACCEPT >=> 68458639-9f1d-11ea-85ce-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.NotNullPredicate` / `public static final Predicate INSTANCE`


        <!-- 6845863a-9f1d-11ea-85cf-333445793454 <=< ACCEPT -->
        Singleton predicate instance
        <!-- ACCEPT >=> 6845863a-9f1d-11ea-85cf-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.NotNullPredicate` / `public static <T> Predicate<T> notNullPredicate()`


        <!-- 6845863b-9f1d-11ea-85d0-333445793454 <=< ACCEPT -->
        Factory returning the singleton instance.
        @param <T> the type that the predicate queries
        @return the singleton instance
        @since 3.1
        <!-- ACCEPT >=> 6845863b-9f1d-11ea-85d0-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.NotNullPredicate` / `private NotNullPredicate()`


        <!-- 6845863c-9f1d-11ea-85d1-333445793454 <=< ACCEPT -->
        Restricted constructor.
        <!-- ACCEPT >=> 6845863c-9f1d-11ea-85d1-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.NotNullPredicate` / `public boolean evaluate(final T object)`


        <!-- 6845ad2d-9f1d-11ea-85d2-333445793454 <=< ACCEPT -->
        Evaluates the predicate returning true if the object does not equal null.
        @param object  the object to evaluate
        @return true if not null
        <!-- ACCEPT >=> 6845ad2d-9f1d-11ea-85d2-333445793454 -->



# File: `java.org.apache.commons.collections4.functors.NotPredicate`

## Class: `java.org.apache.commons.collections4.functors.NotPredicate` / `public final class NotPredicate<T> implements PredicateDecorator<T>, Serializable`


        <!-- 6845ad2e-9f1d-11ea-85d3-333445793454 <=< ACCEPT -->
        Predicate implementation that returns the opposite of the decorated predicate.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 6845ad2e-9f1d-11ea-85d3-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.NotPredicate` / `private static final long serialVersionUID`


        <!-- 6845ad2f-9f1d-11ea-85d4-333445793454 <=< ACCEPT -->
        Serial version UID
        <!-- ACCEPT >=> 6845ad2f-9f1d-11ea-85d4-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.NotPredicate` / `private final Predicate<? super T> iPredicate`


        <!-- 6845ad30-9f1d-11ea-85d5-333445793454 <=< ACCEPT -->
        The predicate to decorate
        <!-- ACCEPT >=> 6845ad30-9f1d-11ea-85d5-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.NotPredicate` / `public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)`


        <!-- 6845ad31-9f1d-11ea-85d6-333445793454 <=< ACCEPT -->
        Factory to create the not predicate.
        @param <T> the type that the predicate queries
        @param predicate  the predicate to decorate, not null
        @return the predicate
        @throws NullPointerException if the predicate is null
        <!-- ACCEPT >=> 6845ad31-9f1d-11ea-85d6-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.NotPredicate` / `public NotPredicate(final Predicate<? super T> predicate)`


        <!-- 6845ad32-9f1d-11ea-85d7-333445793454 <=< ACCEPT -->
        Constructor that performs no validation.
        Use <code>notPredicate</code> if you want that.
        @param predicate  the predicate to call after the null check
        <!-- ACCEPT >=> 6845ad32-9f1d-11ea-85d7-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.NotPredicate` / `public boolean evaluate(final T object)`


        <!-- 6845ad33-9f1d-11ea-85d8-333445793454 <=< ACCEPT -->
        Evaluates the predicate returning the opposite to the stored predicate.
        @param object  the input object
        @return true if predicate returns false
        <!-- ACCEPT >=> 6845ad33-9f1d-11ea-85d8-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.NotPredicate` / `public Predicate<? super T>[] getPredicates()`


        <!-- 6845ad34-9f1d-11ea-85d9-333445793454 <=< ACCEPT -->
        Gets the predicate being decorated.
        @return the predicate as the only element in an array
        @since 3.1
        <!-- ACCEPT >=> 6845ad34-9f1d-11ea-85d9-333445793454 -->



# File: `java.org.apache.commons.collections4.functors.NullIsExceptionPredicate`

## Class: `java.org.apache.commons.collections4.functors.NullIsExceptionPredicate` / `public final class NullIsExceptionPredicate<T> implements PredicateDecorator<T>, Serializable`


        <!-- 6845ad35-9f1d-11ea-85da-333445793454 <=< ACCEPT -->
        Predicate implementation that throws an exception if the input is null.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 6845ad35-9f1d-11ea-85da-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.NullIsExceptionPredicate` / `private static final long serialVersionUID`


        <!-- 6845ad36-9f1d-11ea-85db-333445793454 <=< ACCEPT -->
        Serial version UID
        <!-- ACCEPT >=> 6845ad36-9f1d-11ea-85db-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.NullIsExceptionPredicate` / `private final Predicate<? super T> iPredicate`


        <!-- 6845ad37-9f1d-11ea-85dc-333445793454 <=< ACCEPT -->
        The predicate to decorate
        <!-- ACCEPT >=> 6845ad37-9f1d-11ea-85dc-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.NullIsExceptionPredicate` / `public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)`


        <!-- 6845ad38-9f1d-11ea-85dd-333445793454 <=< ACCEPT -->
        Factory to create the null exception predicate.
        @param <T> the type that the predicate queries
        @param predicate  the predicate to decorate, not null
        @return the predicate
        @throws NullPointerException if the predicate is null
        <!-- ACCEPT >=> 6845ad38-9f1d-11ea-85dd-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.NullIsExceptionPredicate` / `public NullIsExceptionPredicate(final Predicate<? super T> predicate)`


        <!-- 6845ad39-9f1d-11ea-85de-333445793454 <=< ACCEPT -->
        Constructor that performs no validation.
        Use <code>nullIsExceptionPredicate</code> if you want that.
        @param predicate  the predicate to call after the null check
        <!-- ACCEPT >=> 6845ad39-9f1d-11ea-85de-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.NullIsExceptionPredicate` / `public boolean evaluate(final T object)`


        <!-- 6845ad3a-9f1d-11ea-85df-333445793454 <=< ACCEPT -->
        Evaluates the predicate returning the result of the decorated predicate
        once a null check is performed.
        @param object  the input object
        @return true if decorated predicate returns true
        @throws FunctorException if input is null
        <!-- ACCEPT >=> 6845ad3a-9f1d-11ea-85df-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.NullIsExceptionPredicate` / `public Predicate<? super T>[] getPredicates()`


        <!-- 6845ad3b-9f1d-11ea-85e0-333445793454 <=< ACCEPT -->
        Gets the predicate being decorated.
        @return the predicate as the only element in an array
        @since 3.1
        <!-- ACCEPT >=> 6845ad3b-9f1d-11ea-85e0-333445793454 -->



# File: `java.org.apache.commons.collections4.functors.NullIsFalsePredicate`

## Class: `java.org.apache.commons.collections4.functors.NullIsFalsePredicate` / `public final class NullIsFalsePredicate<T> implements PredicateDecorator<T>, Serializable`


        <!-- 6845ad3c-9f1d-11ea-85e1-333445793454 <=< ACCEPT -->
        Predicate implementation that returns false if the input is null.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 6845ad3c-9f1d-11ea-85e1-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.NullIsFalsePredicate` / `private static final long serialVersionUID`


        <!-- 6845ad3d-9f1d-11ea-85e2-333445793454 <=< ACCEPT -->
        Serial version UID
        <!-- ACCEPT >=> 6845ad3d-9f1d-11ea-85e2-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.NullIsFalsePredicate` / `private final Predicate<? super T> iPredicate`


        <!-- 6845ad3e-9f1d-11ea-85e3-333445793454 <=< ACCEPT -->
        The predicate to decorate
        <!-- ACCEPT >=> 6845ad3e-9f1d-11ea-85e3-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.NullIsFalsePredicate` / `public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)`


        <!-- 6845ad3f-9f1d-11ea-85e4-333445793454 <=< ACCEPT -->
        Factory to create the null false predicate.
        @param <T> the type that the predicate queries
        @param predicate  the predicate to decorate, not null
        @return the predicate
        @throws NullPointerException if the predicate is null
        <!-- ACCEPT >=> 6845ad3f-9f1d-11ea-85e4-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.NullIsFalsePredicate` / `public NullIsFalsePredicate(final Predicate<? super T> predicate)`


        <!-- 6845ad40-9f1d-11ea-85e5-333445793454 <=< ACCEPT -->
        Constructor that performs no validation.
        Use <code>nullIsFalsePredicate</code> if you want that.
        @param predicate  the predicate to call after the null check
        <!-- ACCEPT >=> 6845ad40-9f1d-11ea-85e5-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.NullIsFalsePredicate` / `public boolean evaluate(final T object)`


        <!-- 6845ad41-9f1d-11ea-85e6-333445793454 <=< ACCEPT -->
        Evaluates the predicate returning the result of the decorated predicate
        once a null check is performed.
        @param object  the input object
        @return true if decorated predicate returns true, false if input is null
        <!-- ACCEPT >=> 6845ad41-9f1d-11ea-85e6-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.NullIsFalsePredicate` / `public Predicate<? super T>[] getPredicates()`


        <!-- 6845ad42-9f1d-11ea-85e7-333445793454 <=< ACCEPT -->
        Gets the predicate being decorated.
        @return the predicate as the only element in an array
        @since 3.1
        <!-- ACCEPT >=> 6845ad42-9f1d-11ea-85e7-333445793454 -->



# File: `java.org.apache.commons.collections4.functors.NullIsTruePredicate`

## Class: `java.org.apache.commons.collections4.functors.NullIsTruePredicate` / `public final class NullIsTruePredicate<T> implements PredicateDecorator<T>, Serializable`


        <!-- 6845ad43-9f1d-11ea-85e8-333445793454 <=< ACCEPT -->
        Predicate implementation that returns true if the input is null.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 6845ad43-9f1d-11ea-85e8-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.NullIsTruePredicate` / `private static final long serialVersionUID`


        <!-- 6845d437-9f1d-11ea-85e9-333445793454 <=< ACCEPT -->
        Serial version UID
        <!-- ACCEPT >=> 6845d437-9f1d-11ea-85e9-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.NullIsTruePredicate` / `private final Predicate<? super T> iPredicate`


        <!-- 6845d438-9f1d-11ea-85ea-333445793454 <=< ACCEPT -->
        The predicate to decorate
        <!-- ACCEPT >=> 6845d438-9f1d-11ea-85ea-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.NullIsTruePredicate` / `public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)`


        <!-- 6845d439-9f1d-11ea-85eb-333445793454 <=< ACCEPT -->
        Factory to create the null true predicate.
        @param <T> the type that the predicate queries
        @param predicate  the predicate to decorate, not null
        @return the predicate
        @throws NullPointerException if the predicate is null
        <!-- ACCEPT >=> 6845d439-9f1d-11ea-85eb-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.NullIsTruePredicate` / `public NullIsTruePredicate(final Predicate<? super T> predicate)`


        <!-- 6845d43a-9f1d-11ea-85ec-333445793454 <=< ACCEPT -->
        Constructor that performs no validation.
        Use <code>nullIsTruePredicate</code> if you want that.
        @param predicate  the predicate to call after the null check
        <!-- ACCEPT >=> 6845d43a-9f1d-11ea-85ec-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.NullIsTruePredicate` / `public boolean evaluate(final T object)`


        <!-- 6845d43b-9f1d-11ea-85ed-333445793454 <=< ACCEPT -->
        Evaluates the predicate returning the result of the decorated predicate
        once a null check is performed.
        @param object  the input object
        @return true if decorated predicate returns true or input is null
        <!-- ACCEPT >=> 6845d43b-9f1d-11ea-85ed-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.NullIsTruePredicate` / `public Predicate<? super T>[] getPredicates()`


        <!-- 6845d43c-9f1d-11ea-85ee-333445793454 <=< ACCEPT -->
        Gets the predicate being decorated.
        @return the predicate as the only element in an array
        @since 3.1
        <!-- ACCEPT >=> 6845d43c-9f1d-11ea-85ee-333445793454 -->



# File: `java.org.apache.commons.collections4.functors.NullPredicate`

## Class: `java.org.apache.commons.collections4.functors.NullPredicate` / `public final class NullPredicate<T> implements Predicate<T>, Serializable`


        <!-- 6845d43d-9f1d-11ea-85ef-333445793454 <=< ACCEPT -->
        Predicate implementation that returns true if the input is null.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 6845d43d-9f1d-11ea-85ef-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.NullPredicate` / `private static final long serialVersionUID`


        <!-- 6845d43e-9f1d-11ea-85f0-333445793454 <=< ACCEPT -->
        Serial version UID
        <!-- ACCEPT >=> 6845d43e-9f1d-11ea-85f0-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.NullPredicate` / `public static final Predicate INSTANCE`


        <!-- 6845d43f-9f1d-11ea-85f1-333445793454 <=< ACCEPT -->
        Singleton predicate instance
        <!-- ACCEPT >=> 6845d43f-9f1d-11ea-85f1-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.NullPredicate` / `public static <T> Predicate<T> nullPredicate()`


        <!-- 6845d440-9f1d-11ea-85f2-333445793454 <=< ACCEPT -->
        Factory returning the singleton instance.
        @param <T> the type that the predicate queries
        @return the singleton instance
        @since 3.1
        <!-- ACCEPT >=> 6845d440-9f1d-11ea-85f2-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.NullPredicate` / `private NullPredicate()`


        <!-- 6845d441-9f1d-11ea-85f3-333445793454 <=< ACCEPT -->
        Restricted constructor.
        <!-- ACCEPT >=> 6845d441-9f1d-11ea-85f3-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.NullPredicate` / `public boolean evaluate(final T object)`


        <!-- 6845d442-9f1d-11ea-85f4-333445793454 <=< ACCEPT -->
        Evaluates the predicate returning true if the input is null.
        @param object  the input object
        @return true if input is null
        <!-- ACCEPT >=> 6845d442-9f1d-11ea-85f4-333445793454 -->



# File: `java.org.apache.commons.collections4.functors.OnePredicate`

## Class: `java.org.apache.commons.collections4.functors.OnePredicate` / `public final class OnePredicate<T> extends AbstractQuantifierPredicate<T>`


        <!-- 6845d443-9f1d-11ea-85f5-333445793454 <=< ACCEPT -->
        Predicate implementation that returns true if only one of the
        predicates return true.
        If the array of predicates is empty, then this predicate returns false.
        <p>
        NOTE: In versions prior to 3.2 an array size of zero or one
        threw an exception.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 6845d443-9f1d-11ea-85f5-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.OnePredicate` / `private static final long serialVersionUID`


        <!-- 6845d444-9f1d-11ea-85f6-333445793454 <=< ACCEPT -->
        Serial version UID
        <!-- ACCEPT >=> 6845d444-9f1d-11ea-85f6-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.OnePredicate` / `public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)`


        <!-- 6845d445-9f1d-11ea-85f7-333445793454 <=< ACCEPT -->
        Factory to create the predicate.
        <p>
        If the array is size zero, the predicate always returns false.
        If the array is size one, then that predicate is returned.
        @param <T> the type that the predicate queries
        @param predicates  the predicates to check, cloned, not null
        @return the <code>any</code> predicate
        @throws NullPointerException if the predicates array is null
        @throws NullPointerException if any predicate in the array is null
        <!-- ACCEPT >=> 6845d445-9f1d-11ea-85f7-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.OnePredicate` / `public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)`


        <!-- 6845d446-9f1d-11ea-85f8-333445793454 <=< ACCEPT -->
        Factory to create the predicate.
        @param <T> the type that the predicate queries
        @param predicates  the predicates to check, cloned, not null
        @return the <code>one</code> predicate
        @throws NullPointerException if the predicates array is null
        @throws NullPointerException if any predicate in the array is null
        <!-- ACCEPT >=> 6845d446-9f1d-11ea-85f8-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.OnePredicate` / `public OnePredicate(final Predicate<? super T>... predicates)`


        <!-- 6845d447-9f1d-11ea-85f9-333445793454 <=< ACCEPT -->
        Constructor that performs no validation.
        Use <code>onePredicate</code> if you want that.
        @param predicates  the predicates to check, not cloned, not null
        <!-- ACCEPT >=> 6845d447-9f1d-11ea-85f9-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.OnePredicate` / `public boolean evaluate(final T object)`


        <!-- 6845d448-9f1d-11ea-85fa-333445793454 <=< ACCEPT -->
        Evaluates the predicate returning true if only one decorated predicate
        returns true.
        @param object  the input object
        @return true if only one decorated predicate returns true
        <!-- ACCEPT >=> 6845d448-9f1d-11ea-85fa-333445793454 -->



# File: `java.org.apache.commons.collections4.functors.OrPredicate`

## Class: `java.org.apache.commons.collections4.functors.OrPredicate` / `public final class OrPredicate<T> implements PredicateDecorator<T>, Serializable`


        <!-- 6845d449-9f1d-11ea-85fb-333445793454 <=< ACCEPT -->
        Predicate implementation that returns true if either of the predicates return true.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 6845d449-9f1d-11ea-85fb-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.OrPredicate` / `private static final long serialVersionUID`


        <!-- 6845d44a-9f1d-11ea-85fc-333445793454 <=< ACCEPT -->
        Serial version UID
        <!-- ACCEPT >=> 6845d44a-9f1d-11ea-85fc-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.OrPredicate` / `private final Predicate<? super T> iPredicate1`


        <!-- 6845d44b-9f1d-11ea-85fd-333445793454 <=< ACCEPT -->
        The array of predicates to call
        <!-- ACCEPT >=> 6845d44b-9f1d-11ea-85fd-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.OrPredicate` / `private final Predicate<? super T> iPredicate2`


        <!-- 6845d44c-9f1d-11ea-85fe-333445793454 <=< ACCEPT -->
        The array of predicates to call
        <!-- ACCEPT >=> 6845d44c-9f1d-11ea-85fe-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.OrPredicate` / `final Predicate<? super T> predicate2)`


        <!-- 6845d44d-9f1d-11ea-85ff-333445793454 <=< ACCEPT -->
        Factory to create the predicate.
        @param <T> the type that the predicate queries
        @param predicate1  the first predicate to check, not null
        @param predicate2  the second predicate to check, not null
        @return the <code>and</code> predicate
        @throws NullPointerException if either predicate is null
        <!-- ACCEPT >=> 6845d44d-9f1d-11ea-85ff-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.OrPredicate` / `public OrPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)`


        <!-- 6845fb43-9f1d-11ea-8600-333445793454 <=< ACCEPT -->
        Constructor that performs no validation.
        Use <code>orPredicate</code> if you want that.
        @param predicate1  the first predicate to check, not null
        @param predicate2  the second predicate to check, not null
        <!-- ACCEPT >=> 6845fb43-9f1d-11ea-8600-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.OrPredicate` / `public boolean evaluate(final T object)`


        <!-- 6845fb44-9f1d-11ea-8601-333445793454 <=< ACCEPT -->
        Evaluates the predicate returning true if either predicate returns true.
        @param object  the input object
        @return true if either decorated predicate returns true
        <!-- ACCEPT >=> 6845fb44-9f1d-11ea-8601-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.OrPredicate` / `public Predicate<? super T>[] getPredicates()`


        <!-- 6845fb45-9f1d-11ea-8602-333445793454 <=< ACCEPT -->
        Gets the two predicates being decorated as an array.
        @return the predicates
        @since 3.1
        <!-- ACCEPT >=> 6845fb45-9f1d-11ea-8602-333445793454 -->



# File: `java.org.apache.commons.collections4.functors.PredicateDecorator`

## Interface: `java.org.apache.commons.collections4.functors.PredicateDecorator` / `public interface PredicateDecorator<T> extends Predicate<T>`


        <!-- 6845fb46-9f1d-11ea-8603-333445793454 <=< ACCEPT -->
        Defines a predicate that decorates one or more other predicates.
        <p>
        This interface enables tools to access the decorated predicates.
        @since 3.1
        @version $Id$
        <!-- ACCEPT >=> 6845fb46-9f1d-11ea-8603-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.PredicateDecorator` / `Predicate<? super T>[] getPredicates()`


        <!-- 6845fb47-9f1d-11ea-8604-333445793454 <=< ACCEPT -->
        Gets the predicates being decorated as an array.
        <p>
        The array may be the internal data structure of the predicate and thus
        should not be altered.
        @return the predicates being decorated
        <!-- ACCEPT >=> 6845fb47-9f1d-11ea-8604-333445793454 -->



# File: `java.org.apache.commons.collections4.functors.PredicateTransformer`

## Class: `java.org.apache.commons.collections4.functors.PredicateTransformer` / `public class PredicateTransformer<T> implements Transformer<T, Boolean>, Serializable`


        <!-- 6845fb48-9f1d-11ea-8605-333445793454 <=< ACCEPT -->
        Transformer implementation that calls a Predicate using the input object
        and then returns the result.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 6845fb48-9f1d-11ea-8605-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.PredicateTransformer` / `private static final long serialVersionUID`


        <!-- 6845fb49-9f1d-11ea-8606-333445793454 <=< ACCEPT -->
        Serial version UID
        <!-- ACCEPT >=> 6845fb49-9f1d-11ea-8606-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.PredicateTransformer` / `private final Predicate<? super T> iPredicate`


        <!-- 6845fb4a-9f1d-11ea-8607-333445793454 <=< ACCEPT -->
        The closure to wrap
        <!-- ACCEPT >=> 6845fb4a-9f1d-11ea-8607-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.PredicateTransformer` / `public static <T> Transformer<T, Boolean> predicateTransformer(final Predicate<? super T> predicate)`


        <!-- 6845fb4b-9f1d-11ea-8608-333445793454 <=< ACCEPT -->
        Factory method that performs validation.
        @param <T>  the input type
        @param predicate  the predicate to call, not null
        @return the <code>predicate</code> transformer
        @throws IllegalArgumentException if the predicate is null
        <!-- ACCEPT >=> 6845fb4b-9f1d-11ea-8608-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.PredicateTransformer` / `public PredicateTransformer(final Predicate<? super T> predicate)`


        <!-- 6845fb4c-9f1d-11ea-8609-333445793454 <=< ACCEPT -->
        Constructor that performs no validation.
        Use <code>predicateTransformer</code> if you want that.
        @param predicate  the predicate to call, not null
        <!-- ACCEPT >=> 6845fb4c-9f1d-11ea-8609-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.PredicateTransformer` / `public Boolean transform(final T input)`


        <!-- 6845fb4d-9f1d-11ea-860a-333445793454 <=< ACCEPT -->
        Transforms the input to result by calling a predicate.
        @param input  the input object to transform
        @return the transformed result
        <!-- ACCEPT >=> 6845fb4d-9f1d-11ea-860a-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.PredicateTransformer` / `public Predicate<? super T> getPredicate()`


        <!-- 6845fb4e-9f1d-11ea-860b-333445793454 <=< ACCEPT -->
        Gets the predicate.
        @return the predicate
        @since 3.1
        <!-- ACCEPT >=> 6845fb4e-9f1d-11ea-860b-333445793454 -->



# File: `java.org.apache.commons.collections4.functors.PrototypeFactory`

## Class: `java.org.apache.commons.collections4.functors.PrototypeFactory` / `public class PrototypeFactory`


        <!-- 6845fb4f-9f1d-11ea-860c-333445793454 <=< ACCEPT -->
        Factory implementation that creates a new instance each time based on a prototype.
        <p>
        <b>WARNING:</b> from v4.1 onwards {@link Factory} instances returned by
        {@link #prototypeFactory(Object)} will <b>not</b> be serializable anymore in order
        to prevent potential remote code execution exploits. Please refer to
        <a href="https://issues.apache.org/jira/browse/COLLECTIONS-580">COLLECTIONS-580</a>
        for more details.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 6845fb4f-9f1d-11ea-860c-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.PrototypeFactory` / `public static <T> Factory<T> prototypeFactory(final T prototype)`


        <!-- 6845fb50-9f1d-11ea-860d-333445793454 <=< ACCEPT -->
        Factory method that performs validation.
        <p>
        Creates a Factory that will return a clone of the same prototype object
        each time the factory is used. The prototype will be cloned using one of these
        techniques (in order):
        <ul>
        <li>public clone method
        <li>public copy constructor
        <li>serialization clone
        <ul>
        @param <T>  the type the factory creates
        @param prototype  the object to clone each time in the factory
        @return the <code>prototype</code> factory, or a {@link ConstantFactory#NULL_INSTANCE} if
        the {@code prototype} is {@code null}
        @throws IllegalArgumentException if the prototype cannot be cloned
        <!-- ACCEPT >=> 6845fb50-9f1d-11ea-860d-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.PrototypeFactory` / `private PrototypeFactory()`


        <!-- 6845fb51-9f1d-11ea-860e-333445793454 <=< ACCEPT -->
        Restricted constructor.
        <!-- ACCEPT >=> 6845fb51-9f1d-11ea-860e-333445793454 -->



## Class: `java.org.apache.commons.collections4.functors.PrototypeFactory` / `static class PrototypeCloneFactory<T> implements Factory<T>`


        <!-- 6845fb52-9f1d-11ea-860f-333445793454 <=< ACCEPT -->
        PrototypeCloneFactory creates objects by copying a prototype using the clone method.
        <!-- ACCEPT >=> 6845fb52-9f1d-11ea-860f-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.PrototypeFactory` / `private final T iPrototype`


        <!-- 6845fb53-9f1d-11ea-8610-333445793454 <=< ACCEPT -->
        The object to clone each time
        <!-- ACCEPT >=> 6845fb53-9f1d-11ea-8610-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.PrototypeFactory` / `private transient Method iCloneMethod`


        <!-- 6845fb54-9f1d-11ea-8611-333445793454 <=< ACCEPT -->
        The method used to clone
        <!-- ACCEPT >=> 6845fb54-9f1d-11ea-8611-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.PrototypeFactory` / `private PrototypeCloneFactory(final T prototype, final Method method)`


        <!-- 6845fb55-9f1d-11ea-8612-333445793454 <=< ACCEPT -->
        Constructor to store prototype.
        <!-- ACCEPT >=> 6845fb55-9f1d-11ea-8612-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.PrototypeFactory` / `private void findCloneMethod()`


        <!-- 6845fb56-9f1d-11ea-8613-333445793454 <=< ACCEPT -->
        Find the Clone method for the class specified.
        <!-- ACCEPT >=> 6845fb56-9f1d-11ea-8613-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.PrototypeFactory` / `public T create()`


        <!-- 6845fb57-9f1d-11ea-8614-333445793454 <=< ACCEPT -->
        Creates an object by calling the clone method.
        @return the new object
        <!-- ACCEPT >=> 6845fb57-9f1d-11ea-8614-333445793454 -->



## Class: `java.org.apache.commons.collections4.functors.PrototypeFactory` / `static class PrototypeSerializationFactory<T extends Serializable> implements Factory<T>`


        <!-- 6845fb58-9f1d-11ea-8615-333445793454 <=< ACCEPT -->
        PrototypeSerializationFactory creates objects by cloning a prototype using serialization.
        <!-- ACCEPT >=> 6845fb58-9f1d-11ea-8615-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.PrototypeFactory` / `private final T iPrototype`


        <!-- 6845fb59-9f1d-11ea-8616-333445793454 <=< ACCEPT -->
        The object to clone via serialization each time
        <!-- ACCEPT >=> 6845fb59-9f1d-11ea-8616-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.PrototypeFactory` / `private PrototypeSerializationFactory(final T prototype)`


        <!-- 6846224c-9f1d-11ea-8617-333445793454 <=< ACCEPT -->
        Constructor to store prototype
        <!-- ACCEPT >=> 6846224c-9f1d-11ea-8617-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.PrototypeFactory` / `public T create()`


        <!-- 6846224d-9f1d-11ea-8618-333445793454 <=< ACCEPT -->
        Creates an object using serialization.
        @return the new object
        <!-- ACCEPT >=> 6846224d-9f1d-11ea-8618-333445793454 -->



# File: `java.org.apache.commons.collections4.functors.StringValueTransformer`

## Class: `java.org.apache.commons.collections4.functors.StringValueTransformer` / `public final class StringValueTransformer<T> implements Transformer<T, String>, Serializable`


        <!-- 6846224e-9f1d-11ea-8619-333445793454 <=< ACCEPT -->
        Transformer implementation that returns the result of calling
        <code>String.valueOf</code> on the input object.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 6846224e-9f1d-11ea-8619-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.StringValueTransformer` / `private static final long serialVersionUID`


        <!-- 6846224f-9f1d-11ea-861a-333445793454 <=< ACCEPT -->
        Serial version UID
        <!-- ACCEPT >=> 6846224f-9f1d-11ea-861a-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.StringValueTransformer` / `private static final Transformer<Object, String> INSTANCE`


        <!-- 68462250-9f1d-11ea-861b-333445793454 <=< ACCEPT -->
        Singleton predicate instance
        <!-- ACCEPT >=> 68462250-9f1d-11ea-861b-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.StringValueTransformer` / `public static <T> Transformer<T, String> stringValueTransformer()`


        <!-- 68462251-9f1d-11ea-861c-333445793454 <=< ACCEPT -->
        Factory returning the singleton instance.
        @param <T>  the input type
        @return the singleton instance
        @since 3.1
        <!-- ACCEPT >=> 68462251-9f1d-11ea-861c-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.StringValueTransformer` / `private StringValueTransformer()`


        <!-- 68462252-9f1d-11ea-861d-333445793454 <=< ACCEPT -->
        Restricted constructor.
        <!-- ACCEPT >=> 68462252-9f1d-11ea-861d-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.StringValueTransformer` / `public String transform(final T input)`


        <!-- 68462253-9f1d-11ea-861e-333445793454 <=< ACCEPT -->
        Transforms the input to result by calling <code>String.valueOf</code>.
        @param input  the input object to transform
        @return the transformed result
        <!-- ACCEPT >=> 68462253-9f1d-11ea-861e-333445793454 -->



# File: `java.org.apache.commons.collections4.functors.SwitchClosure`

## Class: `java.org.apache.commons.collections4.functors.SwitchClosure` / `public class SwitchClosure<E> implements Closure<E>, Serializable`


        <!-- 68462254-9f1d-11ea-861f-333445793454 <=< ACCEPT -->
        Closure implementation calls the closure whose predicate returns true,
        like a switch statement.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 68462254-9f1d-11ea-861f-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.SwitchClosure` / `private static final long serialVersionUID`


        <!-- 68462255-9f1d-11ea-8620-333445793454 <=< ACCEPT -->
        Serial version UID
        <!-- ACCEPT >=> 68462255-9f1d-11ea-8620-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.SwitchClosure` / `private final Predicate<? super E>[] iPredicates`


        <!-- 68462256-9f1d-11ea-8621-333445793454 <=< ACCEPT -->
        The tests to consider
        <!-- ACCEPT >=> 68462256-9f1d-11ea-8621-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.SwitchClosure` / `private final Closure<? super E>[] iClosures`


        <!-- 68462257-9f1d-11ea-8622-333445793454 <=< ACCEPT -->
        The matching closures to call
        <!-- ACCEPT >=> 68462257-9f1d-11ea-8622-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.SwitchClosure` / `private final Closure<? super E> iDefault`


        <!-- 68462258-9f1d-11ea-8623-333445793454 <=< ACCEPT -->
        The default closure to call if no tests match
        <!-- ACCEPT >=> 68462258-9f1d-11ea-8623-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.SwitchClosure` / `final Closure<? super E> defaultClosure)`


        <!-- 68462259-9f1d-11ea-8624-333445793454 <=< ACCEPT -->
        Factory method that performs validation and copies the parameter arrays.
        @param <E> the type that the closure acts on
        @param predicates  array of predicates, cloned, no nulls
        @param closures  matching array of closures, cloned, no nulls
        @param defaultClosure  the closure to use if no match, null means nop
        @return the <code>chained</code> closure
        @throws NullPointerException if array is null
        @throws NullPointerException if any element in the array is null
        @throws IllegalArgumentException if the array lengths of predicates and closures do not match
        <!-- ACCEPT >=> 68462259-9f1d-11ea-8624-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.SwitchClosure` / `public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)`


        <!-- 6846225a-9f1d-11ea-8625-333445793454 <=< ACCEPT -->
        Create a new Closure that calls one of the closures depending
        on the predicates.
        <p>
        The Map consists of Predicate keys and Closure values. A closure
        is called if its matching predicate returns true. Each predicate is evaluated
        until one returns true. If no predicates evaluate to true, the default
        closure is called. The default closure is set in the map with a
        null key. The ordering is that of the iterator() method on the entryset
        collection of the map.
        @param <E> the type that the closure acts on
        @param predicatesAndClosures  a map of predicates to closures
        @return the <code>switch</code> closure
        @throws NullPointerException if the map is null
        @throws NullPointerException if any closure in the map is null
        @throws ClassCastException  if the map elements are of the wrong type
        <!-- ACCEPT >=> 6846225a-9f1d-11ea-8625-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.SwitchClosure` / `final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)`


        <!-- 6846225b-9f1d-11ea-8626-333445793454 <=< ACCEPT -->
        Hidden constructor for the use by the static factory methods.
        @param clone  if {@code true} the input arguments will be cloned
        @param predicates  array of predicates, no nulls
        @param closures  matching array of closures, no nulls
        @param defaultClosure  the closure to use if no match, null means nop
        <!-- ACCEPT >=> 6846225b-9f1d-11ea-8626-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.SwitchClosure` / `final Closure<? super E> defaultClosure)`


        <!-- 6846225c-9f1d-11ea-8627-333445793454 <=< ACCEPT -->
        Constructor that performs no validation.
        Use <code>switchClosure</code> if you want that.
        @param predicates  array of predicates, cloned, no nulls
        @param closures  matching array of closures, cloned, no nulls
        @param defaultClosure  the closure to use if no match, null means nop
        <!-- ACCEPT >=> 6846225c-9f1d-11ea-8627-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.SwitchClosure` / `public void execute(final E input)`


        <!-- 6846225d-9f1d-11ea-8628-333445793454 <=< ACCEPT -->
        Executes the closure whose matching predicate returns true
        @param input  the input object
        <!-- ACCEPT >=> 6846225d-9f1d-11ea-8628-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.SwitchClosure` / `public Predicate<? super E>[] getPredicates()`


        <!-- 6846225e-9f1d-11ea-8629-333445793454 <=< ACCEPT -->
        Gets the predicates.
        @return a copy of the predicates
        @since 3.1
        <!-- ACCEPT >=> 6846225e-9f1d-11ea-8629-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.SwitchClosure` / `public Closure<? super E>[] getClosures()`


        <!-- 6846225f-9f1d-11ea-862a-333445793454 <=< ACCEPT -->
        Gets the closures.
        @return a copy of the closures
        @since 3.1
        <!-- ACCEPT >=> 6846225f-9f1d-11ea-862a-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.SwitchClosure` / `public Closure<? super E> getDefaultClosure()`


        <!-- 68462260-9f1d-11ea-862b-333445793454 <=< ACCEPT -->
        Gets the default closure.
        @return the default closure
        @since 3.1
        <!-- ACCEPT >=> 68462260-9f1d-11ea-862b-333445793454 -->



# File: `java.org.apache.commons.collections4.functors.SwitchTransformer`

## Class: `java.org.apache.commons.collections4.functors.SwitchTransformer` / `public class SwitchTransformer<I, O> implements Transformer<I, O>, Serializable`


        <!-- 68462261-9f1d-11ea-862c-333445793454 <=< ACCEPT -->
        Transformer implementation calls the transformer whose predicate returns true,
        like a switch statement.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 68462261-9f1d-11ea-862c-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.SwitchTransformer` / `private static final long serialVersionUID`


        <!-- 68464955-9f1d-11ea-862d-333445793454 <=< ACCEPT -->
        Serial version UID
        <!-- ACCEPT >=> 68464955-9f1d-11ea-862d-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.SwitchTransformer` / `private final Predicate<? super I>[] iPredicates`


        <!-- 68464956-9f1d-11ea-862e-333445793454 <=< ACCEPT -->
        The tests to consider
        <!-- ACCEPT >=> 68464956-9f1d-11ea-862e-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.SwitchTransformer` / `private final Transformer<? super I, ? extends O>[] iTransformers`


        <!-- 68464957-9f1d-11ea-862f-333445793454 <=< ACCEPT -->
        The matching transformers to call
        <!-- ACCEPT >=> 68464957-9f1d-11ea-862f-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.SwitchTransformer` / `private final Transformer<? super I, ? extends O> iDefault`


        <!-- 68464958-9f1d-11ea-8630-333445793454 <=< ACCEPT -->
        The default transformer to call if no tests match
        <!-- ACCEPT >=> 68464958-9f1d-11ea-8630-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.SwitchTransformer` / `final Transformer<? super I, ? extends O> defaultTransformer)`


        <!-- 68464959-9f1d-11ea-8631-333445793454 <=< ACCEPT -->
        Factory method that performs validation and copies the parameter arrays.
        @param <I>  the input type
        @param <O>  the output type
        @param predicates  array of predicates, cloned, no nulls
        @param transformers  matching array of transformers, cloned, no nulls
        @param defaultTransformer  the transformer to use if no match, null means return null
        @return the <code>chained</code> transformer
        @throws NullPointerException if array is null
        @throws NullPointerException if any element in the array is null
        <!-- ACCEPT >=> 68464959-9f1d-11ea-8631-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.SwitchTransformer` / `final Map<? extends Predicate<? super I>, ? extends Transformer<? super I, ? extends O>> map)`


        <!-- 6846495a-9f1d-11ea-8632-333445793454 <=< ACCEPT -->
        Create a new Transformer that calls one of the transformers depending
        on the predicates.
        <p>
        The Map consists of Predicate keys and Transformer values. A transformer
        is called if its matching predicate returns true. Each predicate is evaluated
        until one returns true. If no predicates evaluate to true, the default
        transformer is called. The default transformer is set in the map with a
        null key. The ordering is that of the iterator() method on the entryset
        collection of the map.
        @param <I>  the input type
        @param <O>  the output type
        @param map  a map of predicates to transformers
        @return the <code>switch</code> transformer
        @throws NullPointerException if the map is null
        @throws NullPointerException if any transformer in the map is null
        @throws ClassCastException  if the map elements are of the wrong type
        <!-- ACCEPT >=> 6846495a-9f1d-11ea-8632-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.SwitchTransformer` / `final Transformer<? super I, ? extends O> defaultTransformer)`


        <!-- 6846495b-9f1d-11ea-8633-333445793454 <=< ACCEPT -->
        Hidden constructor for the use by the static factory methods.
        @param clone  if {@code true} the input arguments will be cloned
        @param predicates  array of predicates, no nulls
        @param transformers  matching array of transformers, no nulls
        @param defaultTransformer  the transformer to use if no match, null means return null
        <!-- ACCEPT >=> 6846495b-9f1d-11ea-8633-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.SwitchTransformer` / `final Transformer<? super I, ? extends O> defaultTransformer)`


        <!-- 6846495c-9f1d-11ea-8634-333445793454 <=< ACCEPT -->
        Constructor that performs no validation.
        Use <code>switchTransformer</code> if you want that.
        @param predicates  array of predicates, cloned, no nulls
        @param transformers  matching array of transformers, cloned, no nulls
        @param defaultTransformer  the transformer to use if no match, null means return null
        <!-- ACCEPT >=> 6846495c-9f1d-11ea-8634-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.SwitchTransformer` / `public O transform(final I input)`


        <!-- 6846495d-9f1d-11ea-8635-333445793454 <=< ACCEPT -->
        Transforms the input to result by calling the transformer whose matching
        predicate returns true.
        @param input  the input object to transform
        @return the transformed result
        <!-- ACCEPT >=> 6846495d-9f1d-11ea-8635-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.SwitchTransformer` / `public Predicate<? super I>[] getPredicates()`


        <!-- 6846495e-9f1d-11ea-8636-333445793454 <=< ACCEPT -->
        Gets the predicates.
        @return a copy of the predicates
        @since 3.1
        <!-- ACCEPT >=> 6846495e-9f1d-11ea-8636-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.SwitchTransformer` / `public Transformer<? super I, ? extends O>[] getTransformers()`


        <!-- 6846495f-9f1d-11ea-8637-333445793454 <=< ACCEPT -->
        Gets the transformers.
        @return a copy of the transformers
        @since 3.1
        <!-- ACCEPT >=> 6846495f-9f1d-11ea-8637-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.SwitchTransformer` / `public Transformer<? super I, ? extends O> getDefaultTransformer()`


        <!-- 68464960-9f1d-11ea-8638-333445793454 <=< ACCEPT -->
        Gets the default transformer.
        @return the default transformer
        @since 3.1
        <!-- ACCEPT >=> 68464960-9f1d-11ea-8638-333445793454 -->



# File: `java.org.apache.commons.collections4.functors.TransformedPredicate`

## Class: `java.org.apache.commons.collections4.functors.TransformedPredicate` / `public final class TransformedPredicate<T> implements PredicateDecorator<T>, Serializable`


        <!-- 68464961-9f1d-11ea-8639-333445793454 <=< ACCEPT -->
        Predicate implementation that transforms the given object before invoking
        another <code>Predicate</code>.
        @since 3.1
        @version $Id$
        <!-- ACCEPT >=> 68464961-9f1d-11ea-8639-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.TransformedPredicate` / `private static final long serialVersionUID`


        <!-- 68464962-9f1d-11ea-863a-333445793454 <=< ACCEPT -->
        Serial version UID
        <!-- ACCEPT >=> 68464962-9f1d-11ea-863a-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.TransformedPredicate` / `private final Transformer<? super T, ? extends T> iTransformer`


        <!-- 68464963-9f1d-11ea-863b-333445793454 <=< ACCEPT -->
        The transformer to call
        <!-- ACCEPT >=> 68464963-9f1d-11ea-863b-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.TransformedPredicate` / `private final Predicate<? super T> iPredicate`


        <!-- 68464964-9f1d-11ea-863c-333445793454 <=< ACCEPT -->
        The predicate to call
        <!-- ACCEPT >=> 68464964-9f1d-11ea-863c-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.TransformedPredicate` / `final Predicate<? super T> predicate)`


        <!-- 68464965-9f1d-11ea-863d-333445793454 <=< ACCEPT -->
        Factory to create the predicate.
        @param <T> the type that the predicate queries
        @param transformer  the transformer to call
        @param predicate  the predicate to call with the result of the transform
        @return the predicate
        @throws NullPointerException if the transformer or the predicate is null
        <!-- ACCEPT >=> 68464965-9f1d-11ea-863d-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.TransformedPredicate` / `final Predicate<? super T> predicate)`


        <!-- 68464966-9f1d-11ea-863e-333445793454 <=< ACCEPT -->
        Constructor that performs no validation.
        Use <code>transformedPredicate</code> if you want that.
        @param transformer  the transformer to use
        @param predicate  the predicate to decorate
        <!-- ACCEPT >=> 68464966-9f1d-11ea-863e-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.TransformedPredicate` / `public boolean evaluate(final T object)`


        <!-- 68464967-9f1d-11ea-863f-333445793454 <=< ACCEPT -->
        Evaluates the predicate returning the result of the decorated predicate
        once the input has been transformed
        @param object  the input object which will be transformed
        @return true if decorated predicate returns true
        <!-- ACCEPT >=> 68464967-9f1d-11ea-863f-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.TransformedPredicate` / `public Predicate<? super T>[] getPredicates()`


        <!-- 68464968-9f1d-11ea-8640-333445793454 <=< ACCEPT -->
        Gets the predicate being decorated.
        @return the predicate as the only element in an array
        @since 3.1
        <!-- ACCEPT >=> 68464968-9f1d-11ea-8640-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.TransformedPredicate` / `public Transformer<? super T, ? extends T> getTransformer()`


        <!-- 68464969-9f1d-11ea-8641-333445793454 <=< ACCEPT -->
        Gets the transformer in use.
        @return the transformer
        <!-- ACCEPT >=> 68464969-9f1d-11ea-8641-333445793454 -->



# File: `java.org.apache.commons.collections4.functors.TransformerClosure`

## Class: `java.org.apache.commons.collections4.functors.TransformerClosure` / `public class TransformerClosure<E> implements Closure<E>, Serializable`


        <!-- 6846496a-9f1d-11ea-8642-333445793454 <=< ACCEPT -->
        Closure implementation that calls a Transformer using the input object
        and ignore the result.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 6846496a-9f1d-11ea-8642-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.TransformerClosure` / `private static final long serialVersionUID`


        <!-- 68467063-9f1d-11ea-8643-333445793454 <=< ACCEPT -->
        Serial version UID
        <!-- ACCEPT >=> 68467063-9f1d-11ea-8643-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.TransformerClosure` / `private final Transformer<? super E, ?> iTransformer`


        <!-- 68467064-9f1d-11ea-8644-333445793454 <=< ACCEPT -->
        The transformer to wrap
        <!-- ACCEPT >=> 68467064-9f1d-11ea-8644-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.TransformerClosure` / `public static <E> Closure<E> transformerClosure(final Transformer<? super E, ?> transformer)`


        <!-- 68467065-9f1d-11ea-8645-333445793454 <=< ACCEPT -->
        Factory method that performs validation.
        <p>
        A null transformer will return the <code>NOPClosure</code>.
        @param <E> the type that the closure acts on
        @param transformer  the transformer to call, null means nop
        @return the <code>transformer</code> closure
        <!-- ACCEPT >=> 68467065-9f1d-11ea-8645-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.TransformerClosure` / `public TransformerClosure(final Transformer<? super E, ?> transformer)`


        <!-- 68467066-9f1d-11ea-8646-333445793454 <=< ACCEPT -->
        Constructor that performs no validation.
        Use <code>transformerClosure</code> if you want that.
        @param transformer  the transformer to call, not null
        <!-- ACCEPT >=> 68467066-9f1d-11ea-8646-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.TransformerClosure` / `public void execute(final E input)`


        <!-- 68467067-9f1d-11ea-8647-333445793454 <=< ACCEPT -->
        Executes the closure by calling the decorated transformer.
        @param input  the input object
        <!-- ACCEPT >=> 68467067-9f1d-11ea-8647-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.TransformerClosure` / `public Transformer<? super E, ?> getTransformer()`


        <!-- 68467068-9f1d-11ea-8648-333445793454 <=< ACCEPT -->
        Gets the transformer.
        @return the transformer
        @since 3.1
        <!-- ACCEPT >=> 68467068-9f1d-11ea-8648-333445793454 -->



# File: `java.org.apache.commons.collections4.functors.TransformerPredicate`

## Class: `java.org.apache.commons.collections4.functors.TransformerPredicate` / `public final class TransformerPredicate<T> implements Predicate<T>, Serializable`


        <!-- 68467069-9f1d-11ea-8649-333445793454 <=< ACCEPT -->
        Predicate implementation that returns the result of a transformer.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 68467069-9f1d-11ea-8649-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.TransformerPredicate` / `private static final long serialVersionUID`


        <!-- 6846706a-9f1d-11ea-864a-333445793454 <=< ACCEPT -->
        Serial version UID
        <!-- ACCEPT >=> 6846706a-9f1d-11ea-864a-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.TransformerPredicate` / `private final Transformer<? super T, Boolean> iTransformer`


        <!-- 6846706b-9f1d-11ea-864b-333445793454 <=< ACCEPT -->
        The transformer to call
        <!-- ACCEPT >=> 6846706b-9f1d-11ea-864b-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.TransformerPredicate` / `public static <T> Predicate<T> transformerPredicate(final Transformer<? super T, Boolean> transformer)`


        <!-- 6846706c-9f1d-11ea-864c-333445793454 <=< ACCEPT -->
        Factory to create the predicate.
        @param <T> the type that the predicate queries
        @param transformer  the transformer to decorate
        @return the predicate
        @throws NullPointerException if the transformer is null
        <!-- ACCEPT >=> 6846706c-9f1d-11ea-864c-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.TransformerPredicate` / `public TransformerPredicate(final Transformer<? super T, Boolean> transformer)`


        <!-- 6846706d-9f1d-11ea-864d-333445793454 <=< ACCEPT -->
        Constructor that performs no validation.
        Use <code>transformerPredicate</code> if you want that.
        @param transformer  the transformer to decorate
        <!-- ACCEPT >=> 6846706d-9f1d-11ea-864d-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.TransformerPredicate` / `public boolean evaluate(final T object)`


        <!-- 6846706e-9f1d-11ea-864e-333445793454 <=< ACCEPT -->
        Evaluates the predicate returning the result of the decorated transformer.
        @param object  the input object
        @return true if decorated transformer returns Boolean.TRUE
        @throws FunctorException if the transformer returns an invalid type
        <!-- ACCEPT >=> 6846706e-9f1d-11ea-864e-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.TransformerPredicate` / `public Transformer<? super T, Boolean> getTransformer()`


        <!-- 6846706f-9f1d-11ea-864f-333445793454 <=< ACCEPT -->
        Gets the transformer.
        @return the transformer
        @since 3.1
        <!-- ACCEPT >=> 6846706f-9f1d-11ea-864f-333445793454 -->



# File: `java.org.apache.commons.collections4.functors.TruePredicate`

## Class: `java.org.apache.commons.collections4.functors.TruePredicate` / `public final class TruePredicate<T> implements Predicate<T>, Serializable`


        <!-- 68467070-9f1d-11ea-8650-333445793454 <=< ACCEPT -->
        Predicate implementation that always returns true.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 68467070-9f1d-11ea-8650-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.TruePredicate` / `private static final long serialVersionUID`


        <!-- 68467071-9f1d-11ea-8651-333445793454 <=< ACCEPT -->
        Serial version UID
        <!-- ACCEPT >=> 68467071-9f1d-11ea-8651-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.TruePredicate` / `public static final Predicate INSTANCE`


        <!-- 68467072-9f1d-11ea-8652-333445793454 <=< ACCEPT -->
        Singleton predicate instance
        <!-- ACCEPT >=> 68467072-9f1d-11ea-8652-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.TruePredicate` / `public static <T> Predicate<T> truePredicate()`


        <!-- 68467073-9f1d-11ea-8653-333445793454 <=< ACCEPT -->
        Factory returning the singleton instance.
        @param <T> the type that the predicate queries
        @return the singleton instance
        @since 3.1
        <!-- ACCEPT >=> 68467073-9f1d-11ea-8653-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.TruePredicate` / `private TruePredicate()`


        <!-- 68467074-9f1d-11ea-8654-333445793454 <=< ACCEPT -->
        Restricted constructor.
        <!-- ACCEPT >=> 68467074-9f1d-11ea-8654-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.TruePredicate` / `public boolean evaluate(final T object)`


        <!-- 68467075-9f1d-11ea-8655-333445793454 <=< ACCEPT -->
        Evaluates the predicate returning true always.
        @param object  the input object
        @return true always
        <!-- ACCEPT >=> 68467075-9f1d-11ea-8655-333445793454 -->



# File: `java.org.apache.commons.collections4.functors.UniquePredicate`

## Class: `java.org.apache.commons.collections4.functors.UniquePredicate` / `public final class UniquePredicate<T> implements Predicate<T>, Serializable`


        <!-- 68467076-9f1d-11ea-8656-333445793454 <=< ACCEPT -->
        Predicate implementation that returns true the first time an object is
        passed into the predicate.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 68467076-9f1d-11ea-8656-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.UniquePredicate` / `private static final long serialVersionUID`


        <!-- 68467077-9f1d-11ea-8657-333445793454 <=< ACCEPT -->
        Serial version UID
        <!-- ACCEPT >=> 68467077-9f1d-11ea-8657-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.UniquePredicate` / `private final Set<T> iSet`


        <!-- 68467078-9f1d-11ea-8658-333445793454 <=< ACCEPT -->
        The set of previously seen objects
        <!-- ACCEPT >=> 68467078-9f1d-11ea-8658-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.UniquePredicate` / `public static <T> Predicate<T> uniquePredicate()`


        <!-- 68467079-9f1d-11ea-8659-333445793454 <=< ACCEPT -->
        Factory to create the predicate.
        @param <T> the type that the predicate queries
        @return the predicate
        @throws IllegalArgumentException if the predicate is null
        <!-- ACCEPT >=> 68467079-9f1d-11ea-8659-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.UniquePredicate` / `public UniquePredicate()`


        <!-- 6846707a-9f1d-11ea-865a-333445793454 <=< ACCEPT -->
        Constructor that performs no validation.
        Use <code>uniquePredicate</code> if you want that.
        <!-- ACCEPT >=> 6846707a-9f1d-11ea-865a-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.UniquePredicate` / `public boolean evaluate(final T object)`


        <!-- 6846976a-9f1d-11ea-865b-333445793454 <=< ACCEPT -->
        Evaluates the predicate returning true if the input object hasn't been
        received yet.
        @param object  the input object
        @return true if this is the first time the object is seen
        <!-- ACCEPT >=> 6846976a-9f1d-11ea-865b-333445793454 -->



# File: `java.org.apache.commons.collections4.functors.WhileClosure`

## Class: `java.org.apache.commons.collections4.functors.WhileClosure` / `public class WhileClosure<E> implements Closure<E>`


        <!-- 6846976b-9f1d-11ea-865c-333445793454 <=< ACCEPT -->
        Closure implementation that executes a closure repeatedly until a condition is met,
        like a do-while or while loop.
        <p>
        <b>WARNING:</b> from v4.1 onwards this class will <b>not</b> be serializable anymore
        in order to prevent potential remote code execution exploits. Please refer to
        <a href="https://issues.apache.org/jira/browse/COLLECTIONS-580">COLLECTIONS-580</a>
        for more details.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 6846976b-9f1d-11ea-865c-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.WhileClosure` / `private final Predicate<? super E> iPredicate`


        <!-- 6846976c-9f1d-11ea-865d-333445793454 <=< ACCEPT -->
        The test condition
        <!-- ACCEPT >=> 6846976c-9f1d-11ea-865d-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.WhileClosure` / `private final Closure<? super E> iClosure`


        <!-- 6846976d-9f1d-11ea-865e-333445793454 <=< ACCEPT -->
        The closure to call
        <!-- ACCEPT >=> 6846976d-9f1d-11ea-865e-333445793454 -->



## Field: `java.org.apache.commons.collections4.functors.WhileClosure` / `private final boolean iDoLoop`


        <!-- 6846976e-9f1d-11ea-865f-333445793454 <=< ACCEPT -->
        The flag, true is a do loop, false is a while
        <!-- ACCEPT >=> 6846976e-9f1d-11ea-865f-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.WhileClosure` / `final Closure<? super E> closure, final boolean doLoop)`


        <!-- 6846976f-9f1d-11ea-8660-333445793454 <=< ACCEPT -->
        Factory method that performs validation.
        @param <E> the type that the closure acts on
        @param predicate  the predicate used to evaluate when the loop terminates, not null
        @param closure  the closure the execute, not null
        @param doLoop  true to act as a do-while loop, always executing the closure once
        @return the <code>while</code> closure
        @throws NullPointerException if the predicate or closure is null
        <!-- ACCEPT >=> 6846976f-9f1d-11ea-8660-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.functors.WhileClosure` / `public WhileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure, final boolean doLoop)`


        <!-- 68469770-9f1d-11ea-8661-333445793454 <=< ACCEPT -->
        Constructor that performs no validation.
        Use <code>whileClosure</code> if you want that.
        @param predicate  the predicate used to evaluate when the loop terminates, not null
        @param closure  the closure the execute, not null
        @param doLoop  true to act as a do-while loop, always executing the closure once
        <!-- ACCEPT >=> 68469770-9f1d-11ea-8661-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.WhileClosure` / `public void execute(final E input)`


        <!-- 68469771-9f1d-11ea-8662-333445793454 <=< ACCEPT -->
        Executes the closure until the predicate is false.
        @param input  the input object
        <!-- ACCEPT >=> 68469771-9f1d-11ea-8662-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.WhileClosure` / `public Predicate<? super E> getPredicate()`


        <!-- 68469772-9f1d-11ea-8663-333445793454 <=< ACCEPT -->
        Gets the predicate in use.
        @return the predicate
        @since 3.1
        <!-- ACCEPT >=> 68469772-9f1d-11ea-8663-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.WhileClosure` / `public Closure<? super E> getClosure()`


        <!-- 68469773-9f1d-11ea-8664-333445793454 <=< ACCEPT -->
        Gets the closure.
        @return the closure
        @since 3.1
        <!-- ACCEPT >=> 68469773-9f1d-11ea-8664-333445793454 -->



## Method: `java.org.apache.commons.collections4.functors.WhileClosure` / `public boolean isDoLoop()`


        <!-- 68469774-9f1d-11ea-8665-333445793454 <=< ACCEPT -->
        Is the loop a do-while loop.
        @return true is do-while, false if while
        @since 3.1
        <!-- ACCEPT >=> 68469774-9f1d-11ea-8665-333445793454 -->



# File: `java.org.apache.commons.collections4.functors.package-info`

## Package: `java.org.apache.commons.collections4.functors.package-info` / `package org.apache.commons.collections4.functors`


        <!-- 68469775-9f1d-11ea-8666-333445793454 <=< ACCEPT -->
        This package contains implementations of the
        {@link org.apache.commons.collections4.Closure Closure},
        {@link org.apache.commons.collections4.Predicate Predicate},
        {@link org.apache.commons.collections4.Transformer Transformer} and
        {@link org.apache.commons.collections4.Factory Factory} interfaces.
        These provide simple callbacks for processing with collections.
        <p>
        <b>WARNING:</b> from v4.1 onwards several unsafe classes in this package
        will not be serializable anymore in order to prevent potential remote
        code execution exploits.
        <p>
        Classes considered to be unsafe are:
        <ul>
        <li>CloneTransformer</li>
        <li>ForClosure</li>
        <li>InstantiateFactory</li>
        <li>InstantiateTransformer</li>
        <li>InvokerTransformer</li>
        <li>PrototypeFactory$PrototypeCloneFactory</li>
        <li>PrototypeFactory$PrototypeSerializationFactory</li>
        <li>WhileClosure</li>
        </ul>
        @version $Id$
        <!-- ACCEPT >=> 68469775-9f1d-11ea-8666-333445793454 -->



# File: `java.org.apache.commons.collections4.iterators.AbstractEmptyIterator`

## Class: `java.org.apache.commons.collections4.iterators.AbstractEmptyIterator` / `abstract class AbstractEmptyIterator<E>`


        <!-- 68469776-9f1d-11ea-8667-333445793454 <=< ACCEPT -->
        Provides an implementation of an empty iterator.
        @since 3.1
        @version $Id$
        <!-- ACCEPT >=> 68469776-9f1d-11ea-8667-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.AbstractEmptyIterator` / `protected AbstractEmptyIterator()`


        <!-- 68469777-9f1d-11ea-8668-333445793454 <=< ACCEPT -->
        Constructor.
        <!-- ACCEPT >=> 68469777-9f1d-11ea-8668-333445793454 -->



# File: `java.org.apache.commons.collections4.iterators.AbstractEmptyMapIterator`

## Class: `java.org.apache.commons.collections4.iterators.AbstractEmptyMapIterator` / `public abstract class AbstractEmptyMapIterator<K, V> extends AbstractEmptyIterator<K>`


        <!-- 68469778-9f1d-11ea-8669-333445793454 <=< ACCEPT -->
        Provides an implementation of an empty map iterator.
        @since 4.0
        @version $Id$
        <!-- ACCEPT >=> 68469778-9f1d-11ea-8669-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.AbstractEmptyMapIterator` / `public AbstractEmptyMapIterator()`


        <!-- 68469779-9f1d-11ea-866a-333445793454 <=< ACCEPT -->
        Create a new AbstractEmptyMapIterator.
        <!-- ACCEPT >=> 68469779-9f1d-11ea-866a-333445793454 -->



# File: `java.org.apache.commons.collections4.iterators.AbstractIteratorDecorator`

## Class: `java.org.apache.commons.collections4.iterators.AbstractIteratorDecorator` / `public abstract class AbstractIteratorDecorator<E> extends AbstractUntypedIteratorDecorator<E, E>`


        <!-- 6846977a-9f1d-11ea-866b-333445793454 <=< ACCEPT -->
        Provides basic behaviour for decorating an iterator with extra functionality.
        <p>
        All methods are forwarded to the decorated iterator.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 6846977a-9f1d-11ea-866b-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.AbstractIteratorDecorator` / `protected AbstractIteratorDecorator(final Iterator<E> iterator)`


        <!-- 6846977b-9f1d-11ea-866c-333445793454 <=< ACCEPT -->
        Constructor that decorates the specified iterator.
        @param iterator  the iterator to decorate, must not be null
        @throws NullPointerException if the iterator is null
        <!-- ACCEPT >=> 6846977b-9f1d-11ea-866c-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.AbstractIteratorDecorator` / `public E next()`


        <!-- 6846977c-9f1d-11ea-866d-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <!-- ACCEPT >=> 6846977c-9f1d-11ea-866d-333445793454 -->



# File: `java.org.apache.commons.collections4.iterators.AbstractListIteratorDecorator`

## Class: `java.org.apache.commons.collections4.iterators.AbstractListIteratorDecorator` / `public class AbstractListIteratorDecorator<E> implements ListIterator<E>`


        <!-- 6846977d-9f1d-11ea-866e-333445793454 <=< ACCEPT -->
        Provides basic behaviour for decorating a list iterator with extra functionality.
        <p>
        All methods are forwarded to the decorated list iterator.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 6846977d-9f1d-11ea-866e-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.AbstractListIteratorDecorator` / `private final ListIterator<E> iterator`


        <!-- 6846977e-9f1d-11ea-866f-333445793454 <=< ACCEPT -->
        The iterator being decorated
        <!-- ACCEPT >=> 6846977e-9f1d-11ea-866f-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.AbstractListIteratorDecorator` / `public AbstractListIteratorDecorator(final ListIterator<E> iterator)`


        <!-- 6846be76-9f1d-11ea-8670-333445793454 <=< ACCEPT -->
        Constructor that decorates the specified iterator.
        @param iterator  the iterator to decorate, must not be null
        @throws NullPointerException if the iterator is null
        <!-- ACCEPT >=> 6846be76-9f1d-11ea-8670-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.AbstractListIteratorDecorator` / `protected ListIterator<E> getListIterator()`


        <!-- 6846be77-9f1d-11ea-8671-333445793454 <=< ACCEPT -->
        Gets the iterator being decorated.
        @return the decorated iterator
        <!-- ACCEPT >=> 6846be77-9f1d-11ea-8671-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.AbstractListIteratorDecorator` / `public boolean hasNext()`


        <!-- 6846be78-9f1d-11ea-8672-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <!-- ACCEPT >=> 6846be78-9f1d-11ea-8672-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.AbstractListIteratorDecorator` / `public E next()`


        <!-- 6846be79-9f1d-11ea-8673-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <!-- ACCEPT >=> 6846be79-9f1d-11ea-8673-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.AbstractListIteratorDecorator` / `public int nextIndex()`


        <!-- 6846be7a-9f1d-11ea-8674-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <!-- ACCEPT >=> 6846be7a-9f1d-11ea-8674-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.AbstractListIteratorDecorator` / `public boolean hasPrevious()`


        <!-- 6846be7b-9f1d-11ea-8675-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <!-- ACCEPT >=> 6846be7b-9f1d-11ea-8675-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.AbstractListIteratorDecorator` / `public E previous()`


        <!-- 6846be7c-9f1d-11ea-8676-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <!-- ACCEPT >=> 6846be7c-9f1d-11ea-8676-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.AbstractListIteratorDecorator` / `public int previousIndex()`


        <!-- 6846be7d-9f1d-11ea-8677-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <!-- ACCEPT >=> 6846be7d-9f1d-11ea-8677-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.AbstractListIteratorDecorator` / `public void remove()`


        <!-- 6846be7e-9f1d-11ea-8678-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <!-- ACCEPT >=> 6846be7e-9f1d-11ea-8678-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.AbstractListIteratorDecorator` / `public void set(final E obj)`


        <!-- 6846be7f-9f1d-11ea-8679-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <!-- ACCEPT >=> 6846be7f-9f1d-11ea-8679-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.AbstractListIteratorDecorator` / `public void add(final E obj)`


        <!-- 6846be80-9f1d-11ea-867a-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <!-- ACCEPT >=> 6846be80-9f1d-11ea-867a-333445793454 -->



# File: `java.org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator`

## Class: `java.org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator` / `public class AbstractMapIteratorDecorator<K, V> implements MapIterator<K, V>`


        <!-- 6846be81-9f1d-11ea-867b-333445793454 <=< ACCEPT -->
        Provides basic behaviour for decorating a map iterator with extra functionality.
        <p>
        All methods are forwarded to the decorated map iterator.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 6846be81-9f1d-11ea-867b-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator` / `private final MapIterator<K, V> iterator`


        <!-- 6846be82-9f1d-11ea-867c-333445793454 <=< ACCEPT -->
        The iterator being decorated
        <!-- ACCEPT >=> 6846be82-9f1d-11ea-867c-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator` / `public AbstractMapIteratorDecorator(final MapIterator<K, V> iterator)`


        <!-- 6846be83-9f1d-11ea-867d-333445793454 <=< ACCEPT -->
        Constructor that decorates the specified iterator.
        @param iterator  the iterator to decorate, must not be null
        @throws NullPointerException if the iterator is null
        <!-- ACCEPT >=> 6846be83-9f1d-11ea-867d-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator` / `protected MapIterator<K, V> getMapIterator()`


        <!-- 6846be84-9f1d-11ea-867e-333445793454 <=< ACCEPT -->
        Gets the iterator being decorated.
        @return the decorated iterator
        <!-- ACCEPT >=> 6846be84-9f1d-11ea-867e-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator` / `public boolean hasNext()`


        <!-- 6846be85-9f1d-11ea-867f-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <!-- ACCEPT >=> 6846be85-9f1d-11ea-867f-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator` / `public K next()`


        <!-- 6846be86-9f1d-11ea-8680-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <!-- ACCEPT >=> 6846be86-9f1d-11ea-8680-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator` / `public void remove()`


        <!-- 6846be87-9f1d-11ea-8681-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <!-- ACCEPT >=> 6846be87-9f1d-11ea-8681-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator` / `public K getKey()`


        <!-- 6846be88-9f1d-11ea-8682-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <!-- ACCEPT >=> 6846be88-9f1d-11ea-8682-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator` / `public V getValue()`


        <!-- 6846be89-9f1d-11ea-8683-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <!-- ACCEPT >=> 6846be89-9f1d-11ea-8683-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator` / `public V setValue(final V obj)`


        <!-- 6846be8a-9f1d-11ea-8684-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <!-- ACCEPT >=> 6846be8a-9f1d-11ea-8684-333445793454 -->



# File: `java.org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator`

## Class: `java.org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator` / `public class AbstractOrderedMapIteratorDecorator<K, V> implements OrderedMapIterator<K, V>`


        <!-- 6846be8b-9f1d-11ea-8685-333445793454 <=< ACCEPT -->
        Provides basic behaviour for decorating an ordered map iterator with extra functionality.
        <p>
        All methods are forwarded to the decorated map iterator.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 6846be8b-9f1d-11ea-8685-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator` / `private final OrderedMapIterator<K, V> iterator`


        <!-- 6846be8c-9f1d-11ea-8686-333445793454 <=< ACCEPT -->
        The iterator being decorated
        <!-- ACCEPT >=> 6846be8c-9f1d-11ea-8686-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator` / `public AbstractOrderedMapIteratorDecorator(final OrderedMapIterator<K, V> iterator)`


        <!-- 6846be8d-9f1d-11ea-8687-333445793454 <=< ACCEPT -->
        Constructor that decorates the specified iterator.
        @param iterator  the iterator to decorate, must not be null
        @throws NullPointerException if the iterator is null
        <!-- ACCEPT >=> 6846be8d-9f1d-11ea-8687-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator` / `protected OrderedMapIterator<K, V> getOrderedMapIterator()`


        <!-- 6846be8e-9f1d-11ea-8688-333445793454 <=< ACCEPT -->
        Gets the iterator being decorated.
        @return the decorated iterator
        <!-- ACCEPT >=> 6846be8e-9f1d-11ea-8688-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator` / `public boolean hasNext()`


        <!-- 6846be8f-9f1d-11ea-8689-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <!-- ACCEPT >=> 6846be8f-9f1d-11ea-8689-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator` / `public K next()`


        <!-- 6846e580-9f1d-11ea-868a-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <!-- ACCEPT >=> 6846e580-9f1d-11ea-868a-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator` / `public boolean hasPrevious()`


        <!-- 6846e581-9f1d-11ea-868b-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <!-- ACCEPT >=> 6846e581-9f1d-11ea-868b-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator` / `public K previous()`


        <!-- 6846e582-9f1d-11ea-868c-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <!-- ACCEPT >=> 6846e582-9f1d-11ea-868c-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator` / `public void remove()`


        <!-- 6846e583-9f1d-11ea-868d-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <!-- ACCEPT >=> 6846e583-9f1d-11ea-868d-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator` / `public K getKey()`


        <!-- 6846e584-9f1d-11ea-868e-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <!-- ACCEPT >=> 6846e584-9f1d-11ea-868e-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator` / `public V getValue()`


        <!-- 6846e585-9f1d-11ea-868f-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <!-- ACCEPT >=> 6846e585-9f1d-11ea-868f-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator` / `public V setValue(final V obj)`


        <!-- 6846e586-9f1d-11ea-8690-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <!-- ACCEPT >=> 6846e586-9f1d-11ea-8690-333445793454 -->



# File: `java.org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator`

## Class: `java.org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator` / `public abstract class AbstractUntypedIteratorDecorator<I, O> implements Iterator<O>`


        <!-- 6846e587-9f1d-11ea-8691-333445793454 <=< ACCEPT -->
        Provides basic behaviour for decorating an iterator with extra functionality
        without committing the generic type of the Iterator implementation.
        <p>
        All methods are forwarded to the decorated iterator.
        @since 4.0
        @version $Id$
        <!-- ACCEPT >=> 6846e587-9f1d-11ea-8691-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator` / `private final Iterator<I> iterator`


        <!-- 6846e588-9f1d-11ea-8692-333445793454 <=< ACCEPT -->
        The iterator being decorated
        <!-- ACCEPT >=> 6846e588-9f1d-11ea-8692-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator` / `protected AbstractUntypedIteratorDecorator(final Iterator<I> iterator)`


        <!-- 6846e589-9f1d-11ea-8693-333445793454 <=< ACCEPT -->
        Create a new AbstractUntypedIteratorDecorator.
        @param iterator  the iterator to decorate
        @throws NullPointerException if the iterator is null
        <!-- ACCEPT >=> 6846e589-9f1d-11ea-8693-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator` / `protected Iterator<I> getIterator()`


        <!-- 6846e58a-9f1d-11ea-8694-333445793454 <=< ACCEPT -->
        Gets the iterator being decorated.
        @return the decorated iterator
        <!-- ACCEPT >=> 6846e58a-9f1d-11ea-8694-333445793454 -->



# File: `java.org.apache.commons.collections4.iterators.ArrayIterator`

## Class: `java.org.apache.commons.collections4.iterators.ArrayIterator` / `public class ArrayIterator<E> implements ResettableIterator<E>`


        <!-- 6846e58b-9f1d-11ea-8695-333445793454 <=< ACCEPT -->
        Implements an {@link java.util.Iterator Iterator} over any array.
        <p>
        The array can be either an array of object or of primitives. If you know
        that you have an object array, the
        {@link org.apache.commons.collections4.iterators.ObjectArrayIterator ObjectArrayIterator}
        class is a better choice, as it will perform better.
        <p>
        The iterator implements a {@link #reset} method, allowing the reset of
        the iterator back to the start if required.
        @param <E> the type of elements returned by this iterator
        @since 1.0
        @version $Id$
        <!-- ACCEPT >=> 6846e58b-9f1d-11ea-8695-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.ArrayIterator` / `final Object array`


        <!-- 6846e58c-9f1d-11ea-8696-333445793454 <=< ACCEPT -->
        The array to iterate over
        <!-- ACCEPT >=> 6846e58c-9f1d-11ea-8696-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.ArrayIterator` / `final int startIndex`


        <!-- 6846e58d-9f1d-11ea-8697-333445793454 <=< ACCEPT -->
        The start index to loop from
        <!-- ACCEPT >=> 6846e58d-9f1d-11ea-8697-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.ArrayIterator` / `final int endIndex`


        <!-- 6846e58e-9f1d-11ea-8698-333445793454 <=< ACCEPT -->
        The end index to loop to
        <!-- ACCEPT >=> 6846e58e-9f1d-11ea-8698-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.ArrayIterator` / `int index`


        <!-- 6846e58f-9f1d-11ea-8699-333445793454 <=< ACCEPT -->
        The current iterator index
        <!-- ACCEPT >=> 6846e58f-9f1d-11ea-8699-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.ArrayIterator` / `public ArrayIterator(final Object array)`


        <!-- 6846e590-9f1d-11ea-869a-333445793454 <=< ACCEPT -->
        Constructs an ArrayIterator that will iterate over the values in the
        specified array.
        @param array the array to iterate over.
        @throws IllegalArgumentException if <code>array</code> is not an array.
        @throws NullPointerException if <code>array</code> is <code>null</code>
        <!-- ACCEPT >=> 6846e590-9f1d-11ea-869a-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.ArrayIterator` / `public ArrayIterator(final Object array, final int startIndex)`


        <!-- 6846e591-9f1d-11ea-869b-333445793454 <=< ACCEPT -->
        Constructs an ArrayIterator that will iterate over the values in the
        specified array from a specific start index.
        @param array  the array to iterate over.
        @param startIndex  the index to start iterating at.
        @throws IllegalArgumentException if <code>array</code> is not an array.
        @throws NullPointerException if <code>array</code> is <code>null</code>
        @throws IndexOutOfBoundsException if the index is invalid
        <!-- ACCEPT >=> 6846e591-9f1d-11ea-869b-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.ArrayIterator` / `public ArrayIterator(final Object array, final int startIndex, final int endIndex)`


        <!-- 6846e592-9f1d-11ea-869c-333445793454 <=< ACCEPT -->
        Construct an ArrayIterator that will iterate over a range of values
        in the specified array.
        @param array  the array to iterate over.
        @param startIndex  the index to start iterating at.
        @param endIndex  the index to finish iterating at.
        @throws IllegalArgumentException if <code>array</code> is not an array.
        @throws NullPointerException if <code>array</code> is <code>null</code>
        @throws IndexOutOfBoundsException if either index is invalid
        <!-- ACCEPT >=> 6846e592-9f1d-11ea-869c-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ArrayIterator` / `protected void checkBound(final int bound, final int len, final String type )`


        <!-- 6846e593-9f1d-11ea-869d-333445793454 <=< ACCEPT -->
        Checks whether the index is valid or not.
        @param bound  the index to check
        @param len  the length of the array
        @param type  the index type (for error messages)
        @throws IndexOutOfBoundsException if the index is invalid
        <!-- ACCEPT >=> 6846e593-9f1d-11ea-869d-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ArrayIterator` / `public boolean hasNext()`


        <!-- 6846e594-9f1d-11ea-869e-333445793454 <=< ACCEPT -->
        Returns true if there are more elements to return from the array.
        @return true if there is a next element to return
        <!-- ACCEPT >=> 6846e594-9f1d-11ea-869e-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ArrayIterator` / `public E next()`


        <!-- 6846e595-9f1d-11ea-869f-333445793454 <=< ACCEPT -->
        Returns the next element in the array.
        @return the next element in the array
        @throws NoSuchElementException if all the elements in the array
        have already been returned
        <!-- ACCEPT >=> 6846e595-9f1d-11ea-869f-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ArrayIterator` / `public void remove()`


        <!-- 6846e596-9f1d-11ea-86a0-333445793454 <=< ACCEPT -->
        Throws {@link UnsupportedOperationException}.
        @throws UnsupportedOperationException always
        <!-- ACCEPT >=> 6846e596-9f1d-11ea-86a0-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ArrayIterator` / `public Object getArray()`


        <!-- 68470c86-9f1d-11ea-86a1-333445793454 <=< ACCEPT -->
        Gets the array that this iterator is iterating over.
        @return the array this iterator iterates over.
        <!-- ACCEPT >=> 68470c86-9f1d-11ea-86a1-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ArrayIterator` / `public int getStartIndex()`


        <!-- 68470c87-9f1d-11ea-86a2-333445793454 <=< ACCEPT -->
        Gets the start index to loop from.
        @return the start index
        @since 4.0
        <!-- ACCEPT >=> 68470c87-9f1d-11ea-86a2-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ArrayIterator` / `public int getEndIndex()`


        <!-- 68470c88-9f1d-11ea-86a3-333445793454 <=< ACCEPT -->
        Gets the end index to loop to.
        @return the end index
        @since 4.0
        <!-- ACCEPT >=> 68470c88-9f1d-11ea-86a3-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ArrayIterator` / `public void reset()`


        <!-- 68470c89-9f1d-11ea-86a4-333445793454 <=< ACCEPT -->
        Resets the iterator back to the start index.
        <!-- ACCEPT >=> 68470c89-9f1d-11ea-86a4-333445793454 -->



# File: `java.org.apache.commons.collections4.iterators.ArrayListIterator`

## Class: `java.org.apache.commons.collections4.iterators.ArrayListIterator` / `implements ResettableListIterator<E>`


        <!-- 68470c8a-9f1d-11ea-86a5-333445793454 <=< ACCEPT -->
        Implements a {@link ListIterator} over an array.
        <p>
        The array can be either an array of object or of primitives. If you know
        that you have an object array, the {@link ObjectArrayListIterator}
        class is a better choice, as it will perform better.
        <p>
        This iterator does not support {@link #add(Object)} or {@link #remove()}, as the array
        cannot be changed in size. The {@link #set(Object)} method is supported however.
        @see org.apache.commons.collections4.iterators.ArrayIterator
        @see java.util.Iterator
        @see java.util.ListIterator
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 68470c8a-9f1d-11ea-86a5-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.ArrayListIterator` / `private int lastItemIndex`


        <!-- 68470c8b-9f1d-11ea-86a6-333445793454 <=< ACCEPT -->
        Holds the index of the last item returned by a call to <code>next()</code>
        or <code>previous()</code>. This is set to <code>-1</code> if neither method
        has yet been invoked. <code>lastItemIndex</code> is used to to implement
        the {@link #set} method.
        <!-- ACCEPT >=> 68470c8b-9f1d-11ea-86a6-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.ArrayListIterator` / `public ArrayListIterator(final Object array)`


        <!-- 68470c8c-9f1d-11ea-86a7-333445793454 <=< ACCEPT -->
        Constructs an ArrayListIterator that will iterate over the values in the
        specified array.
        @param array the array to iterate over
        @throws IllegalArgumentException if <code>array</code> is not an array.
        @throws NullPointerException if <code>array</code> is <code>null</code>
        <!-- ACCEPT >=> 68470c8c-9f1d-11ea-86a7-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.ArrayListIterator` / `public ArrayListIterator(final Object array, final int startIndex)`


        <!-- 68470c8d-9f1d-11ea-86a8-333445793454 <=< ACCEPT -->
        Constructs an ArrayListIterator that will iterate over the values in the
        specified array from a specific start index.
        @param array  the array to iterate over
        @param startIndex  the index to start iterating at
        @throws IllegalArgumentException if <code>array</code> is not an array.
        @throws NullPointerException if <code>array</code> is <code>null</code>
        @throws IndexOutOfBoundsException if the start index is out of bounds
        <!-- ACCEPT >=> 68470c8d-9f1d-11ea-86a8-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.ArrayListIterator` / `public ArrayListIterator(final Object array, final int startIndex, final int endIndex)`


        <!-- 68470c8e-9f1d-11ea-86a9-333445793454 <=< ACCEPT -->
        Construct an ArrayListIterator that will iterate over a range of values
        in the specified array.
        @param array  the array to iterate over
        @param startIndex  the index to start iterating at
        @param endIndex  the index (exclusive) to finish iterating at
        @throws IllegalArgumentException if <code>array</code> is not an array.
        @throws IndexOutOfBoundsException if the start or end index is out of bounds
        @throws IllegalArgumentException if end index is before the start
        @throws NullPointerException if <code>array</code> is <code>null</code>
        <!-- ACCEPT >=> 68470c8e-9f1d-11ea-86a9-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ArrayListIterator` / `public boolean hasPrevious()`


        <!-- 68470c8f-9f1d-11ea-86aa-333445793454 <=< ACCEPT -->
        Returns true if there are previous elements to return from the array.
        @return true if there is a previous element to return
        <!-- ACCEPT >=> 68470c8f-9f1d-11ea-86aa-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ArrayListIterator` / `public E previous()`


        <!-- 68470c90-9f1d-11ea-86ab-333445793454 <=< ACCEPT -->
        Gets the previous element from the array.
        @return the previous element
        @throws NoSuchElementException if there is no previous element
        <!-- ACCEPT >=> 68470c90-9f1d-11ea-86ab-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ArrayListIterator` / `public E next()`


        <!-- 68470c91-9f1d-11ea-86ac-333445793454 <=< ACCEPT -->
        Gets the next element from the array.
        @return the next element
        @throws NoSuchElementException if there is no next element
        <!-- ACCEPT >=> 68470c91-9f1d-11ea-86ac-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ArrayListIterator` / `public int nextIndex()`


        <!-- 68470c92-9f1d-11ea-86ad-333445793454 <=< ACCEPT -->
        Gets the next index to be retrieved.
        @return the index of the item to be retrieved next
        <!-- ACCEPT >=> 68470c92-9f1d-11ea-86ad-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ArrayListIterator` / `public int previousIndex()`


        <!-- 68470c93-9f1d-11ea-86ae-333445793454 <=< ACCEPT -->
        Gets the index of the item to be retrieved if {@link #previous()} is called.
        @return the index of the item to be retrieved next
        <!-- ACCEPT >=> 68470c93-9f1d-11ea-86ae-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ArrayListIterator` / `public void add(final Object o)`


        <!-- 68470c94-9f1d-11ea-86af-333445793454 <=< ACCEPT -->
        This iterator does not support modification of its backing collection, and so will
        always throw an {@link UnsupportedOperationException} when this method is invoked.
        @param o  the element to add
        @throws UnsupportedOperationException always thrown.
        @see java.util.ListIterator#set
        <!-- ACCEPT >=> 68470c94-9f1d-11ea-86af-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ArrayListIterator` / `public void set(final Object o)`


        <!-- 68473396-9f1d-11ea-86b0-333445793454 <=< ACCEPT -->
        Sets the element under the cursor.
        <p>
        This method sets the element that was returned by the last call
        to {@link #next()} of {@link #previous()}.
        <p>
        <b>Note:</b> {@link ListIterator} implementations that support
        <code>add()</code> and <code>remove()</code> only allow <code>set()</code> to be called
        once per call to <code>next()</code> or <code>previous</code> (see the {@link ListIterator}
        javadoc for more details). Since this implementation does
        not support <code>add()</code> or <code>remove()</code>, <code>set()</code> may be
        called as often as desired.
        @param o  the element to set
        @throws IllegalStateException if {@link #next()} or {@link #previous()} has not been called
        before {@link #set(Object)}
        @see java.util.ListIterator#set
        <!-- ACCEPT >=> 68473396-9f1d-11ea-86b0-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ArrayListIterator` / `public void reset()`


        <!-- 68473397-9f1d-11ea-86b1-333445793454 <=< ACCEPT -->
        Resets the iterator back to the start index.
        <!-- ACCEPT >=> 68473397-9f1d-11ea-86b1-333445793454 -->



# File: `java.org.apache.commons.collections4.iterators.BoundedIterator`

## Class: `java.org.apache.commons.collections4.iterators.BoundedIterator` / `public class BoundedIterator<E> implements Iterator<E>`


        <!-- 68473398-9f1d-11ea-86b2-333445793454 <=< ACCEPT -->
        Decorates another iterator to return elements in a specific range.
        <p>
        The decorated iterator is bounded in the range [offset, offset+max).
        The {@code offset} corresponds to the position of the first element to
        be returned from the decorated iterator, and {@code max} is the maximum
        number of elements to be returned at most.
        <p>
        In case an offset parameter other than 0 is provided, the decorated
        iterator is immediately advanced to this position, skipping all elements
        before that position.
        @since 4.1
        @version $Id$
        <!-- ACCEPT >=> 68473398-9f1d-11ea-86b2-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.BoundedIterator` / `private final Iterator<? extends E> iterator`


        <!-- 68473399-9f1d-11ea-86b3-333445793454 <=< ACCEPT -->
        The iterator being decorated.
        <!-- ACCEPT >=> 68473399-9f1d-11ea-86b3-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.BoundedIterator` / `private final long offset`


        <!-- 6847339a-9f1d-11ea-86b4-333445793454 <=< ACCEPT -->
        The offset to bound the first element return
        <!-- ACCEPT >=> 6847339a-9f1d-11ea-86b4-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.BoundedIterator` / `private final long max`


        <!-- 6847339b-9f1d-11ea-86b5-333445793454 <=< ACCEPT -->
        The max number of elements to return
        <!-- ACCEPT >=> 6847339b-9f1d-11ea-86b5-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.BoundedIterator` / `private long pos`


        <!-- 6847339c-9f1d-11ea-86b6-333445793454 <=< ACCEPT -->
        The position of the current element
        <!-- ACCEPT >=> 6847339c-9f1d-11ea-86b6-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.BoundedIterator` / `public BoundedIterator(final Iterator<? extends E> iterator, final long offset, final long max)`


        <!-- 6847339d-9f1d-11ea-86b7-333445793454 <=< ACCEPT -->
        Decorates the specified iterator to return at most the given number of elements,
        skipping all elements until the iterator reaches the position at {@code offset}.
        <p>
        The iterator is immediately advanced until it reaches the position at {@code offset},
        incurring O(n) time.
        @param iterator  the iterator to be decorated
        @param offset  the index of the first element of the decorated iterator to return
        @param max  the maximum number of elements of the decorated iterator to return
        @throws NullPointerException if iterator is null
        @throws IllegalArgumentException if either offset or max is negative
        <!-- ACCEPT >=> 6847339d-9f1d-11ea-86b7-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.BoundedIterator` / `private void init()`


        <!-- 6847339e-9f1d-11ea-86b8-333445793454 <=< ACCEPT -->
        Advances the underlying iterator to the beginning of the bounded range.
        <!-- ACCEPT >=> 6847339e-9f1d-11ea-86b8-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.BoundedIterator` / `private boolean checkBounds()`


        <!-- 6847339f-9f1d-11ea-86b9-333445793454 <=< ACCEPT -->
        Checks whether the iterator is still within its bounded range.
        @return {@code true} if the iterator is within its bounds, {@code false} otherwise
        <!-- ACCEPT >=> 6847339f-9f1d-11ea-86b9-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.BoundedIterator` / `public void remove()`


        <!-- 684733a0-9f1d-11ea-86ba-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <p>
        In case an offset other than 0 was specified, the underlying iterator will be advanced
        to this position upon creation. A call to {@link #remove()} will still result in an
        {@link IllegalStateException} if no explicit call to {@link #next()} has been made prior
        to calling {@link #remove()}.
        <!-- ACCEPT >=> 684733a0-9f1d-11ea-86ba-333445793454 -->



# File: `java.org.apache.commons.collections4.iterators.CollatingIterator`

## Class: `java.org.apache.commons.collections4.iterators.CollatingIterator` / `public class CollatingIterator<E> implements Iterator<E>`


        <!-- 684733a1-9f1d-11ea-86bb-333445793454 <=< ACCEPT -->
        Provides an ordered iteration over the elements contained in a collection of
        ordered Iterators.
        <p>
        Given two ordered {@link Iterator} instances <code>A</code> and
        <code>B</code>, the {@link #next} method on this iterator will return the
        lesser of <code>A.next()</code> and <code>B.next()</code>.
        @since 2.1
        @version $Id$
        <!-- ACCEPT >=> 684733a1-9f1d-11ea-86bb-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.CollatingIterator` / `private Comparator<? super E> comparator`


        <!-- 684733a2-9f1d-11ea-86bc-333445793454 <=< ACCEPT -->
        The {@link Comparator} used to evaluate order.
        <!-- ACCEPT >=> 684733a2-9f1d-11ea-86bc-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.CollatingIterator` / `private List<Iterator<? extends E>> iterators`


        <!-- 684733a3-9f1d-11ea-86bd-333445793454 <=< ACCEPT -->
        The list of {@link Iterator}s to evaluate.
        <!-- ACCEPT >=> 684733a3-9f1d-11ea-86bd-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.CollatingIterator` / `private List<E> values`


        <!-- 684733a4-9f1d-11ea-86be-333445793454 <=< ACCEPT -->
        {@link Iterator#next Next} objects peeked from each iterator.
        <!-- ACCEPT >=> 684733a4-9f1d-11ea-86be-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.CollatingIterator` / `private BitSet valueSet`


        <!-- 684733a5-9f1d-11ea-86bf-333445793454 <=< ACCEPT -->
        Whether or not each {@link #values} element has been set.
        <!-- ACCEPT >=> 684733a5-9f1d-11ea-86bf-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.CollatingIterator` / `private int lastReturned`


        <!-- 684733a6-9f1d-11ea-86c0-333445793454 <=< ACCEPT -->
        Index of the {@link #iterators iterator} from whom the last returned
        value was obtained.
        <!-- ACCEPT >=> 684733a6-9f1d-11ea-86c0-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.CollatingIterator` / `public CollatingIterator()`


        <!-- 684733a7-9f1d-11ea-86c1-333445793454 <=< ACCEPT -->
        Constructs a new <code>CollatingIterator</code>. A comparator must be
        set by calling {@link #setComparator(Comparator)} before invoking
        {@link #hasNext()}, or {@link #next()} for the first time. Child
        iterators will have to be manually added using the
        {@link #addIterator(Iterator)} method.
        <!-- ACCEPT >=> 684733a7-9f1d-11ea-86c1-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.CollatingIterator` / `public CollatingIterator(final Comparator<? super E> comp)`


        <!-- 684733a8-9f1d-11ea-86c2-333445793454 <=< ACCEPT -->
        Constructs a new <code>CollatingIterator</code> that will used the
        specified comparator for ordering. Child iterators will have to be
        manually added using the {@link #addIterator(Iterator)} method.
        @param comp the comparator to use to sort; must not be null,
        unless you'll be invoking {@link #setComparator(Comparator)} later on.
        <!-- ACCEPT >=> 684733a8-9f1d-11ea-86c2-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.CollatingIterator` / `public CollatingIterator(final Comparator<? super E> comp, final int initIterCapacity)`


        <!-- 684733a9-9f1d-11ea-86c3-333445793454 <=< ACCEPT -->
        Constructs a new <code>CollatingIterator</code> that will used the
        specified comparator for ordering and have the specified initial
        capacity. Child iterators will have to be manually added using the
        {@link #addIterator(Iterator)} method.
        @param comp the comparator to use to sort; must not be null,
        unless you'll be invoking {@link #setComparator(Comparator)} later on.
        @param initIterCapacity the initial capacity for the internal list of
        child iterators
        <!-- ACCEPT >=> 684733a9-9f1d-11ea-86c3-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.CollatingIterator` / `final Iterator<? extends E> b)`


        <!-- 684733aa-9f1d-11ea-86c4-333445793454 <=< ACCEPT -->
        Constructs a new <code>CollatingIterator</code> that will use the
        specified comparator to provide ordered iteration over the two given
        iterators.
        @param comp the comparator to use to sort; must not be null,
        unless you'll be invoking {@link #setComparator(Comparator)} later on.
        @param a the first child ordered iterator
        @param b the second child ordered iterator
        @throws NullPointerException if either iterator is null
        <!-- ACCEPT >=> 684733aa-9f1d-11ea-86c4-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.CollatingIterator` / `public CollatingIterator(final Comparator<? super E> comp, final Iterator<? extends E>[] iterators)`


        <!-- 68475aa8-9f1d-11ea-86c5-333445793454 <=< ACCEPT -->
        Constructs a new <code>CollatingIterator</code> that will use the
        specified comparator to provide ordered iteration over the array of
        iterators.
        @param comp the comparator to use to sort; must not be null,
        unless you'll be invoking {@link #setComparator(Comparator)} later on.
        @param iterators the array of iterators
        @throws NullPointerException if iterators array is or contains null
        <!-- ACCEPT >=> 68475aa8-9f1d-11ea-86c5-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.CollatingIterator` / `public CollatingIterator(final Comparator<? super E> comp, final Collection<Iterator<? extends E>> iterators)`


        <!-- 68475aa9-9f1d-11ea-86c6-333445793454 <=< ACCEPT -->
        Constructs a new <code>CollatingIterator</code> that will use the
        specified comparator to provide ordered iteration over the collection of
        iterators.
        @param comp the comparator to use to sort; must not be null,
        unless you'll be invoking {@link #setComparator(Comparator)} later on.
        @param iterators the collection of iterators
        @throws NullPointerException if the iterators collection is or contains null
        @throws ClassCastException if the iterators collection contains an
        element that's not an {@link Iterator}
        <!-- ACCEPT >=> 68475aa9-9f1d-11ea-86c6-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.CollatingIterator` / `public void addIterator(final Iterator<? extends E> iterator)`


        <!-- 68475aaa-9f1d-11ea-86c7-333445793454 <=< ACCEPT -->
        Adds the given {@link Iterator} to the iterators being collated.
        @param iterator the iterator to add to the collation, must not be null
        @throws IllegalStateException if iteration has started
        @throws NullPointerException if the iterator is null
        <!-- ACCEPT >=> 68475aaa-9f1d-11ea-86c7-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.CollatingIterator` / `public void setIterator(final int index, final Iterator<? extends E> iterator)`


        <!-- 68475aab-9f1d-11ea-86c8-333445793454 <=< ACCEPT -->
        Sets the iterator at the given index.
        @param index index of the Iterator to replace
        @param iterator Iterator to place at the given index
        @throws IndexOutOfBoundsException if index &lt; 0 or index &gt; size()
        @throws IllegalStateException if iteration has started
        @throws NullPointerException if the iterator is null
        <!-- ACCEPT >=> 68475aab-9f1d-11ea-86c8-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.CollatingIterator` / `public List<Iterator<? extends E>> getIterators()`


        <!-- 68475aac-9f1d-11ea-86c9-333445793454 <=< ACCEPT -->
        Gets the list of Iterators (unmodifiable).
        @return the unmodifiable list of iterators added
        <!-- ACCEPT >=> 68475aac-9f1d-11ea-86c9-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.CollatingIterator` / `public Comparator<? super E> getComparator()`


        <!-- 68475aad-9f1d-11ea-86ca-333445793454 <=< ACCEPT -->
        Gets the {@link Comparator} by which collatation occurs.
        @return the {@link Comparator}
        <!-- ACCEPT >=> 68475aad-9f1d-11ea-86ca-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.CollatingIterator` / `public void setComparator(final Comparator<? super E> comp)`


        <!-- 68475aae-9f1d-11ea-86cb-333445793454 <=< ACCEPT -->
        Sets the {@link Comparator} by which collation occurs. If you
        would like to use the natural sort order (or, in other words,
        if the elements in the iterators are implementing the
        {@link java.lang.Comparable} interface), then use the
        {@link org.apache.commons.collections4.comparators.ComparableComparator}.
        @param comp the {@link Comparator} to set
        @throws IllegalStateException if iteration has started
        <!-- ACCEPT >=> 68475aae-9f1d-11ea-86cb-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.CollatingIterator` / `public boolean hasNext()`


        <!-- 68475aaf-9f1d-11ea-86cc-333445793454 <=< ACCEPT -->
        Returns <code>true</code> if any child iterator has remaining elements.
        @return true if this iterator has remaining elements
        <!-- ACCEPT >=> 68475aaf-9f1d-11ea-86cc-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.CollatingIterator` / `public E next() throws NoSuchElementException`


        <!-- 68475ab0-9f1d-11ea-86cd-333445793454 <=< ACCEPT -->
        Returns the next ordered element from a child iterator.
        @return the next ordered element
        @throws NoSuchElementException if no child iterator has any more elements
        <!-- ACCEPT >=> 68475ab0-9f1d-11ea-86cd-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.CollatingIterator` / `public void remove()`


        <!-- 68475ab1-9f1d-11ea-86ce-333445793454 <=< ACCEPT -->
        Removes the last returned element from the child iterator that produced it.
        @throws IllegalStateException if there is no last returned element, or if
        the last returned element has already been removed
        <!-- ACCEPT >=> 68475ab1-9f1d-11ea-86ce-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.CollatingIterator` / `public int getIteratorIndex()`


        <!-- 68475ab2-9f1d-11ea-86cf-333445793454 <=< ACCEPT -->
        Returns the index of the iterator that returned the last element.
        @return the index of the iterator that returned the last element
        @throws IllegalStateException if there is no last returned element
        <!-- ACCEPT >=> 68475ab2-9f1d-11ea-86cf-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.CollatingIterator` / `private void start()`


        <!-- 68475ab3-9f1d-11ea-86d0-333445793454 <=< ACCEPT -->
        Initializes the collating state if it hasn't been already.
        <!-- ACCEPT >=> 68475ab3-9f1d-11ea-86d0-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.CollatingIterator` / `private boolean set(final int i)`


        <!-- 68475ab4-9f1d-11ea-86d1-333445793454 <=< ACCEPT -->
        Sets the {@link #values} and {@link #valueSet} attributes at position
        <i>i</i> to the next value of the {@link #iterators iterator} at position
        <i>i</i>, or clear them if the <i>i</i><sup>th</sup> iterator has no next
        value.
        @return {@code false} iff there was no value to set
        <!-- ACCEPT >=> 68475ab4-9f1d-11ea-86d1-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.CollatingIterator` / `private void clear(final int i)`


        <!-- 68475ab5-9f1d-11ea-86d2-333445793454 <=< ACCEPT -->
        Clears the {@link #values} and {@link #valueSet} attributes at position
        <i>i</i>.
        <!-- ACCEPT >=> 68475ab5-9f1d-11ea-86d2-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.CollatingIterator` / `private void checkNotStarted() throws IllegalStateException`


        <!-- 68475ab6-9f1d-11ea-86d3-333445793454 <=< ACCEPT -->
        Throws {@link IllegalStateException} if iteration has started via
        {@link #start}.
        @throws IllegalStateException if iteration started
        <!-- ACCEPT >=> 68475ab6-9f1d-11ea-86d3-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.CollatingIterator` / `private int least()`


        <!-- 684781a9-9f1d-11ea-86d4-333445793454 <=< ACCEPT -->
        Returns the index of the least element in {@link #values},
        {@link #set(int) setting} any uninitialized values.
        @throws NullPointerException if no comparator is set
        <!-- ACCEPT >=> 684781a9-9f1d-11ea-86d4-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.CollatingIterator` / `private boolean anyValueSet(final BitSet set)`


        <!-- 684781aa-9f1d-11ea-86d5-333445793454 <=< ACCEPT -->
        Returns <code>true</code> iff any bit in the given set is
        <code>true</code>.
        <!-- ACCEPT >=> 684781aa-9f1d-11ea-86d5-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.CollatingIterator` / `private boolean anyHasNext(final List<Iterator<? extends E>> iters)`


        <!-- 684781ab-9f1d-11ea-86d6-333445793454 <=< ACCEPT -->
        Returns <code>true</code> iff any {@link Iterator} in the given list has
        a next value.
        <!-- ACCEPT >=> 684781ab-9f1d-11ea-86d6-333445793454 -->



# File: `java.org.apache.commons.collections4.iterators.EmptyIterator`

## Class: `java.org.apache.commons.collections4.iterators.EmptyIterator` / `public class EmptyIterator<E> extends AbstractEmptyIterator<E> implements ResettableIterator<E>`


        <!-- 684781ac-9f1d-11ea-86d7-333445793454 <=< ACCEPT -->
        Provides an implementation of an empty iterator.
        <p>
        This class provides an implementation of an empty iterator.
        This class provides for binary compatibility between Commons Collections
        2.1.1 and 3.1 due to issues with <code>IteratorUtils</code>.
        @since 2.1.1 and 3.1
        @version $Id$
        <!-- ACCEPT >=> 684781ac-9f1d-11ea-86d7-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.EmptyIterator` / `public static final ResettableIterator RESETTABLE_INSTANCE`


        <!-- 684781ad-9f1d-11ea-86d8-333445793454 <=< ACCEPT -->
        Singleton instance of the iterator.
        @since 3.1
        <!-- ACCEPT >=> 684781ad-9f1d-11ea-86d8-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.EmptyIterator` / `public static final Iterator INSTANCE`


        <!-- 684781ae-9f1d-11ea-86d9-333445793454 <=< ACCEPT -->
        Singleton instance of the iterator.
        @since 2.1.1 and 3.1
        <!-- ACCEPT >=> 684781ae-9f1d-11ea-86d9-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.EmptyIterator` / `public static <E> ResettableIterator<E> resettableEmptyIterator()`


        <!-- 684781af-9f1d-11ea-86da-333445793454 <=< ACCEPT -->
        Get a typed resettable empty iterator instance.
        @param <E> the element type
        @return ResettableIterator<E>
        <!-- ACCEPT >=> 684781af-9f1d-11ea-86da-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.EmptyIterator` / `public static <E> Iterator<E> emptyIterator()`


        <!-- 684781b0-9f1d-11ea-86db-333445793454 <=< ACCEPT -->
        Get a typed empty iterator instance.
        @param <E> the element type
        @return Iterator<E>
        <!-- ACCEPT >=> 684781b0-9f1d-11ea-86db-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.EmptyIterator` / `protected EmptyIterator()`


        <!-- 684781b1-9f1d-11ea-86dc-333445793454 <=< ACCEPT -->
        Constructor.
        <!-- ACCEPT >=> 684781b1-9f1d-11ea-86dc-333445793454 -->



# File: `java.org.apache.commons.collections4.iterators.EmptyListIterator`

## Class: `java.org.apache.commons.collections4.iterators.EmptyListIterator` / `ResettableListIterator<E>`


        <!-- 684781b2-9f1d-11ea-86dd-333445793454 <=< ACCEPT -->
        Provides an implementation of an empty list iterator.
        <p>
        This class provides an implementation of an empty list iterator. This class
        provides for binary compatibility between Commons Collections 2.1.1 and 3.1
        due to issues with <code>IteratorUtils</code>.
        @since 2.1.1 and 3.1
        @version $Id$
        <!-- ACCEPT >=> 684781b2-9f1d-11ea-86dd-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.EmptyListIterator` / `public static final ResettableListIterator RESETTABLE_INSTANCE`


        <!-- 684781b3-9f1d-11ea-86de-333445793454 <=< ACCEPT -->
        Singleton instance of the iterator.
        @since 3.1
        <!-- ACCEPT >=> 684781b3-9f1d-11ea-86de-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.EmptyListIterator` / `public static final ListIterator INSTANCE`


        <!-- 684781b4-9f1d-11ea-86df-333445793454 <=< ACCEPT -->
        Singleton instance of the iterator.
        @since 2.1.1 and 3.1
        <!-- ACCEPT >=> 684781b4-9f1d-11ea-86df-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.EmptyListIterator` / `public static <E> ResettableListIterator<E> resettableEmptyListIterator()`


        <!-- 684781b5-9f1d-11ea-86e0-333445793454 <=< ACCEPT -->
        Get a typed instance of the iterator.
        @param <E> the element type
        @return {@link ResettableListIterator}<E>
        <!-- ACCEPT >=> 684781b5-9f1d-11ea-86e0-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.EmptyListIterator` / `public static <E> ListIterator<E> emptyListIterator()`


        <!-- 684781b6-9f1d-11ea-86e1-333445793454 <=< ACCEPT -->
        Get a typed instance of the iterator.
        @param <E> the element type
        @return {@link ListIterator}<E>
        <!-- ACCEPT >=> 684781b6-9f1d-11ea-86e1-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.EmptyListIterator` / `protected EmptyListIterator()`


        <!-- 684781b7-9f1d-11ea-86e2-333445793454 <=< ACCEPT -->
        Constructor.
        <!-- ACCEPT >=> 684781b7-9f1d-11ea-86e2-333445793454 -->



# File: `java.org.apache.commons.collections4.iterators.EmptyMapIterator`

## Class: `java.org.apache.commons.collections4.iterators.EmptyMapIterator` / `MapIterator<K, V>, ResettableIterator<K>`


        <!-- 684781b8-9f1d-11ea-86e3-333445793454 <=< ACCEPT -->
        Provides an implementation of an empty map iterator.
        @since 3.1
        @version $Id$
        <!-- ACCEPT >=> 684781b8-9f1d-11ea-86e3-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.EmptyMapIterator` / `public static final MapIterator INSTANCE`


        <!-- 684781b9-9f1d-11ea-86e4-333445793454 <=< ACCEPT -->
        Singleton instance of the iterator.
        @since 3.1
        <!-- ACCEPT >=> 684781b9-9f1d-11ea-86e4-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.EmptyMapIterator` / `public static <K, V> MapIterator<K, V> emptyMapIterator()`


        <!-- 684781ba-9f1d-11ea-86e5-333445793454 <=< ACCEPT -->
        Get a typed instance of the iterator.
        @param <K> the key type
        @param <V> the value type
        @return {@link MapIterator}<K, V>
        <!-- ACCEPT >=> 684781ba-9f1d-11ea-86e5-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.EmptyMapIterator` / `protected EmptyMapIterator()`


        <!-- 684781bb-9f1d-11ea-86e6-333445793454 <=< ACCEPT -->
        Constructor.
        <!-- ACCEPT >=> 684781bb-9f1d-11ea-86e6-333445793454 -->



# File: `java.org.apache.commons.collections4.iterators.EmptyOrderedIterator`

## Class: `java.org.apache.commons.collections4.iterators.EmptyOrderedIterator` / `implements OrderedIterator<E>, ResettableIterator<E>`


        <!-- 684781bc-9f1d-11ea-86e7-333445793454 <=< ACCEPT -->
        Provides an implementation of an empty ordered iterator.
        @since 3.1
        @version $Id$
        <!-- ACCEPT >=> 684781bc-9f1d-11ea-86e7-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.EmptyOrderedIterator` / `public static final OrderedIterator INSTANCE`


        <!-- 684781bd-9f1d-11ea-86e8-333445793454 <=< ACCEPT -->
        Singleton instance of the iterator.
        @since 3.1
        <!-- ACCEPT >=> 684781bd-9f1d-11ea-86e8-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.EmptyOrderedIterator` / `public static <E> OrderedIterator<E> emptyOrderedIterator()`


        <!-- 684781be-9f1d-11ea-86e9-333445793454 <=< ACCEPT -->
        Typed instance of the iterator.
        @param <E> the element type
        @return OrderedIterator<E>
        <!-- ACCEPT >=> 684781be-9f1d-11ea-86e9-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.EmptyOrderedIterator` / `protected EmptyOrderedIterator()`


        <!-- 684781bf-9f1d-11ea-86ea-333445793454 <=< ACCEPT -->
        Constructor.
        <!-- ACCEPT >=> 684781bf-9f1d-11ea-86ea-333445793454 -->



# File: `java.org.apache.commons.collections4.iterators.EmptyOrderedMapIterator`

## Class: `java.org.apache.commons.collections4.iterators.EmptyOrderedMapIterator` / `implements OrderedMapIterator<K, V>, ResettableIterator<K>`


        <!-- 684781c0-9f1d-11ea-86eb-333445793454 <=< ACCEPT -->
        Provides an implementation of an empty ordered map iterator.
        @since 3.1
        @version $Id$
        <!-- ACCEPT >=> 684781c0-9f1d-11ea-86eb-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.EmptyOrderedMapIterator` / `public static final OrderedMapIterator INSTANCE`


        <!-- 684781c1-9f1d-11ea-86ec-333445793454 <=< ACCEPT -->
        Singleton instance of the iterator.
        @since 3.1
        <!-- ACCEPT >=> 684781c1-9f1d-11ea-86ec-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.EmptyOrderedMapIterator` / `public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()`


        <!-- 6847a8b2-9f1d-11ea-86ed-333445793454 <=< ACCEPT -->
        Get a typed instance of the iterator.
        @param <K> the key type
        @param <V> the value type
        @return {@link OrderedMapIterator}<K, V>
        <!-- ACCEPT >=> 6847a8b2-9f1d-11ea-86ed-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.EmptyOrderedMapIterator` / `protected EmptyOrderedMapIterator()`


        <!-- 6847a8b3-9f1d-11ea-86ee-333445793454 <=< ACCEPT -->
        Constructor.
        <!-- ACCEPT >=> 6847a8b3-9f1d-11ea-86ee-333445793454 -->



# File: `java.org.apache.commons.collections4.iterators.EntrySetMapIterator`

## Class: `java.org.apache.commons.collections4.iterators.EntrySetMapIterator` / `public class EntrySetMapIterator<K, V> implements MapIterator<K, V>, ResettableIterator<K>`


        <!-- 6847a8b4-9f1d-11ea-86ef-333445793454 <=< ACCEPT -->
        Implements a <code>MapIterator</code> using a Map entrySet.
        Reverse iteration is not supported.
        <pre>
        MapIterator it = map.mapIterator();
        while (it.hasNext()) {
        Object key = it.next();
        Object value = it.getValue();
        it.setValue(newValue);
        }
        </pre>
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 6847a8b4-9f1d-11ea-86ef-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.EntrySetMapIterator` / `public EntrySetMapIterator(final Map<K, V> map)`


        <!-- 6847a8b5-9f1d-11ea-86f0-333445793454 <=< ACCEPT -->
        Constructor.
        @param map  the map to iterate over
        <!-- ACCEPT >=> 6847a8b5-9f1d-11ea-86f0-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.EntrySetMapIterator` / `public boolean hasNext()`


        <!-- 6847a8b6-9f1d-11ea-86f1-333445793454 <=< ACCEPT -->
        Checks to see if there are more entries still to be iterated.
        @return <code>true</code> if the iterator has more elements
        <!-- ACCEPT >=> 6847a8b6-9f1d-11ea-86f1-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.EntrySetMapIterator` / `public K next()`


        <!-- 6847a8b7-9f1d-11ea-86f2-333445793454 <=< ACCEPT -->
        Gets the next <em>key</em> from the <code>Map</code>.
        @return the next key in the iteration
        @throws java.util.NoSuchElementException if the iteration is finished
        <!-- ACCEPT >=> 6847a8b7-9f1d-11ea-86f2-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.EntrySetMapIterator` / `public void remove()`


        <!-- 6847a8b8-9f1d-11ea-86f3-333445793454 <=< ACCEPT -->
        Removes the last returned key from the underlying <code>Map</code>.
        <p>
        This method can be called once per call to <code>next()</code>.
        @throws UnsupportedOperationException if remove is not supported by the map
        @throws IllegalStateException if <code>next()</code> has not yet been called
        @throws IllegalStateException if <code>remove()</code> has already been called
        since the last call to <code>next()</code>
        <!-- ACCEPT >=> 6847a8b8-9f1d-11ea-86f3-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.EntrySetMapIterator` / `public K getKey()`


        <!-- 6847a8b9-9f1d-11ea-86f4-333445793454 <=< ACCEPT -->
        Gets the current key, which is the key returned by the last call
        to <code>next()</code>.
        @return the current key
        @throws IllegalStateException if <code>next()</code> has not yet been called
        <!-- ACCEPT >=> 6847a8b9-9f1d-11ea-86f4-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.EntrySetMapIterator` / `public V getValue()`


        <!-- 6847a8ba-9f1d-11ea-86f5-333445793454 <=< ACCEPT -->
        Gets the current value, which is the value associated with the last key
        returned by <code>next()</code>.
        @return the current value
        @throws IllegalStateException if <code>next()</code> has not yet been called
        <!-- ACCEPT >=> 6847a8ba-9f1d-11ea-86f5-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.EntrySetMapIterator` / `public V setValue(final V value)`


        <!-- 6847a8bb-9f1d-11ea-86f6-333445793454 <=< ACCEPT -->
        Sets the value associated with the current key.
        @param value  the new value
        @return the previous value
        @throws UnsupportedOperationException if setValue is not supported by the map
        @throws IllegalStateException if <code>next()</code> has not yet been called
        @throws IllegalStateException if <code>remove()</code> has been called since the
        last call to <code>next()</code>
        <!-- ACCEPT >=> 6847a8bb-9f1d-11ea-86f6-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.EntrySetMapIterator` / `public void reset()`


        <!-- 6847a8bc-9f1d-11ea-86f7-333445793454 <=< ACCEPT -->
        Resets the state of the iterator.
        <!-- ACCEPT >=> 6847a8bc-9f1d-11ea-86f7-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.EntrySetMapIterator` / `public String toString()`


        <!-- 6847a8bd-9f1d-11ea-86f8-333445793454 <=< ACCEPT -->
        Gets the iterator as a String.
        @return a string version of the iterator
        <!-- ACCEPT >=> 6847a8bd-9f1d-11ea-86f8-333445793454 -->



# File: `java.org.apache.commons.collections4.iterators.EnumerationIterator`

## Class: `java.org.apache.commons.collections4.iterators.EnumerationIterator` / `public class EnumerationIterator<E> implements Iterator<E>`


        <!-- 6847a8be-9f1d-11ea-86f9-333445793454 <=< ACCEPT -->
        Adapter to make {@link Enumeration Enumeration} instances appear
        to be {@link Iterator Iterator} instances.
        @since 1.0
        @version $Id$
        <!-- ACCEPT >=> 6847a8be-9f1d-11ea-86f9-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.EnumerationIterator` / `private final Collection<? super E> collection`


        <!-- 6847a8bf-9f1d-11ea-86fa-333445793454 <=< ACCEPT -->
        The collection to remove elements from
        <!-- ACCEPT >=> 6847a8bf-9f1d-11ea-86fa-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.EnumerationIterator` / `private Enumeration<? extends E> enumeration`


        <!-- 6847a8c0-9f1d-11ea-86fb-333445793454 <=< ACCEPT -->
        The enumeration being converted
        <!-- ACCEPT >=> 6847a8c0-9f1d-11ea-86fb-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.EnumerationIterator` / `private E last`


        <!-- 6847a8c1-9f1d-11ea-86fc-333445793454 <=< ACCEPT -->
        The last object retrieved
        <!-- ACCEPT >=> 6847a8c1-9f1d-11ea-86fc-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.EnumerationIterator` / `public EnumerationIterator()`


        <!-- 6847a8c2-9f1d-11ea-86fd-333445793454 <=< ACCEPT -->
        Constructs a new <code>EnumerationIterator</code> that will not
        function until {@link #setEnumeration(Enumeration)} is called.
        <!-- ACCEPT >=> 6847a8c2-9f1d-11ea-86fd-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.EnumerationIterator` / `public EnumerationIterator(final Enumeration<? extends E> enumeration)`


        <!-- 6847a8c3-9f1d-11ea-86fe-333445793454 <=< ACCEPT -->
        Constructs a new <code>EnumerationIterator</code> that provides
        an iterator view of the given enumeration.
        @param enumeration  the enumeration to use
        <!-- ACCEPT >=> 6847a8c3-9f1d-11ea-86fe-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.EnumerationIterator` / `public EnumerationIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> collection)`


        <!-- 6847a8c4-9f1d-11ea-86ff-333445793454 <=< ACCEPT -->
        Constructs a new <code>EnumerationIterator</code> that will remove
        elements from the specified collection.
        @param enumeration  the enumeration to use
        @param collection  the collection to remove elements from
        <!-- ACCEPT >=> 6847a8c4-9f1d-11ea-86ff-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.EnumerationIterator` / `public boolean hasNext()`


        <!-- 6847a8c5-9f1d-11ea-8700-333445793454 <=< ACCEPT -->
        Returns true if the underlying enumeration has more elements.
        @return true if the underlying enumeration has more elements
        @throws NullPointerException  if the underlying enumeration is null
        <!-- ACCEPT >=> 6847a8c5-9f1d-11ea-8700-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.EnumerationIterator` / `public E next()`


        <!-- 6847a8c6-9f1d-11ea-8701-333445793454 <=< ACCEPT -->
        Returns the next object from the enumeration.
        @return the next object from the enumeration
        @throws NullPointerException if the enumeration is null
        <!-- ACCEPT >=> 6847a8c6-9f1d-11ea-8701-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.EnumerationIterator` / `public void remove()`


        <!-- 6847a8c7-9f1d-11ea-8702-333445793454 <=< ACCEPT -->
        Removes the last retrieved element if a collection is attached.
        <p>
        Functions if an associated <code>Collection</code> is known.
        If so, the first occurrence of the last returned object from this
        iterator will be removed from the collection.
        @exception IllegalStateException <code>next()</code> not called.
        @exception UnsupportedOperationException if no associated collection
        <!-- ACCEPT >=> 6847a8c7-9f1d-11ea-8702-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.EnumerationIterator` / `public Enumeration<? extends E> getEnumeration()`


        <!-- 6847a8c8-9f1d-11ea-8703-333445793454 <=< ACCEPT -->
        Returns the underlying enumeration.
        @return the underlying enumeration
        <!-- ACCEPT >=> 6847a8c8-9f1d-11ea-8703-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.EnumerationIterator` / `public void setEnumeration(final Enumeration<? extends E> enumeration)`


        <!-- 6847cfbc-9f1d-11ea-8704-333445793454 <=< ACCEPT -->
        Sets the underlying enumeration.
        @param enumeration  the new underlying enumeration
        <!-- ACCEPT >=> 6847cfbc-9f1d-11ea-8704-333445793454 -->



# File: `java.org.apache.commons.collections4.iterators.FilterIterator`

## Class: `java.org.apache.commons.collections4.iterators.FilterIterator` / `public class FilterIterator<E> implements Iterator<E>`


        <!-- 6847cfbd-9f1d-11ea-8705-333445793454 <=< ACCEPT -->
        Decorates another {@link Iterator} using a predicate to filter elements.
        <p>
        This iterator decorates the underlying iterator, only allowing through
        those elements that match the specified {@link Predicate Predicate}.
        @since 1.0
        @version $Id$
        <!-- ACCEPT >=> 6847cfbd-9f1d-11ea-8705-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.FilterIterator` / `private Iterator<? extends E> iterator`


        <!-- 6847cfbe-9f1d-11ea-8706-333445793454 <=< ACCEPT -->
        The iterator being used
        <!-- ACCEPT >=> 6847cfbe-9f1d-11ea-8706-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.FilterIterator` / `private Predicate<? super E> predicate`


        <!-- 6847cfbf-9f1d-11ea-8707-333445793454 <=< ACCEPT -->
        The predicate being used
        <!-- ACCEPT >=> 6847cfbf-9f1d-11ea-8707-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.FilterIterator` / `private E nextObject`


        <!-- 6847cfc0-9f1d-11ea-8708-333445793454 <=< ACCEPT -->
        The next object in the iteration
        <!-- ACCEPT >=> 6847cfc0-9f1d-11ea-8708-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.FilterIterator` / `private boolean nextObjectSet`


        <!-- 6847cfc1-9f1d-11ea-8709-333445793454 <=< ACCEPT -->
        Whether the next object has been calculated yet
        <!-- ACCEPT >=> 6847cfc1-9f1d-11ea-8709-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.FilterIterator` / `public FilterIterator()`


        <!-- 6847cfc2-9f1d-11ea-870a-333445793454 <=< ACCEPT -->
        Constructs a new <code>FilterIterator</code> that will not function
        until {@link #setIterator(Iterator) setIterator} is invoked.
        <!-- ACCEPT >=> 6847cfc2-9f1d-11ea-870a-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.FilterIterator` / `public FilterIterator(final Iterator<? extends E> iterator)`


        <!-- 6847cfc3-9f1d-11ea-870b-333445793454 <=< ACCEPT -->
        Constructs a new <code>FilterIterator</code> that will not function
        until {@link #setPredicate(Predicate) setPredicate} is invoked.
        @param iterator  the iterator to use
        <!-- ACCEPT >=> 6847cfc3-9f1d-11ea-870b-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.FilterIterator` / `public FilterIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate)`


        <!-- 6847cfc4-9f1d-11ea-870c-333445793454 <=< ACCEPT -->
        Constructs a new <code>FilterIterator</code> that will use the
        given iterator and predicate.
        @param iterator  the iterator to use
        @param predicate  the predicate to use
        <!-- ACCEPT >=> 6847cfc4-9f1d-11ea-870c-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.FilterIterator` / `public boolean hasNext()`


        <!-- 6847cfc5-9f1d-11ea-870d-333445793454 <=< ACCEPT -->
        Returns true if the underlying iterator contains an object that
        matches the predicate.
        @return true if there is another object that matches the predicate
        @throws NullPointerException if either the iterator or predicate are null
        <!-- ACCEPT >=> 6847cfc5-9f1d-11ea-870d-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.FilterIterator` / `public E next()`


        <!-- 6847cfc6-9f1d-11ea-870e-333445793454 <=< ACCEPT -->
        Returns the next object that matches the predicate.
        @return the next object which matches the given predicate
        @throws NullPointerException if either the iterator or predicate are null
        @throws NoSuchElementException if there are no more elements that
        match the predicate
        <!-- ACCEPT >=> 6847cfc6-9f1d-11ea-870e-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.FilterIterator` / `public void remove()`


        <!-- 6847cfc7-9f1d-11ea-870f-333445793454 <=< ACCEPT -->
        Removes from the underlying collection of the base iterator the last
        element returned by this iterator.
        This method can only be called
        if <code>next()</code> was called, but not after
        <code>hasNext()</code>, because the <code>hasNext()</code> call
        changes the base iterator.
        @throws IllegalStateException if <code>hasNext()</code> has already
        been called.
        <!-- ACCEPT >=> 6847cfc7-9f1d-11ea-870f-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.FilterIterator` / `public Iterator<? extends E> getIterator()`


        <!-- 6847cfc8-9f1d-11ea-8710-333445793454 <=< ACCEPT -->
        Gets the iterator this iterator is using.
        @return the iterator
        <!-- ACCEPT >=> 6847cfc8-9f1d-11ea-8710-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.FilterIterator` / `public void setIterator(final Iterator<? extends E> iterator)`


        <!-- 6847cfc9-9f1d-11ea-8711-333445793454 <=< ACCEPT -->
        Sets the iterator for this iterator to use.
        If iteration has started, this effectively resets the iterator.
        @param iterator  the iterator to use
        <!-- ACCEPT >=> 6847cfc9-9f1d-11ea-8711-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.FilterIterator` / `public Predicate<? super E> getPredicate()`


        <!-- 6847cfca-9f1d-11ea-8712-333445793454 <=< ACCEPT -->
        Gets the predicate this iterator is using.
        @return the predicate
        <!-- ACCEPT >=> 6847cfca-9f1d-11ea-8712-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.FilterIterator` / `public void setPredicate(final Predicate<? super E> predicate)`


        <!-- 6847cfcb-9f1d-11ea-8713-333445793454 <=< ACCEPT -->
        Sets the predicate this the iterator to use.
        @param predicate  the predicate to use
        <!-- ACCEPT >=> 6847cfcb-9f1d-11ea-8713-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.FilterIterator` / `private boolean setNextObject()`


        <!-- 6847cfcc-9f1d-11ea-8714-333445793454 <=< ACCEPT -->
        Set nextObject to the next object. If there are no more
        objects then return false. Otherwise, return true.
        <!-- ACCEPT >=> 6847cfcc-9f1d-11ea-8714-333445793454 -->



# File: `java.org.apache.commons.collections4.iterators.FilterListIterator`

## Class: `java.org.apache.commons.collections4.iterators.FilterListIterator` / `public class FilterListIterator<E> implements ListIterator<E>`


        <!-- 6847cfcd-9f1d-11ea-8715-333445793454 <=< ACCEPT -->
        Decorates another {@link ListIterator} using a predicate to filter elements.
        <p>
        This iterator decorates the underlying iterator, only allowing through
        those elements that match the specified {@link Predicate Predicate}.
        @since 2.0
        @version $Id$
        <!-- ACCEPT >=> 6847cfcd-9f1d-11ea-8715-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.FilterListIterator` / `private ListIterator<? extends E> iterator`


        <!-- 6847cfce-9f1d-11ea-8716-333445793454 <=< ACCEPT -->
        The iterator being used
        <!-- ACCEPT >=> 6847cfce-9f1d-11ea-8716-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.FilterListIterator` / `private Predicate<? super E> predicate`


        <!-- 6847f6c7-9f1d-11ea-8717-333445793454 <=< ACCEPT -->
        The predicate being used
        <!-- ACCEPT >=> 6847f6c7-9f1d-11ea-8717-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.FilterListIterator` / `private E nextObject`


        <!-- 6847f6c8-9f1d-11ea-8718-333445793454 <=< ACCEPT -->
        The value of the next (matching) object, when
        {@link #nextObjectSet} is true.
        <!-- ACCEPT >=> 6847f6c8-9f1d-11ea-8718-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.FilterListIterator` / `private boolean nextObjectSet`


        <!-- 6847f6c9-9f1d-11ea-8719-333445793454 <=< ACCEPT -->
        Whether or not the {@link #nextObject} has been set
        (possibly to <code>null</code>).
        <!-- ACCEPT >=> 6847f6c9-9f1d-11ea-8719-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.FilterListIterator` / `private E previousObject`


        <!-- 6847f6ca-9f1d-11ea-871a-333445793454 <=< ACCEPT -->
        The value of the previous (matching) object, when
        {@link #previousObjectSet} is true.
        <!-- ACCEPT >=> 6847f6ca-9f1d-11ea-871a-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.FilterListIterator` / `private boolean previousObjectSet`


        <!-- 6847f6cb-9f1d-11ea-871b-333445793454 <=< ACCEPT -->
        Whether or not the {@link #previousObject} has been set
        (possibly to <code>null</code>).
        <!-- ACCEPT >=> 6847f6cb-9f1d-11ea-871b-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.FilterListIterator` / `private int nextIndex`


        <!-- 6847f6cc-9f1d-11ea-871c-333445793454 <=< ACCEPT -->
        The index of the element that would be returned by {@link #next}.
        <!-- ACCEPT >=> 6847f6cc-9f1d-11ea-871c-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.FilterListIterator` / `public FilterListIterator()`


        <!-- 6847f6cd-9f1d-11ea-871d-333445793454 <=< ACCEPT -->
        Constructs a new <code>FilterListIterator</code> that will not function
        until {@link #setListIterator(ListIterator) setListIterator}
        and {@link #setPredicate(Predicate) setPredicate} are invoked.
        <!-- ACCEPT >=> 6847f6cd-9f1d-11ea-871d-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.FilterListIterator` / `public FilterListIterator(final ListIterator<? extends E> iterator )`


        <!-- 6847f6ce-9f1d-11ea-871e-333445793454 <=< ACCEPT -->
        Constructs a new <code>FilterListIterator</code> that will not
        function until {@link #setPredicate(Predicate) setPredicate} is invoked.
        @param iterator  the iterator to use
        <!-- ACCEPT >=> 6847f6ce-9f1d-11ea-871e-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.FilterListIterator` / `public FilterListIterator(final ListIterator<? extends E> iterator, final Predicate<? super E> predicate)`


        <!-- 6847f6cf-9f1d-11ea-871f-333445793454 <=< ACCEPT -->
        Constructs a new <code>FilterListIterator</code>.
        @param iterator  the iterator to use
        @param predicate  the predicate to use
        <!-- ACCEPT >=> 6847f6cf-9f1d-11ea-871f-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.FilterListIterator` / `public FilterListIterator(final Predicate<? super E> predicate)`


        <!-- 6847f6d0-9f1d-11ea-8720-333445793454 <=< ACCEPT -->
        Constructs a new <code>FilterListIterator</code> that will not function
        until {@link #setListIterator(ListIterator) setListIterator} is invoked.
        @param predicate  the predicate to use.
        <!-- ACCEPT >=> 6847f6d0-9f1d-11ea-8720-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.FilterListIterator` / `public void add(final E o)`


        <!-- 6847f6d1-9f1d-11ea-8721-333445793454 <=< ACCEPT -->
        Not supported.
        <!-- ACCEPT >=> 6847f6d1-9f1d-11ea-8721-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.FilterListIterator` / `public void remove()`


        <!-- 6847f6d2-9f1d-11ea-8722-333445793454 <=< ACCEPT -->
        Not supported.
        <!-- ACCEPT >=> 6847f6d2-9f1d-11ea-8722-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.FilterListIterator` / `public void set(final E o)`


        <!-- 6847f6d3-9f1d-11ea-8723-333445793454 <=< ACCEPT -->
        Not supported.
        <!-- ACCEPT >=> 6847f6d3-9f1d-11ea-8723-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.FilterListIterator` / `public ListIterator<? extends E> getListIterator()`


        <!-- 6847f6d4-9f1d-11ea-8724-333445793454 <=< ACCEPT -->
        Gets the iterator this iterator is using.
        @return the iterator.
        <!-- ACCEPT >=> 6847f6d4-9f1d-11ea-8724-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.FilterListIterator` / `public void setListIterator(final ListIterator<? extends E> iterator)`


        <!-- 6847f6d5-9f1d-11ea-8725-333445793454 <=< ACCEPT -->
        Sets the iterator for this iterator to use.
        If iteration has started, this effectively resets the iterator.
        @param iterator  the iterator to use
        <!-- ACCEPT >=> 6847f6d5-9f1d-11ea-8725-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.FilterListIterator` / `public Predicate<? super E> getPredicate()`


        <!-- 6847f6d6-9f1d-11ea-8726-333445793454 <=< ACCEPT -->
        Gets the predicate this iterator is using.
        @return the predicate.
        <!-- ACCEPT >=> 6847f6d6-9f1d-11ea-8726-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.FilterListIterator` / `public void setPredicate(final Predicate<? super E> predicate)`


        <!-- 6847f6d7-9f1d-11ea-8727-333445793454 <=< ACCEPT -->
        Sets the predicate this the iterator to use.
        @param predicate  the transformer to use
        <!-- ACCEPT >=> 6847f6d7-9f1d-11ea-8727-333445793454 -->



# File: `java.org.apache.commons.collections4.iterators.IteratorChain`

## Class: `java.org.apache.commons.collections4.iterators.IteratorChain` / `public class IteratorChain<E> implements Iterator<E>`


        <!-- 68481dd3-9f1d-11ea-8728-333445793454 <=< ACCEPT -->
        An IteratorChain is an Iterator that wraps a number of Iterators.
        <p>
        This class makes multiple iterators look like one to the caller. When any
        method from the Iterator interface is called, the IteratorChain will delegate
        to a single underlying Iterator. The IteratorChain will invoke the Iterators
        in sequence until all Iterators are exhausted.
        <p>
        Under many circumstances, linking Iterators together in this manner is more
        efficient (and convenient) than reading out the contents of each Iterator
        into a List and creating a new Iterator.
        <p>
        Calling a method that adds new Iterator <i>after a method in the Iterator
        interface has been called</i> will result in an UnsupportedOperationException.
        <p>
        NOTE: As from version 3.0, the IteratorChain may contain no iterators. In
        this case the class will function as an empty iterator.
        <p>
        NOTE: As from version 4.0, the IteratorChain stores the iterators in a queue
        and removes any reference to them as soon as they are not used anymore. Thus
        the methods {@code setIterator(Iterator)} and {@code getIterators()} have been
        removed and {@link #size()} will return the number of remaining iterators in
        the queue.
        @since 2.1
        @version $Id$
        <!-- ACCEPT >=> 68481dd3-9f1d-11ea-8728-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.IteratorChain` / `private final Queue<Iterator<? extends E>> iteratorChain`


        <!-- 68481dd4-9f1d-11ea-8729-333445793454 <=< ACCEPT -->
        The chain of iterators
        <!-- ACCEPT >=> 68481dd4-9f1d-11ea-8729-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.IteratorChain` / `private Iterator<? extends E> currentIterator`


        <!-- 68481dd5-9f1d-11ea-872a-333445793454 <=< ACCEPT -->
        The current iterator
        <!-- ACCEPT >=> 68481dd5-9f1d-11ea-872a-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.IteratorChain` / `private Iterator<? extends E> lastUsedIterator`


        <!-- 68481dd6-9f1d-11ea-872b-333445793454 <=< ACCEPT -->
        The "last used" Iterator is the Iterator upon which next() or hasNext()
        was most recently called used for the remove() operation only
        <!-- ACCEPT >=> 68481dd6-9f1d-11ea-872b-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.IteratorChain` / `private boolean isLocked`


        <!-- 68481dd7-9f1d-11ea-872c-333445793454 <=< ACCEPT -->
        ComparatorChain is "locked" after the first time compare(Object,Object)
        is called
        <!-- ACCEPT >=> 68481dd7-9f1d-11ea-872c-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.IteratorChain` / `public IteratorChain()`


        <!-- 68481dd8-9f1d-11ea-872d-333445793454 <=< ACCEPT -->
        Construct an IteratorChain with no Iterators.
        <p>
        You will normally use {@link #addIterator(Iterator)} to add some
        iterators after using this constructor.
        <!-- ACCEPT >=> 68481dd8-9f1d-11ea-872d-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.IteratorChain` / `public IteratorChain(final Iterator<? extends E> iterator)`


        <!-- 68481dd9-9f1d-11ea-872e-333445793454 <=< ACCEPT -->
        Construct an IteratorChain with a single Iterator.
        <p>
        This method takes one iterator. The newly constructed iterator will
        iterate through that iterator. Thus calling this constructor on its own
        will have no effect other than decorating the input iterator.
        <p>
        You will normally use {@link #addIterator(Iterator)} to add some more
        iterators after using this constructor.
        @param iterator the first child iterator in the IteratorChain, not null
        @throws NullPointerException if the iterator is null
        <!-- ACCEPT >=> 68481dd9-9f1d-11ea-872e-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.IteratorChain` / `public IteratorChain(final Iterator<? extends E> first, final Iterator<? extends E> second)`


        <!-- 68481dda-9f1d-11ea-872f-333445793454 <=< ACCEPT -->
        Constructs a new <code>IteratorChain</code> over the two given iterators.
        <p>
        This method takes two iterators. The newly constructed iterator will
        iterate through each one of the input iterators in turn.
        @param first the first child iterator in the IteratorChain, not null
        @param second the second child iterator in the IteratorChain, not null
        @throws NullPointerException if either iterator is null
        <!-- ACCEPT >=> 68481dda-9f1d-11ea-872f-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.IteratorChain` / `public IteratorChain(final Iterator<? extends E>... iteratorChain)`


        <!-- 68481ddb-9f1d-11ea-8730-333445793454 <=< ACCEPT -->
        Constructs a new <code>IteratorChain</code> over the array of iterators.
        <p>
        This method takes an array of iterators. The newly constructed iterator
        will iterate through each one of the input iterators in turn.
        @param iteratorChain the array of iterators, not null
        @throws NullPointerException if iterators array is or contains null
        <!-- ACCEPT >=> 68481ddb-9f1d-11ea-8730-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.IteratorChain` / `public IteratorChain(final Collection<Iterator<? extends E>> iteratorChain)`


        <!-- 68481ddc-9f1d-11ea-8731-333445793454 <=< ACCEPT -->
        Constructs a new <code>IteratorChain</code> over the collection of
        iterators.
        <p>
        This method takes a collection of iterators. The newly constructed
        iterator will iterate through each one of the input iterators in turn.
        @param iteratorChain the collection of iterators, not null
        @throws NullPointerException if iterators collection is or contains null
        @throws ClassCastException if iterators collection doesn't contain an
        iterator
        <!-- ACCEPT >=> 68481ddc-9f1d-11ea-8731-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.IteratorChain` / `public void addIterator(final Iterator<? extends E> iterator)`


        <!-- 68481ddd-9f1d-11ea-8732-333445793454 <=< ACCEPT -->
        Add an Iterator to the end of the chain
        @param iterator Iterator to add
        @throws IllegalStateException if I've already started iterating
        @throws NullPointerException if the iterator is null
        <!-- ACCEPT >=> 68481ddd-9f1d-11ea-8732-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.IteratorChain` / `public int size()`


        <!-- 68481dde-9f1d-11ea-8733-333445793454 <=< ACCEPT -->
        Returns the remaining number of Iterators in the current IteratorChain.
        @return Iterator count
        <!-- ACCEPT >=> 68481dde-9f1d-11ea-8733-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.IteratorChain` / `public boolean isLocked()`


        <!-- 684844dc-9f1d-11ea-8734-333445793454 <=< ACCEPT -->
        Determine if modifications can still be made to the IteratorChain.
        IteratorChains cannot be modified once they have executed a method from
        the Iterator interface.
        @return true if IteratorChain cannot be modified, false if it can
        <!-- ACCEPT >=> 684844dc-9f1d-11ea-8734-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.IteratorChain` / `private void checkLocked()`


        <!-- 684844dd-9f1d-11ea-8735-333445793454 <=< ACCEPT -->
        Checks whether the iterator chain is now locked and in use.
        <!-- ACCEPT >=> 684844dd-9f1d-11ea-8735-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.IteratorChain` / `private void lockChain()`


        <!-- 684844de-9f1d-11ea-8736-333445793454 <=< ACCEPT -->
        Lock the chain so no more iterators can be added. This must be called
        from all Iterator interface methods.
        <!-- ACCEPT >=> 684844de-9f1d-11ea-8736-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.IteratorChain` / `protected void updateCurrentIterator()`


        <!-- 684844df-9f1d-11ea-8737-333445793454 <=< ACCEPT -->
        Updates the current iterator field to ensure that the current Iterator is
        not exhausted
        <!-- ACCEPT >=> 684844df-9f1d-11ea-8737-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.IteratorChain` / `public boolean hasNext()`


        <!-- 684844e0-9f1d-11ea-8738-333445793454 <=< ACCEPT -->
        Return true if any Iterator in the IteratorChain has a remaining element.
        @return true if elements remain
        <!-- ACCEPT >=> 684844e0-9f1d-11ea-8738-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.IteratorChain` / `public E next()`


        <!-- 684844e1-9f1d-11ea-8739-333445793454 <=< ACCEPT -->
        Returns the next Object of the current Iterator
        @return Object from the current Iterator
        @throws java.util.NoSuchElementException if all the Iterators are
        exhausted
        <!-- ACCEPT >=> 684844e1-9f1d-11ea-8739-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.IteratorChain` / `public void remove()`


        <!-- 684844e2-9f1d-11ea-873a-333445793454 <=< ACCEPT -->
        Removes from the underlying collection the last element returned by the
        Iterator. As with next() and hasNext(), this method calls remove() on the
        underlying Iterator. Therefore, this method may throw an
        UnsupportedOperationException if the underlying Iterator does not support
        this method.
        @throws UnsupportedOperationException if the remove operator is not
        supported by the underlying Iterator
        @throws IllegalStateException if the next method has not yet been called,
        or the remove method has already been called after the last call to the
        next method.
        <!-- ACCEPT >=> 684844e2-9f1d-11ea-873a-333445793454 -->



# File: `java.org.apache.commons.collections4.iterators.IteratorEnumeration`

## Class: `java.org.apache.commons.collections4.iterators.IteratorEnumeration` / `public class IteratorEnumeration<E> implements Enumeration<E>`


        <!-- 684844e3-9f1d-11ea-873b-333445793454 <=< ACCEPT -->
        Adapter to make an {@link Iterator Iterator} instance appear to be an
        {@link Enumeration Enumeration} instance.
        @since 1.0
        @version $Id$
        <!-- ACCEPT >=> 684844e3-9f1d-11ea-873b-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.IteratorEnumeration` / `private Iterator<? extends E> iterator`


        <!-- 684844e4-9f1d-11ea-873c-333445793454 <=< ACCEPT -->
        The iterator being decorated.
        <!-- ACCEPT >=> 684844e4-9f1d-11ea-873c-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.IteratorEnumeration` / `public IteratorEnumeration()`


        <!-- 684844e5-9f1d-11ea-873d-333445793454 <=< ACCEPT -->
        Constructs a new <code>IteratorEnumeration</code> that will not function
        until {@link #setIterator(Iterator) setIterator} is invoked.
        <!-- ACCEPT >=> 684844e5-9f1d-11ea-873d-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.IteratorEnumeration` / `public IteratorEnumeration(final Iterator<? extends E> iterator)`


        <!-- 684844e6-9f1d-11ea-873e-333445793454 <=< ACCEPT -->
        Constructs a new <code>IteratorEnumeration</code> that will use the given
        iterator.
        @param iterator the iterator to use
        <!-- ACCEPT >=> 684844e6-9f1d-11ea-873e-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.IteratorEnumeration` / `public boolean hasMoreElements()`


        <!-- 684844e7-9f1d-11ea-873f-333445793454 <=< ACCEPT -->
        Returns true if the underlying iterator has more elements.
        @return true if the underlying iterator has more elements
        <!-- ACCEPT >=> 684844e7-9f1d-11ea-873f-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.IteratorEnumeration` / `public E nextElement()`


        <!-- 68486be8-9f1d-11ea-8740-333445793454 <=< ACCEPT -->
        Returns the next element from the underlying iterator.
        @return the next element from the underlying iterator.
        @throws java.util.NoSuchElementException if the underlying iterator has
        no more elements
        <!-- ACCEPT >=> 68486be8-9f1d-11ea-8740-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.IteratorEnumeration` / `public Iterator<? extends E> getIterator()`


        <!-- 68486be9-9f1d-11ea-8741-333445793454 <=< ACCEPT -->
        Returns the underlying iterator.
        @return the underlying iterator
        <!-- ACCEPT >=> 68486be9-9f1d-11ea-8741-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.IteratorEnumeration` / `public void setIterator(final Iterator<? extends E> iterator)`


        <!-- 68486bea-9f1d-11ea-8742-333445793454 <=< ACCEPT -->
        Sets the underlying iterator.
        @param iterator the new underlying iterator
        <!-- ACCEPT >=> 68486bea-9f1d-11ea-8742-333445793454 -->



# File: `java.org.apache.commons.collections4.iterators.IteratorIterable`

## Class: `java.org.apache.commons.collections4.iterators.IteratorIterable` / `public class IteratorIterable<E> implements Iterable<E>`


        <!-- 68486beb-9f1d-11ea-8743-333445793454 <=< ACCEPT -->
        Adapter to make an {@link Iterator Iterator} instance appear to be an
        {@link Iterable Iterable} instance.  The iterable can be constructed in one
        of two variants:  single use, multiple use.
        <p>
        In the single use iterable case, the iterable is only usable for one
        iterative operation over the source iterator.  Subsequent iterative
        operations use the same, exhausted source iterator.  To create a single use
        iterable, construct a new {@link IteratorIterable} using a {@link Iterator}
        that is NOT a {@link ResettableIterator} iterator:
        <pre>
        Iterator<Integer> iterator = // some non-resettable iterator
        Iterable<Integer> iterable = new IteratorIterable<Integer>(iterator);
        </pre>
        </p>
        <p>
        In the multiple use iterable case, the iterable is usable for any number of
        iterative operations over the source iterator.  Of special note, even though
        the iterable supports multiple iterations, it does not support concurrent
        iterations. To implicitly create a multiple use iterable, construct a new
        {@link IteratorIterable} using a {@link ResettableIterator} iterator:
        <pre>
        Integer[] array = {Integer.valueOf(1),Integer.valueOf(2),Integer.valueOf(3)};
        Iterator<Integer> iterator = IteratorUtils.arrayIterator(array); // a resettable iterator
        Iterable<Integer> iterable = new IteratorIterable<Integer>(iterator);
        </pre>
        </p>
        <p>
        A multiple use iterable can also be explicitly constructed using any
        {@link Iterator} and specifying <code>true</code> for the
        <code>multipleUse</code> flag:
        <pre>
        Iterator<Integer> iterator = // some non-resettable iterator
        Iterable<Integer> iterable = new IteratorIterable<Integer>(iterator, true);
        </pre>
        </p>
        @since 4.0
        @version $Id$
        <!-- ACCEPT >=> 68486beb-9f1d-11ea-8743-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.IteratorIterable` / `private static <E> Iterator<E> createTypesafeIterator(final Iterator<? extends E> iterator)`


        <!-- 68486bec-9f1d-11ea-8744-333445793454 <=< ACCEPT -->
        Factory method to create an {@link Iterator Iterator} from another
        iterator over objects of a different subtype.
        <!-- ACCEPT >=> 68486bec-9f1d-11ea-8744-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.IteratorIterable` / `private final Iterator<? extends E> iterator`


        <!-- 68486bed-9f1d-11ea-8745-333445793454 <=< ACCEPT -->
        the iterator being adapted into an iterable.
        <!-- ACCEPT >=> 68486bed-9f1d-11ea-8745-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.IteratorIterable` / `private final Iterator<E> typeSafeIterator`


        <!-- 68486bee-9f1d-11ea-8746-333445793454 <=< ACCEPT -->
        the iterator parameterized as the {@link #iterator()} return type.
        <!-- ACCEPT >=> 68486bee-9f1d-11ea-8746-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.IteratorIterable` / `public IteratorIterable(final Iterator<? extends E> iterator)`


        <!-- 68486bef-9f1d-11ea-8747-333445793454 <=< ACCEPT -->
        Constructs a new <code>IteratorIterable</code> that will use the given
        iterator.
        @param iterator the iterator to use.
        <!-- ACCEPT >=> 68486bef-9f1d-11ea-8747-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.IteratorIterable` / `public IteratorIterable(final Iterator<? extends E> iterator, final boolean multipleUse)`


        <!-- 68486bf0-9f1d-11ea-8748-333445793454 <=< ACCEPT -->
        Constructs a new <code>IteratorIterable</code> that will use the given
        iterator.
        @param iterator the iterator to use.
        @param multipleUse <code>true</code> if the new iterable can be used in multiple iterations
        <!-- ACCEPT >=> 68486bf0-9f1d-11ea-8748-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.IteratorIterable` / `public Iterator<E> iterator()`


        <!-- 68486bf1-9f1d-11ea-8749-333445793454 <=< ACCEPT -->
        Gets the iterator wrapped by this iterable.
        @return the iterator
        <!-- ACCEPT >=> 68486bf1-9f1d-11ea-8749-333445793454 -->



# File: `java.org.apache.commons.collections4.iterators.LazyIteratorChain`

## Class: `java.org.apache.commons.collections4.iterators.LazyIteratorChain` / `public abstract class LazyIteratorChain<E> implements Iterator<E>`


        <!-- 68486bf2-9f1d-11ea-874a-333445793454 <=< ACCEPT -->
        An LazyIteratorChain is an Iterator that wraps a number of Iterators in a lazy manner.
        <p>
        This class makes multiple iterators look like one to the caller. When any
        method from the Iterator interface is called, the LazyIteratorChain will delegate
        to a single underlying Iterator. The LazyIteratorChain will invoke the Iterators
        in sequence until all Iterators are exhausted.
        <p>
        The Iterators are provided by {@link #nextIterator(int)} which has to be overridden by
        sub-classes and allows to lazily create the Iterators as they are accessed:
        <pre>
        return new LazyIteratorChain&lt;String&gt;() {
        protected Iterator&lt;String&gt; nextIterator(int count) {
        return count == 1 ? Arrays.asList("foo", "bar").iterator() : null;
        }
        };
        </pre>
        <p>
        Once the inner Iterator's {@link Iterator#hasNext()} method returns false,
        {@link #nextIterator(int)} will be called to obtain another iterator, and so on
        until {@link #nextIterator(int)} returns null, indicating that the chain is exhausted.
        <p>
        NOTE: The LazyIteratorChain may contain no iterators. In this case the class will
        function as an empty iterator.
        @since 4.0
        @version $Id$
        <!-- ACCEPT >=> 68486bf2-9f1d-11ea-874a-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.LazyIteratorChain` / `private int callCounter`


        <!-- 68486bf3-9f1d-11ea-874b-333445793454 <=< ACCEPT -->
        The number of times {@link #nextIterator()} was already called.
        <!-- ACCEPT >=> 68486bf3-9f1d-11ea-874b-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.LazyIteratorChain` / `private boolean chainExhausted`


        <!-- 68486bf4-9f1d-11ea-874c-333445793454 <=< ACCEPT -->
        Indicates that the Iterator chain has been exhausted.
        <!-- ACCEPT >=> 68486bf4-9f1d-11ea-874c-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.LazyIteratorChain` / `private Iterator<? extends E> currentIterator`


        <!-- 68486bf5-9f1d-11ea-874d-333445793454 <=< ACCEPT -->
        The current iterator.
        <!-- ACCEPT >=> 68486bf5-9f1d-11ea-874d-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.LazyIteratorChain` / `private Iterator<? extends E> lastUsedIterator`


        <!-- 68486bf6-9f1d-11ea-874e-333445793454 <=< ACCEPT -->
        The "last used" Iterator is the Iterator upon which next() or hasNext()
        was most recently called used for the remove() operation only.
        <!-- ACCEPT >=> 68486bf6-9f1d-11ea-874e-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.LazyIteratorChain` / `protected abstract Iterator<? extends E> nextIterator(int count)`


        <!-- 68486bf7-9f1d-11ea-874f-333445793454 <=< ACCEPT -->
        Gets the next iterator after the previous one has been exhausted.
        <p>
        This method <b>MUST</b> return null when there are no more iterators.
        @param count the number of time this method has been called (starts with 1)
        @return the next iterator, or null if there are no more.
        <!-- ACCEPT >=> 68486bf7-9f1d-11ea-874f-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.LazyIteratorChain` / `private void updateCurrentIterator()`


        <!-- 684892f3-9f1d-11ea-8750-333445793454 <=< ACCEPT -->
        Updates the current iterator field to ensure that the current Iterator
        is not exhausted.
        <!-- ACCEPT >=> 684892f3-9f1d-11ea-8750-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.LazyIteratorChain` / `public boolean hasNext()`


        <!-- 684892f4-9f1d-11ea-8751-333445793454 <=< ACCEPT -->
        Return true if any Iterator in the chain has a remaining element.
        @return true if elements remain
        <!-- ACCEPT >=> 684892f4-9f1d-11ea-8751-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.LazyIteratorChain` / `public E next()`


        <!-- 684892f5-9f1d-11ea-8752-333445793454 <=< ACCEPT -->
        Returns the next element of the current Iterator
        @return element from the current Iterator
        @throws java.util.NoSuchElementException if all the Iterators are exhausted
        <!-- ACCEPT >=> 684892f5-9f1d-11ea-8752-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.LazyIteratorChain` / `public void remove()`


        <!-- 684892f6-9f1d-11ea-8753-333445793454 <=< ACCEPT -->
        Removes from the underlying collection the last element returned by the Iterator.
        <p>
        As with next() and hasNext(), this method calls remove() on the underlying Iterator.
        Therefore, this method may throw an UnsupportedOperationException if the underlying
        Iterator does not support this method.
        @throws UnsupportedOperationException if the remove operator is not
        supported by the underlying Iterator
        @throws IllegalStateException if the next method has not yet been called,
        or the remove method has already been called after the last call to the next method.
        <!-- ACCEPT >=> 684892f6-9f1d-11ea-8753-333445793454 -->



# File: `java.org.apache.commons.collections4.iterators.ListIteratorWrapper`

## Class: `java.org.apache.commons.collections4.iterators.ListIteratorWrapper` / `public class ListIteratorWrapper<E> implements ResettableListIterator<E>`


        <!-- 684892f7-9f1d-11ea-8754-333445793454 <=< ACCEPT -->
        Converts an {@link Iterator} into a {@link ResettableListIterator}.
        For plain <code>Iterator</code>s this is accomplished by caching the returned
        elements.  This class can also be used to simply add
        {@link org.apache.commons.collections4.ResettableIterator ResettableIterator}
        functionality to a given {@link ListIterator}.
        <p>
        The <code>ListIterator</code> interface has additional useful methods
        for navigation - <code>previous()</code> and the index methods.
        This class allows a regular <code>Iterator</code> to behave as a
        <code>ListIterator</code>. It achieves this by building a list internally
        of as the underlying iterator is traversed.
        <p>
        The optional operations of <code>ListIterator</code> are not supported for plain <code>Iterator</code>s.
        <p>
        This class implements ResettableListIterator from Commons Collections 3.2.
        @since 2.1
        @version $Id$
        <!-- ACCEPT >=> 684892f7-9f1d-11ea-8754-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.ListIteratorWrapper` / `private static final String UNSUPPORTED_OPERATION_MESSAGE`


        <!-- 684892f8-9f1d-11ea-8755-333445793454 <=< ACCEPT -->
        Message used when set or add are called.
        <!-- ACCEPT >=> 684892f8-9f1d-11ea-8755-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.ListIteratorWrapper` / `private static final String CANNOT_REMOVE_MESSAGE`


        <!-- 684892f9-9f1d-11ea-8756-333445793454 <=< ACCEPT -->
        Message used when set or add are called.
        <!-- ACCEPT >=> 684892f9-9f1d-11ea-8756-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.ListIteratorWrapper` / `private final Iterator<? extends E> iterator`


        <!-- 684892fa-9f1d-11ea-8757-333445793454 <=< ACCEPT -->
        The underlying iterator being decorated.
        <!-- ACCEPT >=> 684892fa-9f1d-11ea-8757-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.ListIteratorWrapper` / `private final List<E> list`


        <!-- 684892fb-9f1d-11ea-8758-333445793454 <=< ACCEPT -->
        The list being used to cache the iterator.
        <!-- ACCEPT >=> 684892fb-9f1d-11ea-8758-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.ListIteratorWrapper` / `private int currentIndex`


        <!-- 684892fc-9f1d-11ea-8759-333445793454 <=< ACCEPT -->
        The current index of this iterator.
        <!-- ACCEPT >=> 684892fc-9f1d-11ea-8759-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.ListIteratorWrapper` / `private int wrappedIteratorIndex`


        <!-- 684892fd-9f1d-11ea-875a-333445793454 <=< ACCEPT -->
        The current index of the wrapped iterator.
        <!-- ACCEPT >=> 684892fd-9f1d-11ea-875a-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.ListIteratorWrapper` / `private boolean removeState`


        <!-- 684892fe-9f1d-11ea-875b-333445793454 <=< ACCEPT -->
        recall whether the wrapped iterator's "cursor" is in such a state as to allow remove() to be called
        <!-- ACCEPT >=> 684892fe-9f1d-11ea-875b-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.ListIteratorWrapper` / `public ListIteratorWrapper(final Iterator<? extends E> iterator)`


        <!-- 684892ff-9f1d-11ea-875c-333445793454 <=< ACCEPT -->
        Constructs a new <code>ListIteratorWrapper</code> that will wrap
        the given iterator.
        @param iterator  the iterator to wrap
        @throws NullPointerException if the iterator is null
        <!-- ACCEPT >=> 684892ff-9f1d-11ea-875c-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ListIteratorWrapper` / `public void add(final E obj) throws UnsupportedOperationException`


        <!-- 68489300-9f1d-11ea-875d-333445793454 <=< ACCEPT -->
        Throws {@link UnsupportedOperationException}
        unless the underlying <code>Iterator</code> is a <code>ListIterator</code>.
        @param obj  the object to add
        @throws UnsupportedOperationException if the underlying iterator is not of
        type {@link ListIterator}
        <!-- ACCEPT >=> 68489300-9f1d-11ea-875d-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ListIteratorWrapper` / `public boolean hasNext()`


        <!-- 68489301-9f1d-11ea-875e-333445793454 <=< ACCEPT -->
        Returns true if there are more elements in the iterator.
        @return true if there are more elements
        <!-- ACCEPT >=> 68489301-9f1d-11ea-875e-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ListIteratorWrapper` / `public boolean hasPrevious()`


        <!-- 68489302-9f1d-11ea-875f-333445793454 <=< ACCEPT -->
        Returns true if there are previous elements in the iterator.
        @return true if there are previous elements
        <!-- ACCEPT >=> 68489302-9f1d-11ea-875f-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ListIteratorWrapper` / `public E next() throws NoSuchElementException`


        <!-- 68489303-9f1d-11ea-8760-333445793454 <=< ACCEPT -->
        Returns the next element from the iterator.
        @return the next element from the iterator
        @throws NoSuchElementException if there are no more elements
        <!-- ACCEPT >=> 68489303-9f1d-11ea-8760-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ListIteratorWrapper` / `public int nextIndex()`


        <!-- 68489304-9f1d-11ea-8761-333445793454 <=< ACCEPT -->
        Returns the index of the next element.
        @return the index of the next element
        <!-- ACCEPT >=> 68489304-9f1d-11ea-8761-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ListIteratorWrapper` / `public E previous() throws NoSuchElementException`


        <!-- 68489305-9f1d-11ea-8762-333445793454 <=< ACCEPT -->
        Returns the the previous element.
        @return the previous element
        @throws NoSuchElementException  if there are no previous elements
        <!-- ACCEPT >=> 68489305-9f1d-11ea-8762-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ListIteratorWrapper` / `public int previousIndex()`


        <!-- 68489306-9f1d-11ea-8763-333445793454 <=< ACCEPT -->
        Returns the index of the previous element.
        @return  the index of the previous element
        <!-- ACCEPT >=> 68489306-9f1d-11ea-8763-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ListIteratorWrapper` / `public void remove() throws UnsupportedOperationException`


        <!-- 68489307-9f1d-11ea-8764-333445793454 <=< ACCEPT -->
        Throws {@link UnsupportedOperationException} if {@link #previous()} has ever been called.
        @throws UnsupportedOperationException always
        <!-- ACCEPT >=> 68489307-9f1d-11ea-8764-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ListIteratorWrapper` / `public void set(final E obj) throws UnsupportedOperationException`


        <!-- 68489308-9f1d-11ea-8765-333445793454 <=< ACCEPT -->
        Throws {@link UnsupportedOperationException}
        unless the underlying <code>Iterator</code> is a <code>ListIterator</code>.
        @param obj  the object to set
        @throws UnsupportedOperationException if the underlying iterator is not of
        type {@link ListIterator}
        <!-- ACCEPT >=> 68489308-9f1d-11ea-8765-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ListIteratorWrapper` / `public void reset()`


        <!-- 6848b9f8-9f1d-11ea-8766-333445793454 <=< ACCEPT -->
        Resets this iterator back to the position at which the iterator
        was created.
        @since 3.2
        <!-- ACCEPT >=> 6848b9f8-9f1d-11ea-8766-333445793454 -->



# File: `java.org.apache.commons.collections4.iterators.LoopingIterator`

## Class: `java.org.apache.commons.collections4.iterators.LoopingIterator` / `public class LoopingIterator<E> implements ResettableIterator<E>`


        <!-- 6848b9f9-9f1d-11ea-8767-333445793454 <=< ACCEPT -->
        An Iterator that restarts when it reaches the end.
        <p>
        The iterator will loop continuously around the provided elements, unless
        there are no elements in the collection to begin with, or all the elements
        have been {@link #remove removed}.
        <p>
        Concurrent modifications are not directly supported, and for most collection
        implementations will throw a ConcurrentModificationException.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 6848b9f9-9f1d-11ea-8767-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.LoopingIterator` / `private final Collection<? extends E> collection`


        <!-- 6848b9fa-9f1d-11ea-8768-333445793454 <=< ACCEPT -->
        The collection to base the iterator on
        <!-- ACCEPT >=> 6848b9fa-9f1d-11ea-8768-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.LoopingIterator` / `private Iterator<? extends E> iterator`


        <!-- 6848b9fb-9f1d-11ea-8769-333445793454 <=< ACCEPT -->
        The current iterator
        <!-- ACCEPT >=> 6848b9fb-9f1d-11ea-8769-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.LoopingIterator` / `public LoopingIterator(final Collection<? extends E> coll)`


        <!-- 6848b9fc-9f1d-11ea-876a-333445793454 <=< ACCEPT -->
        Constructor that wraps a collection.
        <p>
        There is no way to reset an Iterator instance without recreating it from
        the original source, so the Collection must be passed in.
        @param coll  the collection to wrap
        @throws NullPointerException if the collection is null
        <!-- ACCEPT >=> 6848b9fc-9f1d-11ea-876a-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.LoopingIterator` / `public boolean hasNext()`


        <!-- 6848b9fd-9f1d-11ea-876b-333445793454 <=< ACCEPT -->
        Has the iterator any more elements.
        <p>
        Returns false only if the collection originally had zero elements, or
        all the elements have been {@link #remove removed}.
        @return <code>true</code> if there are more elements
        <!-- ACCEPT >=> 6848b9fd-9f1d-11ea-876b-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.LoopingIterator` / `public E next()`


        <!-- 6848b9fe-9f1d-11ea-876c-333445793454 <=< ACCEPT -->
        Returns the next object in the collection.
        <p>
        If at the end of the collection, return the first element.
        @return the next object
        @throws NoSuchElementException if there are no elements
        at all.  Use {@link #hasNext} to avoid this error.
        <!-- ACCEPT >=> 6848b9fe-9f1d-11ea-876c-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.LoopingIterator` / `public void remove()`


        <!-- 6848b9ff-9f1d-11ea-876d-333445793454 <=< ACCEPT -->
        Removes the previously retrieved item from the underlying collection.
        <p>
        This feature is only supported if the underlying collection's
        {@link Collection#iterator iterator} method returns an implementation
        that supports it.
        <p>
        This method can only be called after at least one {@link #next} method call.
        After a removal, the remove method may not be called again until another
        next has been performed. If the {@link #reset} is called, then remove may
        not be called until {@link #next} is called again.
        <!-- ACCEPT >=> 6848b9ff-9f1d-11ea-876d-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.LoopingIterator` / `public void reset()`


        <!-- 6848ba00-9f1d-11ea-876e-333445793454 <=< ACCEPT -->
        Resets the iterator back to the start of the collection.
        <!-- ACCEPT >=> 6848ba00-9f1d-11ea-876e-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.LoopingIterator` / `public int size()`


        <!-- 6848ba01-9f1d-11ea-876f-333445793454 <=< ACCEPT -->
        Gets the size of the collection underlying the iterator.
        @return the current collection size
        <!-- ACCEPT >=> 6848ba01-9f1d-11ea-876f-333445793454 -->



# File: `java.org.apache.commons.collections4.iterators.LoopingListIterator`

## Class: `java.org.apache.commons.collections4.iterators.LoopingListIterator` / `public class LoopingListIterator<E> implements ResettableListIterator<E>`


        <!-- 6848ba02-9f1d-11ea-8770-333445793454 <=< ACCEPT -->
        A ListIterator that restarts when it reaches the end or when it
        reaches the beginning.
        <p>
        The iterator will loop continuously around the provided list,
        unless there are no elements in the collection to begin with, or
        all of the elements have been {@link #remove removed}.
        <p>
        Concurrent modifications are not directly supported, and for most
        collection implementations will throw a
        ConcurrentModificationException.
        @since 3.2
        @version $Id$
        <!-- ACCEPT >=> 6848ba02-9f1d-11ea-8770-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.LoopingListIterator` / `private final List<E> list`


        <!-- 6848ba03-9f1d-11ea-8771-333445793454 <=< ACCEPT -->
        The list to base the iterator on
        <!-- ACCEPT >=> 6848ba03-9f1d-11ea-8771-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.LoopingListIterator` / `private ListIterator<E> iterator`


        <!-- 6848ba04-9f1d-11ea-8772-333445793454 <=< ACCEPT -->
        The current list iterator
        <!-- ACCEPT >=> 6848ba04-9f1d-11ea-8772-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.LoopingListIterator` / `public LoopingListIterator(final List<E> list)`


        <!-- 6848ba05-9f1d-11ea-8773-333445793454 <=< ACCEPT -->
        Constructor that wraps a list.
        <p>
        There is no way to reset a ListIterator instance without
        recreating it from the original source, so the List must be
        passed in and a reference to it held.
        @param list the list to wrap
        @throws NullPointerException if the list it null
        <!-- ACCEPT >=> 6848ba05-9f1d-11ea-8773-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.LoopingListIterator` / `public boolean hasNext()`


        <!-- 6848ba06-9f1d-11ea-8774-333445793454 <=< ACCEPT -->
        Returns whether this iterator has any more elements.
        <p>
        Returns false only if the list originally had zero elements, or
        all elements have been {@link #remove removed}.
        @return <code>true</code> if there are more elements
        <!-- ACCEPT >=> 6848ba06-9f1d-11ea-8774-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.LoopingListIterator` / `public E next()`


        <!-- 6848ba07-9f1d-11ea-8775-333445793454 <=< ACCEPT -->
        Returns the next object in the list.
        <p>
        If at the end of the list, returns the first element.
        @return the object after the last element returned
        @throws NoSuchElementException if there are no elements in the list
        <!-- ACCEPT >=> 6848ba07-9f1d-11ea-8775-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.LoopingListIterator` / `public int nextIndex()`


        <!-- 6848ba08-9f1d-11ea-8776-333445793454 <=< ACCEPT -->
        Returns the index of the element that would be returned by a
        subsequent call to {@link #next}.
        <p>
        As would be expected, if the iterator is at the physical end of
        the underlying list, 0 is returned, signifying the beginning of
        the list.
        @return the index of the element that would be returned if next() were called
        @throws NoSuchElementException if there are no elements in the list
        <!-- ACCEPT >=> 6848ba08-9f1d-11ea-8776-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.LoopingListIterator` / `public boolean hasPrevious()`


        <!-- 6848ba09-9f1d-11ea-8777-333445793454 <=< ACCEPT -->
        Returns whether this iterator has any more previous elements.
        <p>
        Returns false only if the list originally had zero elements, or
        all elements have been {@link #remove removed}.
        @return <code>true</code> if there are more elements
        <!-- ACCEPT >=> 6848ba09-9f1d-11ea-8777-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.LoopingListIterator` / `public E previous()`


        <!-- 6848ba0a-9f1d-11ea-8778-333445793454 <=< ACCEPT -->
        Returns the previous object in the list.
        <p>
        If at the beginning of the list, return the last element. Note
        that in this case, traversal to find that element takes linear time.
        @return the object before the last element returned
        @throws NoSuchElementException if there are no elements in the list
        <!-- ACCEPT >=> 6848ba0a-9f1d-11ea-8778-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.LoopingListIterator` / `public int previousIndex()`


        <!-- 6848ba0b-9f1d-11ea-8779-333445793454 <=< ACCEPT -->
        Returns the index of the element that would be returned by a
        subsequent call to {@link #previous}.
        <p>
        As would be expected, if at the iterator is at the physical
        beginning of the underlying list, the list's size minus one is
        returned, signifying the end of the list.
        @return the index of the element that would be returned if previous() were called
        @throws NoSuchElementException if there are no elements in the list
        <!-- ACCEPT >=> 6848ba0b-9f1d-11ea-8779-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.LoopingListIterator` / `public void remove()`


        <!-- 6848e0ff-9f1d-11ea-877a-333445793454 <=< ACCEPT -->
        Removes the previously retrieved item from the underlying list.
        <p>
        This feature is only supported if the underlying list's
        {@link List#iterator iterator} method returns an implementation
        that supports it.
        <p>
        This method can only be called after at least one {@link #next}
        or {@link #previous} method call. After a removal, the remove
        method may not be called again until another {@link #next} or
        {@link #previous} has been performed. If the {@link #reset} is
        called, then remove may not be called until {@link #next} or
        {@link #previous} is called again.
        @throws UnsupportedOperationException if the remove method is
        not supported by the iterator implementation of the underlying
        list
        <!-- ACCEPT >=> 6848e0ff-9f1d-11ea-877a-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.LoopingListIterator` / `public void add(final E obj)`


        <!-- 6848e100-9f1d-11ea-877b-333445793454 <=< ACCEPT -->
        Inserts the specified element into the underlying list.
        <p>
        The element is inserted before the next element that would be
        returned by {@link #next}, if any, and after the next element
        that would be returned by {@link #previous}, if any.
        <p>
        This feature is only supported if the underlying list's
        {@link List#listIterator} method returns an implementation
        that supports it.
        @param obj  the element to insert
        @throws UnsupportedOperationException if the add method is not
        supported by the iterator implementation of the underlying list
        <!-- ACCEPT >=> 6848e100-9f1d-11ea-877b-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.LoopingListIterator` / `public void set(final E obj)`


        <!-- 6848e101-9f1d-11ea-877c-333445793454 <=< ACCEPT -->
        Replaces the last element that was returned by {@link #next} or
        {@link #previous}.
        <p>
        This feature is only supported if the underlying list's
        {@link List#listIterator} method returns an implementation
        that supports it.
        @param obj  the element with which to replace the last element returned
        @throws UnsupportedOperationException if the set method is not
        supported by the iterator implementation of the underlying list
        <!-- ACCEPT >=> 6848e101-9f1d-11ea-877c-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.LoopingListIterator` / `public void reset()`


        <!-- 6848e102-9f1d-11ea-877d-333445793454 <=< ACCEPT -->
        Resets the iterator back to the start of the list.
        <!-- ACCEPT >=> 6848e102-9f1d-11ea-877d-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.LoopingListIterator` / `public int size()`


        <!-- 6848e103-9f1d-11ea-877e-333445793454 <=< ACCEPT -->
        Gets the size of the list underlying the iterator.
        @return the current list size
        <!-- ACCEPT >=> 6848e103-9f1d-11ea-877e-333445793454 -->



# File: `java.org.apache.commons.collections4.iterators.NodeListIterator`

## Class: `java.org.apache.commons.collections4.iterators.NodeListIterator` / `public class NodeListIterator implements Iterator<Node>`


        <!-- 6848e104-9f1d-11ea-877f-333445793454 <=< ACCEPT -->
        An {@link Iterator} over a {@link NodeList}.
        <p>
        This iterator does not support {@link #remove()} as a {@link NodeList} does not support
        removal of items.
        @since 4.0
        @version $Id$
        @see NodeList
        <!-- ACCEPT >=> 6848e104-9f1d-11ea-877f-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.NodeListIterator` / `private final NodeList nodeList`


        <!-- 6848e105-9f1d-11ea-8780-333445793454 <=< ACCEPT -->
        the original NodeList instance
        <!-- ACCEPT >=> 6848e105-9f1d-11ea-8780-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.NodeListIterator` / `private int index`


        <!-- 6848e106-9f1d-11ea-8781-333445793454 <=< ACCEPT -->
        The current iterator index
        <!-- ACCEPT >=> 6848e106-9f1d-11ea-8781-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.NodeListIterator` / `public NodeListIterator(final Node node)`


        <!-- 6848e107-9f1d-11ea-8782-333445793454 <=< ACCEPT -->
        Convenience constructor, which creates a new NodeListIterator from
        the specified node's childNodes.
        @param node Node, who's child nodes are wrapped by this class. Must not be null
        @throws NullPointerException if node is null
        <!-- ACCEPT >=> 6848e107-9f1d-11ea-8782-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.NodeListIterator` / `public NodeListIterator(final NodeList nodeList)`


        <!-- 6848e108-9f1d-11ea-8783-333445793454 <=< ACCEPT -->
        Constructor, that creates a new NodeListIterator from the specified
        <code>org.w3c.NodeList</code>
        @param nodeList node list, which is wrapped by this class. Must not be null
        @throws NullPointerException if nodeList is null
        <!-- ACCEPT >=> 6848e108-9f1d-11ea-8783-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.NodeListIterator` / `public void remove()`


        <!-- 6848e109-9f1d-11ea-8784-333445793454 <=< ACCEPT -->
        Throws {@link UnsupportedOperationException}.
        @throws UnsupportedOperationException always
        <!-- ACCEPT >=> 6848e109-9f1d-11ea-8784-333445793454 -->



# File: `java.org.apache.commons.collections4.iterators.ObjectArrayIterator`

## Class: `java.org.apache.commons.collections4.iterators.ObjectArrayIterator` / `public class ObjectArrayIterator<E> implements ResettableIterator<E>`


        <!-- 6848e10a-9f1d-11ea-8785-333445793454 <=< ACCEPT -->
        An {@link java.util.Iterator Iterator} over an array of objects.
        <p>
        This iterator does not support {@link #remove}, as the object array cannot be
        structurally modified.
        <p>
        The iterator implements a {@link #reset} method, allowing the reset of the iterator
        back to the start if required.
        @param <E> the type to iterate over
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 6848e10a-9f1d-11ea-8785-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.ObjectArrayIterator` / `final E[] array`


        <!-- 6848e10b-9f1d-11ea-8786-333445793454 <=< ACCEPT -->
        The array
        <!-- ACCEPT >=> 6848e10b-9f1d-11ea-8786-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.ObjectArrayIterator` / `final int startIndex`


        <!-- 6848e10c-9f1d-11ea-8787-333445793454 <=< ACCEPT -->
        The start index to loop from
        <!-- ACCEPT >=> 6848e10c-9f1d-11ea-8787-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.ObjectArrayIterator` / `final int endIndex`


        <!-- 6848e10d-9f1d-11ea-8788-333445793454 <=< ACCEPT -->
        The end index to loop to
        <!-- ACCEPT >=> 6848e10d-9f1d-11ea-8788-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.ObjectArrayIterator` / `int index`


        <!-- 6848e10e-9f1d-11ea-8789-333445793454 <=< ACCEPT -->
        The current iterator index
        <!-- ACCEPT >=> 6848e10e-9f1d-11ea-8789-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.ObjectArrayIterator` / `public ObjectArrayIterator(final E... array)`


        <!-- 6848e10f-9f1d-11ea-878a-333445793454 <=< ACCEPT -->
        Constructs an ObjectArrayIterator that will iterate over the values in the
        specified array.
        @param array the array to iterate over
        @throws NullPointerException if <code>array</code> is <code>null</code>
        <!-- ACCEPT >=> 6848e10f-9f1d-11ea-878a-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.ObjectArrayIterator` / `public ObjectArrayIterator(final E array[], final int start)`


        <!-- 6848e110-9f1d-11ea-878b-333445793454 <=< ACCEPT -->
        Constructs an ObjectArrayIterator that will iterate over the values in the
        specified array from a specific start index.
        @param array  the array to iterate over
        @param start  the index to start iterating at
        @throws NullPointerException if <code>array</code> is <code>null</code>
        @throws IndexOutOfBoundsException if the start index is out of bounds
        <!-- ACCEPT >=> 6848e110-9f1d-11ea-878b-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.ObjectArrayIterator` / `public ObjectArrayIterator(final E array[], final int start, final int end)`


        <!-- 6848e111-9f1d-11ea-878c-333445793454 <=< ACCEPT -->
        Construct an ObjectArrayIterator that will iterate over a range of values
        in the specified array.
        @param array  the array to iterate over
        @param start  the index to start iterating at
        @param end  the index (exclusive) to finish iterating at
        @throws IndexOutOfBoundsException if the start or end index is out of bounds
        @throws IllegalArgumentException if end index is before the start
        @throws NullPointerException if <code>array</code> is <code>null</code>
        <!-- ACCEPT >=> 6848e111-9f1d-11ea-878c-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ObjectArrayIterator` / `public boolean hasNext()`


        <!-- 6848e112-9f1d-11ea-878d-333445793454 <=< ACCEPT -->
        Returns true if there are more elements to return from the array.
        @return true if there is a next element to return
        <!-- ACCEPT >=> 6848e112-9f1d-11ea-878d-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ObjectArrayIterator` / `public E next()`


        <!-- 6848e113-9f1d-11ea-878e-333445793454 <=< ACCEPT -->
        Returns the next element in the array.
        @return the next element in the array
        @throws NoSuchElementException if all the elements in the array
        have already been returned
        <!-- ACCEPT >=> 6848e113-9f1d-11ea-878e-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ObjectArrayIterator` / `public void remove()`


        <!-- 68490807-9f1d-11ea-878f-333445793454 <=< ACCEPT -->
        Throws {@link UnsupportedOperationException}.
        @throws UnsupportedOperationException always
        <!-- ACCEPT >=> 68490807-9f1d-11ea-878f-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ObjectArrayIterator` / `public E[] getArray()`


        <!-- 68490808-9f1d-11ea-8790-333445793454 <=< ACCEPT -->
        Gets the array that this iterator is iterating over.
        @return the array this iterator iterates over
        <!-- ACCEPT >=> 68490808-9f1d-11ea-8790-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ObjectArrayIterator` / `public int getStartIndex()`


        <!-- 68490809-9f1d-11ea-8791-333445793454 <=< ACCEPT -->
        Gets the start index to loop from.
        @return the start index
        <!-- ACCEPT >=> 68490809-9f1d-11ea-8791-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ObjectArrayIterator` / `public int getEndIndex()`


        <!-- 6849080a-9f1d-11ea-8792-333445793454 <=< ACCEPT -->
        Gets the end index to loop to.
        @return the end index
        <!-- ACCEPT >=> 6849080a-9f1d-11ea-8792-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ObjectArrayIterator` / `public void reset()`


        <!-- 6849080b-9f1d-11ea-8793-333445793454 <=< ACCEPT -->
        Resets the iterator back to the start index.
        <!-- ACCEPT >=> 6849080b-9f1d-11ea-8793-333445793454 -->



# File: `java.org.apache.commons.collections4.iterators.ObjectArrayListIterator`

## Class: `java.org.apache.commons.collections4.iterators.ObjectArrayListIterator` / `implements ResettableListIterator<E>`


        <!-- 6849080c-9f1d-11ea-8794-333445793454 <=< ACCEPT -->
        Implements a {@link ListIterator} over an array of objects.
        <p>
        This iterator does not support {@link #add} or {@link #remove}, as the object array
        cannot be structurally modified. The {@link #set} method is supported however.
        <p>
        The iterator implements a {@link #reset} method, allowing the reset of the iterator
        back to the start if required.
        @see org.apache.commons.collections4.iterators.ObjectArrayIterator
        @see java.util.Iterator
        @see java.util.ListIterator
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 6849080c-9f1d-11ea-8794-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.ObjectArrayListIterator` / `private int lastItemIndex`


        <!-- 6849080d-9f1d-11ea-8795-333445793454 <=< ACCEPT -->
        Holds the index of the last item returned by a call to <code>next()</code>
        or <code>previous()</code>. This is set to <code>-1</code> if neither method
        has yet been invoked. <code>lastItemIndex</code> is used to to implement the
        {@link #set} method.
        <!-- ACCEPT >=> 6849080d-9f1d-11ea-8795-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.ObjectArrayListIterator` / `public ObjectArrayListIterator(final E... array)`


        <!-- 6849080e-9f1d-11ea-8796-333445793454 <=< ACCEPT -->
        Constructs an ObjectArrayListIterator that will iterate over the values in the
        specified array.
        @param array the array to iterate over
        @throws NullPointerException if <code>array</code> is <code>null</code>
        <!-- ACCEPT >=> 6849080e-9f1d-11ea-8796-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.ObjectArrayListIterator` / `public ObjectArrayListIterator(final E[] array, final int start)`


        <!-- 6849080f-9f1d-11ea-8797-333445793454 <=< ACCEPT -->
        Constructs an ObjectArrayListIterator that will iterate over the values in the
        specified array from a specific start index.
        @param array  the array to iterate over
        @param start  the index to start iterating at
        @throws NullPointerException if <code>array</code> is <code>null</code>
        @throws IndexOutOfBoundsException if the start index is out of bounds
        <!-- ACCEPT >=> 6849080f-9f1d-11ea-8797-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.ObjectArrayListIterator` / `public ObjectArrayListIterator(final E[] array, final int start, final int end)`


        <!-- 68490810-9f1d-11ea-8798-333445793454 <=< ACCEPT -->
        Construct an ObjectArrayListIterator that will iterate over a range of values
        in the specified array.
        @param array  the array to iterate over
        @param start  the index to start iterating at
        @param end  the index (exclusive) to finish iterating at
        @throws IndexOutOfBoundsException if the start or end index is out of bounds
        @throws IllegalArgumentException if end index is before the start
        @throws NullPointerException if <code>array</code> is <code>null</code>
        <!-- ACCEPT >=> 68490810-9f1d-11ea-8798-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ObjectArrayListIterator` / `public boolean hasPrevious()`


        <!-- 68490811-9f1d-11ea-8799-333445793454 <=< ACCEPT -->
        Returns true if there are previous elements to return from the array.
        @return true if there is a previous element to return
        <!-- ACCEPT >=> 68490811-9f1d-11ea-8799-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ObjectArrayListIterator` / `public E previous()`


        <!-- 68490812-9f1d-11ea-879a-333445793454 <=< ACCEPT -->
        Gets the previous element from the array.
        @return the previous element
        @throws NoSuchElementException if there is no previous element
        <!-- ACCEPT >=> 68490812-9f1d-11ea-879a-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ObjectArrayListIterator` / `public E next()`


        <!-- 68490813-9f1d-11ea-879b-333445793454 <=< ACCEPT -->
        Gets the next element from the array.
        @return the next element
        @throws NoSuchElementException if there is no next element
        <!-- ACCEPT >=> 68490813-9f1d-11ea-879b-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ObjectArrayListIterator` / `public int nextIndex()`


        <!-- 68490814-9f1d-11ea-879c-333445793454 <=< ACCEPT -->
        Gets the next index to be retrieved.
        @return the index of the item to be retrieved next
        <!-- ACCEPT >=> 68490814-9f1d-11ea-879c-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ObjectArrayListIterator` / `public int previousIndex()`


        <!-- 68490815-9f1d-11ea-879d-333445793454 <=< ACCEPT -->
        Gets the index of the item to be retrieved if {@link #previous()} is called.
        @return the index of the item to be retrieved next
        <!-- ACCEPT >=> 68490815-9f1d-11ea-879d-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ObjectArrayListIterator` / `public void add(final E obj)`


        <!-- 68490816-9f1d-11ea-879e-333445793454 <=< ACCEPT -->
        This iterator does not support modification of its backing array's size, and so will
        always throw an {@link UnsupportedOperationException} when this method is invoked.
        @param obj  the object to add
        @throws UnsupportedOperationException always thrown.
        <!-- ACCEPT >=> 68490816-9f1d-11ea-879e-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ObjectArrayListIterator` / `public void set(final E obj)`


        <!-- 68490817-9f1d-11ea-879f-333445793454 <=< ACCEPT -->
        Sets the element under the cursor.
        <p>
        This method sets the element that was returned by the last call
        to {@link #next()} of {@link #previous()}.
        <b>Note:</b> {@link ListIterator} implementations that support <code>add()</code>
        and <code>remove()</code> only allow <code>set()</code> to be called once per call
        to <code>next()</code> or <code>previous</code> (see the {@link ListIterator}
        javadoc for more details). Since this implementation does not support
        <code>add()</code> or <code>remove()</code>, <code>set()</code> may be
        called as often as desired.
        @param obj  the object to set into the array
        @throws IllegalStateException if next() has not yet been called.
        @throws ClassCastException if the object type is unsuitable for the array
        <!-- ACCEPT >=> 68490817-9f1d-11ea-879f-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ObjectArrayListIterator` / `public void reset()`


        <!-- 68490818-9f1d-11ea-87a0-333445793454 <=< ACCEPT -->
        Resets the iterator back to the start index.
        <!-- ACCEPT >=> 68490818-9f1d-11ea-87a0-333445793454 -->



# File: `java.org.apache.commons.collections4.iterators.ObjectGraphIterator`

## Class: `java.org.apache.commons.collections4.iterators.ObjectGraphIterator` / `public class ObjectGraphIterator<E> implements Iterator<E>`


        <!-- 68492f15-9f1d-11ea-87a1-333445793454 <=< ACCEPT -->
        An Iterator that can traverse multiple iterators down an object graph.
        <p>
        This iterator can extract multiple objects from a complex tree-like object graph.
        The iteration starts from a single root object.
        It uses a <code>Transformer</code> to extract the iterators and elements.
        Its main benefit is that no intermediate <code>List</code> is created.
        <p>
        For example, consider an object graph:
        <pre>
        |- Branch -- Leaf
        |         \- Leaf
        |- Tree |         /- Leaf
        |       |- Branch -- Leaf
        Forest |                 \- Leaf
        |       |- Branch -- Leaf
        |       |         \- Leaf
        |- Tree |         /- Leaf
        |- Branch -- Leaf
        |- Branch -- Leaf</pre>
        The following <code>Transformer</code>, used in this class, will extract all
        the Leaf objects without creating a combined intermediate list:
        <pre>
        public Object transform(Object input) {
        if (input instanceof Forest) {
        return ((Forest) input).treeIterator();
        }
        if (input instanceof Tree) {
        return ((Tree) input).branchIterator();
        }
        if (input instanceof Branch) {
        return ((Branch) input).leafIterator();
        }
        if (input instanceof Leaf) {
        return input;
        }
        throw new ClassCastException();
        }</pre>
        <p>
        Internally, iteration starts from the root object. When next is called,
        the transformer is called to examine the object. The transformer will return
        either an iterator or an object. If the object is an Iterator, the next element
        from that iterator is obtained and the process repeats. If the element is an object
        it is returned.
        <p>
        Under many circumstances, linking Iterators together in this manner is
        more efficient (and convenient) than using nested for loops to extract a list.
        @since 3.1
        @version $Id$
        <!-- ACCEPT >=> 68492f15-9f1d-11ea-87a1-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.ObjectGraphIterator` / `private final Deque<Iterator<? extends E>> stack`


        <!-- 68492f16-9f1d-11ea-87a2-333445793454 <=< ACCEPT -->
        The stack of iterators
        <!-- ACCEPT >=> 68492f16-9f1d-11ea-87a2-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.ObjectGraphIterator` / `private E root`


        <!-- 68492f17-9f1d-11ea-87a3-333445793454 <=< ACCEPT -->
        The root object in the tree
        <!-- ACCEPT >=> 68492f17-9f1d-11ea-87a3-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.ObjectGraphIterator` / `private final Transformer<? super E, ? extends E> transformer`


        <!-- 68492f18-9f1d-11ea-87a4-333445793454 <=< ACCEPT -->
        The transformer to use
        <!-- ACCEPT >=> 68492f18-9f1d-11ea-87a4-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.ObjectGraphIterator` / `private boolean hasNext`


        <!-- 68492f19-9f1d-11ea-87a5-333445793454 <=< ACCEPT -->
        Whether there is another element in the iteration
        <!-- ACCEPT >=> 68492f19-9f1d-11ea-87a5-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.ObjectGraphIterator` / `private Iterator<? extends E> currentIterator`


        <!-- 68492f1a-9f1d-11ea-87a6-333445793454 <=< ACCEPT -->
        The current iterator
        <!-- ACCEPT >=> 68492f1a-9f1d-11ea-87a6-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.ObjectGraphIterator` / `private E currentValue`


        <!-- 68492f1b-9f1d-11ea-87a7-333445793454 <=< ACCEPT -->
        The current value
        <!-- ACCEPT >=> 68492f1b-9f1d-11ea-87a7-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.ObjectGraphIterator` / `private Iterator<? extends E> lastUsedIterator`


        <!-- 68492f1c-9f1d-11ea-87a8-333445793454 <=< ACCEPT -->
        The last used iterator, needed for remove()
        <!-- ACCEPT >=> 68492f1c-9f1d-11ea-87a8-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.ObjectGraphIterator` / `public ObjectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer)`


        <!-- 68492f1d-9f1d-11ea-87a9-333445793454 <=< ACCEPT -->
        Constructs an ObjectGraphIterator using a root object and transformer.
        <p>
        The root object can be an iterator, in which case it will be immediately
        looped around.
        @param root  the root object, null will result in an empty iterator
        @param transformer  the transformer to use, null will use a no effect transformer
        <!-- ACCEPT >=> 68492f1d-9f1d-11ea-87a9-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.ObjectGraphIterator` / `public ObjectGraphIterator(final Iterator<? extends E> rootIterator)`


        <!-- 68492f1e-9f1d-11ea-87aa-333445793454 <=< ACCEPT -->
        Constructs a ObjectGraphIterator that will handle an iterator of iterators.
        <p>
        This constructor exists for convenience to emphasise that this class can
        be used to iterate over nested iterators. That is to say that the iterator
        passed in here contains other iterators, which may in turn contain further
        iterators.
        @param rootIterator  the root iterator, null will result in an empty iterator
        <!-- ACCEPT >=> 68492f1e-9f1d-11ea-87aa-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ObjectGraphIterator` / `protected void updateCurrentIterator()`


        <!-- 68492f1f-9f1d-11ea-87ab-333445793454 <=< ACCEPT -->
        Loops around the iterators to find the next value to return.
        <!-- ACCEPT >=> 68492f1f-9f1d-11ea-87ab-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ObjectGraphIterator` / `protected void findNext(final E value)`


        <!-- 68492f20-9f1d-11ea-87ac-333445793454 <=< ACCEPT -->
        Finds the next object in the iteration given any start object.
        @param value  the value to start from
        <!-- ACCEPT >=> 68492f20-9f1d-11ea-87ac-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ObjectGraphIterator` / `protected void findNextByIterator(final Iterator<? extends E> iterator)`


        <!-- 68492f21-9f1d-11ea-87ad-333445793454 <=< ACCEPT -->
        Finds the next object in the iteration given an iterator.
        @param iterator  the iterator to start from
        <!-- ACCEPT >=> 68492f21-9f1d-11ea-87ad-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ObjectGraphIterator` / `public boolean hasNext()`


        <!-- 68492f22-9f1d-11ea-87ae-333445793454 <=< ACCEPT -->
        Checks whether there are any more elements in the iteration to obtain.
        @return true if elements remain in the iteration
        <!-- ACCEPT >=> 68492f22-9f1d-11ea-87ae-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ObjectGraphIterator` / `public E next()`


        <!-- 68492f23-9f1d-11ea-87af-333445793454 <=< ACCEPT -->
        Gets the next element of the iteration.
        @return the next element from the iteration
        @throws NoSuchElementException if all the Iterators are exhausted
        <!-- ACCEPT >=> 68492f23-9f1d-11ea-87af-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ObjectGraphIterator` / `public void remove()`


        <!-- 68492f24-9f1d-11ea-87b0-333445793454 <=< ACCEPT -->
        Removes from the underlying collection the last element returned.
        <p>
        This method calls remove() on the underlying Iterator and it may
        throw an UnsupportedOperationException if the underlying Iterator
        does not support this method.
        @throws UnsupportedOperationException
        if the remove operator is not supported by the underlying Iterator
        @throws IllegalStateException
        if the next method has not yet been called, or the remove method has
        already been called after the last call to the next method.
        <!-- ACCEPT >=> 68492f24-9f1d-11ea-87b0-333445793454 -->



# File: `java.org.apache.commons.collections4.iterators.PeekingIterator`

## Class: `java.org.apache.commons.collections4.iterators.PeekingIterator` / `public class PeekingIterator<E> implements Iterator<E>`


        <!-- 68492f25-9f1d-11ea-87b1-333445793454 <=< ACCEPT -->
        Decorates an iterator to support one-element lookahead while iterating.
        <p>
        The decorator supports the removal operation, but an {@link IllegalStateException}
        will be thrown if {@link #remove()} is called directly after a call to
        {@link #peek()} or {@link #element()}.
        @since 4.0
        @version $Id$
        <!-- ACCEPT >=> 68492f25-9f1d-11ea-87b1-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.PeekingIterator` / `private final Iterator<? extends E> iterator`


        <!-- 68492f26-9f1d-11ea-87b2-333445793454 <=< ACCEPT -->
        The iterator being decorated.
        <!-- ACCEPT >=> 68492f26-9f1d-11ea-87b2-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.PeekingIterator` / `private boolean exhausted`


        <!-- 68492f27-9f1d-11ea-87b3-333445793454 <=< ACCEPT -->
        Indicates that the decorated iterator is exhausted.
        <!-- ACCEPT >=> 68492f27-9f1d-11ea-87b3-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.PeekingIterator` / `private boolean slotFilled`


        <!-- 68492f28-9f1d-11ea-87b4-333445793454 <=< ACCEPT -->
        Indicates if the lookahead slot is filled.
        <!-- ACCEPT >=> 68492f28-9f1d-11ea-87b4-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.PeekingIterator` / `private E slot`


        <!-- 68492f29-9f1d-11ea-87b5-333445793454 <=< ACCEPT -->
        The current slot for lookahead.
        <!-- ACCEPT >=> 68492f29-9f1d-11ea-87b5-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.PeekingIterator` / `public static <E> PeekingIterator<E> peekingIterator(final Iterator<? extends E> iterator)`


        <!-- 68492f2a-9f1d-11ea-87b6-333445793454 <=< ACCEPT -->
        Decorates the specified iterator to support one-element lookahead.
        <p>
        If the iterator is already a {@link PeekingIterator} it is returned directly.
        @param <E>  the element type
        @param iterator  the iterator to decorate
        @return a new peeking iterator
        @throws NullPointerException if the iterator is null
        <!-- ACCEPT >=> 68492f2a-9f1d-11ea-87b6-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.PeekingIterator` / `public PeekingIterator(final Iterator<? extends E> iterator)`


        <!-- 6849561f-9f1d-11ea-87b7-333445793454 <=< ACCEPT -->
        Constructor.
        @param iterator  the iterator to decorate
        <!-- ACCEPT >=> 6849561f-9f1d-11ea-87b7-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.PeekingIterator` / `public E peek()`


        <!-- 68495620-9f1d-11ea-87b8-333445793454 <=< ACCEPT -->
        Returns the next element in iteration without advancing the underlying iterator.
        If the iterator is already exhausted, null will be returned.
        <p>
        Note: this method does not throw a {@link NoSuchElementException} if the iterator
        is already exhausted. If you want such a behavior, use {@link #element()} instead.
        <p>
        The rationale behind this is to follow the {@link java.util.Queue} interface
        which uses the same terminology.
        @return the next element from the iterator
        <!-- ACCEPT >=> 68495620-9f1d-11ea-87b8-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.PeekingIterator` / `public E element()`


        <!-- 68495621-9f1d-11ea-87b9-333445793454 <=< ACCEPT -->
        Returns the next element in iteration without advancing the underlying iterator.
        If the iterator is already exhausted, null will be returned.
        @return the next element from the iterator
        @throws NoSuchElementException if the iterator is already exhausted according to {@link #hasNext()}
        <!-- ACCEPT >=> 68495621-9f1d-11ea-87b9-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.PeekingIterator` / `public void remove()`


        <!-- 68495622-9f1d-11ea-87ba-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        @throws IllegalStateException if {@link #peek()} or {@link #element()} has been called
        prior to the call to {@link #remove()}
        <!-- ACCEPT >=> 68495622-9f1d-11ea-87ba-333445793454 -->



# File: `java.org.apache.commons.collections4.iterators.PermutationIterator`

## Class: `java.org.apache.commons.collections4.iterators.PermutationIterator` / `public class PermutationIterator<E> implements Iterator<List<E>>`


        <!-- 68495623-9f1d-11ea-87bb-333445793454 <=< ACCEPT -->
        This iterator creates permutations of an input collection, using the
        Steinhaus-Johnson-Trotter algorithm (also called plain changes).
        <p>
        The iterator will return exactly n! permutations of the input collection.
        The {@code remove()} operation is not supported, and will throw an
        {@code UnsupportedOperationException}.
        <p>
        NOTE: in case an empty collection is provided, the iterator will
        return exactly one empty list as result, as 0! = 1.
        @param <E>  the type of the objects being permuted
        @version $Id$
        @since 4.0
        <!-- ACCEPT >=> 68495623-9f1d-11ea-87bb-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.PermutationIterator` / `private final int[] keys`


        <!-- 68495624-9f1d-11ea-87bc-333445793454 <=< ACCEPT -->
        Permutation is done on theses keys to handle equal objects.
        <!-- ACCEPT >=> 68495624-9f1d-11ea-87bc-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.PermutationIterator` / `private final Map<Integer, E> objectMap`


        <!-- 68495625-9f1d-11ea-87bd-333445793454 <=< ACCEPT -->
        Mapping between keys and objects.
        <!-- ACCEPT >=> 68495625-9f1d-11ea-87bd-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.PermutationIterator` / `private final boolean[] direction`


        <!-- 68495626-9f1d-11ea-87be-333445793454 <=< ACCEPT -->
        Direction table used in the algorithm:
        <ul>
        <li>false is left</li>
        <li>true is right</li>
        </ul>
        <!-- ACCEPT >=> 68495626-9f1d-11ea-87be-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.PermutationIterator` / `private List<E> nextPermutation`


        <!-- 68495627-9f1d-11ea-87bf-333445793454 <=< ACCEPT -->
        Next permutation to return. When a permutation is requested
        this instance is provided and the next one is computed.
        <!-- ACCEPT >=> 68495627-9f1d-11ea-87bf-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.PermutationIterator` / `public PermutationIterator(final Collection<? extends E> coll)`


        <!-- 68495628-9f1d-11ea-87c0-333445793454 <=< ACCEPT -->
        Standard constructor for this class.
        @param coll  the collection to generate permutations for
        @throws NullPointerException if coll is null
        <!-- ACCEPT >=> 68495628-9f1d-11ea-87c0-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.PermutationIterator` / `public boolean hasNext()`


        <!-- 68495629-9f1d-11ea-87c1-333445793454 <=< ACCEPT -->
        Indicates if there are more permutation available.
        @return true if there are more permutations, otherwise false
        <!-- ACCEPT >=> 68495629-9f1d-11ea-87c1-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.PermutationIterator` / `public List<E> next()`


        <!-- 6849562a-9f1d-11ea-87c2-333445793454 <=< ACCEPT -->
        Returns the next permutation of the input collection.
        @return a list of the permutator's elements representing a permutation
        @throws NoSuchElementException if there are no more permutations
        <!-- ACCEPT >=> 6849562a-9f1d-11ea-87c2-333445793454 -->



# File: `java.org.apache.commons.collections4.iterators.PushbackIterator`

## Class: `java.org.apache.commons.collections4.iterators.PushbackIterator` / `public class PushbackIterator<E> implements Iterator<E>`


        <!-- 6849562b-9f1d-11ea-87c3-333445793454 <=< ACCEPT -->
        Decorates an iterator to support pushback of elements.
        <p>
        The decorator stores the pushed back elements in a LIFO manner: the last element
        that has been pushed back, will be returned as the next element in a call to {@link #next()}.
        <p>
        The decorator does not support the removal operation. Any call to {@link #remove()} will
        result in an {@link UnsupportedOperationException}.
        @since 4.0
        @version $Id$
        <!-- ACCEPT >=> 6849562b-9f1d-11ea-87c3-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.PushbackIterator` / `private final Iterator<? extends E> iterator`


        <!-- 6849562c-9f1d-11ea-87c4-333445793454 <=< ACCEPT -->
        The iterator being decorated.
        <!-- ACCEPT >=> 6849562c-9f1d-11ea-87c4-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.PushbackIterator` / `private final Deque<E> items`


        <!-- 6849562d-9f1d-11ea-87c5-333445793454 <=< ACCEPT -->
        The LIFO queue containing the pushed back items.
        <!-- ACCEPT >=> 6849562d-9f1d-11ea-87c5-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.PushbackIterator` / `public static <E> PushbackIterator<E> pushbackIterator(final Iterator<? extends E> iterator)`


        <!-- 6849562e-9f1d-11ea-87c6-333445793454 <=< ACCEPT -->
        Decorates the specified iterator to support one-element lookahead.
        <p>
        If the iterator is already a {@link PushbackIterator} it is returned directly.
        @param <E>  the element type
        @param iterator  the iterator to decorate
        @return a new peeking iterator
        @throws NullPointerException if the iterator is null
        <!-- ACCEPT >=> 6849562e-9f1d-11ea-87c6-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.PushbackIterator` / `public PushbackIterator(final Iterator<? extends E> iterator)`


        <!-- 6849562f-9f1d-11ea-87c7-333445793454 <=< ACCEPT -->
        Constructor.
        @param iterator  the iterator to decorate
        <!-- ACCEPT >=> 6849562f-9f1d-11ea-87c7-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.PushbackIterator` / `public void pushback(final E item)`


        <!-- 68495630-9f1d-11ea-87c8-333445793454 <=< ACCEPT -->
        Push back the given element to the iterator.
        <p>
        Calling {@link #next()} immediately afterwards will return exactly this element.
        @param item  the element to push back to the iterator
        <!-- ACCEPT >=> 68495630-9f1d-11ea-87c8-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.PushbackIterator` / `public void remove()`


        <!-- 68495631-9f1d-11ea-87c9-333445793454 <=< ACCEPT -->
        This iterator will always throw an {@link UnsupportedOperationException}.
        @throws UnsupportedOperationException always
        <!-- ACCEPT >=> 68495631-9f1d-11ea-87c9-333445793454 -->



# File: `java.org.apache.commons.collections4.iterators.ReverseListIterator`

## Class: `java.org.apache.commons.collections4.iterators.ReverseListIterator` / `public class ReverseListIterator<E> implements ResettableListIterator<E>`


        <!-- 68495632-9f1d-11ea-87ca-333445793454 <=< ACCEPT -->
        Iterates backwards through a List, starting with the last element
        and continuing to the first. This is useful for looping around
        a list in reverse order without needing to actually reverse the list.
        <p>
        The first call to <code>next()</code> will return the last element
        from the list, and so on. The <code>hasNext()</code> method works
        in concert with the <code>next()</code> method as expected.
        However, the <code>nextIndex()</code> method returns the correct
        index in the list, thus it starts high and reduces as the iteration
        continues. The previous methods work similarly.
        @since 3.2
        @version $Id$
        <!-- ACCEPT >=> 68495632-9f1d-11ea-87ca-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.ReverseListIterator` / `private final List<E> list`


        <!-- 68495633-9f1d-11ea-87cb-333445793454 <=< ACCEPT -->
        The list being wrapped.
        <!-- ACCEPT >=> 68495633-9f1d-11ea-87cb-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.ReverseListIterator` / `private ListIterator<E> iterator`


        <!-- 68495634-9f1d-11ea-87cc-333445793454 <=< ACCEPT -->
        The list iterator being wrapped.
        <!-- ACCEPT >=> 68495634-9f1d-11ea-87cc-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.ReverseListIterator` / `private boolean validForUpdate`


        <!-- 68497d2e-9f1d-11ea-87cd-333445793454 <=< ACCEPT -->
        Flag to indicate if updating is possible at the moment.
        <!-- ACCEPT >=> 68497d2e-9f1d-11ea-87cd-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.ReverseListIterator` / `public ReverseListIterator(final List<E> list)`


        <!-- 68497d2f-9f1d-11ea-87ce-333445793454 <=< ACCEPT -->
        Constructor that wraps a list.
        @param list  the list to create a reversed iterator for
        @throws NullPointerException if the list is null
        <!-- ACCEPT >=> 68497d2f-9f1d-11ea-87ce-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ReverseListIterator` / `public boolean hasNext()`


        <!-- 68497d30-9f1d-11ea-87cf-333445793454 <=< ACCEPT -->
        Checks whether there is another element.
        @return true if there is another element
        <!-- ACCEPT >=> 68497d30-9f1d-11ea-87cf-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ReverseListIterator` / `public E next()`


        <!-- 68497d31-9f1d-11ea-87d0-333445793454 <=< ACCEPT -->
        Gets the next element.
        The next element is the previous in the list.
        @return the next element in the iterator
        <!-- ACCEPT >=> 68497d31-9f1d-11ea-87d0-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ReverseListIterator` / `public int nextIndex()`


        <!-- 68497d32-9f1d-11ea-87d1-333445793454 <=< ACCEPT -->
        Gets the index of the next element.
        @return the index of the next element in the iterator
        <!-- ACCEPT >=> 68497d32-9f1d-11ea-87d1-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ReverseListIterator` / `public boolean hasPrevious()`


        <!-- 68497d33-9f1d-11ea-87d2-333445793454 <=< ACCEPT -->
        Checks whether there is a previous element.
        @return true if there is a previous element
        <!-- ACCEPT >=> 68497d33-9f1d-11ea-87d2-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ReverseListIterator` / `public E previous()`


        <!-- 68497d34-9f1d-11ea-87d3-333445793454 <=< ACCEPT -->
        Gets the previous element.
        The next element is the previous in the list.
        @return the previous element in the iterator
        <!-- ACCEPT >=> 68497d34-9f1d-11ea-87d3-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ReverseListIterator` / `public int previousIndex()`


        <!-- 68497d35-9f1d-11ea-87d4-333445793454 <=< ACCEPT -->
        Gets the index of the previous element.
        @return the index of the previous element in the iterator
        <!-- ACCEPT >=> 68497d35-9f1d-11ea-87d4-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ReverseListIterator` / `public void remove()`


        <!-- 68497d36-9f1d-11ea-87d5-333445793454 <=< ACCEPT -->
        Removes the last returned element.
        @throws UnsupportedOperationException if the list is unmodifiable
        @throws IllegalStateException if there is no element to remove
        <!-- ACCEPT >=> 68497d36-9f1d-11ea-87d5-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ReverseListIterator` / `public void set(final E obj)`


        <!-- 68497d37-9f1d-11ea-87d6-333445793454 <=< ACCEPT -->
        Replaces the last returned element.
        @param obj  the object to set
        @throws UnsupportedOperationException if the list is unmodifiable
        @throws IllegalStateException if the iterator is not in a valid state for set
        <!-- ACCEPT >=> 68497d37-9f1d-11ea-87d6-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ReverseListIterator` / `public void add(final E obj)`


        <!-- 68497d38-9f1d-11ea-87d7-333445793454 <=< ACCEPT -->
        Adds a new element to the list between the next and previous elements.
        @param obj  the object to add
        @throws UnsupportedOperationException if the list is unmodifiable
        @throws IllegalStateException if the iterator is not in a valid state for set
        <!-- ACCEPT >=> 68497d38-9f1d-11ea-87d7-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ReverseListIterator` / `public void reset()`


        <!-- 68497d39-9f1d-11ea-87d8-333445793454 <=< ACCEPT -->
        Resets the iterator back to the start (which is the
        end of the list as this is a reversed iterator)
        <!-- ACCEPT >=> 68497d39-9f1d-11ea-87d8-333445793454 -->



# File: `java.org.apache.commons.collections4.iterators.SingletonIterator`

## Class: `java.org.apache.commons.collections4.iterators.SingletonIterator` / `implements ResettableIterator<E>`


        <!-- 68497d3a-9f1d-11ea-87d9-333445793454 <=< ACCEPT -->
        <code>SingletonIterator</code> is an {@link Iterator} over a single
        object instance.
        @since 2.0
        @version $Id$
        <!-- ACCEPT >=> 68497d3a-9f1d-11ea-87d9-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.SingletonIterator` / `private final boolean removeAllowed`


        <!-- 68497d3b-9f1d-11ea-87da-333445793454 <=< ACCEPT -->
        Whether remove is allowed
        <!-- ACCEPT >=> 68497d3b-9f1d-11ea-87da-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.SingletonIterator` / `private boolean beforeFirst`


        <!-- 68497d3c-9f1d-11ea-87db-333445793454 <=< ACCEPT -->
        Is the cursor before the first element
        <!-- ACCEPT >=> 68497d3c-9f1d-11ea-87db-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.SingletonIterator` / `private boolean removed`


        <!-- 68497d3d-9f1d-11ea-87dc-333445793454 <=< ACCEPT -->
        Has the element been removed
        <!-- ACCEPT >=> 68497d3d-9f1d-11ea-87dc-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.SingletonIterator` / `private E object`


        <!-- 68497d3e-9f1d-11ea-87dd-333445793454 <=< ACCEPT -->
        The object
        <!-- ACCEPT >=> 68497d3e-9f1d-11ea-87dd-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.SingletonIterator` / `public SingletonIterator(final E object)`


        <!-- 68497d3f-9f1d-11ea-87de-333445793454 <=< ACCEPT -->
        Constructs a new <code>SingletonIterator</code> where <code>remove</code>
        is a permitted operation.
        @param object  the single object to return from the iterator
        <!-- ACCEPT >=> 68497d3f-9f1d-11ea-87de-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.SingletonIterator` / `public SingletonIterator(final E object, final boolean removeAllowed)`


        <!-- 68497d40-9f1d-11ea-87df-333445793454 <=< ACCEPT -->
        Constructs a new <code>SingletonIterator</code> optionally choosing if
        <code>remove</code> is a permitted operation.
        @param object  the single object to return from the iterator
        @param removeAllowed  true if remove is allowed
        @since 3.1
        <!-- ACCEPT >=> 68497d40-9f1d-11ea-87df-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.SingletonIterator` / `public boolean hasNext()`


        <!-- 68497d41-9f1d-11ea-87e0-333445793454 <=< ACCEPT -->
        Is another object available from the iterator?
        <p>
        This returns true if the single object hasn't been returned yet.
        @return true if the single object hasn't been returned yet
        <!-- ACCEPT >=> 68497d41-9f1d-11ea-87e0-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.SingletonIterator` / `public E next()`


        <!-- 68497d42-9f1d-11ea-87e1-333445793454 <=< ACCEPT -->
        Get the next object from the iterator.
        <p>
        This returns the single object if it hasn't been returned yet.
        @return the single object
        @throws NoSuchElementException if the single object has already
        been returned
        <!-- ACCEPT >=> 68497d42-9f1d-11ea-87e1-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.SingletonIterator` / `public void remove()`


        <!-- 68497d43-9f1d-11ea-87e2-333445793454 <=< ACCEPT -->
        Remove the object from this iterator.
        @throws IllegalStateException if the {@code next} method has not
        yet been called, or the {@code remove} method has already
        been called after the last call to the {@code next}
        method.
        @throws UnsupportedOperationException if remove is not supported
        <!-- ACCEPT >=> 68497d43-9f1d-11ea-87e2-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.SingletonIterator` / `public void reset()`


        <!-- 68497d44-9f1d-11ea-87e3-333445793454 <=< ACCEPT -->
        Reset the iterator to the start.
        <!-- ACCEPT >=> 68497d44-9f1d-11ea-87e3-333445793454 -->



# File: `java.org.apache.commons.collections4.iterators.SingletonListIterator`

## Class: `java.org.apache.commons.collections4.iterators.SingletonListIterator` / `public class SingletonListIterator<E> implements ResettableListIterator<E>`


        <!-- 68497d45-9f1d-11ea-87e4-333445793454 <=< ACCEPT -->
        <code>SingletonIterator</code> is an {@link ListIterator} over a single
        object instance.
        @since 2.1
        @version $Id$
        <!-- ACCEPT >=> 68497d45-9f1d-11ea-87e4-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.SingletonListIterator` / `public SingletonListIterator(final E object)`


        <!-- 6849a42e-9f1d-11ea-87e5-333445793454 <=< ACCEPT -->
        Constructs a new <code>SingletonListIterator</code>.
        @param object  the single object to return from the iterator
        <!-- ACCEPT >=> 6849a42e-9f1d-11ea-87e5-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.SingletonListIterator` / `public boolean hasNext()`


        <!-- 6849a42f-9f1d-11ea-87e6-333445793454 <=< ACCEPT -->
        Is another object available from the iterator?
        <p>
        This returns true if the single object hasn't been returned yet.
        @return true if the single object hasn't been returned yet
        <!-- ACCEPT >=> 6849a42f-9f1d-11ea-87e6-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.SingletonListIterator` / `public boolean hasPrevious()`


        <!-- 6849a430-9f1d-11ea-87e7-333445793454 <=< ACCEPT -->
        Is a previous object available from the iterator?
        <p>
        This returns true if the single object has been returned.
        @return true if the single object has been returned
        <!-- ACCEPT >=> 6849a430-9f1d-11ea-87e7-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.SingletonListIterator` / `public int nextIndex()`


        <!-- 6849a431-9f1d-11ea-87e8-333445793454 <=< ACCEPT -->
        Returns the index of the element that would be returned by a subsequent
        call to {@code next}.
        @return 0 or 1 depending on current state.
        <!-- ACCEPT >=> 6849a431-9f1d-11ea-87e8-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.SingletonListIterator` / `public int previousIndex()`


        <!-- 6849a432-9f1d-11ea-87e9-333445793454 <=< ACCEPT -->
        Returns the index of the element that would be returned by a subsequent
        call to {@code previous}. A return value of -1 indicates that the iterator is currently at
        the start.
        @return 0 or -1 depending on current state.
        <!-- ACCEPT >=> 6849a432-9f1d-11ea-87e9-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.SingletonListIterator` / `public E next()`


        <!-- 6849a433-9f1d-11ea-87ea-333445793454 <=< ACCEPT -->
        Get the next object from the iterator.
        <p>
        This returns the single object if it hasn't been returned yet.
        @return the single object
        @throws NoSuchElementException if the single object has already
        been returned
        <!-- ACCEPT >=> 6849a433-9f1d-11ea-87ea-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.SingletonListIterator` / `public E previous()`


        <!-- 6849a434-9f1d-11ea-87eb-333445793454 <=< ACCEPT -->
        Get the previous object from the iterator.
        <p>
        This returns the single object if it has been returned.
        @return the single object
        @throws NoSuchElementException if the single object has not already
        been returned
        <!-- ACCEPT >=> 6849a434-9f1d-11ea-87eb-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.SingletonListIterator` / `public void remove()`


        <!-- 6849a435-9f1d-11ea-87ec-333445793454 <=< ACCEPT -->
        Remove the object from this iterator.
        @throws IllegalStateException if the {@code next} or {@code previous}
        method has not yet been called, or the {@code remove} method
        has already been called after the last call to {@code next}
        or {@code previous}.
        <!-- ACCEPT >=> 6849a435-9f1d-11ea-87ec-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.SingletonListIterator` / `public void add(final E obj)`


        <!-- 6849a436-9f1d-11ea-87ed-333445793454 <=< ACCEPT -->
        Add always throws {@link UnsupportedOperationException}.
        @param obj  the object to add
        @throws UnsupportedOperationException always
        <!-- ACCEPT >=> 6849a436-9f1d-11ea-87ed-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.SingletonListIterator` / `public void set(final E obj)`


        <!-- 6849a437-9f1d-11ea-87ee-333445793454 <=< ACCEPT -->
        Set sets the value of the singleton.
        @param obj  the object to set
        @throws IllegalStateException if {@code next} has not been called
        or the object has been removed
        <!-- ACCEPT >=> 6849a437-9f1d-11ea-87ee-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.SingletonListIterator` / `public void reset()`


        <!-- 6849a438-9f1d-11ea-87ef-333445793454 <=< ACCEPT -->
        Reset the iterator back to the start.
        <!-- ACCEPT >=> 6849a438-9f1d-11ea-87ef-333445793454 -->



# File: `java.org.apache.commons.collections4.iterators.SkippingIterator`

## Class: `java.org.apache.commons.collections4.iterators.SkippingIterator` / `public class SkippingIterator<E> extends AbstractIteratorDecorator<E>`


        <!-- 6849a439-9f1d-11ea-87f0-333445793454 <=< ACCEPT -->
        Decorates another iterator to skip the first N elements.
        <p>
        In case an offset parameter other than 0 is provided, the decorated
        iterator is immediately advanced to this position, skipping all elements
        before that position.
        @since 4.1
        @version $Id$
        <!-- ACCEPT >=> 6849a439-9f1d-11ea-87f0-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.SkippingIterator` / `private final long offset`


        <!-- 6849a43a-9f1d-11ea-87f1-333445793454 <=< ACCEPT -->
        The offset to bound the first element return
        <!-- ACCEPT >=> 6849a43a-9f1d-11ea-87f1-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.SkippingIterator` / `private long pos`


        <!-- 6849a43b-9f1d-11ea-87f2-333445793454 <=< ACCEPT -->
        The position of the current element
        <!-- ACCEPT >=> 6849a43b-9f1d-11ea-87f2-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.SkippingIterator` / `public SkippingIterator(final Iterator<E> iterator, final long offset)`


        <!-- 6849a43c-9f1d-11ea-87f3-333445793454 <=< ACCEPT -->
        Decorates the specified iterator to skip all elements until the iterator
        reaches the position at {@code offset}.
        <p>
        The iterator is immediately advanced until it reaches the position at {@code offset},
        incurring O(n) time.
        @param iterator  the iterator to be decorated
        @param offset  the index of the first element of the decorated iterator to return
        @throws NullPointerException if iterator is null
        @throws IllegalArgumentException if offset is negative
        <!-- ACCEPT >=> 6849a43c-9f1d-11ea-87f3-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.SkippingIterator` / `private void init()`


        <!-- 6849a43d-9f1d-11ea-87f4-333445793454 <=< ACCEPT -->
        Skips the given number of elements.
        <!-- ACCEPT >=> 6849a43d-9f1d-11ea-87f4-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.SkippingIterator` / `public void remove()`


        <!-- 6849a43e-9f1d-11ea-87f5-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <p>
        In case an offset other than 0 was specified, the underlying iterator will be advanced
        to this position upon creation. A call to {@link #remove()} will still result in an
        {@link IllegalStateException} if no explicit call to {@link #next()} has been made prior
        to calling {@link #remove()}.
        <!-- ACCEPT >=> 6849a43e-9f1d-11ea-87f5-333445793454 -->



# File: `java.org.apache.commons.collections4.iterators.TransformIterator`

## Class: `java.org.apache.commons.collections4.iterators.TransformIterator` / `public class TransformIterator<I, O> implements Iterator<O>`


        <!-- 6849a43f-9f1d-11ea-87f6-333445793454 <=< ACCEPT -->
        Decorates an iterator such that each element returned is transformed.
        @since 1.0
        @version $Id$
        <!-- ACCEPT >=> 6849a43f-9f1d-11ea-87f6-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.TransformIterator` / `private Iterator<? extends I> iterator`


        <!-- 6849a440-9f1d-11ea-87f7-333445793454 <=< ACCEPT -->
        The iterator being used
        <!-- ACCEPT >=> 6849a440-9f1d-11ea-87f7-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.TransformIterator` / `private Transformer<? super I, ? extends O> transformer`


        <!-- 6849a441-9f1d-11ea-87f8-333445793454 <=< ACCEPT -->
        The transformer being used
        <!-- ACCEPT >=> 6849a441-9f1d-11ea-87f8-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.TransformIterator` / `public TransformIterator()`


        <!-- 6849a442-9f1d-11ea-87f9-333445793454 <=< ACCEPT -->
        Constructs a new <code>TransformIterator</code> that will not function
        until the {@link #setIterator(Iterator) setIterator} and
        {@link #setTransformer(Transformer)} methods are invoked.
        <!-- ACCEPT >=> 6849a442-9f1d-11ea-87f9-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.TransformIterator` / `public TransformIterator(final Iterator<? extends I> iterator)`


        <!-- 6849a443-9f1d-11ea-87fa-333445793454 <=< ACCEPT -->
        Constructs a new <code>TransformIterator</code> that won't transform
        elements from the given iterator.
        @param iterator  the iterator to use
        <!-- ACCEPT >=> 6849a443-9f1d-11ea-87fa-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.TransformIterator` / `final Transformer<? super I, ? extends O> transformer)`


        <!-- 6849cb37-9f1d-11ea-87fb-333445793454 <=< ACCEPT -->
        Constructs a new <code>TransformIterator</code> that will use the
        given iterator and transformer.  If the given transformer is null,
        then objects will not be transformed.
        @param iterator  the iterator to use
        @param transformer  the transformer to use
        <!-- ACCEPT >=> 6849cb37-9f1d-11ea-87fb-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.TransformIterator` / `public O next()`


        <!-- 6849cb38-9f1d-11ea-87fc-333445793454 <=< ACCEPT -->
        Gets the next object from the iteration, transforming it using the
        current transformer. If the transformer is null, no transformation
        occurs and the object from the iterator is returned directly.
        @return the next object
        @throws java.util.NoSuchElementException if there are no more elements
        <!-- ACCEPT >=> 6849cb38-9f1d-11ea-87fc-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.TransformIterator` / `public Iterator<? extends I> getIterator()`


        <!-- 6849cb39-9f1d-11ea-87fd-333445793454 <=< ACCEPT -->
        Gets the iterator this iterator is using.
        @return the iterator.
        <!-- ACCEPT >=> 6849cb39-9f1d-11ea-87fd-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.TransformIterator` / `public void setIterator(final Iterator<? extends I> iterator)`


        <!-- 6849cb3a-9f1d-11ea-87fe-333445793454 <=< ACCEPT -->
        Sets the iterator for this iterator to use.
        If iteration has started, this effectively resets the iterator.
        @param iterator  the iterator to use
        <!-- ACCEPT >=> 6849cb3a-9f1d-11ea-87fe-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.TransformIterator` / `public Transformer<? super I, ? extends O> getTransformer()`


        <!-- 6849cb3b-9f1d-11ea-87ff-333445793454 <=< ACCEPT -->
        Gets the transformer this iterator is using.
        @return the transformer.
        <!-- ACCEPT >=> 6849cb3b-9f1d-11ea-87ff-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.TransformIterator` / `public void setTransformer(final Transformer<? super I, ? extends O> transformer)`


        <!-- 6849cb3c-9f1d-11ea-8800-333445793454 <=< ACCEPT -->
        Sets the transformer this the iterator to use.
        A null transformer is a no-op transformer.
        @param transformer  the transformer to use
        <!-- ACCEPT >=> 6849cb3c-9f1d-11ea-8800-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.TransformIterator` / `protected O transform(final I source)`


        <!-- 6849cb3d-9f1d-11ea-8801-333445793454 <=< ACCEPT -->
        Transforms the given object using the transformer.
        If the transformer is null, the original object is returned as-is.
        @param source  the object to transform
        @return the transformed object
        <!-- ACCEPT >=> 6849cb3d-9f1d-11ea-8801-333445793454 -->



# File: `java.org.apache.commons.collections4.iterators.UniqueFilterIterator`

## Class: `java.org.apache.commons.collections4.iterators.UniqueFilterIterator` / `public class UniqueFilterIterator<E> extends FilterIterator<E>`


        <!-- 6849cb3e-9f1d-11ea-8802-333445793454 <=< ACCEPT -->
        A FilterIterator which only returns "unique" Objects.  Internally,
        the Iterator maintains a Set of objects it has already encountered,
        and duplicate Objects are skipped.
        @since 2.1
        @version $Id$
        <!-- ACCEPT >=> 6849cb3e-9f1d-11ea-8802-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.UniqueFilterIterator` / `public UniqueFilterIterator(final Iterator<? extends E> iterator)`


        <!-- 6849cb3f-9f1d-11ea-8803-333445793454 <=< ACCEPT -->
        Constructs a new <code>UniqueFilterIterator</code>.
        @param iterator  the iterator to use
        <!-- ACCEPT >=> 6849cb3f-9f1d-11ea-8803-333445793454 -->



# File: `java.org.apache.commons.collections4.iterators.UnmodifiableIterator`

## Class: `java.org.apache.commons.collections4.iterators.UnmodifiableIterator` / `public final class UnmodifiableIterator<E> implements Iterator<E>, Unmodifiable`


        <!-- 6849cb40-9f1d-11ea-8804-333445793454 <=< ACCEPT -->
        Decorates an iterator such that it cannot be modified.
        <p>
        Attempts to modify it will result in an UnsupportedOperationException.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 6849cb40-9f1d-11ea-8804-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.UnmodifiableIterator` / `private final Iterator<? extends E> iterator`


        <!-- 6849cb41-9f1d-11ea-8805-333445793454 <=< ACCEPT -->
        The iterator being decorated
        <!-- ACCEPT >=> 6849cb41-9f1d-11ea-8805-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.UnmodifiableIterator` / `public static <E> Iterator<E> unmodifiableIterator(final Iterator<? extends E> iterator)`


        <!-- 6849cb42-9f1d-11ea-8806-333445793454 <=< ACCEPT -->
        Decorates the specified iterator such that it cannot be modified.
        <p>
        If the iterator is already unmodifiable it is returned directly.
        @param <E>  the element type
        @param iterator  the iterator to decorate
        @return a new unmodifiable iterator
        @throws NullPointerException if the iterator is null
        <!-- ACCEPT >=> 6849cb42-9f1d-11ea-8806-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.UnmodifiableIterator` / `private UnmodifiableIterator(final Iterator<? extends E> iterator)`


        <!-- 6849cb43-9f1d-11ea-8807-333445793454 <=< ACCEPT -->
        Constructor.
        @param iterator  the iterator to decorate
        <!-- ACCEPT >=> 6849cb43-9f1d-11ea-8807-333445793454 -->



# File: `java.org.apache.commons.collections4.iterators.UnmodifiableListIterator`

## Class: `java.org.apache.commons.collections4.iterators.UnmodifiableListIterator` / `public final class UnmodifiableListIterator<E> implements ListIterator<E>, Unmodifiable`


        <!-- 6849cb44-9f1d-11ea-8808-333445793454 <=< ACCEPT -->
        Decorates a list iterator such that it cannot be modified.
        <p>
        Attempts to modify it will result in an UnsupportedOperationException.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 6849cb44-9f1d-11ea-8808-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.UnmodifiableListIterator` / `private final ListIterator<? extends E> iterator`


        <!-- 6849cb45-9f1d-11ea-8809-333445793454 <=< ACCEPT -->
        The iterator being decorated
        <!-- ACCEPT >=> 6849cb45-9f1d-11ea-8809-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.UnmodifiableListIterator` / `public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<? extends E> iterator)`


        <!-- 6849cb46-9f1d-11ea-880a-333445793454 <=< ACCEPT -->
        Decorates the specified iterator such that it cannot be modified.
        @param <E>  the element type
        @param iterator  the iterator to decorate
        @return a new unmodifiable list iterator
        @throws NullPointerException if the iterator is null
        <!-- ACCEPT >=> 6849cb46-9f1d-11ea-880a-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.UnmodifiableListIterator` / `private UnmodifiableListIterator(final ListIterator<? extends E> iterator)`


        <!-- 6849cb47-9f1d-11ea-880b-333445793454 <=< ACCEPT -->
        Constructor.
        @param iterator  the iterator to decorate
        <!-- ACCEPT >=> 6849cb47-9f1d-11ea-880b-333445793454 -->



# File: `java.org.apache.commons.collections4.iterators.UnmodifiableMapIterator`

## Class: `java.org.apache.commons.collections4.iterators.UnmodifiableMapIterator` / `public final class UnmodifiableMapIterator<K, V> implements MapIterator<K, V>, Unmodifiable`


        <!-- 6849cb48-9f1d-11ea-880c-333445793454 <=< ACCEPT -->
        Decorates a map iterator such that it cannot be modified.
        <p>
        Attempts to modify it will result in an UnsupportedOperationException.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 6849cb48-9f1d-11ea-880c-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.UnmodifiableMapIterator` / `private final MapIterator<? extends K, ? extends V> iterator`


        <!-- 6849f247-9f1d-11ea-880d-333445793454 <=< ACCEPT -->
        The iterator being decorated
        <!-- ACCEPT >=> 6849f247-9f1d-11ea-880d-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.UnmodifiableMapIterator` / `final MapIterator<? extends K, ? extends V> iterator)`


        <!-- 6849f248-9f1d-11ea-880e-333445793454 <=< ACCEPT -->
        Decorates the specified iterator such that it cannot be modified.
        @param <K>  the key type
        @param <V>  the value type
        @param iterator  the iterator to decorate
        @return a new unmodifiable map iterator
        @throws NullPointerException if the iterator is null
        <!-- ACCEPT >=> 6849f248-9f1d-11ea-880e-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.UnmodifiableMapIterator` / `private UnmodifiableMapIterator(final MapIterator<? extends K, ? extends V> iterator)`


        <!-- 6849f249-9f1d-11ea-880f-333445793454 <=< ACCEPT -->
        Constructor.
        @param iterator  the iterator to decorate
        <!-- ACCEPT >=> 6849f249-9f1d-11ea-880f-333445793454 -->



# File: `java.org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator`

## Class: `java.org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator` / `Unmodifiable`


        <!-- 6849f24a-9f1d-11ea-8810-333445793454 <=< ACCEPT -->
        Decorates an ordered map iterator such that it cannot be modified.
        <p>
        Attempts to modify it will result in an UnsupportedOperationException.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 6849f24a-9f1d-11ea-8810-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator` / `private final OrderedMapIterator<? extends K, ? extends V> iterator`


        <!-- 6849f24b-9f1d-11ea-8811-333445793454 <=< ACCEPT -->
        The iterator being decorated
        <!-- ACCEPT >=> 6849f24b-9f1d-11ea-8811-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator` / `final OrderedMapIterator<K, ? extends V> iterator)`


        <!-- 6849f24c-9f1d-11ea-8812-333445793454 <=< ACCEPT -->
        Decorates the specified iterator such that it cannot be modified.
        @param <K>  the key type
        @param <V>  the value type
        @param iterator  the iterator to decorate
        @return a new unmodifiable ordered map iterator
        @throws NullPointerException if the iterator is null
        <!-- ACCEPT >=> 6849f24c-9f1d-11ea-8812-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator` / `private UnmodifiableOrderedMapIterator(final OrderedMapIterator<K, ? extends V> iterator)`


        <!-- 6849f24d-9f1d-11ea-8813-333445793454 <=< ACCEPT -->
        Constructor.
        @param iterator  the iterator to decorate
        <!-- ACCEPT >=> 6849f24d-9f1d-11ea-8813-333445793454 -->



# File: `java.org.apache.commons.collections4.iterators.ZippingIterator`

## Class: `java.org.apache.commons.collections4.iterators.ZippingIterator` / `public class ZippingIterator<E> implements Iterator<E>`


        <!-- 6849f24e-9f1d-11ea-8814-333445793454 <=< ACCEPT -->
        Provides an interleaved iteration over the elements contained in a
        collection of Iterators.
        <p>
        Given two {@link Iterator} instances {@code A} and {@code B}, the
        {@link #next} method on this iterator will switch between {@code A.next()}
        and {@code B.next()} until both iterators are exhausted.
        @since 4.1
        @version $Id$
        <!-- ACCEPT >=> 6849f24e-9f1d-11ea-8814-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.ZippingIterator` / `private final Iterator<Iterator<? extends E>> iterators`


        <!-- 6849f24f-9f1d-11ea-8815-333445793454 <=< ACCEPT -->
        The {@link Iterator}s to evaluate.
        <!-- ACCEPT >=> 6849f24f-9f1d-11ea-8815-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.ZippingIterator` / `private Iterator<? extends E> nextIterator`


        <!-- 6849f250-9f1d-11ea-8816-333445793454 <=< ACCEPT -->
        The next iterator to use for next().
        <!-- ACCEPT >=> 6849f250-9f1d-11ea-8816-333445793454 -->



## Field: `java.org.apache.commons.collections4.iterators.ZippingIterator` / `private Iterator<? extends E> lastReturned`


        <!-- 6849f251-9f1d-11ea-8817-333445793454 <=< ACCEPT -->
        The last iterator which was used for next().
        <!-- ACCEPT >=> 6849f251-9f1d-11ea-8817-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.ZippingIterator` / `public ZippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b)`


        <!-- 6849f252-9f1d-11ea-8818-333445793454 <=< ACCEPT -->
        Constructs a new <code>ZippingIterator</code> that will provide
        interleaved iteration over the two given iterators.
        @param a  the first child iterator
        @param b  the second child iterator
        @throws NullPointerException if either iterator is null
        <!-- ACCEPT >=> 6849f252-9f1d-11ea-8818-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.ZippingIterator` / `final Iterator<? extends E> c)`


        <!-- 6849f253-9f1d-11ea-8819-333445793454 <=< ACCEPT -->
        Constructs a new <code>ZippingIterator</code> that will provide
        interleaved iteration over the three given iterators.
        @param a  the first child iterator
        @param b  the second child iterator
        @param c  the third child iterator
        @throws NullPointerException if either iterator is null
        <!-- ACCEPT >=> 6849f253-9f1d-11ea-8819-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.iterators.ZippingIterator` / `public ZippingIterator(final Iterator<? extends E>... iterators)`


        <!-- 6849f254-9f1d-11ea-881a-333445793454 <=< ACCEPT -->
        Constructs a new <code>ZippingIterator</code> that will provide
        interleaved iteration of the specified iterators.
        @param iterators  the array of iterators
        @throws NullPointerException if any iterator is null
        <!-- ACCEPT >=> 6849f254-9f1d-11ea-881a-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ZippingIterator` / `public boolean hasNext()`


        <!-- 6849f255-9f1d-11ea-881b-333445793454 <=< ACCEPT -->
        Returns {@code true} if any child iterator has remaining elements.
        @return true if this iterator has remaining elements
        <!-- ACCEPT >=> 6849f255-9f1d-11ea-881b-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ZippingIterator` / `public E next() throws NoSuchElementException`


        <!-- 6849f256-9f1d-11ea-881c-333445793454 <=< ACCEPT -->
        Returns the next element from a child iterator.
        @return the next interleaved element
        @throws NoSuchElementException if no child iterator has any more elements
        <!-- ACCEPT >=> 6849f256-9f1d-11ea-881c-333445793454 -->



## Method: `java.org.apache.commons.collections4.iterators.ZippingIterator` / `public void remove()`


        <!-- 6849f257-9f1d-11ea-881d-333445793454 <=< ACCEPT -->
        Removes the last returned element from the child iterator that produced it.
        @throws IllegalStateException if there is no last returned element, or if
        the last returned element has already been removed
        <!-- ACCEPT >=> 6849f257-9f1d-11ea-881d-333445793454 -->



# File: `java.org.apache.commons.collections4.iterators.package-info`

## Package: `java.org.apache.commons.collections4.iterators.package-info` / `package org.apache.commons.collections4.iterators`


        <!-- 6849f258-9f1d-11ea-881e-333445793454 <=< ACCEPT -->
        This package contains implementations of the
        {@link java.util.Iterator Iterator} interface.
        <p>
        You may also consider using
        {@link org.apache.commons.collections4.IteratorUtils IteratorUtils},
        which is a single class that uses static methods to construct instances
        of the classes in this package.
        @version $Id$
        <!-- ACCEPT >=> 6849f258-9f1d-11ea-881e-333445793454 -->



# File: `java.org.apache.commons.collections4.keyvalue.AbstractKeyValue`

## Class: `java.org.apache.commons.collections4.keyvalue.AbstractKeyValue` / `public abstract class AbstractKeyValue<K, V> implements KeyValue<K, V>`


        <!-- 6849f259-9f1d-11ea-881f-333445793454 <=< ACCEPT -->
        Abstract pair class to assist with creating <code>KeyValue</code>
        and {@link java.util.Map.Entry Map.Entry} implementations.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 6849f259-9f1d-11ea-881f-333445793454 -->



## Field: `java.org.apache.commons.collections4.keyvalue.AbstractKeyValue` / `private K key`


        <!-- 6849f25a-9f1d-11ea-8820-333445793454 <=< ACCEPT -->
        The key
        <!-- ACCEPT >=> 6849f25a-9f1d-11ea-8820-333445793454 -->



## Field: `java.org.apache.commons.collections4.keyvalue.AbstractKeyValue` / `private V value`


        <!-- 6849f25b-9f1d-11ea-8821-333445793454 <=< ACCEPT -->
        The value
        <!-- ACCEPT >=> 6849f25b-9f1d-11ea-8821-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.keyvalue.AbstractKeyValue` / `protected AbstractKeyValue(final K key, final V value)`


        <!-- 684a196d-9f1d-11ea-8822-333445793454 <=< ACCEPT -->
        Constructs a new pair with the specified key and given value.
        @param key  the key for the entry, may be null
        @param value  the value for the entry, may be null
        <!-- ACCEPT >=> 684a196d-9f1d-11ea-8822-333445793454 -->



## Method: `java.org.apache.commons.collections4.keyvalue.AbstractKeyValue` / `public K getKey()`


        <!-- 684a196e-9f1d-11ea-8823-333445793454 <=< ACCEPT -->
        Gets the key from the pair.
        @return the key
        <!-- ACCEPT >=> 684a196e-9f1d-11ea-8823-333445793454 -->



## Method: `java.org.apache.commons.collections4.keyvalue.AbstractKeyValue` / `public V getValue()`


        <!-- 684a196f-9f1d-11ea-8824-333445793454 <=< ACCEPT -->
        Gets the value from the pair.
        @return the value
        <!-- ACCEPT >=> 684a196f-9f1d-11ea-8824-333445793454 -->



## Method: `java.org.apache.commons.collections4.keyvalue.AbstractKeyValue` / `public String toString()`


        <!-- 684a1970-9f1d-11ea-8825-333445793454 <=< ACCEPT -->
        Gets a debugging String view of the pair.
        @return a String view of the entry
        <!-- ACCEPT >=> 684a1970-9f1d-11ea-8825-333445793454 -->



# File: `java.org.apache.commons.collections4.keyvalue.AbstractMapEntry`

## Class: `java.org.apache.commons.collections4.keyvalue.AbstractMapEntry` / `public abstract class AbstractMapEntry<K, V> extends AbstractKeyValue<K, V> implements Map.Entry<K, V>`


        <!-- 684a1971-9f1d-11ea-8826-333445793454 <=< ACCEPT -->
        Abstract Pair class to assist with creating correct
        {@link java.util.Map.Entry Map.Entry} implementations.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 684a1971-9f1d-11ea-8826-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.keyvalue.AbstractMapEntry` / `protected AbstractMapEntry(final K key, final V value)`


        <!-- 684a1972-9f1d-11ea-8827-333445793454 <=< ACCEPT -->
        Constructs a new entry with the given key and given value.
        @param key  the key for the entry, may be null
        @param value  the value for the entry, may be null
        <!-- ACCEPT >=> 684a1972-9f1d-11ea-8827-333445793454 -->



## Method: `java.org.apache.commons.collections4.keyvalue.AbstractMapEntry` / `public V setValue(final V value)`


        <!-- 684a1973-9f1d-11ea-8828-333445793454 <=< ACCEPT -->
        Sets the value stored in this <code>Map.Entry</code>.
        <p>
        This <code>Map.Entry</code> is not connected to a Map, so only the
        local data is changed.
        @param value  the new value
        @return the previous value
        <!-- ACCEPT >=> 684a1973-9f1d-11ea-8828-333445793454 -->



## Method: `java.org.apache.commons.collections4.keyvalue.AbstractMapEntry` / `public boolean equals(final Object obj)`


        <!-- 684a1974-9f1d-11ea-8829-333445793454 <=< ACCEPT -->
        Compares this <code>Map.Entry</code> with another <code>Map.Entry</code>.
        <p>
        Implemented per API documentation of {@link java.util.Map.Entry#equals(Object)}
        @param obj  the object to compare to
        @return true if equal key and value
        <!-- ACCEPT >=> 684a1974-9f1d-11ea-8829-333445793454 -->



## Method: `java.org.apache.commons.collections4.keyvalue.AbstractMapEntry` / `public int hashCode()`


        <!-- 684a1975-9f1d-11ea-882a-333445793454 <=< ACCEPT -->
        Gets a hashCode compatible with the equals method.
        <p>
        Implemented per API documentation of {@link java.util.Map.Entry#hashCode()}
        @return a suitable hash code
        <!-- ACCEPT >=> 684a1975-9f1d-11ea-882a-333445793454 -->



# File: `java.org.apache.commons.collections4.keyvalue.AbstractMapEntryDecorator`

## Class: `java.org.apache.commons.collections4.keyvalue.AbstractMapEntryDecorator` / `public abstract class AbstractMapEntryDecorator<K, V> implements Map.Entry<K, V>, KeyValue<K, V>`


        <!-- 684a1976-9f1d-11ea-882b-333445793454 <=< ACCEPT -->
        Provides a base decorator that allows additional functionality to be
        added to a {@link java.util.Map.Entry Map.Entry}.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 684a1976-9f1d-11ea-882b-333445793454 -->



## Field: `java.org.apache.commons.collections4.keyvalue.AbstractMapEntryDecorator` / `private final Map.Entry<K, V> entry`


        <!-- 684a1977-9f1d-11ea-882c-333445793454 <=< ACCEPT -->
        The <code>Map.Entry</code> to decorate
        <!-- ACCEPT >=> 684a1977-9f1d-11ea-882c-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.keyvalue.AbstractMapEntryDecorator` / `public AbstractMapEntryDecorator(final Map.Entry<K, V> entry)`


        <!-- 684a1978-9f1d-11ea-882d-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param entry  the <code>Map.Entry</code> to decorate, must not be null
        @throws NullPointerException if the collection is null
        <!-- ACCEPT >=> 684a1978-9f1d-11ea-882d-333445793454 -->



## Method: `java.org.apache.commons.collections4.keyvalue.AbstractMapEntryDecorator` / `protected Map.Entry<K, V> getMapEntry()`


        <!-- 684a1979-9f1d-11ea-882e-333445793454 <=< ACCEPT -->
        Gets the map being decorated.
        @return the decorated map
        <!-- ACCEPT >=> 684a1979-9f1d-11ea-882e-333445793454 -->



# File: `java.org.apache.commons.collections4.keyvalue.DefaultKeyValue`

## Class: `java.org.apache.commons.collections4.keyvalue.DefaultKeyValue` / `public class DefaultKeyValue<K, V> extends AbstractKeyValue<K, V>`


        <!-- 684a197a-9f1d-11ea-882f-333445793454 <=< ACCEPT -->
        A mutable <code>KeyValue</code> pair that does not implement
        {@link java.util.Map.Entry Map.Entry}.
        <p>
        Note that a <code>DefaultKeyValue</code> instance may not contain
        itself as a key or value.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 684a197a-9f1d-11ea-882f-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.keyvalue.DefaultKeyValue` / `public DefaultKeyValue()`


        <!-- 684a197b-9f1d-11ea-8830-333445793454 <=< ACCEPT -->
        Constructs a new pair with a null key and null value.
        <!-- ACCEPT >=> 684a197b-9f1d-11ea-8830-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.keyvalue.DefaultKeyValue` / `public DefaultKeyValue(final K key, final V value)`


        <!-- 684a197c-9f1d-11ea-8831-333445793454 <=< ACCEPT -->
        Constructs a new pair with the specified key and given value.
        @param key  the key for the entry, may be null
        @param value  the value for the entry, may be null
        <!-- ACCEPT >=> 684a197c-9f1d-11ea-8831-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.keyvalue.DefaultKeyValue` / `public DefaultKeyValue(final KeyValue<? extends K, ? extends V> pair)`


        <!-- 684a197d-9f1d-11ea-8832-333445793454 <=< ACCEPT -->
        Constructs a new pair from the specified <code>KeyValue</code>.
        @param pair  the pair to copy, must not be null
        @throws NullPointerException if the entry is null
        <!-- ACCEPT >=> 684a197d-9f1d-11ea-8832-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.keyvalue.DefaultKeyValue` / `public DefaultKeyValue(final Map.Entry<? extends K, ? extends V> entry)`


        <!-- 684a197e-9f1d-11ea-8833-333445793454 <=< ACCEPT -->
        Constructs a new pair from the specified <code>Map.Entry</code>.
        @param entry  the entry to copy, must not be null
        @throws NullPointerException if the entry is null
        <!-- ACCEPT >=> 684a197e-9f1d-11ea-8833-333445793454 -->



## Method: `java.org.apache.commons.collections4.keyvalue.DefaultKeyValue` / `public K setKey(final K key)`


        <!-- 684a197f-9f1d-11ea-8834-333445793454 <=< ACCEPT -->
        Sets the key.
        @param key  the new key
        @return the old key
        @throws IllegalArgumentException if key is this object
        <!-- ACCEPT >=> 684a197f-9f1d-11ea-8834-333445793454 -->



## Method: `java.org.apache.commons.collections4.keyvalue.DefaultKeyValue` / `public V setValue(final V value)`


        <!-- 684a1980-9f1d-11ea-8835-333445793454 <=< ACCEPT -->
        Sets the value.
        @return the old value of the value
        @param value the new value
        @throws IllegalArgumentException if value is this object
        <!-- ACCEPT >=> 684a1980-9f1d-11ea-8835-333445793454 -->



## Method: `java.org.apache.commons.collections4.keyvalue.DefaultKeyValue` / `public Map.Entry<K, V> toMapEntry()`


        <!-- 684a1981-9f1d-11ea-8836-333445793454 <=< ACCEPT -->
        Returns a new <code>Map.Entry</code> object with key and value from this pair.
        @return a MapEntry instance
        <!-- ACCEPT >=> 684a1981-9f1d-11ea-8836-333445793454 -->



## Method: `java.org.apache.commons.collections4.keyvalue.DefaultKeyValue` / `public boolean equals(final Object obj)`


        <!-- 684a1982-9f1d-11ea-8837-333445793454 <=< ACCEPT -->
        Compares this <code>Map.Entry</code> with another <code>Map.Entry</code>.
        <p>
        Returns true if the compared object is also a <code>DefaultKeyValue</code>,
        and its key and value are equal to this object's key and value.
        @param obj  the object to compare to
        @return true if equal key and value
        <!-- ACCEPT >=> 684a1982-9f1d-11ea-8837-333445793454 -->



## Method: `java.org.apache.commons.collections4.keyvalue.DefaultKeyValue` / `public int hashCode()`


        <!-- 684a1983-9f1d-11ea-8838-333445793454 <=< ACCEPT -->
        Gets a hashCode compatible with the equals method.
        <p>
        Implemented per API documentation of {@link java.util.Map.Entry#hashCode()},
        however subclasses may override this.
        @return a suitable hash code
        <!-- ACCEPT >=> 684a1983-9f1d-11ea-8838-333445793454 -->



# File: `java.org.apache.commons.collections4.keyvalue.DefaultMapEntry`

## Class: `java.org.apache.commons.collections4.keyvalue.DefaultMapEntry` / `public final class DefaultMapEntry<K, V> extends AbstractMapEntry<K, V>`


        <!-- 684a1984-9f1d-11ea-8839-333445793454 <=< ACCEPT -->
        A restricted implementation of {@link java.util.Map.Entry Map.Entry} that prevents
        the {@link java.util.Map.Entry Map.Entry} contract from being broken.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 684a1984-9f1d-11ea-8839-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.keyvalue.DefaultMapEntry` / `public DefaultMapEntry(final K key, final V value)`


        <!-- 684a4073-9f1d-11ea-883a-333445793454 <=< ACCEPT -->
        Constructs a new entry with the specified key and given value.
        @param key  the key for the entry, may be null
        @param value  the value for the entry, may be null
        <!-- ACCEPT >=> 684a4073-9f1d-11ea-883a-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.keyvalue.DefaultMapEntry` / `public DefaultMapEntry(final KeyValue<? extends K, ? extends V> pair)`


        <!-- 684a4074-9f1d-11ea-883b-333445793454 <=< ACCEPT -->
        Constructs a new entry from the specified <code>KeyValue</code>.
        @param pair  the pair to copy, must not be null
        @throws NullPointerException if the entry is null
        <!-- ACCEPT >=> 684a4074-9f1d-11ea-883b-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.keyvalue.DefaultMapEntry` / `public DefaultMapEntry(final Map.Entry<? extends K, ? extends V> entry)`


        <!-- 684a4075-9f1d-11ea-883c-333445793454 <=< ACCEPT -->
        Constructs a new entry from the specified <code>Map.Entry</code>.
        @param entry  the entry to copy, must not be null
        @throws NullPointerException if the entry is null
        <!-- ACCEPT >=> 684a4075-9f1d-11ea-883c-333445793454 -->



# File: `java.org.apache.commons.collections4.keyvalue.MultiKey`

## Class: `java.org.apache.commons.collections4.keyvalue.MultiKey` / `public class MultiKey<K> implements Serializable`


        <!-- 684a4076-9f1d-11ea-883d-333445793454 <=< ACCEPT -->
        A <code>MultiKey</code> allows multiple map keys to be merged together.
        <p>
        The purpose of this class is to avoid the need to write code to handle
        maps of maps. An example might be the need to look up a file name by
        key and locale. The typical solution might be nested maps. This class
        can be used instead by creating an instance passing in the key and locale.
        <p>
        Example usage:
        <pre>
        // populate map with data mapping key+locale to localizedText
        Map map = new HashMap();
        MultiKey multiKey = new MultiKey(key, locale);
        map.put(multiKey, localizedText);
        // later retrieve the localized text
        MultiKey multiKey = new MultiKey(key, locale);
        String localizedText = (String) map.get(multiKey);
        </pre>
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 684a4076-9f1d-11ea-883d-333445793454 -->



## Field: `java.org.apache.commons.collections4.keyvalue.MultiKey` / `private static final long serialVersionUID`


        <!-- 684a4077-9f1d-11ea-883e-333445793454 <=< ACCEPT -->
        Serialisation version
        <!-- ACCEPT >=> 684a4077-9f1d-11ea-883e-333445793454 -->



## Field: `java.org.apache.commons.collections4.keyvalue.MultiKey` / `private final K[] keys`


        <!-- 684a4078-9f1d-11ea-883f-333445793454 <=< ACCEPT -->
        The individual keys
        <!-- ACCEPT >=> 684a4078-9f1d-11ea-883f-333445793454 -->



## Field: `java.org.apache.commons.collections4.keyvalue.MultiKey` / `private transient int hashCode`


        <!-- 684a4079-9f1d-11ea-8840-333445793454 <=< ACCEPT -->
        The cached hashCode
        <!-- ACCEPT >=> 684a4079-9f1d-11ea-8840-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.keyvalue.MultiKey` / `public MultiKey(final K key1, final K key2)`


        <!-- 684a407a-9f1d-11ea-8841-333445793454 <=< ACCEPT -->
        Constructor taking two keys.
        <p>
        The keys should be immutable
        If they are not then they must not be changed after adding to the MultiKey.
        @param key1  the first key
        @param key2  the second key
        <!-- ACCEPT >=> 684a407a-9f1d-11ea-8841-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.keyvalue.MultiKey` / `public MultiKey(final K key1, final K key2, final K key3)`


        <!-- 684a407b-9f1d-11ea-8842-333445793454 <=< ACCEPT -->
        Constructor taking three keys.
        <p>
        The keys should be immutable
        If they are not then they must not be changed after adding to the MultiKey.
        @param key1  the first key
        @param key2  the second key
        @param key3  the third key
        <!-- ACCEPT >=> 684a407b-9f1d-11ea-8842-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.keyvalue.MultiKey` / `public MultiKey(final K key1, final K key2, final K key3, final K key4)`


        <!-- 684a407c-9f1d-11ea-8843-333445793454 <=< ACCEPT -->
        Constructor taking four keys.
        <p>
        The keys should be immutable
        If they are not then they must not be changed after adding to the MultiKey.
        @param key1  the first key
        @param key2  the second key
        @param key3  the third key
        @param key4  the fourth key
        <!-- ACCEPT >=> 684a407c-9f1d-11ea-8843-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.keyvalue.MultiKey` / `public MultiKey(final K key1, final K key2, final K key3, final K key4, final K key5)`


        <!-- 684a407d-9f1d-11ea-8844-333445793454 <=< ACCEPT -->
        Constructor taking five keys.
        <p>
        The keys should be immutable
        If they are not then they must not be changed after adding to the MultiKey.
        @param key1  the first key
        @param key2  the second key
        @param key3  the third key
        @param key4  the fourth key
        @param key5  the fifth key
        <!-- ACCEPT >=> 684a407d-9f1d-11ea-8844-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.keyvalue.MultiKey` / `public MultiKey(final K[] keys)`


        <!-- 684a407e-9f1d-11ea-8845-333445793454 <=< ACCEPT -->
        Constructor taking an array of keys which is cloned.
        <p>
        The keys should be immutable
        If they are not then they must not be changed after adding to the MultiKey.
        <p>
        This is equivalent to <code>new MultiKey(keys, true)</code>.
        @param keys  the array of keys, not null
        @throws IllegalArgumentException if the key array is null
        <!-- ACCEPT >=> 684a407e-9f1d-11ea-8845-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.keyvalue.MultiKey` / `public MultiKey(final K[] keys, final boolean makeClone)`


        <!-- 684a407f-9f1d-11ea-8846-333445793454 <=< ACCEPT -->
        Constructor taking an array of keys, optionally choosing whether to clone.
        <p>
        <b>If the array is not cloned, then it must not be modified.</b>
        <p>
        This method is public for performance reasons only, to avoid a clone.
        The hashcode is calculated once here in this method.
        Therefore, changing the array passed in would not change the hashcode but
        would change the equals method, which is a bug.
        <p>
        This is the only fully safe usage of this constructor, as the object array
        is never made available in a variable:
        <pre>
        new MultiKey(new Object[] {...}, false);
        </pre>
        <p>
        The keys should be immutable
        If they are not then they must not be changed after adding to the MultiKey.
        @param keys  the array of keys, not null
        @param makeClone  true to clone the array, false to assign it
        @throws IllegalArgumentException if the key array is null
        @since 3.1
        <!-- ACCEPT >=> 684a407f-9f1d-11ea-8846-333445793454 -->



## Method: `java.org.apache.commons.collections4.keyvalue.MultiKey` / `public K[] getKeys()`


        <!-- 684a4080-9f1d-11ea-8847-333445793454 <=< ACCEPT -->
        Gets a clone of the array of keys.
        <p>
        The keys should be immutable
        If they are not then they must not be changed.
        @return the individual keys
        <!-- ACCEPT >=> 684a4080-9f1d-11ea-8847-333445793454 -->



## Method: `java.org.apache.commons.collections4.keyvalue.MultiKey` / `public K getKey(final int index)`


        <!-- 684a4081-9f1d-11ea-8848-333445793454 <=< ACCEPT -->
        Gets the key at the specified index.
        <p>
        The key should be immutable.
        If it is not then it must not be changed.
        @param index  the index to retrieve
        @return the key at the index
        @throws IndexOutOfBoundsException if the index is invalid
        @since 3.1
        <!-- ACCEPT >=> 684a4081-9f1d-11ea-8848-333445793454 -->



## Method: `java.org.apache.commons.collections4.keyvalue.MultiKey` / `public int size()`


        <!-- 684a4082-9f1d-11ea-8849-333445793454 <=< ACCEPT -->
        Gets the size of the list of keys.
        @return the size of the list of keys
        @since 3.1
        <!-- ACCEPT >=> 684a4082-9f1d-11ea-8849-333445793454 -->



## Method: `java.org.apache.commons.collections4.keyvalue.MultiKey` / `public boolean equals(final Object other)`


        <!-- 684a4083-9f1d-11ea-884a-333445793454 <=< ACCEPT -->
        Compares this object to another.
        <p>
        To be equal, the other object must be a <code>MultiKey</code> with the
        same number of keys which are also equal.
        @param other  the other object to compare to
        @return true if equal
        <!-- ACCEPT >=> 684a4083-9f1d-11ea-884a-333445793454 -->



## Method: `java.org.apache.commons.collections4.keyvalue.MultiKey` / `public int hashCode()`


        <!-- 684a4084-9f1d-11ea-884b-333445793454 <=< ACCEPT -->
        Gets the combined hash code that is computed from all the keys.
        <p>
        This value is computed once and then cached, so elements should not
        change their hash codes once created (note that this is the same
        constraint that would be used if the individual keys elements were
        themselves {@link java.util.Map Map} keys.
        @return the hash code
        <!-- ACCEPT >=> 684a4084-9f1d-11ea-884b-333445793454 -->



## Method: `java.org.apache.commons.collections4.keyvalue.MultiKey` / `public String toString()`


        <!-- 684a4085-9f1d-11ea-884c-333445793454 <=< ACCEPT -->
        Gets a debugging string version of the key.
        @return a debugging string
        <!-- ACCEPT >=> 684a4085-9f1d-11ea-884c-333445793454 -->



## Method: `java.org.apache.commons.collections4.keyvalue.MultiKey` / ``


        <!-- 684a4086-9f1d-11ea-884d-333445793454 <=< ACCEPT -->
        Calculate the hash code of the instance using the provided keys.
        @param keys the keys to calculate the hash code for
        <!-- ACCEPT >=> 684a4086-9f1d-11ea-884d-333445793454 -->



## Method: `java.org.apache.commons.collections4.keyvalue.MultiKey` / `protected Object readResolve()`


        <!-- 684a677d-9f1d-11ea-884e-333445793454 <=< ACCEPT -->
        Recalculate the hash code after deserialization. The hash code of some
        keys might have change (hash codes based on the system hash code are
        only stable for the same process).
        @return the instance with recalculated hash code
        <!-- ACCEPT >=> 684a677d-9f1d-11ea-884e-333445793454 -->



# File: `java.org.apache.commons.collections4.keyvalue.TiedMapEntry`

## Class: `java.org.apache.commons.collections4.keyvalue.TiedMapEntry` / `public class TiedMapEntry<K, V> implements Map.Entry<K, V>, KeyValue<K, V>, Serializable`


        <!-- 684a677e-9f1d-11ea-884f-333445793454 <=< ACCEPT -->
        A {@link java.util.Map.Entry Map.Entry} tied to a map underneath.
        <p>
        This can be used to enable a map entry to make changes on the underlying
        map, however this will probably mess up any iterators.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 684a677e-9f1d-11ea-884f-333445793454 -->



## Field: `java.org.apache.commons.collections4.keyvalue.TiedMapEntry` / `private static final long serialVersionUID`


        <!-- 684a677f-9f1d-11ea-8850-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 684a677f-9f1d-11ea-8850-333445793454 -->



## Field: `java.org.apache.commons.collections4.keyvalue.TiedMapEntry` / `private final Map<K, V> map`


        <!-- 684a6780-9f1d-11ea-8851-333445793454 <=< ACCEPT -->
        The map underlying the entry/iterator
        <!-- ACCEPT >=> 684a6780-9f1d-11ea-8851-333445793454 -->



## Field: `java.org.apache.commons.collections4.keyvalue.TiedMapEntry` / `private final K key`


        <!-- 684a6781-9f1d-11ea-8852-333445793454 <=< ACCEPT -->
        The key
        <!-- ACCEPT >=> 684a6781-9f1d-11ea-8852-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.keyvalue.TiedMapEntry` / `public TiedMapEntry(final Map<K, V> map, final K key)`


        <!-- 684a6782-9f1d-11ea-8853-333445793454 <=< ACCEPT -->
        Constructs a new entry with the given Map and key.
        @param map  the map
        @param key  the key
        <!-- ACCEPT >=> 684a6782-9f1d-11ea-8853-333445793454 -->



## Method: `java.org.apache.commons.collections4.keyvalue.TiedMapEntry` / `public K getKey()`


        <!-- 684a6783-9f1d-11ea-8854-333445793454 <=< ACCEPT -->
        Gets the key of this entry
        @return the key
        <!-- ACCEPT >=> 684a6783-9f1d-11ea-8854-333445793454 -->



## Method: `java.org.apache.commons.collections4.keyvalue.TiedMapEntry` / `public V getValue()`


        <!-- 684a6784-9f1d-11ea-8855-333445793454 <=< ACCEPT -->
        Gets the value of this entry direct from the map.
        @return the value
        <!-- ACCEPT >=> 684a6784-9f1d-11ea-8855-333445793454 -->



## Method: `java.org.apache.commons.collections4.keyvalue.TiedMapEntry` / `public V setValue(final V value)`


        <!-- 684a6785-9f1d-11ea-8856-333445793454 <=< ACCEPT -->
        Sets the value associated with the key direct onto the map.
        @param value  the new value
        @return the old value
        @throws IllegalArgumentException if the value is set to this map entry
        <!-- ACCEPT >=> 684a6785-9f1d-11ea-8856-333445793454 -->



## Method: `java.org.apache.commons.collections4.keyvalue.TiedMapEntry` / `public boolean equals(final Object obj)`


        <!-- 684a6786-9f1d-11ea-8857-333445793454 <=< ACCEPT -->
        Compares this <code>Map.Entry</code> with another <code>Map.Entry</code>.
        <p>
        Implemented per API documentation of {@link java.util.Map.Entry#equals(Object)}
        @param obj  the object to compare to
        @return true if equal key and value
        <!-- ACCEPT >=> 684a6786-9f1d-11ea-8857-333445793454 -->



## Method: `java.org.apache.commons.collections4.keyvalue.TiedMapEntry` / `public int hashCode()`


        <!-- 684a6787-9f1d-11ea-8858-333445793454 <=< ACCEPT -->
        Gets a hashCode compatible with the equals method.
        <p>
        Implemented per API documentation of {@link java.util.Map.Entry#hashCode()}
        @return a suitable hash code
        <!-- ACCEPT >=> 684a6787-9f1d-11ea-8858-333445793454 -->



## Method: `java.org.apache.commons.collections4.keyvalue.TiedMapEntry` / `public String toString()`


        <!-- 684a6788-9f1d-11ea-8859-333445793454 <=< ACCEPT -->
        Gets a string version of the entry.
        @return entry as a string
        <!-- ACCEPT >=> 684a6788-9f1d-11ea-8859-333445793454 -->



# File: `java.org.apache.commons.collections4.keyvalue.UnmodifiableMapEntry`

## Class: `java.org.apache.commons.collections4.keyvalue.UnmodifiableMapEntry` / `public final class UnmodifiableMapEntry<K, V> extends AbstractMapEntry<K, V> implements Unmodifiable`


        <!-- 684a6789-9f1d-11ea-885a-333445793454 <=< ACCEPT -->
        A {@link java.util.Map.Entry Map.Entry} that throws
        UnsupportedOperationException when <code>setValue</code> is called.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 684a6789-9f1d-11ea-885a-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.keyvalue.UnmodifiableMapEntry` / `public UnmodifiableMapEntry(final K key, final V value)`


        <!-- 684a678a-9f1d-11ea-885b-333445793454 <=< ACCEPT -->
        Constructs a new entry with the specified key and given value.
        @param key  the key for the entry, may be null
        @param value  the value for the entry, may be null
        <!-- ACCEPT >=> 684a678a-9f1d-11ea-885b-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.keyvalue.UnmodifiableMapEntry` / `public UnmodifiableMapEntry(final KeyValue<? extends K, ? extends V> pair)`


        <!-- 684a678b-9f1d-11ea-885c-333445793454 <=< ACCEPT -->
        Constructs a new entry from the specified <code>KeyValue</code>.
        @param pair  the pair to copy, must not be null
        @throws NullPointerException if the entry is null
        <!-- ACCEPT >=> 684a678b-9f1d-11ea-885c-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.keyvalue.UnmodifiableMapEntry` / `public UnmodifiableMapEntry(final Map.Entry<? extends K, ? extends V> entry)`


        <!-- 684a678c-9f1d-11ea-885d-333445793454 <=< ACCEPT -->
        Constructs a new entry from the specified <code>Map.Entry</code>.
        @param entry  the entry to copy, must not be null
        @throws NullPointerException if the entry is null
        <!-- ACCEPT >=> 684a678c-9f1d-11ea-885d-333445793454 -->



## Method: `java.org.apache.commons.collections4.keyvalue.UnmodifiableMapEntry` / `public V setValue(final V value)`


        <!-- 684a678d-9f1d-11ea-885e-333445793454 <=< ACCEPT -->
        Throws UnsupportedOperationException.
        @param value  the new value
        @return the previous value
        @throws UnsupportedOperationException always
        <!-- ACCEPT >=> 684a678d-9f1d-11ea-885e-333445793454 -->



# File: `java.org.apache.commons.collections4.keyvalue.package-info`

## Package: `java.org.apache.commons.collections4.keyvalue.package-info` / `package org.apache.commons.collections4.keyvalue`


        <!-- 684a678e-9f1d-11ea-885f-333445793454 <=< ACCEPT -->
        This package contains implementations of collection and map related key/value classes.
        These are usually used in maps, however they can be used as data holders in any collection.
        <p>
        The following key/value designs are included:
        <ul>
        <li>Map Entry - various map entry implementations
        <li>KeyValue - a key and value pair, without map entry semantics
        <li>MultiKey - a holder of multiple keys tied together
        </ul>
        @version $Id$
        <!-- ACCEPT >=> 684a678e-9f1d-11ea-885f-333445793454 -->



# File: `java.org.apache.commons.collections4.list.AbstractLinkedList`

## Class: `java.org.apache.commons.collections4.list.AbstractLinkedList` / `public abstract class AbstractLinkedList<E> implements List<E>`


        <!-- 684a678f-9f1d-11ea-8860-333445793454 <=< ACCEPT -->
        An abstract implementation of a linked list which provides numerous points for
        subclasses to override.
        <p>
        Overridable methods are provided to change the storage node and to change how
        nodes are added to and removed. Hopefully, all you need for unusual subclasses
        is here.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 684a678f-9f1d-11ea-8860-333445793454 -->



## Field: `java.org.apache.commons.collections4.list.AbstractLinkedList` / `transient Node<E> header`


        <!-- 684a6790-9f1d-11ea-8861-333445793454 <=< ACCEPT -->
        A {@link Node} which indicates the start and end of the list and does not
        hold a value. The value of <code>next</code> is the first item in the
        list. The value of of <code>previous</code> is the last item in the list.
        <!-- ACCEPT >=> 684a6790-9f1d-11ea-8861-333445793454 -->



## Field: `java.org.apache.commons.collections4.list.AbstractLinkedList` / `transient int size`


        <!-- 684a6791-9f1d-11ea-8862-333445793454 <=< ACCEPT -->
        The size of the list
        <!-- ACCEPT >=> 684a6791-9f1d-11ea-8862-333445793454 -->



## Field: `java.org.apache.commons.collections4.list.AbstractLinkedList` / `transient int modCount`


        <!-- 684a6792-9f1d-11ea-8863-333445793454 <=< ACCEPT -->
        Modification count for iterators
        <!-- ACCEPT >=> 684a6792-9f1d-11ea-8863-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.list.AbstractLinkedList` / `protected AbstractLinkedList()`


        <!-- 684a6793-9f1d-11ea-8864-333445793454 <=< ACCEPT -->
        Constructor that does nothing intended for deserialization.
        <p>
        If this constructor is used by a serializable subclass then the init()
        method must be called.
        <!-- ACCEPT >=> 684a6793-9f1d-11ea-8864-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.list.AbstractLinkedList` / `protected AbstractLinkedList(final Collection<? extends E> coll)`


        <!-- 684a8e87-9f1d-11ea-8865-333445793454 <=< ACCEPT -->
        Constructs a list copying data from the specified collection.
        @param coll  the collection to copy
        <!-- ACCEPT >=> 684a8e87-9f1d-11ea-8865-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.AbstractLinkedList` / `protected void init()`


        <!-- 684a8e88-9f1d-11ea-8866-333445793454 <=< ACCEPT -->
        The equivalent of a default constructor, broken out so it can be called
        by any constructor and by <code>readObject</code>.
        Subclasses which override this method should make sure they call super,
        so the list is initialised properly.
        <!-- ACCEPT >=> 684a8e88-9f1d-11ea-8866-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.AbstractLinkedList` / `public List<E> subList(final int fromIndexInclusive, final int toIndexExclusive)`


        <!-- 684a8e89-9f1d-11ea-8867-333445793454 <=< ACCEPT -->
        Gets a sublist of the main list.
        @param fromIndexInclusive  the index to start from
        @param toIndexExclusive  the index to end at
        @return the new sublist
        <!-- ACCEPT >=> 684a8e89-9f1d-11ea-8867-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.AbstractLinkedList` / `public boolean removeAll(final Collection<?> coll)`


        <!-- 684a8e8a-9f1d-11ea-8868-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <p>
        This implementation iterates over the elements of this list, checking each element in
        turn to see if it's contained in <code>coll</code>. If it's contained, it's removed
        from this list. As a consequence, it is advised to use a collection type for
        <code>coll</code> that provides a fast (e.g. O(1)) implementation of
        {@link Collection#contains(Object)}.
        <!-- ACCEPT >=> 684a8e8a-9f1d-11ea-8868-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.AbstractLinkedList` / `public boolean retainAll(final Collection<?> coll)`


        <!-- 684a8e8b-9f1d-11ea-8869-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <p>
        This implementation iterates over the elements of this list, checking each element in
        turn to see if it's contained in <code>coll</code>. If it's not contained, it's removed
        from this list. As a consequence, it is advised to use a collection type for
        <code>coll</code> that provides a fast (e.g. O(1)) implementation of
        {@link Collection#contains(Object)}.
        <!-- ACCEPT >=> 684a8e8b-9f1d-11ea-8869-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.AbstractLinkedList` / `protected boolean isEqualValue(final Object value1, final Object value2)`


        <!-- 684a8e8c-9f1d-11ea-886a-333445793454 <=< ACCEPT -->
        Compares two values for equals.
        This implementation uses the equals method.
        Subclasses can override this to match differently.
        @param value1  the first value to compare, may be null
        @param value2  the second value to compare, may be null
        @return true if equal
        <!-- ACCEPT >=> 684a8e8c-9f1d-11ea-886a-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.AbstractLinkedList` / `protected void updateNode(final Node<E> node, final E value)`


        <!-- 684a8e8d-9f1d-11ea-886b-333445793454 <=< ACCEPT -->
        Updates the node with a new value.
        This implementation sets the value on the node.
        Subclasses can override this to record the change.
        @param node  node to update
        @param value  new value of the node
        <!-- ACCEPT >=> 684a8e8d-9f1d-11ea-886b-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.AbstractLinkedList` / `protected Node<E> createHeaderNode()`


        <!-- 684a8e8e-9f1d-11ea-886c-333445793454 <=< ACCEPT -->
        Creates a new node with previous, next and element all set to null.
        This implementation creates a new empty Node.
        Subclasses can override this to create a different class.
        @return  newly created node
        <!-- ACCEPT >=> 684a8e8e-9f1d-11ea-886c-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.AbstractLinkedList` / `protected Node<E> createNode(final E value)`


        <!-- 684a8e8f-9f1d-11ea-886d-333445793454 <=< ACCEPT -->
        Creates a new node with the specified properties.
        This implementation creates a new Node with data.
        Subclasses can override this to create a different class.
        @param value  value of the new node
        @return a new node containing the value
        <!-- ACCEPT >=> 684a8e8f-9f1d-11ea-886d-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.AbstractLinkedList` / `protected void addNodeBefore(final Node<E> node, final E value)`


        <!-- 684a8e90-9f1d-11ea-886e-333445793454 <=< ACCEPT -->
        Creates a new node with the specified object as its
        <code>value</code> and inserts it before <code>node</code>.
        <p>
        This implementation uses {@link #createNode(Object)} and
        {@link #addNode(AbstractLinkedList.Node,AbstractLinkedList.Node)}.
        @param node  node to insert before
        @param value  value of the newly added node
        @throws NullPointerException if <code>node</code> is null
        <!-- ACCEPT >=> 684a8e90-9f1d-11ea-886e-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.AbstractLinkedList` / `protected void addNodeAfter(final Node<E> node, final E value)`


        <!-- 684a8e91-9f1d-11ea-886f-333445793454 <=< ACCEPT -->
        Creates a new node with the specified object as its
        <code>value</code> and inserts it after <code>node</code>.
        <p>
        This implementation uses {@link #createNode(Object)} and
        {@link #addNode(AbstractLinkedList.Node,AbstractLinkedList.Node)}.
        @param node  node to insert after
        @param value  value of the newly added node
        @throws NullPointerException if <code>node</code> is null
        <!-- ACCEPT >=> 684a8e91-9f1d-11ea-886f-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.AbstractLinkedList` / `protected void addNode(final Node<E> nodeToInsert, final Node<E> insertBeforeNode)`


        <!-- 684a8e92-9f1d-11ea-8870-333445793454 <=< ACCEPT -->
        Inserts a new node into the list.
        @param nodeToInsert  new node to insert
        @param insertBeforeNode  node to insert before
        @throws NullPointerException if either node is null
        <!-- ACCEPT >=> 684a8e92-9f1d-11ea-8870-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.AbstractLinkedList` / `protected void removeNode(final Node<E> node)`


        <!-- 684a8e93-9f1d-11ea-8871-333445793454 <=< ACCEPT -->
        Removes the specified node from the list.
        @param node  the node to remove
        @throws NullPointerException if <code>node</code> is null
        <!-- ACCEPT >=> 684a8e93-9f1d-11ea-8871-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.AbstractLinkedList` / `protected void removeAllNodes()`


        <!-- 684a8e94-9f1d-11ea-8872-333445793454 <=< ACCEPT -->
        Removes all nodes by resetting the circular list marker.
        <!-- ACCEPT >=> 684a8e94-9f1d-11ea-8872-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.AbstractLinkedList` / `protected Node<E> getNode(final int index, final boolean endMarkerAllowed) throws IndexOutOfBoundsException`


        <!-- 684a8e95-9f1d-11ea-8873-333445793454 <=< ACCEPT -->
        Gets the node at a particular index.
        @param index  the index, starting from 0
        @param endMarkerAllowed  whether or not the end marker can be returned if
        startIndex is set to the list's size
        @return the node at the given index
        @throws IndexOutOfBoundsException if the index is less than 0; equal to
        the size of the list and endMakerAllowed is false; or greater than the
        size of the list
        <!-- ACCEPT >=> 684a8e95-9f1d-11ea-8873-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.AbstractLinkedList` / `protected Iterator<E> createSubListIterator(final LinkedSubList<E> subList)`


        <!-- 684a8e96-9f1d-11ea-8874-333445793454 <=< ACCEPT -->
        Creates an iterator for the sublist.
        @param subList  the sublist to get an iterator for
        @return a new iterator on the given sublist
        <!-- ACCEPT >=> 684a8e96-9f1d-11ea-8874-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.AbstractLinkedList` / `protected ListIterator<E> createSubListListIterator(final LinkedSubList<E> subList, final int fromIndex)`


        <!-- 684a8e97-9f1d-11ea-8875-333445793454 <=< ACCEPT -->
        Creates a list iterator for the sublist.
        @param subList  the sublist to get an iterator for
        @param fromIndex  the index to start from, relative to the sublist
        @return a new list iterator on the given sublist
        <!-- ACCEPT >=> 684a8e97-9f1d-11ea-8875-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.AbstractLinkedList` / `protected void doWriteObject(final ObjectOutputStream outputStream) throws IOException`


        <!-- 684a8e98-9f1d-11ea-8876-333445793454 <=< ACCEPT -->
        Serializes the data held in this object to the stream specified.
        <p>
        The first serializable subclass must call this method from
        <code>writeObject</code>.
        @param outputStream  the stream to write the object to
        @throws IOException  if anything goes wrong
        <!-- ACCEPT >=> 684a8e98-9f1d-11ea-8876-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.AbstractLinkedList` / `protected void doReadObject(final ObjectInputStream inputStream) throws IOException, ClassNotFoundException`


        <!-- 684a8e99-9f1d-11ea-8877-333445793454 <=< ACCEPT -->
        Deserializes the data held in this object to the stream specified.
        <p>
        The first serializable subclass must call this method from
        <code>readObject</code>.
        @param inputStream  the stream to read the object from
        @throws IOException  if any error occurs while reading from the stream
        @throws ClassNotFoundException  if a class read from the stream can not be loaded
        <!-- ACCEPT >=> 684a8e99-9f1d-11ea-8877-333445793454 -->



## Class: `java.org.apache.commons.collections4.list.AbstractLinkedList` / `protected static class Node<E>`


        <!-- 684a8e9a-9f1d-11ea-8878-333445793454 <=< ACCEPT -->
        A node within the linked list.
        <p>
        From Commons Collections 3.1, all access to the <code>value</code> property
        is via the methods on this class.
        <!-- ACCEPT >=> 684a8e9a-9f1d-11ea-8878-333445793454 -->



## Field: `java.org.apache.commons.collections4.list.AbstractLinkedList` / `protected Node<E> previous`


        <!-- 684a8e9b-9f1d-11ea-8879-333445793454 <=< ACCEPT -->
        A pointer to the node before this node
        <!-- ACCEPT >=> 684a8e9b-9f1d-11ea-8879-333445793454 -->



## Field: `java.org.apache.commons.collections4.list.AbstractLinkedList` / `protected Node<E> next`


        <!-- 684a8e9c-9f1d-11ea-887a-333445793454 <=< ACCEPT -->
        A pointer to the node after this node
        <!-- ACCEPT >=> 684a8e9c-9f1d-11ea-887a-333445793454 -->



## Field: `java.org.apache.commons.collections4.list.AbstractLinkedList` / `protected E value`


        <!-- 684ab590-9f1d-11ea-887b-333445793454 <=< ACCEPT -->
        The object contained within this node
        <!-- ACCEPT >=> 684ab590-9f1d-11ea-887b-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.list.AbstractLinkedList` / `protected Node()`


        <!-- 684ab591-9f1d-11ea-887c-333445793454 <=< ACCEPT -->
        Constructs a new header node.
        <!-- ACCEPT >=> 684ab591-9f1d-11ea-887c-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.list.AbstractLinkedList` / `protected Node(final E value)`


        <!-- 684ab592-9f1d-11ea-887d-333445793454 <=< ACCEPT -->
        Constructs a new node.
        @param value  the value to store
        <!-- ACCEPT >=> 684ab592-9f1d-11ea-887d-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.list.AbstractLinkedList` / `protected Node(final Node<E> previous, final Node<E> next, final E value)`


        <!-- 684ab593-9f1d-11ea-887e-333445793454 <=< ACCEPT -->
        Constructs a new node.
        @param previous  the previous node in the list
        @param next  the next node in the list
        @param value  the value to store
        <!-- ACCEPT >=> 684ab593-9f1d-11ea-887e-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.AbstractLinkedList` / `protected E getValue()`


        <!-- 684ab594-9f1d-11ea-887f-333445793454 <=< ACCEPT -->
        Gets the value of the node.
        @return the value
        @since 3.1
        <!-- ACCEPT >=> 684ab594-9f1d-11ea-887f-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.AbstractLinkedList` / `protected void setValue(final E value)`


        <!-- 684ab595-9f1d-11ea-8880-333445793454 <=< ACCEPT -->
        Sets the value of the node.
        @param value  the value
        @since 3.1
        <!-- ACCEPT >=> 684ab595-9f1d-11ea-8880-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.AbstractLinkedList` / `protected Node<E> getPreviousNode()`


        <!-- 684ab596-9f1d-11ea-8881-333445793454 <=< ACCEPT -->
        Gets the previous node.
        @return the previous node
        @since 3.1
        <!-- ACCEPT >=> 684ab596-9f1d-11ea-8881-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.AbstractLinkedList` / `protected void setPreviousNode(final Node<E> previous)`


        <!-- 684ab597-9f1d-11ea-8882-333445793454 <=< ACCEPT -->
        Sets the previous node.
        @param previous  the previous node
        @since 3.1
        <!-- ACCEPT >=> 684ab597-9f1d-11ea-8882-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.AbstractLinkedList` / `protected Node<E> getNextNode()`


        <!-- 684ab598-9f1d-11ea-8883-333445793454 <=< ACCEPT -->
        Gets the next node.
        @return the next node
        @since 3.1
        <!-- ACCEPT >=> 684ab598-9f1d-11ea-8883-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.AbstractLinkedList` / `protected void setNextNode(final Node<E> next)`


        <!-- 684ab599-9f1d-11ea-8884-333445793454 <=< ACCEPT -->
        Sets the next node.
        @param next  the next node
        @since 3.1
        <!-- ACCEPT >=> 684ab599-9f1d-11ea-8884-333445793454 -->



## Class: `java.org.apache.commons.collections4.list.AbstractLinkedList` / `protected static class LinkedListIterator<E> implements ListIterator<E>, OrderedIterator<E>`


        <!-- 684ab59a-9f1d-11ea-8885-333445793454 <=< ACCEPT -->
        A list iterator over the linked list.
        <!-- ACCEPT >=> 684ab59a-9f1d-11ea-8885-333445793454 -->



## Field: `java.org.apache.commons.collections4.list.AbstractLinkedList` / `protected final AbstractLinkedList<E> parent`


        <!-- 684ab59b-9f1d-11ea-8886-333445793454 <=< ACCEPT -->
        The parent list
        <!-- ACCEPT >=> 684ab59b-9f1d-11ea-8886-333445793454 -->



## Field: `java.org.apache.commons.collections4.list.AbstractLinkedList` / `protected Node<E> next`


        <!-- 684ab59c-9f1d-11ea-8887-333445793454 <=< ACCEPT -->
        The node that will be returned by {@link #next()}. If this is equal
        to {@link AbstractLinkedList#header} then there are no more values to return.
        <!-- ACCEPT >=> 684ab59c-9f1d-11ea-8887-333445793454 -->



## Field: `java.org.apache.commons.collections4.list.AbstractLinkedList` / `protected int nextIndex`


        <!-- 684ab59d-9f1d-11ea-8888-333445793454 <=< ACCEPT -->
        The index of {@link #next}.
        <!-- ACCEPT >=> 684ab59d-9f1d-11ea-8888-333445793454 -->



## Field: `java.org.apache.commons.collections4.list.AbstractLinkedList` / `protected Node<E> current`


        <!-- 684ab59e-9f1d-11ea-8889-333445793454 <=< ACCEPT -->
        The last node that was returned by {@link #next()} or {@link
        #previous()}. Set to <code>null</code> if {@link #next()} or {@link
        #previous()} haven't been called, or if the node has been removed
        with {@link #remove()} or a new node added with {@link #add(Object)}.
        Should be accessed through {@link #getLastNodeReturned()} to enforce
        this behaviour.
        <!-- ACCEPT >=> 684ab59e-9f1d-11ea-8889-333445793454 -->



## Field: `java.org.apache.commons.collections4.list.AbstractLinkedList` / `protected int expectedModCount`


        <!-- 684ab59f-9f1d-11ea-888a-333445793454 <=< ACCEPT -->
        The modification count that the list is expected to have. If the list
        doesn't have this count, then a
        {@link java.util.ConcurrentModificationException} may be thrown by
        the operations.
        <!-- ACCEPT >=> 684ab59f-9f1d-11ea-888a-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.list.AbstractLinkedList` / `throws IndexOutOfBoundsException`


        <!-- 684ab5a0-9f1d-11ea-888b-333445793454 <=< ACCEPT -->
        Create a ListIterator for a list.
        @param parent  the parent list
        @param fromIndex  the index to start at
        @throws IndexOutOfBoundsException if fromIndex is less than 0 or greater than the size of the list
        <!-- ACCEPT >=> 684ab5a0-9f1d-11ea-888b-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.AbstractLinkedList` / `protected void checkModCount()`


        <!-- 684ab5a1-9f1d-11ea-888c-333445793454 <=< ACCEPT -->
        Checks the modification count of the list is the value that this
        object expects.
        @throws ConcurrentModificationException If the list's modification
        count isn't the value that was expected.
        <!-- ACCEPT >=> 684ab5a1-9f1d-11ea-888c-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.AbstractLinkedList` / `protected Node<E> getLastNodeReturned() throws IllegalStateException`


        <!-- 684ab5a2-9f1d-11ea-888d-333445793454 <=< ACCEPT -->
        Gets the last node returned.
        @return the last node returned
        @throws IllegalStateException If {@link #next()} or {@link #previous()} haven't been called,
        or if the node has been removed with {@link #remove()} or a new node added with {@link #add(Object)}.
        <!-- ACCEPT >=> 684ab5a2-9f1d-11ea-888d-333445793454 -->



## Class: `java.org.apache.commons.collections4.list.AbstractLinkedList` / `protected static class LinkedSubListIterator<E> extends LinkedListIterator<E>`


        <!-- 684ab5a3-9f1d-11ea-888e-333445793454 <=< ACCEPT -->
        A list iterator over the linked sub list.
        <!-- ACCEPT >=> 684ab5a3-9f1d-11ea-888e-333445793454 -->



## Field: `java.org.apache.commons.collections4.list.AbstractLinkedList` / `protected final LinkedSubList<E> sub`


        <!-- 684ab5a4-9f1d-11ea-888f-333445793454 <=< ACCEPT -->
        The parent list
        <!-- ACCEPT >=> 684ab5a4-9f1d-11ea-888f-333445793454 -->



## Class: `java.org.apache.commons.collections4.list.AbstractLinkedList` / `protected static class LinkedSubList<E> extends AbstractList<E>`


        <!-- 684ab5a5-9f1d-11ea-8890-333445793454 <=< ACCEPT -->
        The sublist implementation for AbstractLinkedList.
        <!-- ACCEPT >=> 684ab5a5-9f1d-11ea-8890-333445793454 -->



## Field: `java.org.apache.commons.collections4.list.AbstractLinkedList` / `AbstractLinkedList<E> parent`


        <!-- 684ab5a6-9f1d-11ea-8891-333445793454 <=< ACCEPT -->
        The main list
        <!-- ACCEPT >=> 684ab5a6-9f1d-11ea-8891-333445793454 -->



## Field: `java.org.apache.commons.collections4.list.AbstractLinkedList` / `int offset`


        <!-- 684ab5a7-9f1d-11ea-8892-333445793454 <=< ACCEPT -->
        Offset from the main list
        <!-- ACCEPT >=> 684ab5a7-9f1d-11ea-8892-333445793454 -->



## Field: `java.org.apache.commons.collections4.list.AbstractLinkedList` / `int size`


        <!-- 684ab5a8-9f1d-11ea-8893-333445793454 <=< ACCEPT -->
        Sublist size
        <!-- ACCEPT >=> 684ab5a8-9f1d-11ea-8893-333445793454 -->



## Field: `java.org.apache.commons.collections4.list.AbstractLinkedList` / `int expectedModCount`


        <!-- 684ab5a9-9f1d-11ea-8894-333445793454 <=< ACCEPT -->
        Sublist modCount
        <!-- ACCEPT >=> 684ab5a9-9f1d-11ea-8894-333445793454 -->



# File: `java.org.apache.commons.collections4.list.AbstractListDecorator`

## Class: `java.org.apache.commons.collections4.list.AbstractListDecorator` / `implements List<E>`


        <!-- 684adc9b-9f1d-11ea-8895-333445793454 <=< ACCEPT -->
        Decorates another {@link List} to provide additional behaviour.
        <p>
        Methods are forwarded directly to the decorated list.
        @param <E> the type of the elements in the list
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 684adc9b-9f1d-11ea-8895-333445793454 -->



## Field: `java.org.apache.commons.collections4.list.AbstractListDecorator` / `private static final long serialVersionUID`


        <!-- 684adc9c-9f1d-11ea-8896-333445793454 <=< ACCEPT -->
        Serialization version--necessary in an abstract class?
        <!-- ACCEPT >=> 684adc9c-9f1d-11ea-8896-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.list.AbstractListDecorator` / `protected AbstractListDecorator()`


        <!-- 684adc9d-9f1d-11ea-8897-333445793454 <=< ACCEPT -->
        Constructor only used in deserialization, do not use otherwise.
        @since 3.1
        <!-- ACCEPT >=> 684adc9d-9f1d-11ea-8897-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.list.AbstractListDecorator` / `protected AbstractListDecorator(final List<E> list)`


        <!-- 684adc9e-9f1d-11ea-8898-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param list  the list to decorate, must not be null
        @throws NullPointerException if list is null
        <!-- ACCEPT >=> 684adc9e-9f1d-11ea-8898-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.AbstractListDecorator` / `protected List<E> decorated()`


        <!-- 684adc9f-9f1d-11ea-8899-333445793454 <=< ACCEPT -->
        Gets the list being decorated.
        @return the decorated list
        <!-- ACCEPT >=> 684adc9f-9f1d-11ea-8899-333445793454 -->



# File: `java.org.apache.commons.collections4.list.AbstractSerializableListDecorator`

## Class: `java.org.apache.commons.collections4.list.AbstractSerializableListDecorator` / `extends AbstractListDecorator<E>`


        <!-- 684adca0-9f1d-11ea-889a-333445793454 <=< ACCEPT -->
        Serializable subclass of AbstractListDecorator.
        @since 3.1
        @version $Id$
        <!-- ACCEPT >=> 684adca0-9f1d-11ea-889a-333445793454 -->



## Field: `java.org.apache.commons.collections4.list.AbstractSerializableListDecorator` / `private static final long serialVersionUID`


        <!-- 684adca1-9f1d-11ea-889b-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 684adca1-9f1d-11ea-889b-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.list.AbstractSerializableListDecorator` / `protected AbstractSerializableListDecorator(final List<E> list)`


        <!-- 684adca2-9f1d-11ea-889c-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param list  the list to decorate, must not be null
        @throws NullPointerException if list is null
        <!-- ACCEPT >=> 684adca2-9f1d-11ea-889c-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.AbstractSerializableListDecorator` / `private void writeObject(final ObjectOutputStream out) throws IOException`


        <!-- 684adca3-9f1d-11ea-889d-333445793454 <=< ACCEPT -->
        Write the list out using a custom routine.
        @param out  the output stream
        @throws IOException
        <!-- ACCEPT >=> 684adca3-9f1d-11ea-889d-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.AbstractSerializableListDecorator` / `private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException`


        <!-- 684adca4-9f1d-11ea-889e-333445793454 <=< ACCEPT -->
        Read the list in using a custom routine.
        @param in  the input stream
        @throws IOException
        @throws ClassNotFoundException
        <!-- ACCEPT >=> 684adca4-9f1d-11ea-889e-333445793454 -->



# File: `java.org.apache.commons.collections4.list.CursorableLinkedList`

## Class: `java.org.apache.commons.collections4.list.CursorableLinkedList` / `public class CursorableLinkedList<E> extends AbstractLinkedList<E> implements Serializable`


        <!-- 684adca5-9f1d-11ea-889f-333445793454 <=< ACCEPT -->
        A <code>List</code> implementation with a <code>ListIterator</code> that
        allows concurrent modifications to the underlying list.
        <p>
        This implementation supports all of the optional {@link List} operations.
        It extends <code>AbstractLinkedList</code> and thus provides the
        stack/queue/dequeue operations available in {@link java.util.LinkedList}.
        <p>
        The main feature of this class is the ability to modify the list and the
        iterator at the same time. Both the {@link #listIterator()} and {@link #cursor()}
        methods provides access to a <code>Cursor</code> instance which extends
        <code>ListIterator</code>. The cursor allows changes to the list concurrent
        with changes to the iterator. Note that the {@link #iterator()} method and
        sublists do <b>not</b> provide this cursor behaviour.
        <p>
        The <code>Cursor</code> class is provided partly for backwards compatibility
        and partly because it allows the cursor to be directly closed. Closing the
        cursor is optional because references are held via a <code>WeakReference</code>.
        For most purposes, simply modify the iterator and list at will, and then let
        the garbage collector to the rest.
        <p>
        <b>Note that this implementation is not synchronized.</b>
        @see java.util.LinkedList
        @since 1.0
        @version $Id$
        <!-- ACCEPT >=> 684adca5-9f1d-11ea-889f-333445793454 -->



## Field: `java.org.apache.commons.collections4.list.CursorableLinkedList` / `private static final long serialVersionUID`


        <!-- 684adca6-9f1d-11ea-88a0-333445793454 <=< ACCEPT -->
        Ensure serialization compatibility
        <!-- ACCEPT >=> 684adca6-9f1d-11ea-88a0-333445793454 -->



## Field: `java.org.apache.commons.collections4.list.CursorableLinkedList` / `private transient List<WeakReference<Cursor<E>>> cursors`


        <!-- 684adca7-9f1d-11ea-88a1-333445793454 <=< ACCEPT -->
        A list of the cursor currently open on this list
        <!-- ACCEPT >=> 684adca7-9f1d-11ea-88a1-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.list.CursorableLinkedList` / `public CursorableLinkedList()`


        <!-- 684adca8-9f1d-11ea-88a2-333445793454 <=< ACCEPT -->
        Constructor that creates.
        <!-- ACCEPT >=> 684adca8-9f1d-11ea-88a2-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.list.CursorableLinkedList` / `public CursorableLinkedList(final Collection<? extends E> coll)`


        <!-- 684adca9-9f1d-11ea-88a3-333445793454 <=< ACCEPT -->
        Constructor that copies the specified collection
        @param coll  the collection to copy
        <!-- ACCEPT >=> 684adca9-9f1d-11ea-88a3-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.CursorableLinkedList` / `protected void init()`


        <!-- 684adcaa-9f1d-11ea-88a4-333445793454 <=< ACCEPT -->
        The equivalent of a default constructor called
        by any constructor and by <code>readObject</code>.
        <!-- ACCEPT >=> 684adcaa-9f1d-11ea-88a4-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.CursorableLinkedList` / `public Iterator<E> iterator()`


        <!-- 684adcab-9f1d-11ea-88a5-333445793454 <=< ACCEPT -->
        Returns an iterator that does <b>not</b> support concurrent modification.
        <p>
        If the underlying list is modified while iterating using this iterator
        a ConcurrentModificationException will occur.
        The cursor behaviour is available via {@link #listIterator()}.
        @return a new iterator that does <b>not</b> support concurrent modification
        <!-- ACCEPT >=> 684adcab-9f1d-11ea-88a5-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.CursorableLinkedList` / `public ListIterator<E> listIterator()`


        <!-- 684adcac-9f1d-11ea-88a6-333445793454 <=< ACCEPT -->
        Returns a cursor iterator that allows changes to the underlying list in parallel.
        <p>
        The cursor enables iteration and list changes to occur in any order without
        invalidating the iterator (from one thread). When elements are added to the
        list, an event is fired to all active cursors enabling them to adjust to the
        change in the list.
        <p>
        When the "current" (i.e., last returned by {@link ListIterator#next}
        or {@link ListIterator#previous}) element of the list is removed,
        the cursor automatically adjusts to the change (invalidating the
        last returned value such that it cannot be removed).
        @return a new cursor iterator
        <!-- ACCEPT >=> 684adcac-9f1d-11ea-88a6-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.CursorableLinkedList` / `public ListIterator<E> listIterator(final int fromIndex)`


        <!-- 684adcad-9f1d-11ea-88a7-333445793454 <=< ACCEPT -->
        Returns a cursor iterator that allows changes to the underlying list in parallel.
        <p>
        The cursor enables iteration and list changes to occur in any order without
        invalidating the iterator (from one thread). When elements are added to the
        list, an event is fired to all active cursors enabling them to adjust to the
        change in the list.
        <p>
        When the "current" (i.e., last returned by {@link ListIterator#next}
        or {@link ListIterator#previous}) element of the list is removed,
        the cursor automatically adjusts to the change (invalidating the
        last returned value such that it cannot be removed).
        @param fromIndex  the index to start from
        @return a new cursor iterator
        <!-- ACCEPT >=> 684adcad-9f1d-11ea-88a7-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.CursorableLinkedList` / `public CursorableLinkedList.Cursor<E> cursor()`


        <!-- 684adcae-9f1d-11ea-88a8-333445793454 <=< ACCEPT -->
        Returns a {@link Cursor} for iterating through the elements of this list.
        <p>
        A <code>Cursor</code> is a <code>ListIterator</code> with an additional
        <code>close()</code> method. Calling this method immediately discards the
        references to the cursor. If it is not called, then the garbage collector
        will still remove the reference as it is held via a <code>WeakReference</code>.
        <p>
        The cursor enables iteration and list changes to occur in any order without
        invalidating the iterator (from one thread). When elements are added to the
        list, an event is fired to all active cursors enabling them to adjust to the
        change in the list.
        <p>
        When the "current" (i.e., last returned by {@link ListIterator#next}
        or {@link ListIterator#previous}) element of the list is removed,
        the cursor automatically adjusts to the change (invalidating the
        last returned value such that it cannot be removed).
        <p>
        The {@link #listIterator()} method returns the same as this method, and can
        be cast to a <code>Cursor</code> if the <code>close</code> method is required.
        @return a new cursor iterator
        <!-- ACCEPT >=> 684adcae-9f1d-11ea-88a8-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.CursorableLinkedList` / `public CursorableLinkedList.Cursor<E> cursor(final int fromIndex)`


        <!-- 684b03a4-9f1d-11ea-88a9-333445793454 <=< ACCEPT -->
        Returns a {@link Cursor} for iterating through the elements of this list
        starting from a specified index.
        <p>
        A <code>Cursor</code> is a <code>ListIterator</code> with an additional
        <code>close()</code> method. Calling this method immediately discards the
        references to the cursor. If it is not called, then the garbage collector
        will still remove the reference as it is held via a <code>WeakReference</code>.
        <p>
        The cursor enables iteration and list changes to occur in any order without
        invalidating the iterator (from one thread). When elements are added to the
        list, an event is fired to all active cursors enabling them to adjust to the
        change in the list.
        <p>
        When the "current" (i.e., last returned by {@link ListIterator#next}
        or {@link ListIterator#previous}) element of the list is removed,
        the cursor automatically adjusts to the change (invalidating the
        last returned value such that it cannot be removed).
        <p>
        The {@link #listIterator(int)} method returns the same as this method, and can
        be cast to a <code>Cursor</code> if the <code>close</code> method is required.
        @param fromIndex  the index to start from
        @return a new cursor iterator
        @throws IndexOutOfBoundsException if the index is out of range
        (index &lt; 0 || index &gt; size()).
        <!-- ACCEPT >=> 684b03a4-9f1d-11ea-88a9-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.CursorableLinkedList` / `protected void updateNode(final Node<E> node, final E value)`


        <!-- 684b03a5-9f1d-11ea-88aa-333445793454 <=< ACCEPT -->
        Updates the node with a new value.
        This implementation sets the value on the node.
        Subclasses can override this to record the change.
        @param node  node to update
        @param value  new value of the node
        <!-- ACCEPT >=> 684b03a5-9f1d-11ea-88aa-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.CursorableLinkedList` / `protected void addNode(final Node<E> nodeToInsert, final Node<E> insertBeforeNode)`


        <!-- 684b03a6-9f1d-11ea-88ab-333445793454 <=< ACCEPT -->
        Inserts a new node into the list.
        @param nodeToInsert  new node to insert
        @param insertBeforeNode  node to insert before
        @throws NullPointerException if either node is null
        <!-- ACCEPT >=> 684b03a6-9f1d-11ea-88ab-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.CursorableLinkedList` / `protected void removeNode(final Node<E> node)`


        <!-- 684b03a7-9f1d-11ea-88ac-333445793454 <=< ACCEPT -->
        Removes the specified node from the list.
        @param node  the node to remove
        @throws NullPointerException if <code>node</code> is null
        <!-- ACCEPT >=> 684b03a7-9f1d-11ea-88ac-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.CursorableLinkedList` / `protected void removeAllNodes()`


        <!-- 684b03a8-9f1d-11ea-88ad-333445793454 <=< ACCEPT -->
        Removes all nodes by iteration.
        <!-- ACCEPT >=> 684b03a8-9f1d-11ea-88ad-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.CursorableLinkedList` / `protected void registerCursor(final Cursor<E> cursor)`


        <!-- 684b03a9-9f1d-11ea-88ae-333445793454 <=< ACCEPT -->
        Registers a cursor to be notified of changes to this list.
        @param cursor  the cursor to register
        <!-- ACCEPT >=> 684b03a9-9f1d-11ea-88ae-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.CursorableLinkedList` / `protected void unregisterCursor(final Cursor<E> cursor)`


        <!-- 684b03aa-9f1d-11ea-88af-333445793454 <=< ACCEPT -->
        Deregisters a cursor from the list to be notified of changes.
        @param cursor  the cursor to deregister
        <!-- ACCEPT >=> 684b03aa-9f1d-11ea-88af-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.CursorableLinkedList` / `protected void broadcastNodeChanged(final Node<E> node)`


        <!-- 684b03ab-9f1d-11ea-88b0-333445793454 <=< ACCEPT -->
        Informs all of my registered cursors that the specified
        element was changed.
        @param node  the node that was changed
        <!-- ACCEPT >=> 684b03ab-9f1d-11ea-88b0-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.CursorableLinkedList` / `protected void broadcastNodeRemoved(final Node<E> node)`


        <!-- 684b03ac-9f1d-11ea-88b1-333445793454 <=< ACCEPT -->
        Informs all of my registered cursors that the specified
        element was just removed from my list.
        @param node  the node that was changed
        <!-- ACCEPT >=> 684b03ac-9f1d-11ea-88b1-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.CursorableLinkedList` / `protected void broadcastNodeInserted(final Node<E> node)`


        <!-- 684b03ad-9f1d-11ea-88b2-333445793454 <=< ACCEPT -->
        Informs all of my registered cursors that the specified
        element was just added to my list.
        @param node  the node that was changed
        <!-- ACCEPT >=> 684b03ad-9f1d-11ea-88b2-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.CursorableLinkedList` / `private void writeObject(final ObjectOutputStream out) throws IOException`


        <!-- 684b03ae-9f1d-11ea-88b3-333445793454 <=< ACCEPT -->
        Serializes the data held in this object to the stream specified.
        <!-- ACCEPT >=> 684b03ae-9f1d-11ea-88b3-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.CursorableLinkedList` / `private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException`


        <!-- 684b03af-9f1d-11ea-88b4-333445793454 <=< ACCEPT -->
        Deserializes the data held in this object to the stream specified.
        <!-- ACCEPT >=> 684b03af-9f1d-11ea-88b4-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.CursorableLinkedList` / `protected ListIterator<E> createSubListListIterator(final LinkedSubList<E> subList, final int fromIndex)`


        <!-- 684b03b0-9f1d-11ea-88b5-333445793454 <=< ACCEPT -->
        Creates a list iterator for the sublist.
        @param subList  the sublist to get an iterator for
        @param fromIndex  the index to start from, relative to the sublist
        @return the list iterator for the sublist
        <!-- ACCEPT >=> 684b03b0-9f1d-11ea-88b5-333445793454 -->



## Class: `java.org.apache.commons.collections4.list.CursorableLinkedList` / `public static class Cursor<E> extends AbstractLinkedList.LinkedListIterator<E>`


        <!-- 684b03b1-9f1d-11ea-88b6-333445793454 <=< ACCEPT -->
        An extended <code>ListIterator</code> that allows concurrent changes to
        the underlying list.
        <!-- ACCEPT >=> 684b03b1-9f1d-11ea-88b6-333445793454 -->



## Field: `java.org.apache.commons.collections4.list.CursorableLinkedList` / `boolean valid`


        <!-- 684b03b2-9f1d-11ea-88b7-333445793454 <=< ACCEPT -->
        Is the cursor valid (not closed)
        <!-- ACCEPT >=> 684b03b2-9f1d-11ea-88b7-333445793454 -->



## Field: `java.org.apache.commons.collections4.list.CursorableLinkedList` / `boolean nextIndexValid`


        <!-- 684b03b3-9f1d-11ea-88b8-333445793454 <=< ACCEPT -->
        Is the next index valid
        <!-- ACCEPT >=> 684b03b3-9f1d-11ea-88b8-333445793454 -->



## Field: `java.org.apache.commons.collections4.list.CursorableLinkedList` / `boolean currentRemovedByAnother`


        <!-- 684b03b4-9f1d-11ea-88b9-333445793454 <=< ACCEPT -->
        Flag to indicate if the current element was removed by another object.
        <!-- ACCEPT >=> 684b03b4-9f1d-11ea-88b9-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.list.CursorableLinkedList` / `protected Cursor(final CursorableLinkedList<E> parent, final int index)`


        <!-- 684b03b5-9f1d-11ea-88ba-333445793454 <=< ACCEPT -->
        Constructs a new cursor.
        @param parent  the parent list
        @param index  the index to start from
        <!-- ACCEPT >=> 684b03b5-9f1d-11ea-88ba-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.CursorableLinkedList` / `public void remove()`


        <!-- 684b03b6-9f1d-11ea-88bb-333445793454 <=< ACCEPT -->
        Removes the item last returned by this iterator.
        <p>
        There may have been subsequent alterations to the list
        since you obtained this item, however you can still remove it.
        You can even remove it if the item is no longer in the main list.
        However, you can't call this method on the same iterator more
        than once without calling next() or previous().
        @throws IllegalStateException if there is no item to remove
        <!-- ACCEPT >=> 684b03b6-9f1d-11ea-88bb-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.CursorableLinkedList` / `public void add(final E obj)`


        <!-- 684b03b7-9f1d-11ea-88bc-333445793454 <=< ACCEPT -->
        Adds an object to the list.
        The object added here will be the new 'previous' in the iterator.
        @param obj  the object to add
        <!-- ACCEPT >=> 684b03b7-9f1d-11ea-88bc-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.CursorableLinkedList` / `public int nextIndex()`


        <!-- 684b03b8-9f1d-11ea-88bd-333445793454 <=< ACCEPT -->
        Gets the index of the next element to be returned.
        @return the next index
        <!-- ACCEPT >=> 684b03b8-9f1d-11ea-88bd-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.CursorableLinkedList` / `protected void nodeChanged(final Node<E> node)`


        <!-- 684b03b9-9f1d-11ea-88be-333445793454 <=< ACCEPT -->
        Handle event from the list when a node has changed.
        @param node  the node that changed
        <!-- ACCEPT >=> 684b03b9-9f1d-11ea-88be-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.CursorableLinkedList` / `protected void nodeRemoved(final Node<E> node)`


        <!-- 684b03ba-9f1d-11ea-88bf-333445793454 <=< ACCEPT -->
        Handle event from the list when a node has been removed.
        @param node  the node that was removed
        <!-- ACCEPT >=> 684b03ba-9f1d-11ea-88bf-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.CursorableLinkedList` / `protected void nodeInserted(final Node<E> node)`


        <!-- 684b2aae-9f1d-11ea-88c0-333445793454 <=< ACCEPT -->
        Handle event from the list when a node has been added.
        @param node  the node that was added
        <!-- ACCEPT >=> 684b2aae-9f1d-11ea-88c0-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.CursorableLinkedList` / `protected void checkModCount()`


        <!-- 684b2aaf-9f1d-11ea-88c1-333445793454 <=< ACCEPT -->
        Override superclass modCount check, and replace it with our valid flag.
        <!-- ACCEPT >=> 684b2aaf-9f1d-11ea-88c1-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.CursorableLinkedList` / `public void close()`


        <!-- 684b2ab0-9f1d-11ea-88c2-333445793454 <=< ACCEPT -->
        Mark this cursor as no longer being needed. Any resources
        associated with this cursor are immediately released.
        In previous versions of this class, it was mandatory to close
        all cursor objects to avoid memory leaks. It is <i>no longer</i>
        necessary to call this close method; an instance of this class
        can now be treated exactly like a normal iterator.
        <!-- ACCEPT >=> 684b2ab0-9f1d-11ea-88c2-333445793454 -->



## Class: `java.org.apache.commons.collections4.list.CursorableLinkedList` / `protected static class SubCursor<E> extends Cursor<E>`


        <!-- 684b2ab1-9f1d-11ea-88c3-333445793454 <=< ACCEPT -->
        A cursor for the sublist based on LinkedSubListIterator.
        @since 3.2
        <!-- ACCEPT >=> 684b2ab1-9f1d-11ea-88c3-333445793454 -->



## Field: `java.org.apache.commons.collections4.list.CursorableLinkedList` / `protected final LinkedSubList<E> sub`


        <!-- 684b2ab2-9f1d-11ea-88c4-333445793454 <=< ACCEPT -->
        The parent list
        <!-- ACCEPT >=> 684b2ab2-9f1d-11ea-88c4-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.list.CursorableLinkedList` / `protected SubCursor(final LinkedSubList<E> sub, final int index)`


        <!-- 684b2ab3-9f1d-11ea-88c5-333445793454 <=< ACCEPT -->
        Constructs a new cursor.
        @param sub  the sub list
        @param index  the index to start from
        <!-- ACCEPT >=> 684b2ab3-9f1d-11ea-88c5-333445793454 -->



# File: `java.org.apache.commons.collections4.list.FixedSizeList`

## Class: `java.org.apache.commons.collections4.list.FixedSizeList` / `implements BoundedCollection<E>`


        <!-- 684b2ab4-9f1d-11ea-88c6-333445793454 <=< ACCEPT -->
        Decorates another <code>List</code> to fix the size preventing add/remove.
        <p>
        The add, remove, clear and retain operations are unsupported.
        The set method is allowed (as it doesn't change the list size).
        <p>
        This class is Serializable from Commons Collections 3.1.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 684b2ab4-9f1d-11ea-88c6-333445793454 -->



## Field: `java.org.apache.commons.collections4.list.FixedSizeList` / `private static final long serialVersionUID`


        <!-- 684b2ab5-9f1d-11ea-88c7-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 684b2ab5-9f1d-11ea-88c7-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.FixedSizeList` / `public static <E> FixedSizeList<E> fixedSizeList(final List<E> list)`


        <!-- 684b2ab6-9f1d-11ea-88c8-333445793454 <=< ACCEPT -->
        Factory method to create a fixed size list.
        @param <E> the type of the elements in the list
        @param list  the list to decorate, must not be null
        @return a new fixed size list
        @throws NullPointerException if list is null
        @since 4.0
        <!-- ACCEPT >=> 684b2ab6-9f1d-11ea-88c8-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.list.FixedSizeList` / `protected FixedSizeList(final List<E> list)`


        <!-- 684b2ab7-9f1d-11ea-88c9-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param list  the list to decorate, must not be null
        @throws NullPointerException if list is null
        <!-- ACCEPT >=> 684b2ab7-9f1d-11ea-88c9-333445793454 -->



## Class: `java.org.apache.commons.collections4.list.FixedSizeList` / `private class FixedSizeListIterator extends AbstractListIteratorDecorator<E>`


        <!-- 684b2ab8-9f1d-11ea-88ca-333445793454 <=< ACCEPT -->
        List iterator that only permits changes via set()
        <!-- ACCEPT >=> 684b2ab8-9f1d-11ea-88ca-333445793454 -->



# File: `java.org.apache.commons.collections4.list.GrowthList`

## Class: `java.org.apache.commons.collections4.list.GrowthList` / `public class GrowthList<E> extends AbstractSerializableListDecorator<E>`


        <!-- 684b2ab9-9f1d-11ea-88cb-333445793454 <=< ACCEPT -->
        Decorates another <code>List</code> to make it seamlessly grow when
        indices larger than the list size are used on add and set,
        avoiding most IndexOutOfBoundsExceptions.
        <p>
        This class avoids errors by growing when a set or add method would
        normally throw an IndexOutOfBoundsException.
        Note that IndexOutOfBoundsException IS returned for invalid negative indices.
        <p>
        Trying to set or add to an index larger than the size will cause the list
        to grow (using <code>null</code> elements). Clearly, care must be taken
        not to use excessively large indices, as the internal list will grow to
        match.
        <p>
        Trying to use any method other than add or set with an invalid index will
        call the underlying list and probably result in an IndexOutOfBoundsException.
        <p>
        Take care when using this list with <code>null</code> values, as
        <code>null</code> is the value added when growing the list.
        <p>
        All sub-lists will access the underlying list directly, and will throw
        IndexOutOfBoundsExceptions.
        <p>
        This class differs from {@link LazyList} because here growth occurs on
        set and add, where <code>LazyList</code> grows on get. However, they
        can be used together by decorating twice.
        @see LazyList
        @since 3.2
        @version $Id$
        <!-- ACCEPT >=> 684b2ab9-9f1d-11ea-88cb-333445793454 -->



## Field: `java.org.apache.commons.collections4.list.GrowthList` / `private static final long serialVersionUID`


        <!-- 684b2aba-9f1d-11ea-88cc-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 684b2aba-9f1d-11ea-88cc-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.GrowthList` / `public static <E> GrowthList<E> growthList(final List<E> list)`


        <!-- 684b2abb-9f1d-11ea-88cd-333445793454 <=< ACCEPT -->
        Factory method to create a growth list.
        @param <E> the type of the elements in the list
        @param list  the list to decorate, must not be null
        @return a new growth list
        @throws NullPointerException if list is null
        @since 4.0
        <!-- ACCEPT >=> 684b2abb-9f1d-11ea-88cd-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.list.GrowthList` / `public GrowthList()`


        <!-- 684b2abc-9f1d-11ea-88ce-333445793454 <=< ACCEPT -->
        Constructor that uses an ArrayList internally.
        <!-- ACCEPT >=> 684b2abc-9f1d-11ea-88ce-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.list.GrowthList` / `public GrowthList(final int initialSize)`


        <!-- 684b2abd-9f1d-11ea-88cf-333445793454 <=< ACCEPT -->
        Constructor that uses an ArrayList internally.
        @param initialSize  the initial size of the ArrayList
        @throws IllegalArgumentException if initial size is invalid
        <!-- ACCEPT >=> 684b2abd-9f1d-11ea-88cf-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.list.GrowthList` / `protected GrowthList(final List<E> list)`


        <!-- 684b2abe-9f1d-11ea-88d0-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param list  the list to decorate, must not be null
        @throws NullPointerException if list is null
        <!-- ACCEPT >=> 684b2abe-9f1d-11ea-88d0-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.GrowthList` / `public void add(final int index, final E element)`


        <!-- 684b2abf-9f1d-11ea-88d1-333445793454 <=< ACCEPT -->
        Decorate the add method to perform the growth behaviour.
        <p>
        If the requested index is greater than the current size, the list will
        grow to the new size. Indices between the old size and the requested
        size will be filled with <code>null</code>.
        <p>
        If the index is less than the current size, the value will be added to
        the underlying list directly.
        If the index is less than zero, the underlying list is called, which
        will probably throw an IndexOutOfBoundsException.
        @param index  the index to add at
        @param element  the object to add at the specified index
        @throws UnsupportedOperationException if the underlying list doesn't implement set
        @throws ClassCastException if the underlying list rejects the element
        @throws IllegalArgumentException if the underlying list rejects the element
        <!-- ACCEPT >=> 684b2abf-9f1d-11ea-88d1-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.GrowthList` / `public boolean addAll(final int index, final Collection<? extends E> coll)`


        <!-- 684b2ac0-9f1d-11ea-88d2-333445793454 <=< ACCEPT -->
        Decorate the addAll method to perform the growth behaviour.
        <p>
        If the requested index is greater than the current size, the list will
        grow to the new size. Indices between the old size and the requested
        size will be filled with <code>null</code>.
        <p>
        If the index is less than the current size, the values will be added to
        the underlying list directly.
        If the index is less than zero, the underlying list is called, which
        will probably throw an IndexOutOfBoundsException.
        @param index  the index to add at
        @param coll  the collection to add at the specified index
        @return true if the list changed
        @throws UnsupportedOperationException if the underlying list doesn't implement set
        @throws ClassCastException if the underlying list rejects the element
        @throws IllegalArgumentException if the underlying list rejects the element
        <!-- ACCEPT >=> 684b2ac0-9f1d-11ea-88d2-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.GrowthList` / `public E set(final int index, final E element)`


        <!-- 684b51b8-9f1d-11ea-88d3-333445793454 <=< ACCEPT -->
        Decorate the set method to perform the growth behaviour.
        <p>
        If the requested index is greater than the current size, the list will
        grow to the new size. Indices between the old size and the requested
        size will be filled with <code>null</code>.
        <p>
        If the index is less than the current size, the value will be set onto
        the underlying list directly.
        If the index is less than zero, the underlying list is called, which
        will probably throw an IndexOutOfBoundsException.
        @param index  the index to set
        @param element  the object to set at the specified index
        @return the object previously at that index
        @throws UnsupportedOperationException if the underlying list doesn't implement set
        @throws ClassCastException if the underlying list rejects the element
        @throws IllegalArgumentException if the underlying list rejects the element
        <!-- ACCEPT >=> 684b51b8-9f1d-11ea-88d3-333445793454 -->



# File: `java.org.apache.commons.collections4.list.LazyList`

## Class: `java.org.apache.commons.collections4.list.LazyList` / `public class LazyList<E> extends AbstractSerializableListDecorator<E>`


        <!-- 684b51b9-9f1d-11ea-88d4-333445793454 <=< ACCEPT -->
        Decorates another <code>List</code> to create objects in the list on demand.
        <p>
        When the {@link #get(int)} method is called with an index greater than
        the size of the list, the list will automatically grow in size and return
        a new object from the specified factory. The gaps will be filled by null.
        If a get method call encounters a null, it will be replaced with a new
        object from the factory. Thus this list is unsuitable for storing null
        objects.
        <p>
        For instance:
        <pre>
        Factory&lt;Date&gt; factory = new Factory&lt;Date&gt;() {
        public Date create() {
        return new Date();
        }
        }
        List&lt;Date&gt; lazy = LazyList.decorate(new ArrayList&lt;Date&gt;(), factory);
        Date date = lazy.get(3);
        </pre>
        After the above code is executed, <code>date</code> will contain
        a new <code>Date</code> instance.  Furthermore, that <code>Date</code>
        instance is the fourth element in the list.  The first, second,
        and third element are all set to <code>null</code>.
        <p>
        This class differs from {@link GrowthList} because here growth occurs on
        get, where <code>GrowthList</code> grows on set and add. However, they
        could easily be used together by decorating twice.
        <p>
        This class is Serializable from Commons Collections 3.1.
        @see GrowthList
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 684b51b9-9f1d-11ea-88d4-333445793454 -->



## Field: `java.org.apache.commons.collections4.list.LazyList` / `private static final long serialVersionUID`


        <!-- 684b51ba-9f1d-11ea-88d5-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 684b51ba-9f1d-11ea-88d5-333445793454 -->



## Field: `java.org.apache.commons.collections4.list.LazyList` / `private final Factory<? extends E> factory`


        <!-- 684b51bb-9f1d-11ea-88d6-333445793454 <=< ACCEPT -->
        The factory to use to lazily instantiate the objects
        <!-- ACCEPT >=> 684b51bb-9f1d-11ea-88d6-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.LazyList` / `public static <E> LazyList<E> lazyList(final List<E> list, final Factory<? extends E> factory)`


        <!-- 684b51bc-9f1d-11ea-88d7-333445793454 <=< ACCEPT -->
        Factory method to create a lazily instantiating list.
        @param <E> the type of the elements in the list
        @param list  the list to decorate, must not be null
        @param factory  the factory to use for creation, must not be null
        @return a new lazy list
        @throws NullPointerException if list or factory is null
        @since 4.0
        <!-- ACCEPT >=> 684b51bc-9f1d-11ea-88d7-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.list.LazyList` / `protected LazyList(final List<E> list, final Factory<? extends E> factory)`


        <!-- 684b51bd-9f1d-11ea-88d8-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param list  the list to decorate, must not be null
        @param factory  the factory to use for creation, must not be null
        @throws NullPointerException if list or factory is null
        <!-- ACCEPT >=> 684b51bd-9f1d-11ea-88d8-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.LazyList` / `public E get(final int index)`


        <!-- 684b51be-9f1d-11ea-88d9-333445793454 <=< ACCEPT -->
        Decorate the get method to perform the lazy behaviour.
        <p>
        If the requested index is greater than the current size, the list will
        grow to the new size and a new object will be returned from the factory.
        Indexes in-between the old size and the requested size are left with a
        placeholder that is replaced with a factory object when requested.
        @param index  the index to retrieve
        @return the element at the given index
        <!-- ACCEPT >=> 684b51be-9f1d-11ea-88d9-333445793454 -->



# File: `java.org.apache.commons.collections4.list.NodeCachingLinkedList`

## Class: `java.org.apache.commons.collections4.list.NodeCachingLinkedList` / `public class NodeCachingLinkedList<E> extends AbstractLinkedList<E> implements Serializable`


        <!-- 684b51bf-9f1d-11ea-88da-333445793454 <=< ACCEPT -->
        A <code>List</code> implementation that stores a cache of internal Node objects
        in an effort to reduce wasteful object creation.
        <p>
        A linked list creates one Node for each item of data added. This can result in
        a lot of object creation and garbage collection. This implementation seeks to
        avoid that by maintaining a store of cached nodes.
        <p>
        This implementation is suitable for long-lived lists where both add and remove
        are used. Short-lived lists, or lists which only grow will have worse performance
        using this class.
        <p>
        <b>Note that this implementation is not synchronized.</b>
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 684b51bf-9f1d-11ea-88da-333445793454 -->



## Field: `java.org.apache.commons.collections4.list.NodeCachingLinkedList` / `private static final long serialVersionUID`


        <!-- 684b51c0-9f1d-11ea-88db-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 684b51c0-9f1d-11ea-88db-333445793454 -->



## Field: `java.org.apache.commons.collections4.list.NodeCachingLinkedList` / `private static final int DEFAULT_MAXIMUM_CACHE_SIZE`


        <!-- 684b51c1-9f1d-11ea-88dc-333445793454 <=< ACCEPT -->
        The default value for {@link #maximumCacheSize}.
        <!-- ACCEPT >=> 684b51c1-9f1d-11ea-88dc-333445793454 -->



## Field: `java.org.apache.commons.collections4.list.NodeCachingLinkedList` / `private transient Node<E> firstCachedNode`


        <!-- 684b51c2-9f1d-11ea-88dd-333445793454 <=< ACCEPT -->
        The first cached node, or <code>null</code> if no nodes are cached.
        Cached nodes are stored in a singly-linked list with
        <code>next</code> pointing to the next element.
        <!-- ACCEPT >=> 684b51c2-9f1d-11ea-88dd-333445793454 -->



## Field: `java.org.apache.commons.collections4.list.NodeCachingLinkedList` / `private transient int cacheSize`


        <!-- 684b51c3-9f1d-11ea-88de-333445793454 <=< ACCEPT -->
        The size of the cache.
        <!-- ACCEPT >=> 684b51c3-9f1d-11ea-88de-333445793454 -->



## Field: `java.org.apache.commons.collections4.list.NodeCachingLinkedList` / `private int maximumCacheSize`


        <!-- 684b51c4-9f1d-11ea-88df-333445793454 <=< ACCEPT -->
        The maximum size of the cache.
        <!-- ACCEPT >=> 684b51c4-9f1d-11ea-88df-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.list.NodeCachingLinkedList` / `public NodeCachingLinkedList()`


        <!-- 684b51c5-9f1d-11ea-88e0-333445793454 <=< ACCEPT -->
        Constructor that creates.
        <!-- ACCEPT >=> 684b51c5-9f1d-11ea-88e0-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.list.NodeCachingLinkedList` / `public NodeCachingLinkedList(final Collection<? extends E> coll)`


        <!-- 684b51c6-9f1d-11ea-88e1-333445793454 <=< ACCEPT -->
        Constructor that copies the specified collection
        @param coll  the collection to copy
        <!-- ACCEPT >=> 684b51c6-9f1d-11ea-88e1-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.list.NodeCachingLinkedList` / `public NodeCachingLinkedList(final int maximumCacheSize)`


        <!-- 684b51c7-9f1d-11ea-88e2-333445793454 <=< ACCEPT -->
        Constructor that species the maximum cache size.
        @param maximumCacheSize  the maximum cache size
        <!-- ACCEPT >=> 684b51c7-9f1d-11ea-88e2-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.NodeCachingLinkedList` / `protected int getMaximumCacheSize()`


        <!-- 684b51c8-9f1d-11ea-88e3-333445793454 <=< ACCEPT -->
        Gets the maximum size of the cache.
        @return the maximum cache size
        <!-- ACCEPT >=> 684b51c8-9f1d-11ea-88e3-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.NodeCachingLinkedList` / `protected void setMaximumCacheSize(final int maximumCacheSize)`


        <!-- 684b51c9-9f1d-11ea-88e4-333445793454 <=< ACCEPT -->
        Sets the maximum size of the cache.
        @param maximumCacheSize  the new maximum cache size
        <!-- ACCEPT >=> 684b51c9-9f1d-11ea-88e4-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.NodeCachingLinkedList` / `protected void shrinkCacheToMaximumSize()`


        <!-- 684b51ca-9f1d-11ea-88e5-333445793454 <=< ACCEPT -->
        Reduce the size of the cache to the maximum, if necessary.
        <!-- ACCEPT >=> 684b51ca-9f1d-11ea-88e5-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.NodeCachingLinkedList` / `protected Node<E> getNodeFromCache()`


        <!-- 684b51cb-9f1d-11ea-88e6-333445793454 <=< ACCEPT -->
        Gets a node from the cache. If a node is returned, then the value of
        {@link #cacheSize} is decreased accordingly. The node that is returned
        will have <code>null</code> values for next, previous and element.
        @return a node, or <code>null</code> if there are no nodes in the cache.
        <!-- ACCEPT >=> 684b51cb-9f1d-11ea-88e6-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.NodeCachingLinkedList` / `protected boolean isCacheFull()`


        <!-- 684b51cc-9f1d-11ea-88e7-333445793454 <=< ACCEPT -->
        Checks whether the cache is full.
        @return true if the cache is full
        <!-- ACCEPT >=> 684b51cc-9f1d-11ea-88e7-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.NodeCachingLinkedList` / `protected void addNodeToCache(final Node<E> node)`


        <!-- 684b51cd-9f1d-11ea-88e8-333445793454 <=< ACCEPT -->
        Adds a node to the cache, if the cache isn't full.
        The node's contents are cleared to so they can be garbage collected.
        @param node  the node to add to the cache
        <!-- ACCEPT >=> 684b51cd-9f1d-11ea-88e8-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.NodeCachingLinkedList` / `protected Node<E> createNode(final E value)`


        <!-- 684b78c2-9f1d-11ea-88e9-333445793454 <=< ACCEPT -->
        Creates a new node, either by reusing one from the cache or creating
        a new one.
        @param value  value of the new node
        @return the newly created node
        <!-- ACCEPT >=> 684b78c2-9f1d-11ea-88e9-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.NodeCachingLinkedList` / `protected void removeNode(final Node<E> node)`


        <!-- 684b78c3-9f1d-11ea-88ea-333445793454 <=< ACCEPT -->
        Removes the node from the list, storing it in the cache for reuse
        if the cache is not yet full.
        @param node  the node to remove
        <!-- ACCEPT >=> 684b78c3-9f1d-11ea-88ea-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.NodeCachingLinkedList` / `protected void removeAllNodes()`


        <!-- 684b78c4-9f1d-11ea-88eb-333445793454 <=< ACCEPT -->
        Removes all the nodes from the list, storing as many as required in the
        cache for reuse.
        <!-- ACCEPT >=> 684b78c4-9f1d-11ea-88eb-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.NodeCachingLinkedList` / `private void writeObject(final ObjectOutputStream out) throws IOException`


        <!-- 684b78c5-9f1d-11ea-88ec-333445793454 <=< ACCEPT -->
        Serializes the data held in this object to the stream specified.
        <!-- ACCEPT >=> 684b78c5-9f1d-11ea-88ec-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.NodeCachingLinkedList` / `private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException`


        <!-- 684b78c6-9f1d-11ea-88ed-333445793454 <=< ACCEPT -->
        Deserializes the data held in this object to the stream specified.
        <!-- ACCEPT >=> 684b78c6-9f1d-11ea-88ed-333445793454 -->



# File: `java.org.apache.commons.collections4.list.PredicatedList`

## Class: `java.org.apache.commons.collections4.list.PredicatedList` / `public class PredicatedList<E> extends PredicatedCollection<E> implements List<E>`


        <!-- 684b78c7-9f1d-11ea-88ee-333445793454 <=< ACCEPT -->
        Decorates another <code>List</code> to validate that all additions
        match a specified predicate.
        <p>
        This list exists to provide validation for the decorated list.
        It is normally created to decorate an empty list.
        If an object cannot be added to the list, an IllegalArgumentException is thrown.
        <p>
        One usage would be to ensure that no null entries are added to the list.
        <pre>
        {@code
        List<String> list =
        PredicatedList.predicatedList(new ArrayList<String>(), PredicateUtils.notNullPredicate());
        }
        </pre>
        <p>
        This class is Serializable from Commons Collections 3.1.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 684b78c7-9f1d-11ea-88ee-333445793454 -->



## Field: `java.org.apache.commons.collections4.list.PredicatedList` / `private static final long serialVersionUID`


        <!-- 684b78c8-9f1d-11ea-88ef-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 684b78c8-9f1d-11ea-88ef-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.PredicatedList` / `public static <T> PredicatedList<T> predicatedList(final List<T> list, final Predicate<? super T> predicate)`


        <!-- 684b78c9-9f1d-11ea-88f0-333445793454 <=< ACCEPT -->
        Factory method to create a predicated (validating) list.
        <p>
        If there are any elements already in the list being decorated, they
        are validated.
        @param <T> the type of the elements in the list
        @param list  the list to decorate, must not be null
        @param predicate  the predicate to use for validation, must not be null
        @return a new predicated list
        @throws NullPointerException if list or predicate is null
        @throws IllegalArgumentException if the list contains invalid elements
        @since 4.0
        <!-- ACCEPT >=> 684b78c9-9f1d-11ea-88f0-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.list.PredicatedList` / `protected PredicatedList(final List<E> list, final Predicate<? super E> predicate)`


        <!-- 684b78ca-9f1d-11ea-88f1-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        <p>
        If there are any elements already in the list being decorated, they
        are validated.
        @param list  the list to decorate, must not be null
        @param predicate  the predicate to use for validation, must not be null
        @throws NullPointerException if list or predicate is null
        @throws IllegalArgumentException if the list contains invalid elements
        <!-- ACCEPT >=> 684b78ca-9f1d-11ea-88f1-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.PredicatedList` / `protected List<E> decorated()`


        <!-- 684b78cb-9f1d-11ea-88f2-333445793454 <=< ACCEPT -->
        Gets the list being decorated.
        @return the decorated list
        <!-- ACCEPT >=> 684b78cb-9f1d-11ea-88f2-333445793454 -->



## Class: `java.org.apache.commons.collections4.list.PredicatedList` / `protected class PredicatedListIterator extends AbstractListIteratorDecorator<E>`


        <!-- 684b78cc-9f1d-11ea-88f3-333445793454 <=< ACCEPT -->
        Inner class Iterator for the PredicatedList
        <!-- ACCEPT >=> 684b78cc-9f1d-11ea-88f3-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.list.PredicatedList` / `protected PredicatedListIterator(final ListIterator<E> iterator)`


        <!-- 684b78cd-9f1d-11ea-88f4-333445793454 <=< ACCEPT -->
        Create a new predicated list iterator.
        @param iterator  the list iterator to decorate
        <!-- ACCEPT >=> 684b78cd-9f1d-11ea-88f4-333445793454 -->



# File: `java.org.apache.commons.collections4.list.SetUniqueList`

## Class: `java.org.apache.commons.collections4.list.SetUniqueList` / `public class SetUniqueList<E> extends AbstractSerializableListDecorator<E>`


        <!-- 684b78ce-9f1d-11ea-88f5-333445793454 <=< ACCEPT -->
        Decorates a <code>List</code> to ensure that no duplicates are present much
        like a <code>Set</code>.
        <p>
        The <code>List</code> interface makes certain assumptions/requirements. This
        implementation breaks these in certain ways, but this is merely the result of
        rejecting duplicates. Each violation is explained in the method, but it
        should not affect you. Bear in mind that Sets require immutable objects to
        function correctly.
        <p>
        The {@link org.apache.commons.collections4.set.ListOrderedSet ListOrderedSet}
        class provides an alternative approach, by wrapping an existing Set and
        retaining insertion order in the iterator.
        <p>
        This class is Serializable from Commons Collections 3.1.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 684b78ce-9f1d-11ea-88f5-333445793454 -->



## Field: `java.org.apache.commons.collections4.list.SetUniqueList` / `private static final long serialVersionUID`


        <!-- 684b78cf-9f1d-11ea-88f6-333445793454 <=< ACCEPT -->
        Serialization version.
        <!-- ACCEPT >=> 684b78cf-9f1d-11ea-88f6-333445793454 -->



## Field: `java.org.apache.commons.collections4.list.SetUniqueList` / `private final Set<E> set`


        <!-- 684b78d0-9f1d-11ea-88f7-333445793454 <=< ACCEPT -->
        Internal Set to maintain uniqueness.
        <!-- ACCEPT >=> 684b78d0-9f1d-11ea-88f7-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.SetUniqueList` / `public static <E> SetUniqueList<E> setUniqueList(final List<E> list)`


        <!-- 684b78d1-9f1d-11ea-88f8-333445793454 <=< ACCEPT -->
        Factory method to create a SetList using the supplied list to retain order.
        <p>
        If the list contains duplicates, these are removed (first indexed one
        kept). A <code>HashSet</code> is used for the set behaviour.
        @param <E>  the element type
        @param list  the list to decorate, must not be null
        @return a new {@link SetUniqueList}
        @throws NullPointerException if list is null
        @since 4.0
        <!-- ACCEPT >=> 684b78d1-9f1d-11ea-88f8-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.list.SetUniqueList` / `protected SetUniqueList(final List<E> list, final Set<E> set)`


        <!-- 684b78d2-9f1d-11ea-88f9-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies) the List and specifies the set to use.
        <p>
        The set and list must both be correctly initialised to the same elements.
        @param set  the set to decorate, must not be null
        @param list  the list to decorate, must not be null
        @throws NullPointerException if set or list is null
        <!-- ACCEPT >=> 684b78d2-9f1d-11ea-88f9-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.SetUniqueList` / `public Set<E> asSet()`


        <!-- 684b78d3-9f1d-11ea-88fa-333445793454 <=< ACCEPT -->
        Gets an unmodifiable view as a Set.
        @return an unmodifiable set view
        <!-- ACCEPT >=> 684b78d3-9f1d-11ea-88fa-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.SetUniqueList` / `public boolean add(final E object)`


        <!-- 684b78d4-9f1d-11ea-88fb-333445793454 <=< ACCEPT -->
        Adds an element to the list if it is not already present.
        <p>
        <i>(Violation)</i> The <code>List</code> interface requires that this
        method returns <code>true</code> always. However this class may return
        <code>false</code> because of the <code>Set</code> behaviour.
        @param object  the object to add
        @return true if object was added
        <!-- ACCEPT >=> 684b78d4-9f1d-11ea-88fb-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.SetUniqueList` / `public void add(final int index, final E object)`


        <!-- 684b78d5-9f1d-11ea-88fc-333445793454 <=< ACCEPT -->
        Adds an element to a specific index in the list if it is not already
        present.
        <p>
        <i>(Violation)</i> The <code>List</code> interface makes the assumption
        that the element is always inserted. This may not happen with this
        implementation.
        @param index  the index to insert at
        @param object  the object to add
        <!-- ACCEPT >=> 684b78d5-9f1d-11ea-88fc-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.SetUniqueList` / `public boolean addAll(final Collection<? extends E> coll)`


        <!-- 684b9fcc-9f1d-11ea-88fd-333445793454 <=< ACCEPT -->
        Adds a collection of objects to the end of the list avoiding duplicates.
        <p>
        Only elements that are not already in this list will be added, and
        duplicates from the specified collection will be ignored.
        <p>
        <i>(Violation)</i> The <code>List</code> interface makes the assumption
        that the elements are always inserted. This may not happen with this
        implementation.
        @param coll  the collection to add in iterator order
        @return true if this collection changed
        <!-- ACCEPT >=> 684b9fcc-9f1d-11ea-88fd-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.SetUniqueList` / `public boolean addAll(final int index, final Collection<? extends E> coll)`


        <!-- 684b9fcd-9f1d-11ea-88fe-333445793454 <=< ACCEPT -->
        Adds a collection of objects a specific index in the list avoiding
        duplicates.
        <p>
        Only elements that are not already in this list will be added, and
        duplicates from the specified collection will be ignored.
        <p>
        <i>(Violation)</i> The <code>List</code> interface makes the assumption
        that the elements are always inserted. This may not happen with this
        implementation.
        @param index  the index to insert at
        @param coll  the collection to add in iterator order
        @return true if this collection changed
        <!-- ACCEPT >=> 684b9fcd-9f1d-11ea-88fe-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.SetUniqueList` / `public E set(final int index, final E object)`


        <!-- 684b9fce-9f1d-11ea-88ff-333445793454 <=< ACCEPT -->
        Sets the value at the specified index avoiding duplicates.
        <p>
        The object is set into the specified index. Afterwards, any previous
        duplicate is removed. If the object is not already in the list then a
        normal set occurs. If it is present, then the old version is removed.
        @param index  the index to insert at
        @param object  the object to set
        @return the previous object
        <!-- ACCEPT >=> 684b9fce-9f1d-11ea-88ff-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.SetUniqueList` / `public boolean retainAll(final Collection<?> coll)`


        <!-- 684b9fcf-9f1d-11ea-8900-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <p>
        This implementation iterates over the elements of this list, checking
        each element in turn to see if it's contained in <code>coll</code>.
        If it's not contained, it's removed from this list. As a consequence,
        it is advised to use a collection type for <code>coll</code> that provides
        a fast (e.g. O(1)) implementation of {@link Collection#contains(Object)}.
        <!-- ACCEPT >=> 684b9fcf-9f1d-11ea-8900-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.SetUniqueList` / `public List<E> subList(final int fromIndex, final int toIndex)`


        <!-- 684b9fd0-9f1d-11ea-8901-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <p>
        NOTE: from 4.0, an unmodifiable list will be returned, as changes to the
        subList can invalidate the parent list.
        <!-- ACCEPT >=> 684b9fd0-9f1d-11ea-8901-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.SetUniqueList` / `protected Set<E> createSetBasedOnList(final Set<E> set, final List<E> list)`


        <!-- 684b9fd1-9f1d-11ea-8902-333445793454 <=< ACCEPT -->
        Create a new {@link Set} with the same type as the provided {@code set}
        and populate it with all elements of {@code list}.
        @param set  the {@link Set} to be used as return type, must not be null
        @param list  the {@link List} to populate the {@link Set}
        @return a new {@link Set} populated with all elements of the provided
        {@link List}
        <!-- ACCEPT >=> 684b9fd1-9f1d-11ea-8902-333445793454 -->



## Class: `java.org.apache.commons.collections4.list.SetUniqueList` / `static class SetListIterator<E> extends AbstractIteratorDecorator<E>`


        <!-- 684b9fd2-9f1d-11ea-8903-333445793454 <=< ACCEPT -->
        Inner class iterator.
        <!-- ACCEPT >=> 684b9fd2-9f1d-11ea-8903-333445793454 -->



## Class: `java.org.apache.commons.collections4.list.SetUniqueList` / `AbstractListIteratorDecorator<E>`


        <!-- 684b9fd3-9f1d-11ea-8904-333445793454 <=< ACCEPT -->
        Inner class iterator.
        <!-- ACCEPT >=> 684b9fd3-9f1d-11ea-8904-333445793454 -->



# File: `java.org.apache.commons.collections4.list.TransformedList`

## Class: `java.org.apache.commons.collections4.list.TransformedList` / `public class TransformedList<E> extends TransformedCollection<E> implements List<E>`


        <!-- 684b9fd4-9f1d-11ea-8905-333445793454 <=< ACCEPT -->
        Decorates another <code>List</code> to transform objects that are added.
        <p>
        The add and set methods are affected by this class.
        Thus objects must be removed or searched for using their transformed form.
        For example, if the transformation converts Strings to Integers, you must
        use the Integer form to remove objects.
        <p>
        This class is Serializable from Commons Collections 3.1.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 684b9fd4-9f1d-11ea-8905-333445793454 -->



## Field: `java.org.apache.commons.collections4.list.TransformedList` / `private static final long serialVersionUID`


        <!-- 684b9fd5-9f1d-11ea-8906-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 684b9fd5-9f1d-11ea-8906-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.TransformedList` / `final Transformer<? super E, ? extends E> transformer)`


        <!-- 684b9fd6-9f1d-11ea-8907-333445793454 <=< ACCEPT -->
        Factory method to create a transforming list.
        <p>
        If there are any elements already in the list being decorated, they
        are NOT transformed.
        Contrast this with {@link #transformedList(List, Transformer)}.
        @param <E> the type of the elements in the list
        @param list  the list to decorate, must not be null
        @param transformer  the transformer to use for conversion, must not be null
        @return a new transformed list
        @throws NullPointerException if list or transformer is null
        @since 4.0
        <!-- ACCEPT >=> 684b9fd6-9f1d-11ea-8907-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.TransformedList` / `final Transformer<? super E, ? extends E> transformer)`


        <!-- 684b9fd7-9f1d-11ea-8908-333445793454 <=< ACCEPT -->
        Factory method to create a transforming list that will transform
        existing contents of the specified list.
        <p>
        If there are any elements already in the list being decorated, they
        will be transformed by this method.
        Contrast this with {@link #transformingList(List, Transformer)}.
        @param <E> the type of the elements in the list
        @param list  the list to decorate, must not be null
        @param transformer  the transformer to use for conversion, must not be null
        @return a new transformed List
        @throws NullPointerException if list or transformer is null
        @since 4.0
        <!-- ACCEPT >=> 684b9fd7-9f1d-11ea-8908-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.list.TransformedList` / `protected TransformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)`


        <!-- 684b9fd8-9f1d-11ea-8909-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        <p>
        If there are any elements already in the list being decorated, they
        are NOT transformed.
        @param list  the list to decorate, must not be null
        @param transformer  the transformer to use for conversion, must not be null
        @throws NullPointerException if list or transformer is null
        <!-- ACCEPT >=> 684b9fd8-9f1d-11ea-8909-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.TransformedList` / `protected List<E> getList()`


        <!-- 684b9fd9-9f1d-11ea-890a-333445793454 <=< ACCEPT -->
        Gets the decorated list.
        @return the decorated list
        <!-- ACCEPT >=> 684b9fd9-9f1d-11ea-890a-333445793454 -->



## Class: `java.org.apache.commons.collections4.list.TransformedList` / `protected class TransformedListIterator extends AbstractListIteratorDecorator<E>`


        <!-- 684b9fda-9f1d-11ea-890b-333445793454 <=< ACCEPT -->
        Inner class Iterator for the TransformedList
        <!-- ACCEPT >=> 684b9fda-9f1d-11ea-890b-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.list.TransformedList` / `protected TransformedListIterator(final ListIterator<E> iterator)`


        <!-- 684b9fdb-9f1d-11ea-890c-333445793454 <=< ACCEPT -->
        Create a new transformed list iterator.
        @param iterator  the list iterator to decorate
        <!-- ACCEPT >=> 684b9fdb-9f1d-11ea-890c-333445793454 -->



# File: `java.org.apache.commons.collections4.list.TreeList`

## Class: `java.org.apache.commons.collections4.list.TreeList` / `public class TreeList<E> extends AbstractList<E>`


        <!-- 684b9fdc-9f1d-11ea-890d-333445793454 <=< ACCEPT -->
        A <code>List</code> implementation that is optimised for fast insertions and
        removals at any index in the list.
        <p>
        This list implementation utilises a tree structure internally to ensure that
        all insertions and removals are O(log n). This provides much faster performance
        than both an <code>ArrayList</code> and a <code>LinkedList</code> where elements
        are inserted and removed repeatedly from anywhere in the list.
        <p>
        The following relative performance statistics are indicative of this class:
        <pre>
        get  add  insert  iterate  remove
        TreeList       3    5       1       2       1
        ArrayList      1    1      40       1      40
        LinkedList  5800    1     350       2     325
        </pre>
        <code>ArrayList</code> is a good general purpose list implementation.
        It is faster than <code>TreeList</code> for most operations except inserting
        and removing in the middle of the list. <code>ArrayList</code> also uses less
        memory as <code>TreeList</code> uses one object per entry.
        <p>
        <code>LinkedList</code> is rarely a good choice of implementation.
        <code>TreeList</code> is almost always a good replacement for it, although it
        does use slightly more memory.
        @since 3.1
        @version $Id$
        <!-- ACCEPT >=> 684b9fdc-9f1d-11ea-890d-333445793454 -->



## Field: `java.org.apache.commons.collections4.list.TreeList` / `private AVLNode<E> root`


        <!-- 684b9fdd-9f1d-11ea-890e-333445793454 <=< ACCEPT -->
        The root node in the AVL tree
        <!-- ACCEPT >=> 684b9fdd-9f1d-11ea-890e-333445793454 -->



## Field: `java.org.apache.commons.collections4.list.TreeList` / `private int size`


        <!-- 684b9fde-9f1d-11ea-890f-333445793454 <=< ACCEPT -->
        The current size of the list
        <!-- ACCEPT >=> 684b9fde-9f1d-11ea-890f-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.list.TreeList` / `public TreeList()`


        <!-- 684bc6d6-9f1d-11ea-8910-333445793454 <=< ACCEPT -->
        Constructs a new empty list.
        <!-- ACCEPT >=> 684bc6d6-9f1d-11ea-8910-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.list.TreeList` / `public TreeList(final Collection<? extends E> coll)`


        <!-- 684bc6d7-9f1d-11ea-8911-333445793454 <=< ACCEPT -->
        Constructs a new empty list that copies the specified collection.
        @param coll  the collection to copy
        @throws NullPointerException if the collection is null
        <!-- ACCEPT >=> 684bc6d7-9f1d-11ea-8911-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.TreeList` / `public E get(final int index)`


        <!-- 684bc6d8-9f1d-11ea-8912-333445793454 <=< ACCEPT -->
        Gets the element at the specified index.
        @param index  the index to retrieve
        @return the element at the specified index
        <!-- ACCEPT >=> 684bc6d8-9f1d-11ea-8912-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.TreeList` / `public int size()`


        <!-- 684bc6d9-9f1d-11ea-8913-333445793454 <=< ACCEPT -->
        Gets the current size of the list.
        @return the current size
        <!-- ACCEPT >=> 684bc6d9-9f1d-11ea-8913-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.TreeList` / `public Iterator<E> iterator()`


        <!-- 684bc6da-9f1d-11ea-8914-333445793454 <=< ACCEPT -->
        Gets an iterator over the list.
        @return an iterator over the list
        <!-- ACCEPT >=> 684bc6da-9f1d-11ea-8914-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.TreeList` / `public ListIterator<E> listIterator()`


        <!-- 684bc6db-9f1d-11ea-8915-333445793454 <=< ACCEPT -->
        Gets a ListIterator over the list.
        @return the new iterator
        <!-- ACCEPT >=> 684bc6db-9f1d-11ea-8915-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.TreeList` / `public ListIterator<E> listIterator(final int fromIndex)`


        <!-- 684bc6dc-9f1d-11ea-8916-333445793454 <=< ACCEPT -->
        Gets a ListIterator over the list.
        @param fromIndex  the index to start from
        @return the new iterator
        <!-- ACCEPT >=> 684bc6dc-9f1d-11ea-8916-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.TreeList` / `public int indexOf(final Object object)`


        <!-- 684bc6dd-9f1d-11ea-8917-333445793454 <=< ACCEPT -->
        Searches for the index of an object in the list.
        @param object  the object to search
        @return the index of the object, -1 if not found
        <!-- ACCEPT >=> 684bc6dd-9f1d-11ea-8917-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.TreeList` / `public boolean contains(final Object object)`


        <!-- 684bc6de-9f1d-11ea-8918-333445793454 <=< ACCEPT -->
        Searches for the presence of an object in the list.
        @param object  the object to check
        @return true if the object is found
        <!-- ACCEPT >=> 684bc6de-9f1d-11ea-8918-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.TreeList` / `public Object[] toArray()`


        <!-- 684bc6df-9f1d-11ea-8919-333445793454 <=< ACCEPT -->
        Converts the list into an array.
        @return the list as an array
        <!-- ACCEPT >=> 684bc6df-9f1d-11ea-8919-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.TreeList` / `public void add(final int index, final E obj)`


        <!-- 684bc6e0-9f1d-11ea-891a-333445793454 <=< ACCEPT -->
        Adds a new element to the list.
        @param index  the index to add before
        @param obj  the element to add
        <!-- ACCEPT >=> 684bc6e0-9f1d-11ea-891a-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.TreeList` / `public boolean addAll(final Collection<? extends E> c)`


        <!-- 684bc6e1-9f1d-11ea-891b-333445793454 <=< ACCEPT -->
        Appends all of the elements in the specified collection to the end of this list,
        in the order that they are returned by the specified collection's Iterator.
        <p>
        This method runs in O(n + log m) time, where m is
        the size of this list and n is the size of {@code c}.
        @param c  the collection to be added to this list
        @return {@code true} if this list changed as a result of the call
        @throws NullPointerException {@inheritDoc}
        <!-- ACCEPT >=> 684bc6e1-9f1d-11ea-891b-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.TreeList` / `public E set(final int index, final E obj)`


        <!-- 684bc6e2-9f1d-11ea-891c-333445793454 <=< ACCEPT -->
        Sets the element at the specified index.
        @param index  the index to set
        @param obj  the object to store at the specified index
        @return the previous object at that index
        @throws IndexOutOfBoundsException if the index is invalid
        <!-- ACCEPT >=> 684bc6e2-9f1d-11ea-891c-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.TreeList` / `public E remove(final int index)`


        <!-- 684bc6e3-9f1d-11ea-891d-333445793454 <=< ACCEPT -->
        Removes the element at the specified index.
        @param index  the index to remove
        @return the previous object at that index
        <!-- ACCEPT >=> 684bc6e3-9f1d-11ea-891d-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.TreeList` / `public void clear()`


        <!-- 684bc6e4-9f1d-11ea-891e-333445793454 <=< ACCEPT -->
        Clears the list, removing all entries.
        <!-- ACCEPT >=> 684bc6e4-9f1d-11ea-891e-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.TreeList` / `private void checkInterval(final int index, final int startIndex, final int endIndex)`


        <!-- 684bc6e5-9f1d-11ea-891f-333445793454 <=< ACCEPT -->
        Checks whether the index is valid.
        @param index  the index to check
        @param startIndex  the first allowed index
        @param endIndex  the last allowed index
        @throws IndexOutOfBoundsException if the index is invalid
        <!-- ACCEPT >=> 684bc6e5-9f1d-11ea-891f-333445793454 -->



## Class: `java.org.apache.commons.collections4.list.TreeList` / `static class AVLNode<E>`


        <!-- 684bc6e6-9f1d-11ea-8920-333445793454 <=< ACCEPT -->
        Implements an AVLNode which keeps the offset updated.
        <p>
        This node contains the real work.
        TreeList is just there to implement {@link java.util.List}.
        The nodes don't know the index of the object they are holding.  They
        do know however their position relative to their parent node.
        This allows to calculate the index of a node while traversing the tree.
        <p>
        The Faedelung calculation stores a flag for both the left and right child
        to indicate if they are a child (false) or a link as in linked list (true).
        <!-- ACCEPT >=> 684bc6e6-9f1d-11ea-8920-333445793454 -->



## Field: `java.org.apache.commons.collections4.list.TreeList` / `private AVLNode<E> left`


        <!-- 684bc6e7-9f1d-11ea-8921-333445793454 <=< ACCEPT -->
        The left child node or the predecessor if {@link #leftIsPrevious}.
        <!-- ACCEPT >=> 684bc6e7-9f1d-11ea-8921-333445793454 -->



## Field: `java.org.apache.commons.collections4.list.TreeList` / `private boolean leftIsPrevious`


        <!-- 684bc6e8-9f1d-11ea-8922-333445793454 <=< ACCEPT -->
        Flag indicating that left reference is not a subtree but the predecessor.
        <!-- ACCEPT >=> 684bc6e8-9f1d-11ea-8922-333445793454 -->



## Field: `java.org.apache.commons.collections4.list.TreeList` / `private AVLNode<E> right`


        <!-- 684bc6e9-9f1d-11ea-8923-333445793454 <=< ACCEPT -->
        The right child node or the successor if {@link #rightIsNext}.
        <!-- ACCEPT >=> 684bc6e9-9f1d-11ea-8923-333445793454 -->



## Field: `java.org.apache.commons.collections4.list.TreeList` / `private boolean rightIsNext`


        <!-- 684bc6ea-9f1d-11ea-8924-333445793454 <=< ACCEPT -->
        Flag indicating that right reference is not a subtree but the successor.
        <!-- ACCEPT >=> 684bc6ea-9f1d-11ea-8924-333445793454 -->



## Field: `java.org.apache.commons.collections4.list.TreeList` / `private int height`


        <!-- 684bc6eb-9f1d-11ea-8925-333445793454 <=< ACCEPT -->
        How many levels of left/right are below this one.
        <!-- ACCEPT >=> 684bc6eb-9f1d-11ea-8925-333445793454 -->



## Field: `java.org.apache.commons.collections4.list.TreeList` / `private int relativePosition`


        <!-- 684bc6ec-9f1d-11ea-8926-333445793454 <=< ACCEPT -->
        The relative position, root holds absolute position.
        <!-- ACCEPT >=> 684bc6ec-9f1d-11ea-8926-333445793454 -->



## Field: `java.org.apache.commons.collections4.list.TreeList` / `private E value`


        <!-- 684bc6ed-9f1d-11ea-8927-333445793454 <=< ACCEPT -->
        The stored element.
        <!-- ACCEPT >=> 684bc6ed-9f1d-11ea-8927-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.list.TreeList` / `final AVLNode<E> rightFollower, final AVLNode<E> leftFollower)`


        <!-- 684bede0-9f1d-11ea-8928-333445793454 <=< ACCEPT -->
        Constructs a new node with a relative position.
        @param relativePosition  the relative position of the node
        @param obj  the value for the node
        @param rightFollower the node with the value following this one
        @param leftFollower the node with the value leading this one
        <!-- ACCEPT >=> 684bede0-9f1d-11ea-8928-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.list.TreeList` / `private AVLNode(final Collection<? extends E> coll)`


        <!-- 684bede1-9f1d-11ea-8929-333445793454 <=< ACCEPT -->
        Constructs a new AVL tree from a collection.
        <p>
        The collection must be nonempty.
        @param coll  a nonempty collection
        <!-- ACCEPT >=> 684bede1-9f1d-11ea-8929-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.list.TreeList` / `final int absolutePositionOfParent, final AVLNode<E> prev, final AVLNode<E> next)`


        <!-- 684bede2-9f1d-11ea-892a-333445793454 <=< ACCEPT -->
        Constructs a new AVL tree from a collection.
        <p>
        This is a recursive helper for {@link #AVLNode(Collection)}. A call
        to this method will construct the subtree for elements {@code start}
        through {@code end} of the collection, assuming the iterator
        {@code e} already points at element {@code start}.
        @param iterator  an iterator over the collection, which should already point
        to the element at index {@code start} within the collection
        @param start  the index of the first element in the collection that
        should be in this subtree
        @param end  the index of the last element in the collection that
        should be in this subtree
        @param absolutePositionOfParent  absolute position of this node's
        parent, or 0 if this node is the root
        @param prev  the {@code AVLNode} corresponding to element (start - 1)
        of the collection, or null if start is 0
        @param next  the {@code AVLNode} corresponding to element (end + 1)
        of the collection, or null if end is the last element of the collection
        <!-- ACCEPT >=> 684bede2-9f1d-11ea-892a-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.TreeList` / `E getValue()`


        <!-- 684bede3-9f1d-11ea-892b-333445793454 <=< ACCEPT -->
        Gets the value.
        @return the value of this node
        <!-- ACCEPT >=> 684bede3-9f1d-11ea-892b-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.TreeList` / `void setValue(final E obj)`


        <!-- 684bede4-9f1d-11ea-892c-333445793454 <=< ACCEPT -->
        Sets the value.
        @param obj  the value to store
        <!-- ACCEPT >=> 684bede4-9f1d-11ea-892c-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.TreeList` / `AVLNode<E> get(final int index)`


        <!-- 684bede5-9f1d-11ea-892d-333445793454 <=< ACCEPT -->
        Locate the element with the given index relative to the
        offset of the parent of this node.
        <!-- ACCEPT >=> 684bede5-9f1d-11ea-892d-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.TreeList` / `int indexOf(final Object object, final int index)`


        <!-- 684bede6-9f1d-11ea-892e-333445793454 <=< ACCEPT -->
        Locate the index that contains the specified object.
        <!-- ACCEPT >=> 684bede6-9f1d-11ea-892e-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.TreeList` / `void toArray(final Object[] array, final int index)`


        <!-- 684bede7-9f1d-11ea-892f-333445793454 <=< ACCEPT -->
        Stores the node and its children into the array specified.
        @param array the array to be filled
        @param index the index of this node
        <!-- ACCEPT >=> 684bede7-9f1d-11ea-892f-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.TreeList` / `AVLNode<E> next()`


        <!-- 684bede8-9f1d-11ea-8930-333445793454 <=< ACCEPT -->
        Gets the next node in the list after this one.
        @return the next node
        <!-- ACCEPT >=> 684bede8-9f1d-11ea-8930-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.TreeList` / `AVLNode<E> previous()`


        <!-- 684bede9-9f1d-11ea-8931-333445793454 <=< ACCEPT -->
        Gets the node in the list before this one.
        @return the previous node
        <!-- ACCEPT >=> 684bede9-9f1d-11ea-8931-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.TreeList` / `AVLNode<E> insert(final int index, final E obj)`


        <!-- 684bedea-9f1d-11ea-8932-333445793454 <=< ACCEPT -->
        Inserts a node at the position index.
        @param index is the index of the position relative to the position of
        the parent node.
        @param obj is the object to be stored in the position.
        <!-- ACCEPT >=> 684bedea-9f1d-11ea-8932-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.TreeList` / `private AVLNode<E> getLeftSubTree()`


        <!-- 684bedeb-9f1d-11ea-8933-333445793454 <=< ACCEPT -->
        Gets the left node, returning null if its a faedelung.
        <!-- ACCEPT >=> 684bedeb-9f1d-11ea-8933-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.TreeList` / `private AVLNode<E> getRightSubTree()`


        <!-- 684bedec-9f1d-11ea-8934-333445793454 <=< ACCEPT -->
        Gets the right node, returning null if its a faedelung.
        <!-- ACCEPT >=> 684bedec-9f1d-11ea-8934-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.TreeList` / `private AVLNode<E> max()`


        <!-- 684beded-9f1d-11ea-8935-333445793454 <=< ACCEPT -->
        Gets the rightmost child of this node.
        @return the rightmost child (greatest index)
        <!-- ACCEPT >=> 684beded-9f1d-11ea-8935-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.TreeList` / `private AVLNode<E> min()`


        <!-- 684bedee-9f1d-11ea-8936-333445793454 <=< ACCEPT -->
        Gets the leftmost child of this node.
        @return the leftmost child (smallest index)
        <!-- ACCEPT >=> 684bedee-9f1d-11ea-8936-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.TreeList` / `AVLNode<E> remove(final int index)`


        <!-- 684bedef-9f1d-11ea-8937-333445793454 <=< ACCEPT -->
        Removes the node at a given position.
        @param index is the index of the element to be removed relative to the position of
        the parent node of the current node.
        <!-- ACCEPT >=> 684bedef-9f1d-11ea-8937-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.TreeList` / `private AVLNode<E> removeSelf()`


        <!-- 684bedf0-9f1d-11ea-8938-333445793454 <=< ACCEPT -->
        Removes this node from the tree.
        @return the node that replaces this one in the parent
        <!-- ACCEPT >=> 684bedf0-9f1d-11ea-8938-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.TreeList` / `private AVLNode<E> balance()`


        <!-- 684bedf1-9f1d-11ea-8939-333445793454 <=< ACCEPT -->
        Balances according to the AVL algorithm.
        <!-- ACCEPT >=> 684bedf1-9f1d-11ea-8939-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.TreeList` / `private int getOffset(final AVLNode<E> node)`


        <!-- 684bedf2-9f1d-11ea-893a-333445793454 <=< ACCEPT -->
        Gets the relative position.
        <!-- ACCEPT >=> 684bedf2-9f1d-11ea-893a-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.TreeList` / `private int setOffset(final AVLNode<E> node, final int newOffest)`


        <!-- 684bedf3-9f1d-11ea-893b-333445793454 <=< ACCEPT -->
        Sets the relative position.
        <!-- ACCEPT >=> 684bedf3-9f1d-11ea-893b-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.TreeList` / `private void recalcHeight()`


        <!-- 684bedf4-9f1d-11ea-893c-333445793454 <=< ACCEPT -->
        Sets the height by calculation.
        <!-- ACCEPT >=> 684bedf4-9f1d-11ea-893c-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.TreeList` / `private int getHeight(final AVLNode<E> node)`


        <!-- 684bedf5-9f1d-11ea-893d-333445793454 <=< ACCEPT -->
        Returns the height of the node or -1 if the node is null.
        <!-- ACCEPT >=> 684bedf5-9f1d-11ea-893d-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.TreeList` / `private int heightRightMinusLeft()`


        <!-- 684bedf6-9f1d-11ea-893e-333445793454 <=< ACCEPT -->
        Returns the height difference right - left
        <!-- ACCEPT >=> 684bedf6-9f1d-11ea-893e-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.TreeList` / `private void setLeft(final AVLNode<E> node, final AVLNode<E> previous)`


        <!-- 684bedf7-9f1d-11ea-893f-333445793454 <=< ACCEPT -->
        Sets the left field to the node, or the previous node if that is null
        @param node  the new left subtree node
        @param previous  the previous node in the linked list
        <!-- ACCEPT >=> 684bedf7-9f1d-11ea-893f-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.TreeList` / `private void setRight(final AVLNode<E> node, final AVLNode<E> next)`


        <!-- 684bedf8-9f1d-11ea-8940-333445793454 <=< ACCEPT -->
        Sets the right field to the node, or the next node if that is null
        @param node  the new left subtree node
        @param next  the next node in the linked list
        <!-- ACCEPT >=> 684bedf8-9f1d-11ea-8940-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.TreeList` / `private AVLNode<E> addAll(AVLNode<E> otherTree, final int currentSize)`


        <!-- 684c14e9-9f1d-11ea-8941-333445793454 <=< ACCEPT -->
        Appends the elements of another tree list to this tree list by efficiently
        merging the two AVL trees. This operation is destructive to both trees and
        runs in O(log(m + n)) time.
        @param otherTree
        the root of the AVL tree to merge with this one
        @param currentSize
        the number of elements in this AVL tree
        @return the root of the new, merged AVL tree
        <!-- ACCEPT >=> 684c14e9-9f1d-11ea-8941-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.TreeList` / `public String toString()`


        <!-- 684c14ea-9f1d-11ea-8942-333445793454 <=< ACCEPT -->
        Used for debugging.
        <!-- ACCEPT >=> 684c14ea-9f1d-11ea-8942-333445793454 -->



## Class: `java.org.apache.commons.collections4.list.TreeList` / `static class TreeListIterator<E> implements ListIterator<E>, OrderedIterator<E>`


        <!-- 684c14eb-9f1d-11ea-8943-333445793454 <=< ACCEPT -->
        A list iterator over the linked list.
        <!-- ACCEPT >=> 684c14eb-9f1d-11ea-8943-333445793454 -->



## Field: `java.org.apache.commons.collections4.list.TreeList` / `private final TreeList<E> parent`


        <!-- 684c14ec-9f1d-11ea-8944-333445793454 <=< ACCEPT -->
        The parent list
        <!-- ACCEPT >=> 684c14ec-9f1d-11ea-8944-333445793454 -->



## Field: `java.org.apache.commons.collections4.list.TreeList` / `private AVLNode<E> next`


        <!-- 684c14ed-9f1d-11ea-8945-333445793454 <=< ACCEPT -->
        Cache of the next node that will be returned by {@link #next()}.
        <!-- ACCEPT >=> 684c14ed-9f1d-11ea-8945-333445793454 -->



## Field: `java.org.apache.commons.collections4.list.TreeList` / `private int nextIndex`


        <!-- 684c14ee-9f1d-11ea-8946-333445793454 <=< ACCEPT -->
        The index of the next node to be returned.
        <!-- ACCEPT >=> 684c14ee-9f1d-11ea-8946-333445793454 -->



## Field: `java.org.apache.commons.collections4.list.TreeList` / `private AVLNode<E> current`


        <!-- 684c14ef-9f1d-11ea-8947-333445793454 <=< ACCEPT -->
        Cache of the last node that was returned by {@link #next()}
        or {@link #previous()}.
        <!-- ACCEPT >=> 684c14ef-9f1d-11ea-8947-333445793454 -->



## Field: `java.org.apache.commons.collections4.list.TreeList` / `private int currentIndex`


        <!-- 684c14f0-9f1d-11ea-8948-333445793454 <=< ACCEPT -->
        The index of the last node that was returned.
        <!-- ACCEPT >=> 684c14f0-9f1d-11ea-8948-333445793454 -->



## Field: `java.org.apache.commons.collections4.list.TreeList` / `private int expectedModCount`


        <!-- 684c14f1-9f1d-11ea-8949-333445793454 <=< ACCEPT -->
        The modification count that the list is expected to have. If the list
        doesn't have this count, then a
        {@link java.util.ConcurrentModificationException} may be thrown by
        the operations.
        <!-- ACCEPT >=> 684c14f1-9f1d-11ea-8949-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.list.TreeList` / `protected TreeListIterator(final TreeList<E> parent, final int fromIndex) throws IndexOutOfBoundsException`


        <!-- 684c14f2-9f1d-11ea-894a-333445793454 <=< ACCEPT -->
        Create a ListIterator for a list.
        @param parent  the parent list
        @param fromIndex  the index to start at
        <!-- ACCEPT >=> 684c14f2-9f1d-11ea-894a-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.TreeList` / `protected void checkModCount()`


        <!-- 684c14f3-9f1d-11ea-894b-333445793454 <=< ACCEPT -->
        Checks the modification count of the list is the value that this
        object expects.
        @throws ConcurrentModificationException If the list's modification
        count isn't the value that was expected.
        <!-- ACCEPT >=> 684c14f3-9f1d-11ea-894b-333445793454 -->



# File: `java.org.apache.commons.collections4.list.UnmodifiableList`

## Class: `java.org.apache.commons.collections4.list.UnmodifiableList` / `implements Unmodifiable`


        <!-- 684c14f4-9f1d-11ea-894c-333445793454 <=< ACCEPT -->
        Decorates another <code>List</code> to ensure it can't be altered.
        <p>
        This class is Serializable from Commons Collections 3.1.
        <p>
        Attempts to modify it will result in an UnsupportedOperationException.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 684c14f4-9f1d-11ea-894c-333445793454 -->



## Field: `java.org.apache.commons.collections4.list.UnmodifiableList` / `private static final long serialVersionUID`


        <!-- 684c14f5-9f1d-11ea-894d-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 684c14f5-9f1d-11ea-894d-333445793454 -->



## Method: `java.org.apache.commons.collections4.list.UnmodifiableList` / `public static <E> List<E> unmodifiableList(final List<? extends E> list)`


        <!-- 684c14f6-9f1d-11ea-894e-333445793454 <=< ACCEPT -->
        Factory method to create an unmodifiable list.
        @param <E> the type of the elements in the list
        @param list  the list to decorate, must not be null
        @return a new unmodifiable list
        @throws NullPointerException if list is null
        @since 4.0
        <!-- ACCEPT >=> 684c14f6-9f1d-11ea-894e-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.list.UnmodifiableList` / `public UnmodifiableList(final List<? extends E> list)`


        <!-- 684c14f7-9f1d-11ea-894f-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param list  the list to decorate, must not be null
        @throws NullPointerException if list is null
        <!-- ACCEPT >=> 684c14f7-9f1d-11ea-894f-333445793454 -->



# File: `java.org.apache.commons.collections4.list.package-info`

## Package: `java.org.apache.commons.collections4.list.package-info` / `package org.apache.commons.collections4.list`


        <!-- 684c14f8-9f1d-11ea-8950-333445793454 <=< ACCEPT -->
        This package contains implementations of the {@link java.util.List List} interface.
        <p>
        The following implementations are provided in the package:
        <ul>
        <li>TreeList - a list that is optimised for insertions and removals at any index in the list</li>
        <li>CursorableLinkedList - a list that can be modified while the listIterator (cursor) is being used</li>
        <li>NodeCachingLinkedList - a linked list that caches the storage nodes for a performance gain</li>
        </ul>
        <p>
        The following decorators are provided in the package:
        <ul>
        <li>Unmodifiable - ensures the collection cannot be altered</li>
        <li>Predicated - ensures that only elements that are valid according to a predicate can be added</li>
        <li>Transformed - transforms each element added</li>
        <li>FixedSize - ensures that the size of the list cannot change</li>
        <li>Lazy - creates objects in the list on demand</li>
        <li>Growth - grows the list instead of erroring when set/add used with index beyond the list size</li>
        <li>SetUnique - a list that avoids duplicate entries like a Set</li>
        </ul>
        @version $Id$
        <!-- ACCEPT >=> 684c14f8-9f1d-11ea-8950-333445793454 -->



# File: `java.org.apache.commons.collections4.map.AbstractHashedMap`

## Class: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `public class AbstractHashedMap<K, V> extends AbstractMap<K, V> implements IterableMap<K, V>`


        <!-- 684c14f9-9f1d-11ea-8951-333445793454 <=< ACCEPT -->
        An abstract implementation of a hash-based map which provides numerous points for
        subclasses to override.
        <p>
        This class implements all the features necessary for a subclass hash-based map.
        Key-value entries are stored in instances of the <code>HashEntry</code> class,
        which can be overridden and replaced. The iterators can similarly be replaced,
        without the need to replace the KeySet, EntrySet and Values view classes.
        <p>
        Overridable methods are provided to change the default hashing behaviour, and
        to change how entries are added to and removed from the map. Hopefully, all you
        need for unusual subclasses is here.
        <p>
        NOTE: From Commons Collections 3.1 this class extends AbstractMap.
        This is to provide backwards compatibility for ReferenceMap between v3.0 and v3.1.
        This extends clause will be removed in v5.0.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 684c14f9-9f1d-11ea-8951-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `protected static final int DEFAULT_CAPACITY`


        <!-- 684c14fa-9f1d-11ea-8952-333445793454 <=< ACCEPT -->
        The default capacity to use
        <!-- ACCEPT >=> 684c14fa-9f1d-11ea-8952-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `protected static final int DEFAULT_THRESHOLD`


        <!-- 684c14fb-9f1d-11ea-8953-333445793454 <=< ACCEPT -->
        The default threshold to use
        <!-- ACCEPT >=> 684c14fb-9f1d-11ea-8953-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `protected static final float DEFAULT_LOAD_FACTOR`


        <!-- 684c14fc-9f1d-11ea-8954-333445793454 <=< ACCEPT -->
        The default load factor to use
        <!-- ACCEPT >=> 684c14fc-9f1d-11ea-8954-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `protected static final int MAXIMUM_CAPACITY`


        <!-- 684c14fd-9f1d-11ea-8955-333445793454 <=< ACCEPT -->
        The maximum capacity allowed
        <!-- ACCEPT >=> 684c14fd-9f1d-11ea-8955-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `protected static final Object NULL`


        <!-- 684c14fe-9f1d-11ea-8956-333445793454 <=< ACCEPT -->
        An object for masking null
        <!-- ACCEPT >=> 684c14fe-9f1d-11ea-8956-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `transient float loadFactor`


        <!-- 684c14ff-9f1d-11ea-8957-333445793454 <=< ACCEPT -->
        Load factor, normally 0.75
        <!-- ACCEPT >=> 684c14ff-9f1d-11ea-8957-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `transient int size`


        <!-- 684c3bf3-9f1d-11ea-8958-333445793454 <=< ACCEPT -->
        The size of the map
        <!-- ACCEPT >=> 684c3bf3-9f1d-11ea-8958-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `transient HashEntry<K, V>[] data`


        <!-- 684c3bf4-9f1d-11ea-8959-333445793454 <=< ACCEPT -->
        Map entries
        <!-- ACCEPT >=> 684c3bf4-9f1d-11ea-8959-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `transient int threshold`


        <!-- 684c3bf5-9f1d-11ea-895a-333445793454 <=< ACCEPT -->
        Size at which to rehash
        <!-- ACCEPT >=> 684c3bf5-9f1d-11ea-895a-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `transient int modCount`


        <!-- 684c3bf6-9f1d-11ea-895b-333445793454 <=< ACCEPT -->
        Modification count for iterators
        <!-- ACCEPT >=> 684c3bf6-9f1d-11ea-895b-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `transient EntrySet<K, V> entrySet`


        <!-- 684c3bf7-9f1d-11ea-895c-333445793454 <=< ACCEPT -->
        Entry set
        <!-- ACCEPT >=> 684c3bf7-9f1d-11ea-895c-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `transient KeySet<K> keySet`


        <!-- 684c3bf8-9f1d-11ea-895d-333445793454 <=< ACCEPT -->
        Key set
        <!-- ACCEPT >=> 684c3bf8-9f1d-11ea-895d-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `transient Values<V> values`


        <!-- 684c3bf9-9f1d-11ea-895e-333445793454 <=< ACCEPT -->
        Values
        <!-- ACCEPT >=> 684c3bf9-9f1d-11ea-895e-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `protected AbstractHashedMap()`


        <!-- 684c3bfa-9f1d-11ea-895f-333445793454 <=< ACCEPT -->
        Constructor only used in deserialization, do not use otherwise.
        <!-- ACCEPT >=> 684c3bfa-9f1d-11ea-895f-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `protected AbstractHashedMap(final int initialCapacity, final float loadFactor, final int threshold)`


        <!-- 684c3bfb-9f1d-11ea-8960-333445793454 <=< ACCEPT -->
        Constructor which performs no validation on the passed in parameters.
        @param initialCapacity  the initial capacity, must be a power of two
        @param loadFactor  the load factor, must be &gt; 0.0f and generally &lt; 1.0f
        @param threshold  the threshold, must be sensible
        <!-- ACCEPT >=> 684c3bfb-9f1d-11ea-8960-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `protected AbstractHashedMap(final int initialCapacity)`


        <!-- 684c3bfc-9f1d-11ea-8961-333445793454 <=< ACCEPT -->
        Constructs a new, empty map with the specified initial capacity and
        default load factor.
        @param initialCapacity  the initial capacity
        @throws IllegalArgumentException if the initial capacity is negative
        <!-- ACCEPT >=> 684c3bfc-9f1d-11ea-8961-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `protected AbstractHashedMap(int initialCapacity, final float loadFactor)`


        <!-- 684c3bfd-9f1d-11ea-8962-333445793454 <=< ACCEPT -->
        Constructs a new, empty map with the specified initial capacity and
        load factor.
        @param initialCapacity  the initial capacity
        @param loadFactor  the load factor
        @throws IllegalArgumentException if the initial capacity is negative
        @throws IllegalArgumentException if the load factor is less than or equal to zero
        <!-- ACCEPT >=> 684c3bfd-9f1d-11ea-8962-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `protected AbstractHashedMap(final Map<? extends K, ? extends V> map)`


        <!-- 684c3bfe-9f1d-11ea-8963-333445793454 <=< ACCEPT -->
        Constructor copying elements from another map.
        @param map  the map to copy
        @throws NullPointerException if the map is null
        <!-- ACCEPT >=> 684c3bfe-9f1d-11ea-8963-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `protected void init()`


        <!-- 684c3bff-9f1d-11ea-8964-333445793454 <=< ACCEPT -->
        Initialise subclasses during construction, cloning or deserialization.
        <!-- ACCEPT >=> 684c3bff-9f1d-11ea-8964-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `public V get(Object key)`


        <!-- 684c3c00-9f1d-11ea-8965-333445793454 <=< ACCEPT -->
        Gets the value mapped to the key specified.
        @param key  the key
        @return the mapped value, null if no match
        <!-- ACCEPT >=> 684c3c00-9f1d-11ea-8965-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `public int size()`


        <!-- 684c3c01-9f1d-11ea-8966-333445793454 <=< ACCEPT -->
        Gets the size of the map.
        @return the size
        <!-- ACCEPT >=> 684c3c01-9f1d-11ea-8966-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `public boolean isEmpty()`


        <!-- 684c3c02-9f1d-11ea-8967-333445793454 <=< ACCEPT -->
        Checks whether the map is currently empty.
        @return true if the map is currently size zero
        <!-- ACCEPT >=> 684c3c02-9f1d-11ea-8967-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `public boolean containsKey(Object key)`


        <!-- 684c3c03-9f1d-11ea-8968-333445793454 <=< ACCEPT -->
        Checks whether the map contains the specified key.
        @param key  the key to search for
        @return true if the map contains the key
        <!-- ACCEPT >=> 684c3c03-9f1d-11ea-8968-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `public boolean containsValue(final Object value)`


        <!-- 684c3c04-9f1d-11ea-8969-333445793454 <=< ACCEPT -->
        Checks whether the map contains the specified value.
        @param value  the value to search for
        @return true if the map contains the value
        <!-- ACCEPT >=> 684c3c04-9f1d-11ea-8969-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `public V put(final K key, final V value)`


        <!-- 684c3c05-9f1d-11ea-896a-333445793454 <=< ACCEPT -->
        Puts a key-value mapping into this map.
        @param key  the key to add
        @param value  the value to add
        @return the value previously mapped to this key, null if none
        <!-- ACCEPT >=> 684c3c05-9f1d-11ea-896a-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `public void putAll(final Map<? extends K, ? extends V> map)`


        <!-- 684c3c06-9f1d-11ea-896b-333445793454 <=< ACCEPT -->
        Puts all the values from the specified map into this map.
        <p>
        This implementation iterates around the specified map and
        uses {@link #put(Object, Object)}.
        @param map  the map to add
        @throws NullPointerException if the map is null
        <!-- ACCEPT >=> 684c3c06-9f1d-11ea-896b-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `private void _putAll(final Map<? extends K, ? extends V> map)`


        <!-- 684c3c07-9f1d-11ea-896c-333445793454 <=< ACCEPT -->
        Puts all the values from the specified map into this map.
        <p>
        This implementation iterates around the specified map and
        uses {@link #put(Object, Object)}.
        <p>
        It is private to allow the constructor to still call it
        even when putAll is overriden.
        @param map  the map to add
        @throws NullPointerException if the map is null
        <!-- ACCEPT >=> 684c3c07-9f1d-11ea-896c-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `public V remove(Object key)`


        <!-- 684c3c08-9f1d-11ea-896d-333445793454 <=< ACCEPT -->
        Removes the specified mapping from this map.
        @param key  the mapping to remove
        @return the value mapped to the removed key, null if key not in map
        <!-- ACCEPT >=> 684c3c08-9f1d-11ea-896d-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `public void clear()`


        <!-- 684c3c09-9f1d-11ea-896e-333445793454 <=< ACCEPT -->
        Clears the map, resetting the size to zero and nullifying references
        to avoid garbage collection issues.
        <!-- ACCEPT >=> 684c3c09-9f1d-11ea-896e-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `protected Object convertKey(final Object key)`


        <!-- 684c3c0a-9f1d-11ea-896f-333445793454 <=< ACCEPT -->
        Converts input keys to another object for storage in the map.
        This implementation masks nulls.
        Subclasses can override this to perform alternate key conversions.
        <p>
        The reverse conversion can be changed, if required, by overriding the
        getKey() method in the hash entry.
        @param key  the key convert
        @return the converted key
        <!-- ACCEPT >=> 684c3c0a-9f1d-11ea-896f-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `protected int hash(final Object key)`


        <!-- 684c3c0b-9f1d-11ea-8970-333445793454 <=< ACCEPT -->
        Gets the hash code for the key specified.
        This implementation uses the additional hashing routine from JDK1.4.
        Subclasses can override this to return alternate hash codes.
        @param key  the key to get a hash code for
        @return the hash code
        <!-- ACCEPT >=> 684c3c0b-9f1d-11ea-8970-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `protected boolean isEqualKey(final Object key1, final Object key2)`


        <!-- 684c62fd-9f1d-11ea-8971-333445793454 <=< ACCEPT -->
        Compares two keys, in internal converted form, to see if they are equal.
        This implementation uses the equals method and assumes neither key is null.
        Subclasses can override this to match differently.
        @param key1  the first key to compare passed in from outside
        @param key2  the second key extracted from the entry via <code>entry.key</code>
        @return true if equal
        <!-- ACCEPT >=> 684c62fd-9f1d-11ea-8971-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `protected boolean isEqualValue(final Object value1, final Object value2)`


        <!-- 684c62fe-9f1d-11ea-8972-333445793454 <=< ACCEPT -->
        Compares two values, in external form, to see if they are equal.
        This implementation uses the equals method and assumes neither value is null.
        Subclasses can override this to match differently.
        @param value1  the first value to compare passed in from outside
        @param value2  the second value extracted from the entry via <code>getValue()</code>
        @return true if equal
        <!-- ACCEPT >=> 684c62fe-9f1d-11ea-8972-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `protected int hashIndex(final int hashCode, final int dataSize)`


        <!-- 684c62ff-9f1d-11ea-8973-333445793454 <=< ACCEPT -->
        Gets the index into the data storage for the hashCode specified.
        This implementation uses the least significant bits of the hashCode.
        Subclasses can override this to return alternate bucketing.
        @param hashCode  the hash code to use
        @param dataSize  the size of the data to pick a bucket from
        @return the bucket index
        <!-- ACCEPT >=> 684c62ff-9f1d-11ea-8973-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `protected HashEntry<K, V> getEntry(Object key)`


        <!-- 684c6300-9f1d-11ea-8974-333445793454 <=< ACCEPT -->
        Gets the entry mapped to the key specified.
        <p>
        This method exists for subclasses that may need to perform a multi-step
        process accessing the entry. The public methods in this class don't use this
        method to gain a small performance boost.
        @param key  the key
        @return the entry, null if no match
        <!-- ACCEPT >=> 684c6300-9f1d-11ea-8974-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `protected void updateEntry(final HashEntry<K, V> entry, final V newValue)`


        <!-- 684c6301-9f1d-11ea-8975-333445793454 <=< ACCEPT -->
        Updates an existing key-value mapping to change the value.
        <p>
        This implementation calls <code>setValue()</code> on the entry.
        Subclasses could override to handle changes to the map.
        @param entry  the entry to update
        @param newValue  the new value to store
        <!-- ACCEPT >=> 684c6301-9f1d-11ea-8975-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `final K key, final V value)`


        <!-- 684c6302-9f1d-11ea-8976-333445793454 <=< ACCEPT -->
        Reuses an existing key-value mapping, storing completely new data.
        <p>
        This implementation sets all the data fields on the entry.
        Subclasses could populate additional entry fields.
        @param entry  the entry to update, not null
        @param hashIndex  the index in the data array
        @param hashCode  the hash code of the key to add
        @param key  the key to add
        @param value  the value to add
        <!-- ACCEPT >=> 684c6302-9f1d-11ea-8976-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `protected void addMapping(final int hashIndex, final int hashCode, final K key, final V value)`


        <!-- 684c6303-9f1d-11ea-8977-333445793454 <=< ACCEPT -->
        Adds a new key-value mapping into this map.
        <p>
        This implementation calls <code>createEntry()</code>, <code>addEntry()</code>
        and <code>checkCapacity()</code>.
        It also handles changes to <code>modCount</code> and <code>size</code>.
        Subclasses could override to fully control adds to the map.
        @param hashIndex  the index into the data array to store at
        @param hashCode  the hash code of the key to add
        @param key  the key to add
        @param value  the value to add
        <!-- ACCEPT >=> 684c6303-9f1d-11ea-8977-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `protected HashEntry<K, V> createEntry(final HashEntry<K, V> next, final int hashCode, final K key, final V value)`


        <!-- 684c6304-9f1d-11ea-8978-333445793454 <=< ACCEPT -->
        Creates an entry to store the key-value data.
        <p>
        This implementation creates a new HashEntry instance.
        Subclasses can override this to return a different storage class,
        or implement caching.
        @param next  the next entry in sequence
        @param hashCode  the hash code to use
        @param key  the key to store
        @param value  the value to store
        @return the newly created entry
        <!-- ACCEPT >=> 684c6304-9f1d-11ea-8978-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `protected void addEntry(final HashEntry<K, V> entry, final int hashIndex)`


        <!-- 684c6305-9f1d-11ea-8979-333445793454 <=< ACCEPT -->
        Adds an entry into this map.
        <p>
        This implementation adds the entry to the data storage table.
        Subclasses could override to handle changes to the map.
        @param entry  the entry to add
        @param hashIndex  the index into the data array to store at
        <!-- ACCEPT >=> 684c6305-9f1d-11ea-8979-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `protected void removeMapping(final HashEntry<K, V> entry, final int hashIndex, final HashEntry<K, V> previous)`


        <!-- 684c6306-9f1d-11ea-897a-333445793454 <=< ACCEPT -->
        Removes a mapping from the map.
        <p>
        This implementation calls <code>removeEntry()</code> and <code>destroyEntry()</code>.
        It also handles changes to <code>modCount</code> and <code>size</code>.
        Subclasses could override to fully control removals from the map.
        @param entry  the entry to remove
        @param hashIndex  the index into the data structure
        @param previous  the previous entry in the chain
        <!-- ACCEPT >=> 684c6306-9f1d-11ea-897a-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `protected void removeEntry(final HashEntry<K, V> entry, final int hashIndex, final HashEntry<K, V> previous)`


        <!-- 684c6307-9f1d-11ea-897b-333445793454 <=< ACCEPT -->
        Removes an entry from the chain stored in a particular index.
        <p>
        This implementation removes the entry from the data storage table.
        The size is not updated.
        Subclasses could override to handle changes to the map.
        @param entry  the entry to remove
        @param hashIndex  the index into the data structure
        @param previous  the previous entry in the chain
        <!-- ACCEPT >=> 684c6307-9f1d-11ea-897b-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `protected void destroyEntry(final HashEntry<K, V> entry)`


        <!-- 684c6308-9f1d-11ea-897c-333445793454 <=< ACCEPT -->
        Kills an entry ready for the garbage collector.
        <p>
        This implementation prepares the HashEntry for garbage collection.
        Subclasses can override this to implement caching (override clear as well).
        @param entry  the entry to destroy
        <!-- ACCEPT >=> 684c6308-9f1d-11ea-897c-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `protected void checkCapacity()`


        <!-- 684c6309-9f1d-11ea-897d-333445793454 <=< ACCEPT -->
        Checks the capacity of the map and enlarges it if necessary.
        <p>
        This implementation uses the threshold to check if the map needs enlarging
        <!-- ACCEPT >=> 684c6309-9f1d-11ea-897d-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `protected void ensureCapacity(final int newCapacity)`


        <!-- 684c89ff-9f1d-11ea-897e-333445793454 <=< ACCEPT -->
        Changes the size of the data structure to the capacity proposed.
        @param newCapacity  the new capacity of the array (a power of two, less or equal to max)
        <!-- ACCEPT >=> 684c89ff-9f1d-11ea-897e-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `protected int calculateNewCapacity(final int proposedCapacity)`


        <!-- 684c8a00-9f1d-11ea-897f-333445793454 <=< ACCEPT -->
        Calculates the new capacity of the map.
        This implementation normalizes the capacity to a power of two.
        @param proposedCapacity  the proposed capacity
        @return the normalized new capacity
        <!-- ACCEPT >=> 684c8a00-9f1d-11ea-897f-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `protected int calculateThreshold(final int newCapacity, final float factor)`


        <!-- 684c8a01-9f1d-11ea-8980-333445793454 <=< ACCEPT -->
        Calculates the new threshold of the map, where it will be resized.
        This implementation uses the load factor.
        @param newCapacity  the new capacity
        @param factor  the load factor
        @return the new resize threshold
        <!-- ACCEPT >=> 684c8a01-9f1d-11ea-8980-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `protected HashEntry<K, V> entryNext(final HashEntry<K, V> entry)`


        <!-- 684c8a02-9f1d-11ea-8981-333445793454 <=< ACCEPT -->
        Gets the <code>next</code> field from a <code>HashEntry</code>.
        Used in subclasses that have no visibility of the field.
        @param entry  the entry to query, must not be null
        @return the <code>next</code> field of the entry
        @throws NullPointerException if the entry is null
        @since 3.1
        <!-- ACCEPT >=> 684c8a02-9f1d-11ea-8981-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `protected int entryHashCode(final HashEntry<K, V> entry)`


        <!-- 684c8a03-9f1d-11ea-8982-333445793454 <=< ACCEPT -->
        Gets the <code>hashCode</code> field from a <code>HashEntry</code>.
        Used in subclasses that have no visibility of the field.
        @param entry  the entry to query, must not be null
        @return the <code>hashCode</code> field of the entry
        @throws NullPointerException if the entry is null
        @since 3.1
        <!-- ACCEPT >=> 684c8a03-9f1d-11ea-8982-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `protected K entryKey(final HashEntry<K, V> entry)`


        <!-- 684c8a04-9f1d-11ea-8983-333445793454 <=< ACCEPT -->
        Gets the <code>key</code> field from a <code>HashEntry</code>.
        Used in subclasses that have no visibility of the field.
        @param entry  the entry to query, must not be null
        @return the <code>key</code> field of the entry
        @throws NullPointerException if the entry is null
        @since 3.1
        <!-- ACCEPT >=> 684c8a04-9f1d-11ea-8983-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `protected V entryValue(final HashEntry<K, V> entry)`


        <!-- 684c8a05-9f1d-11ea-8984-333445793454 <=< ACCEPT -->
        Gets the <code>value</code> field from a <code>HashEntry</code>.
        Used in subclasses that have no visibility of the field.
        @param entry  the entry to query, must not be null
        @return the <code>value</code> field of the entry
        @throws NullPointerException if the entry is null
        @since 3.1
        <!-- ACCEPT >=> 684c8a05-9f1d-11ea-8984-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `public MapIterator<K, V> mapIterator()`


        <!-- 684c8a06-9f1d-11ea-8985-333445793454 <=< ACCEPT -->
        Gets an iterator over the map.
        Changes made to the iterator affect this map.
        <p>
        A MapIterator returns the keys in the map. It also provides convenient
        methods to get the key and value, and set the value.
        It avoids the need to create an entrySet/keySet/values object.
        It also avoids creating the Map.Entry object.
        @return the map iterator
        <!-- ACCEPT >=> 684c8a06-9f1d-11ea-8985-333445793454 -->



## Class: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `protected static class HashMapIterator<K, V> extends HashIterator<K, V> implements MapIterator<K, V>`


        <!-- 684c8a07-9f1d-11ea-8986-333445793454 <=< ACCEPT -->
        MapIterator implementation.
        <!-- ACCEPT >=> 684c8a07-9f1d-11ea-8986-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `public Set<Map.Entry<K, V>> entrySet()`


        <!-- 684c8a08-9f1d-11ea-8987-333445793454 <=< ACCEPT -->
        Gets the entrySet view of the map.
        Changes made to the view affect this map.
        To simply iterate through the entries, use {@link #mapIterator()}.
        @return the entrySet view
        <!-- ACCEPT >=> 684c8a08-9f1d-11ea-8987-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `protected Iterator<Map.Entry<K, V>> createEntrySetIterator()`


        <!-- 684c8a09-9f1d-11ea-8988-333445793454 <=< ACCEPT -->
        Creates an entry set iterator.
        Subclasses can override this to return iterators with different properties.
        @return the entrySet iterator
        <!-- ACCEPT >=> 684c8a09-9f1d-11ea-8988-333445793454 -->



## Class: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `protected static class EntrySet<K, V> extends AbstractSet<Map.Entry<K, V>>`


        <!-- 684c8a0a-9f1d-11ea-8989-333445793454 <=< ACCEPT -->
        EntrySet implementation.
        <!-- ACCEPT >=> 684c8a0a-9f1d-11ea-8989-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `private final AbstractHashedMap<K, V> parent`


        <!-- 684c8a0b-9f1d-11ea-898a-333445793454 <=< ACCEPT -->
        The parent map
        <!-- ACCEPT >=> 684c8a0b-9f1d-11ea-898a-333445793454 -->



## Class: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `protected static class EntrySetIterator<K, V> extends HashIterator<K, V> implements Iterator<Map.Entry<K, V>>`


        <!-- 684c8a0c-9f1d-11ea-898b-333445793454 <=< ACCEPT -->
        EntrySet iterator.
        <!-- ACCEPT >=> 684c8a0c-9f1d-11ea-898b-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `public Set<K> keySet()`


        <!-- 684c8a0d-9f1d-11ea-898c-333445793454 <=< ACCEPT -->
        Gets the keySet view of the map.
        Changes made to the view affect this map.
        To simply iterate through the keys, use {@link #mapIterator()}.
        @return the keySet view
        <!-- ACCEPT >=> 684c8a0d-9f1d-11ea-898c-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `protected Iterator<K> createKeySetIterator()`


        <!-- 684c8a0e-9f1d-11ea-898d-333445793454 <=< ACCEPT -->
        Creates a key set iterator.
        Subclasses can override this to return iterators with different properties.
        @return the keySet iterator
        <!-- ACCEPT >=> 684c8a0e-9f1d-11ea-898d-333445793454 -->



## Class: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `protected static class KeySet<K> extends AbstractSet<K>`


        <!-- 684c8a0f-9f1d-11ea-898e-333445793454 <=< ACCEPT -->
        KeySet implementation.
        <!-- ACCEPT >=> 684c8a0f-9f1d-11ea-898e-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `private final AbstractHashedMap<K, ?> parent`


        <!-- 684c8a10-9f1d-11ea-898f-333445793454 <=< ACCEPT -->
        The parent map
        <!-- ACCEPT >=> 684c8a10-9f1d-11ea-898f-333445793454 -->



## Class: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `protected static class KeySetIterator<K> extends HashIterator<K, Object> implements Iterator<K>`


        <!-- 684c8a11-9f1d-11ea-8990-333445793454 <=< ACCEPT -->
        KeySet iterator.
        <!-- ACCEPT >=> 684c8a11-9f1d-11ea-8990-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `public Collection<V> values()`


        <!-- 684c8a12-9f1d-11ea-8991-333445793454 <=< ACCEPT -->
        Gets the values view of the map.
        Changes made to the view affect this map.
        To simply iterate through the values, use {@link #mapIterator()}.
        @return the values view
        <!-- ACCEPT >=> 684c8a12-9f1d-11ea-8991-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `protected Iterator<V> createValuesIterator()`


        <!-- 684c8a13-9f1d-11ea-8992-333445793454 <=< ACCEPT -->
        Creates a values iterator.
        Subclasses can override this to return iterators with different properties.
        @return the values iterator
        <!-- ACCEPT >=> 684c8a13-9f1d-11ea-8992-333445793454 -->



## Class: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `protected static class Values<V> extends AbstractCollection<V>`


        <!-- 684c8a14-9f1d-11ea-8993-333445793454 <=< ACCEPT -->
        Values implementation.
        <!-- ACCEPT >=> 684c8a14-9f1d-11ea-8993-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `private final AbstractHashedMap<?, V> parent`


        <!-- 684cb107-9f1d-11ea-8994-333445793454 <=< ACCEPT -->
        The parent map
        <!-- ACCEPT >=> 684cb107-9f1d-11ea-8994-333445793454 -->



## Class: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `protected static class ValuesIterator<V> extends HashIterator<Object, V> implements Iterator<V>`


        <!-- 684cb108-9f1d-11ea-8995-333445793454 <=< ACCEPT -->
        Values iterator.
        <!-- ACCEPT >=> 684cb108-9f1d-11ea-8995-333445793454 -->



## Class: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `protected static class HashEntry<K, V> implements Map.Entry<K, V>, KeyValue<K, V>`


        <!-- 684cb109-9f1d-11ea-8996-333445793454 <=< ACCEPT -->
        HashEntry used to store the data.
        <p>
        If you subclass <code>AbstractHashedMap</code> but not <code>HashEntry</code>
        then you will not be able to access the protected fields.
        The <code>entryXxx()</code> methods on <code>AbstractHashedMap</code> exist
        to provide the necessary access.
        <!-- ACCEPT >=> 684cb109-9f1d-11ea-8996-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `protected HashEntry<K, V> next`


        <!-- 684cb10a-9f1d-11ea-8997-333445793454 <=< ACCEPT -->
        The next entry in the hash chain
        <!-- ACCEPT >=> 684cb10a-9f1d-11ea-8997-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `protected int hashCode`


        <!-- 684cb10b-9f1d-11ea-8998-333445793454 <=< ACCEPT -->
        The hash code of the key
        <!-- ACCEPT >=> 684cb10b-9f1d-11ea-8998-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `protected Object key`


        <!-- 684cb10c-9f1d-11ea-8999-333445793454 <=< ACCEPT -->
        The key
        <!-- ACCEPT >=> 684cb10c-9f1d-11ea-8999-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `protected Object value`


        <!-- 684cb10d-9f1d-11ea-899a-333445793454 <=< ACCEPT -->
        The value
        <!-- ACCEPT >=> 684cb10d-9f1d-11ea-899a-333445793454 -->



## Class: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `protected static abstract class HashIterator<K, V>`


        <!-- 684cb10e-9f1d-11ea-899b-333445793454 <=< ACCEPT -->
        Base Iterator
        <!-- ACCEPT >=> 684cb10e-9f1d-11ea-899b-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `private final AbstractHashedMap<K, V> parent`


        <!-- 684cb10f-9f1d-11ea-899c-333445793454 <=< ACCEPT -->
        The parent map
        <!-- ACCEPT >=> 684cb10f-9f1d-11ea-899c-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `private int hashIndex`


        <!-- 684cb110-9f1d-11ea-899d-333445793454 <=< ACCEPT -->
        The current index into the array of buckets
        <!-- ACCEPT >=> 684cb110-9f1d-11ea-899d-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `private HashEntry<K, V> last`


        <!-- 684cb111-9f1d-11ea-899e-333445793454 <=< ACCEPT -->
        The last returned entry
        <!-- ACCEPT >=> 684cb111-9f1d-11ea-899e-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `private HashEntry<K, V> next`


        <!-- 684cb112-9f1d-11ea-899f-333445793454 <=< ACCEPT -->
        The next entry
        <!-- ACCEPT >=> 684cb112-9f1d-11ea-899f-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `private int expectedModCount`


        <!-- 684cb113-9f1d-11ea-89a0-333445793454 <=< ACCEPT -->
        The modification count expected
        <!-- ACCEPT >=> 684cb113-9f1d-11ea-89a0-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `protected void doWriteObject(final ObjectOutputStream out) throws IOException`


        <!-- 684cb114-9f1d-11ea-89a1-333445793454 <=< ACCEPT -->
        Writes the map data to the stream. This method must be overridden if a
        subclass must be setup before <code>put()</code> is used.
        <p>
        Serialization is not one of the JDK's nicest topics. Normal serialization will
        initialise the superclass before the subclass. Sometimes however, this isn't
        what you want, as in this case the <code>put()</code> method on read can be
        affected by subclass state.
        <p>
        The solution adopted here is to serialize the state data of this class in
        this protected method. This method must be called by the
        <code>writeObject()</code> of the first serializable subclass.
        <p>
        Subclasses may override if they have a specific field that must be present
        on read before this implementation will work. Generally, the read determines
        what must be serialized here, if anything.
        @param out  the output stream
        @throws IOException if an error occurs while writing tothe stream
        <!-- ACCEPT >=> 684cb114-9f1d-11ea-89a1-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `protected void doReadObject(final ObjectInputStream in) throws IOException, ClassNotFoundException`


        <!-- 684cb115-9f1d-11ea-89a2-333445793454 <=< ACCEPT -->
        Reads the map data from the stream. This method must be overridden if a
        subclass must be setup before <code>put()</code> is used.
        <p>
        Serialization is not one of the JDK's nicest topics. Normal serialization will
        initialise the superclass before the subclass. Sometimes however, this isn't
        what you want, as in this case the <code>put()</code> method on read can be
        affected by subclass state.
        <p>
        The solution adopted here is to deserialize the state data of this class in
        this protected method. This method must be called by the
        <code>readObject()</code> of the first serializable subclass.
        <p>
        Subclasses may override if the subclass has a specific field that must be present
        before <code>put()</code> or <code>calculateThreshold()</code> will work correctly.
        @param in  the input stream
        @throws IOException if an error occurs while reading from the stream
        @throws ClassNotFoundException if an object read from the stream can not be loaded
        <!-- ACCEPT >=> 684cb115-9f1d-11ea-89a2-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `protected AbstractHashedMap<K, V> clone()`


        <!-- 684cb116-9f1d-11ea-89a3-333445793454 <=< ACCEPT -->
        Clones the map without cloning the keys or values.
        <p>
        To implement <code>clone()</code>, a subclass must implement the
        <code>Cloneable</code> interface and make this method public.
        @return a shallow clone
        @throws InternalError if {@link AbstractMap#clone()} failed
        <!-- ACCEPT >=> 684cb116-9f1d-11ea-89a3-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `public boolean equals(final Object obj)`


        <!-- 684cb117-9f1d-11ea-89a4-333445793454 <=< ACCEPT -->
        Compares this map with another.
        @param obj  the object to compare to
        @return true if equal
        <!-- ACCEPT >=> 684cb117-9f1d-11ea-89a4-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `public int hashCode()`


        <!-- 684cb118-9f1d-11ea-89a5-333445793454 <=< ACCEPT -->
        Gets the standard Map hashCode.
        @return the hash code defined in the Map interface
        <!-- ACCEPT >=> 684cb118-9f1d-11ea-89a5-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractHashedMap` / `public String toString()`


        <!-- 684cb119-9f1d-11ea-89a6-333445793454 <=< ACCEPT -->
        Gets the map as a String.
        @return a string version of the map
        <!-- ACCEPT >=> 684cb119-9f1d-11ea-89a6-333445793454 -->



# File: `java.org.apache.commons.collections4.map.AbstractInputCheckedMapDecorator`

## Class: `java.org.apache.commons.collections4.map.AbstractInputCheckedMapDecorator` / `extends AbstractMapDecorator<K, V>`


        <!-- 684cb11a-9f1d-11ea-89a7-333445793454 <=< ACCEPT -->
        An abstract base class that simplifies the task of creating map decorators.
        <p>
        The Map API is very difficult to decorate correctly, and involves implementing
        lots of different classes. This class exists to provide a simpler API.
        <p>
        Special hook methods are provided that are called when objects are added to
        the map. By overriding these methods, the input can be validated or manipulated.
        In addition to the main map methods, the entrySet is also affected, which is
        the hardest part of writing map implementations.
        <p>
        This class is package-scoped, and may be withdrawn or replaced in future
        versions of Commons Collections.
        @since 3.1
        @version $Id$
        <!-- ACCEPT >=> 684cb11a-9f1d-11ea-89a7-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.AbstractInputCheckedMapDecorator` / `protected AbstractInputCheckedMapDecorator()`


        <!-- 684cb11b-9f1d-11ea-89a8-333445793454 <=< ACCEPT -->
        Constructor only used in deserialization, do not use otherwise.
        <!-- ACCEPT >=> 684cb11b-9f1d-11ea-89a8-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.AbstractInputCheckedMapDecorator` / `protected AbstractInputCheckedMapDecorator(final Map<K, V> map)`


        <!-- 684cd812-9f1d-11ea-89a9-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param map  the map to decorate, must not be null
        @throws NullPointerException if map is null
        <!-- ACCEPT >=> 684cd812-9f1d-11ea-89a9-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractInputCheckedMapDecorator` / `protected abstract V checkSetValue(V value)`


        <!-- 684cd813-9f1d-11ea-89aa-333445793454 <=< ACCEPT -->
        Hook method called when a value is being set using <code>setValue</code>.
        <p>
        An implementation may validate the value and throw an exception
        or it may transform the value into another object.
        <p>
        This implementation returns the input value.
        @param value  the value to check
        @throws UnsupportedOperationException if the map may not be changed by setValue
        @throws IllegalArgumentException if the specified value is invalid
        @throws ClassCastException if the class of the specified value is invalid
        @throws NullPointerException if the specified value is null and nulls are invalid
        <!-- ACCEPT >=> 684cd813-9f1d-11ea-89aa-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractInputCheckedMapDecorator` / `protected boolean isSetValueChecking()`


        <!-- 684cd814-9f1d-11ea-89ab-333445793454 <=< ACCEPT -->
        Hook method called to determine if <code>checkSetValue</code> has any effect.
        <p>
        An implementation should return false if the <code>checkSetValue</code> method
        has no effect as this optimises the implementation.
        <p>
        This implementation returns <code>true</code>.
        @return true always
        <!-- ACCEPT >=> 684cd814-9f1d-11ea-89ab-333445793454 -->



## Class: `java.org.apache.commons.collections4.map.AbstractInputCheckedMapDecorator` / `private class EntrySet extends AbstractSetDecorator<Map.Entry<K, V>>`


        <!-- 684cd815-9f1d-11ea-89ac-333445793454 <=< ACCEPT -->
        Implementation of an entry set that checks additions via setValue.
        <!-- ACCEPT >=> 684cd815-9f1d-11ea-89ac-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.AbstractInputCheckedMapDecorator` / `private static final long serialVersionUID`


        <!-- 684cd816-9f1d-11ea-89ad-333445793454 <=< ACCEPT -->
        Generated serial version ID.
        <!-- ACCEPT >=> 684cd816-9f1d-11ea-89ad-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.AbstractInputCheckedMapDecorator` / `private final AbstractInputCheckedMapDecorator<K, V> parent`


        <!-- 684cd817-9f1d-11ea-89ae-333445793454 <=< ACCEPT -->
        The parent map
        <!-- ACCEPT >=> 684cd817-9f1d-11ea-89ae-333445793454 -->



## Class: `java.org.apache.commons.collections4.map.AbstractInputCheckedMapDecorator` / `private class EntrySetIterator extends AbstractIteratorDecorator<Map.Entry<K, V>>`


        <!-- 684cd818-9f1d-11ea-89af-333445793454 <=< ACCEPT -->
        Implementation of an entry set iterator that checks additions via setValue.
        <!-- ACCEPT >=> 684cd818-9f1d-11ea-89af-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.AbstractInputCheckedMapDecorator` / `private final AbstractInputCheckedMapDecorator<K, V> parent`


        <!-- 684cd819-9f1d-11ea-89b0-333445793454 <=< ACCEPT -->
        The parent map
        <!-- ACCEPT >=> 684cd819-9f1d-11ea-89b0-333445793454 -->



## Class: `java.org.apache.commons.collections4.map.AbstractInputCheckedMapDecorator` / `private class MapEntry extends AbstractMapEntryDecorator<K, V>`


        <!-- 684cd81a-9f1d-11ea-89b1-333445793454 <=< ACCEPT -->
        Implementation of a map entry that checks additions via setValue.
        <!-- ACCEPT >=> 684cd81a-9f1d-11ea-89b1-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.AbstractInputCheckedMapDecorator` / `private final AbstractInputCheckedMapDecorator<K, V> parent`


        <!-- 684cd81b-9f1d-11ea-89b2-333445793454 <=< ACCEPT -->
        The parent map
        <!-- ACCEPT >=> 684cd81b-9f1d-11ea-89b2-333445793454 -->



# File: `java.org.apache.commons.collections4.map.AbstractIterableMap`

## Class: `java.org.apache.commons.collections4.map.AbstractIterableMap` / `public abstract class AbstractIterableMap<K, V> implements IterableMap<K, V>`


        <!-- 684cd81c-9f1d-11ea-89b3-333445793454 <=< ACCEPT -->
        Provide a basic {@link IterableMap} implementation.
        @since 4.0
        @version $Id$
        <!-- ACCEPT >=> 684cd81c-9f1d-11ea-89b3-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractIterableMap` / `public MapIterator<K, V> mapIterator()`


        <!-- 684cd81d-9f1d-11ea-89b4-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <!-- ACCEPT >=> 684cd81d-9f1d-11ea-89b4-333445793454 -->



# File: `java.org.apache.commons.collections4.map.AbstractLinkedMap`

## Class: `java.org.apache.commons.collections4.map.AbstractLinkedMap` / `public abstract class AbstractLinkedMap<K, V> extends AbstractHashedMap<K, V> implements OrderedMap<K, V>`


        <!-- 684cd81e-9f1d-11ea-89b5-333445793454 <=< ACCEPT -->
        An abstract implementation of a hash-based map that links entries to create an
        ordered map and which provides numerous points for subclasses to override.
        <p>
        This class implements all the features necessary for a subclass linked
        hash-based map. Key-value entries are stored in instances of the
        <code>LinkEntry</code> class which can be overridden and replaced.
        The iterators can similarly be replaced, without the need to replace the KeySet,
        EntrySet and Values view classes.
        <p>
        Overridable methods are provided to change the default hashing behaviour, and
        to change how entries are added to and removed from the map. Hopefully, all you
        need for unusual subclasses is here.
        <p>
        This implementation maintains order by original insertion, but subclasses
        may work differently. The <code>OrderedMap</code> interface is implemented
        to provide access to bidirectional iteration and extra convenience methods.
        <p>
        The <code>orderedMapIterator()</code> method provides direct access to a
        bidirectional iterator. The iterators from the other views can also be cast
        to <code>OrderedIterator</code> if required.
        <p>
        All the available iterators can be reset back to the start by casting to
        <code>ResettableIterator</code> and calling <code>reset()</code>.
        <p>
        The implementation is also designed to be subclassed, with lots of useful
        methods exposed.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 684cd81e-9f1d-11ea-89b5-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.AbstractLinkedMap` / `transient LinkEntry<K, V> header`


        <!-- 684cd81f-9f1d-11ea-89b6-333445793454 <=< ACCEPT -->
        Header in the linked list
        <!-- ACCEPT >=> 684cd81f-9f1d-11ea-89b6-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.AbstractLinkedMap` / `protected AbstractLinkedMap()`


        <!-- 684cd820-9f1d-11ea-89b7-333445793454 <=< ACCEPT -->
        Constructor only used in deserialization, do not use otherwise.
        <!-- ACCEPT >=> 684cd820-9f1d-11ea-89b7-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.AbstractLinkedMap` / `protected AbstractLinkedMap(final int initialCapacity, final float loadFactor, final int threshold)`


        <!-- 684cd821-9f1d-11ea-89b8-333445793454 <=< ACCEPT -->
        Constructor which performs no validation on the passed in parameters.
        @param initialCapacity  the initial capacity, must be a power of two
        @param loadFactor  the load factor, must be > 0.0f and generally < 1.0f
        @param threshold  the threshold, must be sensible
        <!-- ACCEPT >=> 684cd821-9f1d-11ea-89b8-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.AbstractLinkedMap` / `protected AbstractLinkedMap(final int initialCapacity)`


        <!-- 684cd822-9f1d-11ea-89b9-333445793454 <=< ACCEPT -->
        Constructs a new, empty map with the specified initial capacity.
        @param initialCapacity  the initial capacity
        @throws IllegalArgumentException if the initial capacity is negative
        <!-- ACCEPT >=> 684cd822-9f1d-11ea-89b9-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.AbstractLinkedMap` / `protected AbstractLinkedMap(final int initialCapacity, final float loadFactor)`


        <!-- 684cd823-9f1d-11ea-89ba-333445793454 <=< ACCEPT -->
        Constructs a new, empty map with the specified initial capacity and
        load factor.
        @param initialCapacity  the initial capacity
        @param loadFactor  the load factor
        @throws IllegalArgumentException if the initial capacity is negative
        @throws IllegalArgumentException if the load factor is less than zero
        <!-- ACCEPT >=> 684cd823-9f1d-11ea-89ba-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.AbstractLinkedMap` / `protected AbstractLinkedMap(final Map<? extends K, ? extends V> map)`


        <!-- 684cd824-9f1d-11ea-89bb-333445793454 <=< ACCEPT -->
        Constructor copying elements from another map.
        @param map  the map to copy
        @throws NullPointerException if the map is null
        <!-- ACCEPT >=> 684cd824-9f1d-11ea-89bb-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractLinkedMap` / `protected void init()`


        <!-- 684cff1c-9f1d-11ea-89bc-333445793454 <=< ACCEPT -->
        Initialise this subclass during construction.
        <p>
        NOTE: As from v3.2 this method calls
        {@link #createEntry(HashEntry, int, Object, Object)} to create
        the map entry object.
        <!-- ACCEPT >=> 684cff1c-9f1d-11ea-89bc-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractLinkedMap` / `public boolean containsValue(final Object value)`


        <!-- 684cff1d-9f1d-11ea-89bd-333445793454 <=< ACCEPT -->
        Checks whether the map contains the specified value.
        @param value  the value to search for
        @return true if the map contains the value
        <!-- ACCEPT >=> 684cff1d-9f1d-11ea-89bd-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractLinkedMap` / `public void clear()`


        <!-- 684cff1e-9f1d-11ea-89be-333445793454 <=< ACCEPT -->
        Clears the map, resetting the size to zero and nullifying references
        to avoid garbage collection issues.
        <!-- ACCEPT >=> 684cff1e-9f1d-11ea-89be-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractLinkedMap` / `public K firstKey()`


        <!-- 684cff1f-9f1d-11ea-89bf-333445793454 <=< ACCEPT -->
        Gets the first key in the map, which is the first inserted.
        @return the eldest key
        <!-- ACCEPT >=> 684cff1f-9f1d-11ea-89bf-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractLinkedMap` / `public K lastKey()`


        <!-- 684cff20-9f1d-11ea-89c0-333445793454 <=< ACCEPT -->
        Gets the last key in the map, which is the most recently inserted.
        @return the most recently inserted key
        <!-- ACCEPT >=> 684cff20-9f1d-11ea-89c0-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractLinkedMap` / `public K nextKey(final Object key)`


        <!-- 684cff21-9f1d-11ea-89c1-333445793454 <=< ACCEPT -->
        Gets the next key in sequence.
        @param key  the key to get after
        @return the next key
        <!-- ACCEPT >=> 684cff21-9f1d-11ea-89c1-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractLinkedMap` / `public K previousKey(final Object key)`


        <!-- 684cff22-9f1d-11ea-89c2-333445793454 <=< ACCEPT -->
        Gets the previous key in sequence.
        @param key  the key to get before
        @return the previous key
        <!-- ACCEPT >=> 684cff22-9f1d-11ea-89c2-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractLinkedMap` / `protected LinkEntry<K, V> getEntry(final int index)`


        <!-- 684cff23-9f1d-11ea-89c3-333445793454 <=< ACCEPT -->
        Gets the key at the specified index.
        @param index  the index to retrieve
        @return the key at the specified index
        @throws IndexOutOfBoundsException if the index is invalid
        <!-- ACCEPT >=> 684cff23-9f1d-11ea-89c3-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractLinkedMap` / `protected void addEntry(final HashEntry<K, V> entry, final int hashIndex)`


        <!-- 684cff24-9f1d-11ea-89c4-333445793454 <=< ACCEPT -->
        Adds an entry into this map, maintaining insertion order.
        <p>
        This implementation adds the entry to the data storage table and
        to the end of the linked list.
        @param entry  the entry to add
        @param hashIndex  the index into the data array to store at
        <!-- ACCEPT >=> 684cff24-9f1d-11ea-89c4-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractLinkedMap` / `protected LinkEntry<K, V> createEntry(final HashEntry<K, V> next, final int hashCode, final K key, final V value)`


        <!-- 684cff25-9f1d-11ea-89c5-333445793454 <=< ACCEPT -->
        Creates an entry to store the data.
        <p>
        This implementation creates a new LinkEntry instance.
        @param next  the next entry in sequence
        @param hashCode  the hash code to use
        @param key  the key to store
        @param value  the value to store
        @return the newly created entry
        <!-- ACCEPT >=> 684cff25-9f1d-11ea-89c5-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractLinkedMap` / `protected void removeEntry(final HashEntry<K, V> entry, final int hashIndex, final HashEntry<K, V> previous)`


        <!-- 684cff26-9f1d-11ea-89c6-333445793454 <=< ACCEPT -->
        Removes an entry from the map and the linked list.
        <p>
        This implementation removes the entry from the linked list chain, then
        calls the superclass implementation.
        @param entry  the entry to remove
        @param hashIndex  the index into the data structure
        @param previous  the previous entry in the chain
        <!-- ACCEPT >=> 684cff26-9f1d-11ea-89c6-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractLinkedMap` / `protected LinkEntry<K, V> entryBefore(final LinkEntry<K, V> entry)`


        <!-- 684cff27-9f1d-11ea-89c7-333445793454 <=< ACCEPT -->
        Gets the <code>before</code> field from a <code>LinkEntry</code>.
        Used in subclasses that have no visibility of the field.
        @param entry  the entry to query, must not be null
        @return the <code>before</code> field of the entry
        @throws NullPointerException if the entry is null
        @since 3.1
        <!-- ACCEPT >=> 684cff27-9f1d-11ea-89c7-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractLinkedMap` / `protected LinkEntry<K, V> entryAfter(final LinkEntry<K, V> entry)`


        <!-- 684cff28-9f1d-11ea-89c8-333445793454 <=< ACCEPT -->
        Gets the <code>after</code> field from a <code>LinkEntry</code>.
        Used in subclasses that have no visibility of the field.
        @param entry  the entry to query, must not be null
        @return the <code>after</code> field of the entry
        @throws NullPointerException if the entry is null
        @since 3.1
        <!-- ACCEPT >=> 684cff28-9f1d-11ea-89c8-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractLinkedMap` / `public OrderedMapIterator<K, V> mapIterator()`


        <!-- 684cff29-9f1d-11ea-89c9-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <!-- ACCEPT >=> 684cff29-9f1d-11ea-89c9-333445793454 -->



## Class: `java.org.apache.commons.collections4.map.AbstractLinkedMap` / `OrderedMapIterator<K, V>, ResettableIterator<K>`


        <!-- 684cff2a-9f1d-11ea-89ca-333445793454 <=< ACCEPT -->
        MapIterator implementation.
        <!-- ACCEPT >=> 684cff2a-9f1d-11ea-89ca-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractLinkedMap` / `protected Iterator<Map.Entry<K, V>> createEntrySetIterator()`


        <!-- 684cff2b-9f1d-11ea-89cb-333445793454 <=< ACCEPT -->
        Creates an entry set iterator.
        Subclasses can override this to return iterators with different properties.
        @return the entrySet iterator
        <!-- ACCEPT >=> 684cff2b-9f1d-11ea-89cb-333445793454 -->



## Class: `java.org.apache.commons.collections4.map.AbstractLinkedMap` / `OrderedIterator<Map.Entry<K, V>>, ResettableIterator<Map.Entry<K, V>>`


        <!-- 684cff2c-9f1d-11ea-89cc-333445793454 <=< ACCEPT -->
        EntrySet iterator.
        <!-- ACCEPT >=> 684cff2c-9f1d-11ea-89cc-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractLinkedMap` / `protected Iterator<K> createKeySetIterator()`


        <!-- 684cff2d-9f1d-11ea-89cd-333445793454 <=< ACCEPT -->
        Creates a key set iterator.
        Subclasses can override this to return iterators with different properties.
        @return the keySet iterator
        <!-- ACCEPT >=> 684cff2d-9f1d-11ea-89cd-333445793454 -->



## Class: `java.org.apache.commons.collections4.map.AbstractLinkedMap` / `OrderedIterator<K>, ResettableIterator<K>`


        <!-- 684cff2e-9f1d-11ea-89ce-333445793454 <=< ACCEPT -->
        KeySet iterator.
        <!-- ACCEPT >=> 684cff2e-9f1d-11ea-89ce-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractLinkedMap` / `protected Iterator<V> createValuesIterator()`


        <!-- 684cff2f-9f1d-11ea-89cf-333445793454 <=< ACCEPT -->
        Creates a values iterator.
        Subclasses can override this to return iterators with different properties.
        @return the values iterator
        <!-- ACCEPT >=> 684cff2f-9f1d-11ea-89cf-333445793454 -->



## Class: `java.org.apache.commons.collections4.map.AbstractLinkedMap` / `OrderedIterator<V>, ResettableIterator<V>`


        <!-- 684cff30-9f1d-11ea-89d0-333445793454 <=< ACCEPT -->
        Values iterator.
        <!-- ACCEPT >=> 684cff30-9f1d-11ea-89d0-333445793454 -->



## Class: `java.org.apache.commons.collections4.map.AbstractLinkedMap` / `protected static class LinkEntry<K, V> extends HashEntry<K, V>`


        <!-- 684cff31-9f1d-11ea-89d1-333445793454 <=< ACCEPT -->
        LinkEntry that stores the data.
        <p>
        If you subclass <code>AbstractLinkedMap</code> but not <code>LinkEntry</code>
        then you will not be able to access the protected fields.
        The <code>entryXxx()</code> methods on <code>AbstractLinkedMap</code> exist
        to provide the necessary access.
        <!-- ACCEPT >=> 684cff31-9f1d-11ea-89d1-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.AbstractLinkedMap` / `protected LinkEntry<K, V> before`


        <!-- 684cff32-9f1d-11ea-89d2-333445793454 <=< ACCEPT -->
        The entry before this one in the order
        <!-- ACCEPT >=> 684cff32-9f1d-11ea-89d2-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.AbstractLinkedMap` / `protected LinkEntry<K, V> after`


        <!-- 684d2624-9f1d-11ea-89d3-333445793454 <=< ACCEPT -->
        The entry after this one in the order
        <!-- ACCEPT >=> 684d2624-9f1d-11ea-89d3-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.AbstractLinkedMap` / `protected LinkEntry(final HashEntry<K, V> next, final int hashCode, final Object key, final V value)`


        <!-- 684d2625-9f1d-11ea-89d4-333445793454 <=< ACCEPT -->
        Constructs a new entry.
        @param next  the next entry in the hash bucket sequence
        @param hashCode  the hash code
        @param key  the key
        @param value  the value
        <!-- ACCEPT >=> 684d2625-9f1d-11ea-89d4-333445793454 -->



## Class: `java.org.apache.commons.collections4.map.AbstractLinkedMap` / `protected static abstract class LinkIterator<K, V>`


        <!-- 684d2626-9f1d-11ea-89d5-333445793454 <=< ACCEPT -->
        Base Iterator that iterates in link order.
        <!-- ACCEPT >=> 684d2626-9f1d-11ea-89d5-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.AbstractLinkedMap` / `protected final AbstractLinkedMap<K, V> parent`


        <!-- 684d2627-9f1d-11ea-89d6-333445793454 <=< ACCEPT -->
        The parent map
        <!-- ACCEPT >=> 684d2627-9f1d-11ea-89d6-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.AbstractLinkedMap` / `protected LinkEntry<K, V> last`


        <!-- 684d2628-9f1d-11ea-89d7-333445793454 <=< ACCEPT -->
        The current (last returned) entry
        <!-- ACCEPT >=> 684d2628-9f1d-11ea-89d7-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.AbstractLinkedMap` / `protected LinkEntry<K, V> next`


        <!-- 684d2629-9f1d-11ea-89d8-333445793454 <=< ACCEPT -->
        The next entry
        <!-- ACCEPT >=> 684d2629-9f1d-11ea-89d8-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.AbstractLinkedMap` / `protected int expectedModCount`


        <!-- 684d262a-9f1d-11ea-89d9-333445793454 <=< ACCEPT -->
        The modification count expected
        <!-- ACCEPT >=> 684d262a-9f1d-11ea-89d9-333445793454 -->



# File: `java.org.apache.commons.collections4.map.AbstractMapDecorator`

## Class: `java.org.apache.commons.collections4.map.AbstractMapDecorator` / `public abstract class AbstractMapDecorator<K, V> extends AbstractIterableMap<K, V>`


        <!-- 684d262b-9f1d-11ea-89da-333445793454 <=< ACCEPT -->
        Provides a base decorator that enables additional functionality to be added
        to a Map via decoration.
        <p>
        Methods are forwarded directly to the decorated map.
        <p>
        This implementation does not perform any special processing with
        {@link #entrySet()}, {@link #keySet()} or {@link #values()}. Instead
        it simply returns the set/collection from the wrapped map. This may be
        undesirable, for example if you are trying to write a validating
        implementation it would provide a loophole around the validation.
        But, you might want that loophole, so this class is kept simple.
        @param <K> the type of the keys in the map
        @param <V> the type of the values in the map
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 684d262b-9f1d-11ea-89da-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.AbstractMapDecorator` / `transient Map<K, V> map`


        <!-- 684d262c-9f1d-11ea-89db-333445793454 <=< ACCEPT -->
        The map to decorate
        <!-- ACCEPT >=> 684d262c-9f1d-11ea-89db-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.AbstractMapDecorator` / `protected AbstractMapDecorator()`


        <!-- 684d262d-9f1d-11ea-89dc-333445793454 <=< ACCEPT -->
        Constructor only used in deserialization, do not use otherwise.
        @since 3.1
        <!-- ACCEPT >=> 684d262d-9f1d-11ea-89dc-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.AbstractMapDecorator` / `protected AbstractMapDecorator(final Map<K, V> map)`


        <!-- 684d262e-9f1d-11ea-89dd-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param map  the map to decorate, must not be null
        @throws NullPointerException if the map is null
        <!-- ACCEPT >=> 684d262e-9f1d-11ea-89dd-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractMapDecorator` / `protected Map<K, V> decorated()`


        <!-- 684d262f-9f1d-11ea-89de-333445793454 <=< ACCEPT -->
        Gets the map being decorated.
        @return the decorated map
        <!-- ACCEPT >=> 684d262f-9f1d-11ea-89de-333445793454 -->



# File: `java.org.apache.commons.collections4.map.AbstractOrderedMapDecorator`

## Class: `java.org.apache.commons.collections4.map.AbstractOrderedMapDecorator` / `implements OrderedMap<K, V>`


        <!-- 684d2630-9f1d-11ea-89df-333445793454 <=< ACCEPT -->
        Provides a base decorator that enables additional functionality to be added
        to an OrderedMap via decoration.
        <p>
        Methods are forwarded directly to the decorated map.
        <p>
        This implementation does not perform any special processing with the map views.
        Instead it simply returns the set/collection from the wrapped map. This may be
        undesirable, for example if you are trying to write a validating implementation
        it would provide a loophole around the validation.
        But, you might want that loophole, so this class is kept simple.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 684d2630-9f1d-11ea-89df-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.AbstractOrderedMapDecorator` / `protected AbstractOrderedMapDecorator()`


        <!-- 684d2631-9f1d-11ea-89e0-333445793454 <=< ACCEPT -->
        Constructor only used in deserialization, do not use otherwise.
        @since 3.1
        <!-- ACCEPT >=> 684d2631-9f1d-11ea-89e0-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.AbstractOrderedMapDecorator` / `public AbstractOrderedMapDecorator(final OrderedMap<K, V> map)`


        <!-- 684d2632-9f1d-11ea-89e1-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param map  the map to decorate, must not be null
        @throws NullPointerException if the map is null
        <!-- ACCEPT >=> 684d2632-9f1d-11ea-89e1-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractOrderedMapDecorator` / `protected OrderedMap<K, V> decorated()`


        <!-- 684d2633-9f1d-11ea-89e2-333445793454 <=< ACCEPT -->
        Gets the map being decorated.
        @return the decorated map
        <!-- ACCEPT >=> 684d2633-9f1d-11ea-89e2-333445793454 -->



# File: `java.org.apache.commons.collections4.map.AbstractReferenceMap`

## Class: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `public abstract class AbstractReferenceMap<K, V> extends AbstractHashedMap<K, V>`


        <!-- 684d2634-9f1d-11ea-89e3-333445793454 <=< ACCEPT -->
        An abstract implementation of a hash-based map that allows the entries to
        be removed by the garbage collector.
        <p>
        This class implements all the features necessary for a subclass reference
        hash-based map. Key-value entries are stored in instances of the
        <code>ReferenceEntry</code> class which can be overridden and replaced.
        The iterators can similarly be replaced, without the need to replace the KeySet,
        EntrySet and Values view classes.
        <p>
        Overridable methods are provided to change the default hashing behaviour, and
        to change how entries are added to and removed from the map. Hopefully, all you
        need for unusual subclasses is here.
        <p>
        When you construct an <code>AbstractReferenceMap</code>, you can specify what
        kind of references are used to store the map's keys and values.
        If non-hard references are used, then the garbage collector can remove
        mappings if a key or value becomes unreachable, or if the JVM's memory is
        running low. For information on how the different reference types behave,
        see {@link Reference}.
        <p>
        Different types of references can be specified for keys and values.
        The keys can be configured to be weak but the values hard,
        in which case this class will behave like a
        <a href="http://java.sun.com/j2se/1.4/docs/api/java/util/WeakHashMap.html">
        <code>WeakHashMap</code></a>. However, you can also specify hard keys and
        weak values, or any other combination. The default constructor uses
        hard keys and soft values, providing a memory-sensitive cache.
        <p>
        This {@link Map} implementation does <i>not</i> allow null elements.
        Attempting to add a null key or value to the map will raise a
        <code>NullPointerException</code>.
        <p>
        All the available iterators can be reset back to the start by casting to
        <code>ResettableIterator</code> and calling <code>reset()</code>.
        <p>
        This implementation is not synchronized.
        You can use {@link java.util.Collections#synchronizedMap} to
        provide synchronized access to a <code>ReferenceMap</code>.
        @see java.lang.ref.Reference
        @since 3.1 (extracted from ReferenceMap in 3.0)
        @version $Id$
        <!-- ACCEPT >=> 684d2634-9f1d-11ea-89e3-333445793454 -->



## Enum: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `public static enum ReferenceStrength`


        <!-- 684d4d30-9f1d-11ea-89e4-333445793454 <=< ACCEPT -->
        Reference type enum.
        <!-- ACCEPT >=> 684d4d30-9f1d-11ea-89e4-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `public final int value`


        <!-- 684d4d31-9f1d-11ea-89e5-333445793454 <=< ACCEPT -->
        value
        <!-- ACCEPT >=> 684d4d31-9f1d-11ea-89e5-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `public static ReferenceStrength resolve(final int value)`


        <!-- 684d4d32-9f1d-11ea-89e6-333445793454 <=< ACCEPT -->
        Resolve enum from int.
        @param value  the int value
        @return ReferenceType
        @throws IllegalArgumentException if the specified value is invalid.
        <!-- ACCEPT >=> 684d4d32-9f1d-11ea-89e6-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `private ReferenceStrength keyType`


        <!-- 684d4d33-9f1d-11ea-89e7-333445793454 <=< ACCEPT -->
        The reference type for keys.
        <!-- ACCEPT >=> 684d4d33-9f1d-11ea-89e7-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `private ReferenceStrength valueType`


        <!-- 684d4d34-9f1d-11ea-89e8-333445793454 <=< ACCEPT -->
        The reference type for values.
        <!-- ACCEPT >=> 684d4d34-9f1d-11ea-89e8-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `private boolean purgeValues`


        <!-- 684d4d35-9f1d-11ea-89e9-333445793454 <=< ACCEPT -->
        Should the value be automatically purged when the associated key has been collected?
        <!-- ACCEPT >=> 684d4d35-9f1d-11ea-89e9-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `private transient ReferenceQueue<Object> queue`


        <!-- 684d4d36-9f1d-11ea-89ea-333445793454 <=< ACCEPT -->
        ReferenceQueue used to eliminate stale mappings.
        See purge.
        <!-- ACCEPT >=> 684d4d36-9f1d-11ea-89ea-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `protected AbstractReferenceMap()`


        <!-- 684d4d37-9f1d-11ea-89eb-333445793454 <=< ACCEPT -->
        Constructor used during deserialization.
        <!-- ACCEPT >=> 684d4d37-9f1d-11ea-89eb-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `final float loadFactor, final boolean purgeValues)`


        <!-- 684d4d38-9f1d-11ea-89ec-333445793454 <=< ACCEPT -->
        Constructs a new empty map with the specified reference types,
        load factor and initial capacity.
        @param keyType  the type of reference to use for keys;
        must be {@link ReferenceStrength#HARD HARD},
        {@link ReferenceStrength#SOFT SOFT},
        {@link ReferenceStrength#WEAK WEAK}
        @param valueType  the type of reference to use for values;
        must be {@link ReferenceStrength#HARD},
        {@link ReferenceStrength#SOFT SOFT},
        {@link ReferenceStrength#WEAK WEAK}
        @param capacity  the initial capacity for the map
        @param loadFactor  the load factor for the map
        @param purgeValues  should the value be automatically purged when the
        key is garbage collected
        <!-- ACCEPT >=> 684d4d38-9f1d-11ea-89ec-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `protected void init()`


        <!-- 684d4d39-9f1d-11ea-89ed-333445793454 <=< ACCEPT -->
        Initialise this subclass during construction, cloning or deserialization.
        <!-- ACCEPT >=> 684d4d39-9f1d-11ea-89ed-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `public int size()`


        <!-- 684d4d3a-9f1d-11ea-89ee-333445793454 <=< ACCEPT -->
        Gets the size of the map.
        @return the size
        <!-- ACCEPT >=> 684d4d3a-9f1d-11ea-89ee-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `public boolean isEmpty()`


        <!-- 684d4d3b-9f1d-11ea-89ef-333445793454 <=< ACCEPT -->
        Checks whether the map is currently empty.
        @return true if the map is currently size zero
        <!-- ACCEPT >=> 684d4d3b-9f1d-11ea-89ef-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `public boolean containsKey(final Object key)`


        <!-- 684d4d3c-9f1d-11ea-89f0-333445793454 <=< ACCEPT -->
        Checks whether the map contains the specified key.
        @param key  the key to search for
        @return true if the map contains the key
        <!-- ACCEPT >=> 684d4d3c-9f1d-11ea-89f0-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `public boolean containsValue(final Object value)`


        <!-- 684d4d3d-9f1d-11ea-89f1-333445793454 <=< ACCEPT -->
        Checks whether the map contains the specified value.
        @param value  the value to search for
        @return true if the map contains the value
        <!-- ACCEPT >=> 684d4d3d-9f1d-11ea-89f1-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `public V get(final Object key)`


        <!-- 684d4d3e-9f1d-11ea-89f2-333445793454 <=< ACCEPT -->
        Gets the value mapped to the key specified.
        @param key  the key
        @return the mapped value, null if no match
        <!-- ACCEPT >=> 684d4d3e-9f1d-11ea-89f2-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `public V put(final K key, final V value)`


        <!-- 684d4d3f-9f1d-11ea-89f3-333445793454 <=< ACCEPT -->
        Puts a key-value mapping into this map.
        Neither the key nor the value may be null.
        @param key  the key to add, must not be null
        @param value  the value to add, must not be null
        @return the value previously mapped to this key, null if none
        @throws NullPointerException if either the key or value is null
        <!-- ACCEPT >=> 684d4d3f-9f1d-11ea-89f3-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `public V remove(final Object key)`


        <!-- 684d4d40-9f1d-11ea-89f4-333445793454 <=< ACCEPT -->
        Removes the specified mapping from this map.
        @param key  the mapping to remove
        @return the value mapped to the removed key, null if key not in map
        <!-- ACCEPT >=> 684d4d40-9f1d-11ea-89f4-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `public void clear()`


        <!-- 684d4d41-9f1d-11ea-89f5-333445793454 <=< ACCEPT -->
        Clears this map.
        <!-- ACCEPT >=> 684d4d41-9f1d-11ea-89f5-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `public MapIterator<K, V> mapIterator()`


        <!-- 684d4d42-9f1d-11ea-89f6-333445793454 <=< ACCEPT -->
        Gets a MapIterator over the reference map.
        The iterator only returns valid key/value pairs.
        @return a map iterator
        <!-- ACCEPT >=> 684d4d42-9f1d-11ea-89f6-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `public Set<Map.Entry<K, V>> entrySet()`


        <!-- 684d4d43-9f1d-11ea-89f7-333445793454 <=< ACCEPT -->
        Returns a set view of this map's entries.
        An iterator returned entry is valid until <code>next()</code> is called again.
        The <code>setValue()</code> method on the <code>toArray</code> entries has no effect.
        @return a set view of this map's entries
        <!-- ACCEPT >=> 684d4d43-9f1d-11ea-89f7-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `public Set<K> keySet()`


        <!-- 684d7439-9f1d-11ea-89f8-333445793454 <=< ACCEPT -->
        Returns a set view of this map's keys.
        @return a set view of this map's keys
        <!-- ACCEPT >=> 684d7439-9f1d-11ea-89f8-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `public Collection<V> values()`


        <!-- 684d743a-9f1d-11ea-89f9-333445793454 <=< ACCEPT -->
        Returns a collection view of this map's values.
        @return a set view of this map's values
        <!-- ACCEPT >=> 684d743a-9f1d-11ea-89f9-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `protected void purgeBeforeRead()`


        <!-- 684d743b-9f1d-11ea-89fa-333445793454 <=< ACCEPT -->
        Purges stale mappings from this map before read operations.
        <p>
        This implementation calls {@link #purge()} to maintain a consistent state.
        <!-- ACCEPT >=> 684d743b-9f1d-11ea-89fa-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `protected void purgeBeforeWrite()`


        <!-- 684d743c-9f1d-11ea-89fb-333445793454 <=< ACCEPT -->
        Purges stale mappings from this map before write operations.
        <p>
        This implementation calls {@link #purge()} to maintain a consistent state.
        <!-- ACCEPT >=> 684d743c-9f1d-11ea-89fb-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `protected void purge()`


        <!-- 684d743d-9f1d-11ea-89fc-333445793454 <=< ACCEPT -->
        Purges stale mappings from this map.
        <p>
        Note that this method is not synchronized!  Special
        care must be taken if, for instance, you want stale
        mappings to be removed on a periodic basis by some
        background thread.
        <!-- ACCEPT >=> 684d743d-9f1d-11ea-89fc-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `protected void purge(final Reference<?> ref)`


        <!-- 684d743e-9f1d-11ea-89fd-333445793454 <=< ACCEPT -->
        Purges the specified reference.
        @param ref  the reference to purge
        <!-- ACCEPT >=> 684d743e-9f1d-11ea-89fd-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `protected HashEntry<K, V> getEntry(final Object key)`


        <!-- 684d743f-9f1d-11ea-89fe-333445793454 <=< ACCEPT -->
        Gets the entry mapped to the key specified.
        @param key  the key
        @return the entry, null if no match
        <!-- ACCEPT >=> 684d743f-9f1d-11ea-89fe-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `protected int hashEntry(final Object key, final Object value)`


        <!-- 684d7440-9f1d-11ea-89ff-333445793454 <=< ACCEPT -->
        Gets the hash code for a MapEntry.
        Subclasses can override this, for example to use the identityHashCode.
        @param key  the key to get a hash code for, may be null
        @param value  the value to get a hash code for, may be null
        @return the hash code, as per the MapEntry specification
        <!-- ACCEPT >=> 684d7440-9f1d-11ea-89ff-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `protected boolean isEqualKey(final Object key1, Object key2)`


        <!-- 684d7441-9f1d-11ea-8a00-333445793454 <=< ACCEPT -->
        Compares two keys, in internal converted form, to see if they are equal.
        <p>
        This implementation converts the key from the entry to a real reference
        before comparison.
        @param key1  the first key to compare passed in from outside
        @param key2  the second key extracted from the entry via <code>entry.key</code>
        @return true if equal
        <!-- ACCEPT >=> 684d7441-9f1d-11ea-8a00-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `final K key, final V value)`


        <!-- 684d7442-9f1d-11ea-8a01-333445793454 <=< ACCEPT -->
        Creates a ReferenceEntry instead of a HashEntry.
        @param next  the next entry in sequence
        @param hashCode  the hash code to use
        @param key  the key to store
        @param value  the value to store
        @return the newly created entry
        <!-- ACCEPT >=> 684d7442-9f1d-11ea-8a01-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `protected Iterator<Map.Entry<K, V>> createEntrySetIterator()`


        <!-- 684d7443-9f1d-11ea-8a02-333445793454 <=< ACCEPT -->
        Creates an entry set iterator.
        @return the entrySet iterator
        <!-- ACCEPT >=> 684d7443-9f1d-11ea-8a02-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `protected Iterator<K> createKeySetIterator()`


        <!-- 684d7444-9f1d-11ea-8a03-333445793454 <=< ACCEPT -->
        Creates an key set iterator.
        @return the keySet iterator
        <!-- ACCEPT >=> 684d7444-9f1d-11ea-8a03-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `protected Iterator<V> createValuesIterator()`


        <!-- 684d7445-9f1d-11ea-8a04-333445793454 <=< ACCEPT -->
        Creates an values iterator.
        @return the values iterator
        <!-- ACCEPT >=> 684d7445-9f1d-11ea-8a04-333445793454 -->



## Class: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `static class ReferenceEntrySet<K, V> extends EntrySet<K, V>`


        <!-- 684d7446-9f1d-11ea-8a05-333445793454 <=< ACCEPT -->
        EntrySet implementation.
        <!-- ACCEPT >=> 684d7446-9f1d-11ea-8a05-333445793454 -->



## Class: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `static class ReferenceKeySet<K> extends KeySet<K>`


        <!-- 684d7447-9f1d-11ea-8a06-333445793454 <=< ACCEPT -->
        KeySet implementation.
        <!-- ACCEPT >=> 684d7447-9f1d-11ea-8a06-333445793454 -->



## Class: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `static class ReferenceValues<V> extends Values<V>`


        <!-- 684d7448-9f1d-11ea-8a07-333445793454 <=< ACCEPT -->
        Values implementation.
        <!-- ACCEPT >=> 684d7448-9f1d-11ea-8a07-333445793454 -->



## Class: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `protected static class ReferenceEntry<K, V> extends HashEntry<K, V>`


        <!-- 684d7449-9f1d-11ea-8a08-333445793454 <=< ACCEPT -->
        A MapEntry implementation for the map.
        <p>
        If getKey() or getValue() returns null, it means
        the mapping is stale and should be removed.
        @since 3.1
        <!-- ACCEPT >=> 684d7449-9f1d-11ea-8a08-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `private final AbstractReferenceMap<K, V> parent`


        <!-- 684d744a-9f1d-11ea-8a09-333445793454 <=< ACCEPT -->
        The parent map
        <!-- ACCEPT >=> 684d744a-9f1d-11ea-8a09-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `final int hashCode, final K key, final V value)`


        <!-- 684d744b-9f1d-11ea-8a0a-333445793454 <=< ACCEPT -->
        Creates a new entry object for the ReferenceMap.
        @param parent  the parent map
        @param next  the next entry in the hash bucket
        @param hashCode  the hash code of the key
        @param key  the key
        @param value  the value
        <!-- ACCEPT >=> 684d744b-9f1d-11ea-8a0a-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `public K getKey()`


        <!-- 684d744c-9f1d-11ea-8a0b-333445793454 <=< ACCEPT -->
        Gets the key from the entry.
        This method dereferences weak and soft keys and thus may return null.
        @return the key, which may be null if it was garbage collected
        <!-- ACCEPT >=> 684d744c-9f1d-11ea-8a0b-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `public V getValue()`


        <!-- 684d9b44-9f1d-11ea-8a0c-333445793454 <=< ACCEPT -->
        Gets the value from the entry.
        This method dereferences weak and soft value and thus may return null.
        @return the value, which may be null if it was garbage collected
        <!-- ACCEPT >=> 684d9b44-9f1d-11ea-8a0c-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `public V setValue(final V obj)`


        <!-- 684d9b45-9f1d-11ea-8a0d-333445793454 <=< ACCEPT -->
        Sets the value of the entry.
        @param obj  the object to store
        @return the previous value
        <!-- ACCEPT >=> 684d9b45-9f1d-11ea-8a0d-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `public boolean equals(final Object obj)`


        <!-- 684d9b46-9f1d-11ea-8a0e-333445793454 <=< ACCEPT -->
        Compares this map entry to another.
        <p>
        This implementation uses <code>isEqualKey</code> and
        <code>isEqualValue</code> on the main map for comparison.
        @param obj  the other map entry to compare to
        @return true if equal, false if not
        <!-- ACCEPT >=> 684d9b46-9f1d-11ea-8a0e-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `public int hashCode()`


        <!-- 684d9b47-9f1d-11ea-8a0f-333445793454 <=< ACCEPT -->
        Gets the hashcode of the entry using temporary hard references.
        <p>
        This implementation uses <code>hashEntry</code> on the main map.
        @return the hashcode of the entry
        <!-- ACCEPT >=> 684d9b47-9f1d-11ea-8a0f-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `protected <T> Object toReference(final ReferenceStrength type, final T referent, final int hash)`


        <!-- 684d9b48-9f1d-11ea-8a10-333445793454 <=< ACCEPT -->
        Constructs a reference of the given type to the given referent.
        The reference is registered with the queue for later purging.
        @param <T> the type of the referenced object
        @param type  HARD, SOFT or WEAK
        @param referent  the object to refer to
        @param hash  the hash code of the <i>key</i> of the mapping;
        this number might be different from referent.hashCode() if
        the referent represents a value and not a key
        @return the reference to the object
        <!-- ACCEPT >=> 684d9b48-9f1d-11ea-8a10-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `boolean purge(final Reference<?> ref)`


        <!-- 684d9b49-9f1d-11ea-8a11-333445793454 <=< ACCEPT -->
        Purges the specified reference
        @param ref  the reference to purge
        @return true or false
        <!-- ACCEPT >=> 684d9b49-9f1d-11ea-8a11-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `protected ReferenceEntry<K, V> next()`


        <!-- 684d9b4a-9f1d-11ea-8a12-333445793454 <=< ACCEPT -->
        Gets the next entry in the bucket.
        @return the next entry in the bucket
        <!-- ACCEPT >=> 684d9b4a-9f1d-11ea-8a12-333445793454 -->



## Class: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `static class ReferenceBaseIterator<K, V>`


        <!-- 684d9b4b-9f1d-11ea-8a13-333445793454 <=< ACCEPT -->
        Base iterator class.
        <!-- ACCEPT >=> 684d9b4b-9f1d-11ea-8a13-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `final AbstractReferenceMap<K, V> parent`


        <!-- 684d9b4c-9f1d-11ea-8a14-333445793454 <=< ACCEPT -->
        The parent map
        <!-- ACCEPT >=> 684d9b4c-9f1d-11ea-8a14-333445793454 -->



## Class: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `extends ReferenceBaseIterator<K, V> implements Iterator<Map.Entry<K, V>>`


        <!-- 684d9b4d-9f1d-11ea-8a15-333445793454 <=< ACCEPT -->
        The EntrySet iterator.
        <!-- ACCEPT >=> 684d9b4d-9f1d-11ea-8a15-333445793454 -->



## Class: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `static class ReferenceKeySetIterator<K> extends ReferenceBaseIterator<K, Object> implements Iterator<K>`


        <!-- 684d9b4e-9f1d-11ea-8a16-333445793454 <=< ACCEPT -->
        The keySet iterator.
        <!-- ACCEPT >=> 684d9b4e-9f1d-11ea-8a16-333445793454 -->



## Class: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `static class ReferenceValuesIterator<V> extends ReferenceBaseIterator<Object, V> implements Iterator<V>`


        <!-- 684d9b4f-9f1d-11ea-8a17-333445793454 <=< ACCEPT -->
        The values iterator.
        <!-- ACCEPT >=> 684d9b4f-9f1d-11ea-8a17-333445793454 -->



## Class: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `static class ReferenceMapIterator<K, V> extends ReferenceBaseIterator<K, V> implements MapIterator<K, V>`


        <!-- 684d9b50-9f1d-11ea-8a18-333445793454 <=< ACCEPT -->
        The MapIterator implementation.
        <!-- ACCEPT >=> 684d9b50-9f1d-11ea-8a18-333445793454 -->



## Class: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `static class SoftRef<T> extends SoftReference<T>`


        <!-- 684d9b51-9f1d-11ea-8a19-333445793454 <=< ACCEPT -->
        A soft reference holder.
        <!-- ACCEPT >=> 684d9b51-9f1d-11ea-8a19-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `private final int hash`


        <!-- 684d9b52-9f1d-11ea-8a1a-333445793454 <=< ACCEPT -->
        the hashCode of the key (even if the reference points to a value)
        <!-- ACCEPT >=> 684d9b52-9f1d-11ea-8a1a-333445793454 -->



## Class: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `static class WeakRef<T> extends WeakReference<T>`


        <!-- 684d9b53-9f1d-11ea-8a1b-333445793454 <=< ACCEPT -->
        A weak reference holder.
        <!-- ACCEPT >=> 684d9b53-9f1d-11ea-8a1b-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `private final int hash`


        <!-- 684d9b54-9f1d-11ea-8a1c-333445793454 <=< ACCEPT -->
        the hashCode of the key (even if the reference points to a value)
        <!-- ACCEPT >=> 684d9b54-9f1d-11ea-8a1c-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `protected void doWriteObject(final ObjectOutputStream out) throws IOException`


        <!-- 684d9b55-9f1d-11ea-8a1d-333445793454 <=< ACCEPT -->
        Replaces the superclass method to store the state of this class.
        <p>
        Serialization is not one of the JDK's nicest topics. Normal serialization will
        initialise the superclass before the subclass. Sometimes however, this isn't
        what you want, as in this case the <code>put()</code> method on read can be
        affected by subclass state.
        <p>
        The solution adopted here is to serialize the state data of this class in
        this protected method. This method must be called by the
        <code>writeObject()</code> of the first serializable subclass.
        <p>
        Subclasses may override if they have a specific field that must be present
        on read before this implementation will work. Generally, the read determines
        what must be serialized here, if anything.
        @param out  the output stream
        @throws IOException if an error occurs while writing to the stream
        <!-- ACCEPT >=> 684d9b55-9f1d-11ea-8a1d-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `protected void doReadObject(final ObjectInputStream in) throws IOException, ClassNotFoundException`


        <!-- 684d9b56-9f1d-11ea-8a1e-333445793454 <=< ACCEPT -->
        Replaces the superclass method to read the state of this class.
        <p>
        Serialization is not one of the JDK's nicest topics. Normal serialization will
        initialise the superclass before the subclass. Sometimes however, this isn't
        what you want, as in this case the <code>put()</code> method on read can be
        affected by subclass state.
        <p>
        The solution adopted here is to deserialize the state data of this class in
        this protected method. This method must be called by the
        <code>readObject()</code> of the first serializable subclass.
        <p>
        Subclasses may override if the subclass has a specific field that must be present
        before <code>put()</code> or <code>calculateThreshold()</code> will work correctly.
        @param in  the input stream
        @throws IOException if an error occurs while reading from the stream
        @throws ClassNotFoundException if an object read from the stream can not be loaded
        <!-- ACCEPT >=> 684d9b56-9f1d-11ea-8a1e-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractReferenceMap` / `protected boolean isKeyType(ReferenceStrength type)`


        <!-- 684dc24a-9f1d-11ea-8a1f-333445793454 <=< ACCEPT -->
        Provided protected read-only access to the key type.
        @param type the type to check against.
        @return true if keyType has the specified type
        <!-- ACCEPT >=> 684dc24a-9f1d-11ea-8a1f-333445793454 -->



# File: `java.org.apache.commons.collections4.map.AbstractSortedMapDecorator`

## Class: `java.org.apache.commons.collections4.map.AbstractSortedMapDecorator` / `IterableSortedMap<K, V>`


        <!-- 684dc24b-9f1d-11ea-8a20-333445793454 <=< ACCEPT -->
        Provides a base decorator that enables additional functionality to be added
        to a Map via decoration.
        <p>
        Methods are forwarded directly to the decorated map.
        <p>
        This implementation does not perform any special processing with the map views.
        Instead it simply returns the set/collection from the wrapped map. This may be
        undesirable, for example if you are trying to write a validating implementation
        it would provide a loophole around the validation.
        But, you might want that loophole, so this class is kept simple.
        @param <K> the type of the keys in the map
        @param <V> the type of the values in the map
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 684dc24b-9f1d-11ea-8a20-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.AbstractSortedMapDecorator` / `protected AbstractSortedMapDecorator()`


        <!-- 684dc24c-9f1d-11ea-8a21-333445793454 <=< ACCEPT -->
        Constructor only used in deserialization, do not use otherwise.
        @since 3.1
        <!-- ACCEPT >=> 684dc24c-9f1d-11ea-8a21-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.AbstractSortedMapDecorator` / `public AbstractSortedMapDecorator(final SortedMap<K, V> map)`


        <!-- 684dc24d-9f1d-11ea-8a22-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param map  the map to decorate, must not be null
        @throws NullPointerException if the map is null
        <!-- ACCEPT >=> 684dc24d-9f1d-11ea-8a22-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractSortedMapDecorator` / `protected SortedMap<K, V> decorated()`


        <!-- 684dc24e-9f1d-11ea-8a23-333445793454 <=< ACCEPT -->
        Gets the map being decorated.
        @return the decorated map
        <!-- ACCEPT >=> 684dc24e-9f1d-11ea-8a23-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractSortedMapDecorator` / `public OrderedMapIterator<K, V> mapIterator()`


        <!-- 684dc24f-9f1d-11ea-8a24-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <!-- ACCEPT >=> 684dc24f-9f1d-11ea-8a24-333445793454 -->



## Class: `java.org.apache.commons.collections4.map.AbstractSortedMapDecorator` / `implements OrderedMapIterator<K, V>`


        <!-- 684dc250-9f1d-11ea-8a25-333445793454 <=< ACCEPT -->
        OrderedMapIterator implementation.
        @param <K>  the key type
        @param <V>  the value type
        <!-- ACCEPT >=> 684dc250-9f1d-11ea-8a25-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.AbstractSortedMapDecorator` / `protected SortedMapIterator(final Set<Map.Entry<K, V>> entrySet)`


        <!-- 684dc251-9f1d-11ea-8a26-333445793454 <=< ACCEPT -->
        Create a new AbstractSortedMapDecorator.SortedMapIterator.
        @param entrySet  the entrySet to iterate
        <!-- ACCEPT >=> 684dc251-9f1d-11ea-8a26-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractSortedMapDecorator` / `public synchronized void reset()`


        <!-- 684dc252-9f1d-11ea-8a27-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <!-- ACCEPT >=> 684dc252-9f1d-11ea-8a27-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractSortedMapDecorator` / `public boolean hasPrevious()`


        <!-- 684dc253-9f1d-11ea-8a28-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <!-- ACCEPT >=> 684dc253-9f1d-11ea-8a28-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.AbstractSortedMapDecorator` / `public K previous()`


        <!-- 684dc254-9f1d-11ea-8a29-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <!-- ACCEPT >=> 684dc254-9f1d-11ea-8a29-333445793454 -->



# File: `java.org.apache.commons.collections4.map.CaseInsensitiveMap`

## Class: `java.org.apache.commons.collections4.map.CaseInsensitiveMap` / `public class CaseInsensitiveMap<K, V> extends AbstractHashedMap<K, V> implements Serializable, Cloneable`


        <!-- 684dc255-9f1d-11ea-8a2a-333445793454 <=< ACCEPT -->
        A case-insensitive <code>Map</code>.
        <p>
        Before keys are added to the map or compared to other existing keys, they are converted
        to all lowercase in a locale-independent fashion by using information from the Unicode
        data file.
        <p>
        Null keys are supported.
        <p>
        The <code>keySet()</code> method returns all lowercase keys, or nulls.
        <p>
        Example:
        <pre><code>
        Map&lt;String, String&gt; map = new CaseInsensitiveMap&lt;String, String&gt;();
        map.put("One", "One");
        map.put("Two", "Two");
        map.put(null, "Three");
        map.put("one", "Four");
        </code></pre>
        creates a <code>CaseInsensitiveMap</code> with three entries.<br>
        <code>map.get(null)</code> returns <code>"Three"</code> and <code>map.get("ONE")</code>
        returns <code>"Four".</code>  The <code>Set</code> returned by <code>keySet()</code>
        equals <code>{"one", "two", null}.</code>
        <p>
        <strong>This map will violate the detail of various Map and map view contracts.</note>
        As a general rule, don't compare this map to other maps. In particular, you can't
        use decorators like {@link ListOrderedMap} on it, which silently assume that these
        contracts are fulfilled.
        <p>
        <strong>Note that CaseInsensitiveMap is not synchronized and is not thread-safe.</strong>
        If you wish to use this map from multiple threads concurrently, you must use
        appropriate synchronization. The simplest approach is to wrap this map
        using {@link java.util.Collections#synchronizedMap(Map)}. This class may throw
        exceptions when accessed by concurrent threads without synchronization.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 684dc255-9f1d-11ea-8a2a-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.CaseInsensitiveMap` / `private static final long serialVersionUID`


        <!-- 684dc256-9f1d-11ea-8a2b-333445793454 <=< ACCEPT -->
        Serialisation version
        <!-- ACCEPT >=> 684dc256-9f1d-11ea-8a2b-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.CaseInsensitiveMap` / `public CaseInsensitiveMap()`


        <!-- 684dc257-9f1d-11ea-8a2c-333445793454 <=< ACCEPT -->
        Constructs a new empty map with default size and load factor.
        <!-- ACCEPT >=> 684dc257-9f1d-11ea-8a2c-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.CaseInsensitiveMap` / `public CaseInsensitiveMap(final int initialCapacity)`


        <!-- 684dc258-9f1d-11ea-8a2d-333445793454 <=< ACCEPT -->
        Constructs a new, empty map with the specified initial capacity.
        @param initialCapacity  the initial capacity
        @throws IllegalArgumentException if the initial capacity is negative
        <!-- ACCEPT >=> 684dc258-9f1d-11ea-8a2d-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.CaseInsensitiveMap` / `public CaseInsensitiveMap(final int initialCapacity, final float loadFactor)`


        <!-- 684dc259-9f1d-11ea-8a2e-333445793454 <=< ACCEPT -->
        Constructs a new, empty map with the specified initial capacity and
        load factor.
        @param initialCapacity  the initial capacity
        @param loadFactor  the load factor
        @throws IllegalArgumentException if the initial capacity is negative
        @throws IllegalArgumentException if the load factor is less than zero
        <!-- ACCEPT >=> 684dc259-9f1d-11ea-8a2e-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.CaseInsensitiveMap` / `public CaseInsensitiveMap(final Map<? extends K, ? extends V> map)`


        <!-- 684de954-9f1d-11ea-8a2f-333445793454 <=< ACCEPT -->
        Constructor copying elements from another map.
        <p>
        Keys will be converted to lower case strings, which may cause
        some entries to be removed (if string representation of keys differ
        only by character case).
        @param map  the map to copy
        @throws NullPointerException if the map is null
        <!-- ACCEPT >=> 684de954-9f1d-11ea-8a2f-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.CaseInsensitiveMap` / `protected Object convertKey(final Object key)`


        <!-- 684de955-9f1d-11ea-8a30-333445793454 <=< ACCEPT -->
        Overrides convertKey() from {@link AbstractHashedMap} to convert keys to
        lower case.
        <p>
        Returns {@link AbstractHashedMap#NULL} if key is null.
        @param key  the key convert
        @return the converted key
        <!-- ACCEPT >=> 684de955-9f1d-11ea-8a30-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.CaseInsensitiveMap` / `public CaseInsensitiveMap<K, V> clone()`


        <!-- 684de956-9f1d-11ea-8a31-333445793454 <=< ACCEPT -->
        Clones the map without cloning the keys or values.
        @return a shallow clone
        <!-- ACCEPT >=> 684de956-9f1d-11ea-8a31-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.CaseInsensitiveMap` / `private void writeObject(final ObjectOutputStream out) throws IOException`


        <!-- 684de957-9f1d-11ea-8a32-333445793454 <=< ACCEPT -->
        Write the map out using a custom routine.
        <!-- ACCEPT >=> 684de957-9f1d-11ea-8a32-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.CaseInsensitiveMap` / `private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException`


        <!-- 684de958-9f1d-11ea-8a33-333445793454 <=< ACCEPT -->
        Read the map in using a custom routine.
        <!-- ACCEPT >=> 684de958-9f1d-11ea-8a33-333445793454 -->



# File: `java.org.apache.commons.collections4.map.CompositeMap`

## Class: `java.org.apache.commons.collections4.map.CompositeMap` / `public class CompositeMap<K, V> extends AbstractIterableMap<K, V> implements Serializable`


        <!-- 684de959-9f1d-11ea-8a34-333445793454 <=< ACCEPT -->
        Decorates a map of other maps to provide a single unified view.
        <p>
        Changes made to this map will actually be made on the decorated map.
        Add and remove operations require the use of a pluggable strategy. If no
        strategy is provided then add and remove are unsupported.
        <p>
        <strong>Note that CompositeMap is not synchronized and is not thread-safe.</strong>
        If you wish to use this map from multiple threads concurrently, you must use
        appropriate synchronization. The simplest approach is to wrap this map
        using {@link java.util.Collections#synchronizedMap(Map)}. This class may throw
        exceptions when accessed by concurrent threads without synchronization.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 684de959-9f1d-11ea-8a34-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.CompositeMap` / `private static final long serialVersionUID`


        <!-- 684de95a-9f1d-11ea-8a35-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 684de95a-9f1d-11ea-8a35-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.CompositeMap` / `private Map<K, V>[] composite`


        <!-- 684de95b-9f1d-11ea-8a36-333445793454 <=< ACCEPT -->
        Array of all maps in the composite
        <!-- ACCEPT >=> 684de95b-9f1d-11ea-8a36-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.CompositeMap` / `private MapMutator<K, V> mutator`


        <!-- 684de95c-9f1d-11ea-8a37-333445793454 <=< ACCEPT -->
        Handle mutation operations
        <!-- ACCEPT >=> 684de95c-9f1d-11ea-8a37-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.CompositeMap` / `public CompositeMap()`


        <!-- 684de95d-9f1d-11ea-8a38-333445793454 <=< ACCEPT -->
        Create a new, empty, CompositeMap.
        <!-- ACCEPT >=> 684de95d-9f1d-11ea-8a38-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.CompositeMap` / `public CompositeMap(final Map<K, V> one, final Map<K, V> two)`


        <!-- 684de95e-9f1d-11ea-8a39-333445793454 <=< ACCEPT -->
        Create a new CompositeMap with two composited Map instances.
        @param one  the first Map to be composited
        @param two  the second Map to be composited
        @throws IllegalArgumentException if there is a key collision
        <!-- ACCEPT >=> 684de95e-9f1d-11ea-8a39-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.CompositeMap` / `public CompositeMap(final Map<K, V> one, final Map<K, V> two, final MapMutator<K, V> mutator)`


        <!-- 684de95f-9f1d-11ea-8a3a-333445793454 <=< ACCEPT -->
        Create a new CompositeMap with two composited Map instances.
        @param one  the first Map to be composited
        @param two  the second Map to be composited
        @param mutator  MapMutator to be used for mutation operations
        <!-- ACCEPT >=> 684de95f-9f1d-11ea-8a3a-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.CompositeMap` / `public CompositeMap(final Map<K, V>... composite)`


        <!-- 684de960-9f1d-11ea-8a3b-333445793454 <=< ACCEPT -->
        Create a new CompositeMap which composites all of the Map instances in the
        argument. It copies the argument array, it does not use it directly.
        @param composite  the Maps to be composited
        @throws IllegalArgumentException if there is a key collision
        <!-- ACCEPT >=> 684de960-9f1d-11ea-8a3b-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.CompositeMap` / `public CompositeMap(final Map<K, V>[] composite, final MapMutator<K, V> mutator)`


        <!-- 684de961-9f1d-11ea-8a3c-333445793454 <=< ACCEPT -->
        Create a new CompositeMap which composites all of the Map instances in the
        argument. It copies the argument array, it does not use it directly.
        @param composite  Maps to be composited
        @param mutator  MapMutator to be used for mutation operations
        <!-- ACCEPT >=> 684de961-9f1d-11ea-8a3c-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.CompositeMap` / `public void setMutator(final MapMutator<K, V> mutator)`


        <!-- 684de962-9f1d-11ea-8a3d-333445793454 <=< ACCEPT -->
        Specify the MapMutator to be used by mutation operations.
        @param mutator  the MapMutator to be used for mutation delegation
        <!-- ACCEPT >=> 684de962-9f1d-11ea-8a3d-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.CompositeMap` / `public synchronized void addComposited(final Map<K, V> map) throws IllegalArgumentException`


        <!-- 684de963-9f1d-11ea-8a3e-333445793454 <=< ACCEPT -->
        Add an additional Map to the composite.
        @param map  the Map to be added to the composite
        @throws IllegalArgumentException if there is a key collision and there is no
        MapMutator set to handle it.
        <!-- ACCEPT >=> 684de963-9f1d-11ea-8a3e-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.CompositeMap` / `public synchronized Map<K, V> removeComposited(final Map<K, V> map)`


        <!-- 684de964-9f1d-11ea-8a3f-333445793454 <=< ACCEPT -->
        Remove a Map from the composite.
        @param map  the Map to be removed from the composite
        @return The removed Map or <code>null</code> if map is not in the composite
        <!-- ACCEPT >=> 684de964-9f1d-11ea-8a3f-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.CompositeMap` / `public void clear()`


        <!-- 684de965-9f1d-11ea-8a40-333445793454 <=< ACCEPT -->
        Calls <code>clear()</code> on all composited Maps.
        @throws UnsupportedOperationException if any of the composited Maps do not support clear()
        <!-- ACCEPT >=> 684de965-9f1d-11ea-8a40-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.CompositeMap` / `public boolean containsKey(final Object key)`


        <!-- 684e1060-9f1d-11ea-8a41-333445793454 <=< ACCEPT -->
        Returns {@code true} if this map contains a mapping for the specified
        key.  More formally, returns {@code true} if and only if
        this map contains at a mapping for a key {@code k} such that
        {@code (key==null ? k==null : key.equals(k))}.  (There can be
        at most one such mapping.)
        @param key  key whose presence in this map is to be tested.
        @return {@code true} if this map contains a mapping for the specified
        key.
        @throws ClassCastException if the key is of an inappropriate type for
        this map (optional).
        @throws NullPointerException if the key is {@code null} and this map
        does not not permit {@code null} keys (optional).
        <!-- ACCEPT >=> 684e1060-9f1d-11ea-8a41-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.CompositeMap` / `public boolean containsValue(final Object value)`


        <!-- 684e1061-9f1d-11ea-8a42-333445793454 <=< ACCEPT -->
        Returns {@code true} if this map maps one or more keys to the
        specified value.  More formally, returns {@code true} if and only if
        this map contains at least one mapping to a value {@code v} such that
        {@code (value==null ? v==null : value.equals(v))}.  This operation
        will probably require time linear in the map size for most
        implementations of the {@code Map} interface.
        @param value value whose presence in this map is to be tested.
        @return {@code true} if this map maps one or more keys to the
        specified value.
        @throws ClassCastException if the value is of an inappropriate type for
        this map (optional).
        @throws NullPointerException if the value is {@code null} and this map
        does not not permit {@code null} values (optional).
        <!-- ACCEPT >=> 684e1061-9f1d-11ea-8a42-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.CompositeMap` / `public Set<Map.Entry<K, V>> entrySet()`


        <!-- 684e1062-9f1d-11ea-8a43-333445793454 <=< ACCEPT -->
        Returns a set view of the mappings contained in this map.  Each element
        in the returned set is a <code>Map.Entry</code>.  The set is backed by the
        map, so changes to the map are reflected in the set, and vice-versa.
        If the map is modified while an iteration over the set is in progress,
        the results of the iteration are undefined.  The set supports element
        removal, which removes the corresponding mapping from the map, via the
        {@code Iterator.remove}, {@code Set.remove}, {@code removeAll},
        {@code retainAll} and {@code clear} operations.  It does not support
        the {@code add} or {@code addAll} operations.
        <p>
        This implementation returns a <code>CompositeSet</code> which
        composites the entry sets from all of the composited maps.
        @see CompositeSet
        @return a set view of the mappings contained in this map.
        <!-- ACCEPT >=> 684e1062-9f1d-11ea-8a43-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.CompositeMap` / `public V get(final Object key)`


        <!-- 684e1063-9f1d-11ea-8a44-333445793454 <=< ACCEPT -->
        Returns the value to which this map maps the specified key.  Returns
        {@code null} if the map contains no mapping for this key.  A return
        value of {@code null} does not <i>necessarily</i> indicate that the
        map contains no mapping for the key; it's also possible that the map
        explicitly maps the key to {@code null}.  The {@code containsKey}
        operation may be used to distinguish these two cases.
        <p>More formally, if this map contains a mapping from a key
        {@code k} to a value {@code v} such that <tt>(key==null ? k==null :
        key.equals(k))</tt>, then this method returns {@code v}; otherwise
        it returns {@code null}.  (There can be at most one such mapping.)
        @param key key whose associated value is to be returned.
        @return the value to which this map maps the specified key, or
        {@code null} if the map contains no mapping for this key.
        @throws ClassCastException if the key is of an inappropriate type for
        this map (optional).
        @throws NullPointerException key is {@code null} and this map does not
        not permit {@code null} keys (optional).
        @see #containsKey(Object)
        <!-- ACCEPT >=> 684e1063-9f1d-11ea-8a44-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.CompositeMap` / `public boolean isEmpty()`


        <!-- 684e1064-9f1d-11ea-8a45-333445793454 <=< ACCEPT -->
        Returns {@code true} if this map contains no key-value mappings.
        @return {@code true} if this map contains no key-value mappings.
        <!-- ACCEPT >=> 684e1064-9f1d-11ea-8a45-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.CompositeMap` / `public Set<K> keySet()`


        <!-- 684e1065-9f1d-11ea-8a46-333445793454 <=< ACCEPT -->
        Returns a set view of the keys contained in this map.  The set is
        backed by the map, so changes to the map are reflected in the set, and
        vice-versa.  If the map is modified while an iteration over the set is
        in progress, the results of the iteration are undefined.  The set
        supports element removal, which removes the corresponding mapping from
        the map, via the {@code Iterator.remove}, {@code Set.remove},
        {@code removeAll} {@code retainAll}, and {@code clear} operations.
        It does not support the add or {@code addAll} operations.
        <p>
        This implementation returns a <code>CompositeSet</code> which
        composites the key sets from all of the composited maps.
        @return a set view of the keys contained in this map.
        <!-- ACCEPT >=> 684e1065-9f1d-11ea-8a46-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.CompositeMap` / `public V put(final K key, final V value)`


        <!-- 684e1066-9f1d-11ea-8a47-333445793454 <=< ACCEPT -->
        Associates the specified value with the specified key in this map
        (optional operation).  If the map previously contained a mapping for
        this key, the old value is replaced by the specified value.  (A map
        {@code m} is said to contain a mapping for a key {@code k} if and only
        if {@link #containsKey(Object) m.containsKey(k)} would return
        {@code true}.))
        @param key key with which the specified value is to be associated.
        @param value value to be associated with the specified key.
        @return previous value associated with specified key, or {@code null}
        if there was no mapping for key.  A {@code null} return can
        also indicate that the map previously associated {@code null}
        with the specified key, if the implementation supports
        {@code null} values.
        @throws UnsupportedOperationException if no MapMutator has been specified
        @throws ClassCastException if the class of the specified key or value
        prevents it from being stored in this map.
        @throws IllegalArgumentException if some aspect of this key or value
        prevents it from being stored in this map.
        @throws NullPointerException this map does not permit {@code null}
        keys or values, and the specified key or value is
        {@code null}.
        <!-- ACCEPT >=> 684e1066-9f1d-11ea-8a47-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.CompositeMap` / `public void putAll(final Map<? extends K, ? extends V> map)`


        <!-- 684e1067-9f1d-11ea-8a48-333445793454 <=< ACCEPT -->
        Copies all of the mappings from the specified map to this map
        (optional operation).  The effect of this call is equivalent to that
        of calling {@link #put(Object,Object) put(k, v)} on this map once
        for each mapping from key {@code k} to value {@code v} in the
        specified map.  The behavior of this operation is unspecified if the
        specified map is modified while the operation is in progress.
        @param map Mappings to be stored in this map.
        @throws UnsupportedOperationException if the {@code putAll} method is
        not supported by this map.
        @throws ClassCastException if the class of a key or value in the
        specified map prevents it from being stored in this map.
        @throws IllegalArgumentException some aspect of a key or value in the
        specified map prevents it from being stored in this map.
        @throws NullPointerException the specified map is {@code null}, or if
        this map does not permit {@code null} keys or values, and the
        specified map contains {@code null} keys or values.
        <!-- ACCEPT >=> 684e1067-9f1d-11ea-8a48-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.CompositeMap` / `public V remove(final Object key)`


        <!-- 684e1068-9f1d-11ea-8a49-333445793454 <=< ACCEPT -->
        Removes the mapping for this key from this map if it is present
        (optional operation).   More formally, if this map contains a mapping
        from key {@code k} to value {@code v} such that
        <code>(key==null ?  k==null : key.equals(k))</code>, that mapping
        is removed.  (The map can contain at most one such mapping.)
        <p>Returns the value to which the map previously associated the key, or
        {@code null} if the map contained no mapping for this key.  (A
        {@code null} return can also indicate that the map previously
        associated {@code null} with the specified key if the implementation
        supports {@code null} values.)  The map will not contain a mapping for
        the specified  key once the call returns.
        @param key key whose mapping is to be removed from the map.
        @return previous value associated with specified key, or {@code null}
        if there was no mapping for key.
        @throws ClassCastException if the key is of an inappropriate type for
        the composited map (optional).
        @throws NullPointerException if the key is {@code null} and the composited map
        does not not permit {@code null} keys (optional).
        @throws UnsupportedOperationException if the {@code remove} method is
        not supported by the composited map containing the key
        <!-- ACCEPT >=> 684e1068-9f1d-11ea-8a49-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.CompositeMap` / `public int size()`


        <!-- 684e1069-9f1d-11ea-8a4a-333445793454 <=< ACCEPT -->
        Returns the number of key-value mappings in this map.  If the
        map contains more than {@code Integer.MAX_VALUE} elements, returns
        {@code Integer.MAX_VALUE}.
        @return the number of key-value mappings in this map.
        <!-- ACCEPT >=> 684e1069-9f1d-11ea-8a4a-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.CompositeMap` / `public Collection<V> values()`


        <!-- 684e106a-9f1d-11ea-8a4b-333445793454 <=< ACCEPT -->
        Returns a collection view of the values contained in this map.  The
        collection is backed by the map, so changes to the map are reflected in
        the collection, and vice-versa.  If the map is modified while an
        iteration over the collection is in progress, the results of the
        iteration are undefined.  The collection supports element removal,
        which removes the corresponding mapping from the map, via the
        {@code Iterator.remove}, {@code Collection.remove},
        {@code removeAll}, {@code retainAll} and {@code clear} operations.
        It does not support the add or {@code addAll} operations.
        @return a collection view of the values contained in this map.
        <!-- ACCEPT >=> 684e106a-9f1d-11ea-8a4b-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.CompositeMap` / `public boolean equals(final Object obj)`


        <!-- 684e106b-9f1d-11ea-8a4c-333445793454 <=< ACCEPT -->
        Checks if this Map equals another as per the Map specification.
        @param obj  the object to compare to
        @return true if the maps are equal
        <!-- ACCEPT >=> 684e106b-9f1d-11ea-8a4c-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.CompositeMap` / `public int hashCode()`


        <!-- 684e3768-9f1d-11ea-8a4d-333445793454 <=< ACCEPT -->
        Gets a hash code for the Map as per the Map specification.
        {@inheritDoc}
        <!-- ACCEPT >=> 684e3768-9f1d-11ea-8a4d-333445793454 -->



## Interface: `java.org.apache.commons.collections4.map.CompositeMap` / `public static interface MapMutator<K, V> extends Serializable`


        <!-- 684e3769-9f1d-11ea-8a4e-333445793454 <=< ACCEPT -->
        This interface allows definition for all of the indeterminate
        mutators in a CompositeMap, as well as providing a hook for
        callbacks on key collisions.
        <!-- ACCEPT >=> 684e3769-9f1d-11ea-8a4e-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.CompositeMap` / `Map<K, V> added, Collection<K> intersect)`


        <!-- 684e376a-9f1d-11ea-8a4f-333445793454 <=< ACCEPT -->
        Called when adding a new Composited Map results in a
        key collision.
        @param composite  the CompositeMap with the collision
        @param existing  the Map already in the composite which contains the
        offending key
        @param added  the Map being added
        @param intersect  the intersection of the keysets of the existing and added maps
        <!-- ACCEPT >=> 684e376a-9f1d-11ea-8a4f-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.CompositeMap` / `V put(CompositeMap<K, V> map, Map<K, V>[] composited, K key, V value)`


        <!-- 684e376b-9f1d-11ea-8a50-333445793454 <=< ACCEPT -->
        Called when the CompositeMap.put() method is invoked.
        @param map  the CompositeMap which is being modified
        @param composited  array of Maps in the CompositeMap being modified
        @param key  key with which the specified value is to be associated.
        @param value  value to be associated with the specified key.
        @return previous value associated with specified key, or {@code null}
        if there was no mapping for key.  A {@code null} return can
        also indicate that the map previously associated {@code null}
        with the specified key, if the implementation supports
        {@code null} values.
        @throws UnsupportedOperationException if not defined
        @throws ClassCastException if the class of the specified key or value
        prevents it from being stored in this map.
        @throws IllegalArgumentException if some aspect of this key or value
        prevents it from being stored in this map.
        @throws NullPointerException this map does not permit {@code null}
        keys or values, and the specified key or value is
        {@code null}.
        <!-- ACCEPT >=> 684e376b-9f1d-11ea-8a50-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.CompositeMap` / `Map<? extends K, ? extends V> mapToAdd)`


        <!-- 684e376c-9f1d-11ea-8a51-333445793454 <=< ACCEPT -->
        Called when the CompositeMap.putAll() method is invoked.
        @param map  the CompositeMap which is being modified
        @param composited  array of Maps in the CompositeMap being modified
        @param mapToAdd  Mappings to be stored in this CompositeMap
        @throws UnsupportedOperationException if not defined
        @throws ClassCastException if the class of the specified key or value
        prevents it from being stored in this map.
        @throws IllegalArgumentException if some aspect of this key or value
        prevents it from being stored in this map.
        @throws NullPointerException this map does not permit {@code null}
        keys or values, and the specified key or value is
        {@code null}.
        <!-- ACCEPT >=> 684e376c-9f1d-11ea-8a51-333445793454 -->



# File: `java.org.apache.commons.collections4.map.DefaultedMap`

## Class: `java.org.apache.commons.collections4.map.DefaultedMap` / `public class DefaultedMap<K, V> extends AbstractMapDecorator<K, V> implements Serializable`


        <!-- 684e376d-9f1d-11ea-8a52-333445793454 <=< ACCEPT -->
        Decorates another <code>Map</code> returning a default value if the map
        does not contain the requested key.
        <p>
        When the {@link #get(Object)} method is called with a key that does not
        exist in the map, this map will return the default value specified in
        the constructor/factory. Only the get method is altered, so the
        {@link Map#containsKey(Object)} can be used to determine if a key really
        is in the map or not.
        <p>
        The defaulted value is not added to the map.
        Compare this behaviour with {@link LazyMap}, which does add the value
        to the map (via a Transformer).
        <p>
        For instance:
        <pre>
        Map map = new DefaultedMap("NULL");
        Object obj = map.get("Surname");
        // obj == "NULL"
        </pre>
        After the above code is executed the map is still empty.
        <p>
        <strong>Note that DefaultedMap is not synchronized and is not thread-safe.</strong>
        If you wish to use this map from multiple threads concurrently, you must use
        appropriate synchronization. The simplest approach is to wrap this map
        using {@link java.util.Collections#synchronizedMap(Map)}. This class may throw
        exceptions when accessed by concurrent threads without synchronization.
        @since 3.2
        @version $Id$
        @see LazyMap
        <!-- ACCEPT >=> 684e376d-9f1d-11ea-8a52-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.DefaultedMap` / `private static final long serialVersionUID`


        <!-- 684e376e-9f1d-11ea-8a53-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 684e376e-9f1d-11ea-8a53-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.DefaultedMap` / `private final Transformer<? super K, ? extends V> value`


        <!-- 684e376f-9f1d-11ea-8a54-333445793454 <=< ACCEPT -->
        The transformer to use if the map does not contain a key
        <!-- ACCEPT >=> 684e376f-9f1d-11ea-8a54-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.DefaultedMap` / `public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final V defaultValue)`


        <!-- 684e3770-9f1d-11ea-8a55-333445793454 <=< ACCEPT -->
        Factory method to create a defaulting map.
        <p>
        The value specified is returned when a missing key is found.
        @param <K>  the key type
        @param <V>  the value type
        @param map  the map to decorate, must not be null
        @param defaultValue  the default value to return when the key is not found
        @return a new defaulting map
        @throws NullPointerException if map is null
        @since 4.0
        <!-- ACCEPT >=> 684e3770-9f1d-11ea-8a55-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.DefaultedMap` / `public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final Factory<? extends V> factory)`


        <!-- 684e3771-9f1d-11ea-8a56-333445793454 <=< ACCEPT -->
        Factory method to create a defaulting map.
        <p>
        The factory specified is called when a missing key is found.
        The result will be returned as the result of the map get(key) method.
        @param <K>  the key type
        @param <V>  the value type
        @param map  the map to decorate, must not be null
        @param factory  the factory to use to create entries, must not be null
        @return a new defaulting map
        @throws NullPointerException if map or factory is null
        @since 4.0
        <!-- ACCEPT >=> 684e3771-9f1d-11ea-8a56-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.DefaultedMap` / `final Transformer<? super K, ? extends V> transformer)`


        <!-- 684e3772-9f1d-11ea-8a57-333445793454 <=< ACCEPT -->
        Factory method to create a defaulting map.
        <p>
        The transformer specified is called when a missing key is found.
        The key is passed to the transformer as the input, and the result
        will be returned as the result of the map get(key) method.
        @param <K>  the key type
        @param <V>  the value type
        @param map  the map to decorate, must not be null
        @param transformer  the transformer to use as a factory to create entries, must not be null
        @return a new defaulting map
        @throws NullPointerException if map or factory is null
        @since 4.0
        <!-- ACCEPT >=> 684e3772-9f1d-11ea-8a57-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.DefaultedMap` / `public DefaultedMap(final V defaultValue)`


        <!-- 684e3773-9f1d-11ea-8a58-333445793454 <=< ACCEPT -->
        Constructs a new empty <code>DefaultedMap</code> that decorates
        a <code>HashMap</code>.
        <p>
        The object passed in will be returned by the map whenever an
        unknown key is requested.
        @param defaultValue  the default value to return when the key is not found
        <!-- ACCEPT >=> 684e3773-9f1d-11ea-8a58-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.DefaultedMap` / `public DefaultedMap(final Transformer<? super K, ? extends V> defaultValueTransformer)`


        <!-- 684e3774-9f1d-11ea-8a59-333445793454 <=< ACCEPT -->
        Constructs a new empty <code>DefaultedMap</code> that decorates a <code>HashMap</code>.
        @param defaultValueTransformer transformer to use to generate missing values.
        <!-- ACCEPT >=> 684e3774-9f1d-11ea-8a59-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.DefaultedMap` / `protected DefaultedMap(final Map<K, V> map, final Transformer<? super K, ? extends V> defaultValueTransformer)`


        <!-- 684e3775-9f1d-11ea-8a5a-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param map  the map to decorate, must not be null
        @param defaultValueTransformer  the value transformer to use
        @throws NullPointerException if map or transformer is null
        <!-- ACCEPT >=> 684e3775-9f1d-11ea-8a5a-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.DefaultedMap` / `private void writeObject(final ObjectOutputStream out) throws IOException`


        <!-- 684e3776-9f1d-11ea-8a5b-333445793454 <=< ACCEPT -->
        Write the map out using a custom routine.
        @param out  the output stream
        @throws IOException
        <!-- ACCEPT >=> 684e3776-9f1d-11ea-8a5b-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.DefaultedMap` / `private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException`


        <!-- 684e3777-9f1d-11ea-8a5c-333445793454 <=< ACCEPT -->
        Read the map in using a custom routine.
        @param in  the input stream
        @throws IOException
        @throws ClassNotFoundException
        <!-- ACCEPT >=> 684e3777-9f1d-11ea-8a5c-333445793454 -->



# File: `java.org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter`

## Class: `java.org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter` / `public class EntrySetToMapIteratorAdapter<K, V> implements MapIterator<K, V>, ResettableIterator<K>`


        <!-- 684e3778-9f1d-11ea-8a5d-333445793454 <=< ACCEPT -->
        Adapts a Map entrySet to the MapIterator interface.
        @since 4.0
        @version $Id$
        <!-- ACCEPT >=> 684e3778-9f1d-11ea-8a5d-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter` / `Set<Map.Entry<K, V>> entrySet`


        <!-- 684e5e74-9f1d-11ea-8a5e-333445793454 <=< ACCEPT -->
        The adapted Map entry Set.
        <!-- ACCEPT >=> 684e5e74-9f1d-11ea-8a5e-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter` / `transient Iterator<Map.Entry<K, V>> iterator`


        <!-- 684e5e75-9f1d-11ea-8a5f-333445793454 <=< ACCEPT -->
        The resettable iterator in use.
        <!-- ACCEPT >=> 684e5e75-9f1d-11ea-8a5f-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter` / `transient Map.Entry<K, V> entry`


        <!-- 684e5e76-9f1d-11ea-8a60-333445793454 <=< ACCEPT -->
        The currently positioned Map entry.
        <!-- ACCEPT >=> 684e5e76-9f1d-11ea-8a60-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter` / `public EntrySetToMapIteratorAdapter(final Set<Map.Entry<K, V>> entrySet)`


        <!-- 684e5e77-9f1d-11ea-8a61-333445793454 <=< ACCEPT -->
        Create a new EntrySetToMapIteratorAdapter.
        @param entrySet  the entrySet to adapt
        <!-- ACCEPT >=> 684e5e77-9f1d-11ea-8a61-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter` / `public K getKey()`


        <!-- 684e5e78-9f1d-11ea-8a62-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <!-- ACCEPT >=> 684e5e78-9f1d-11ea-8a62-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter` / `public V getValue()`


        <!-- 684e5e79-9f1d-11ea-8a63-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <!-- ACCEPT >=> 684e5e79-9f1d-11ea-8a63-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter` / `public V setValue(final V value)`


        <!-- 684e5e7a-9f1d-11ea-8a64-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <!-- ACCEPT >=> 684e5e7a-9f1d-11ea-8a64-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter` / `public boolean hasNext()`


        <!-- 684e5e7b-9f1d-11ea-8a65-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <!-- ACCEPT >=> 684e5e7b-9f1d-11ea-8a65-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter` / `public K next()`


        <!-- 684e5e7c-9f1d-11ea-8a66-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <!-- ACCEPT >=> 684e5e7c-9f1d-11ea-8a66-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter` / `public synchronized void reset()`


        <!-- 684e5e7d-9f1d-11ea-8a67-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <!-- ACCEPT >=> 684e5e7d-9f1d-11ea-8a67-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter` / `public void remove()`


        <!-- 684e5e7e-9f1d-11ea-8a68-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <!-- ACCEPT >=> 684e5e7e-9f1d-11ea-8a68-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter` / `protected synchronized Map.Entry<K, V> current()`


        <!-- 684e5e7f-9f1d-11ea-8a69-333445793454 <=< ACCEPT -->
        Get the currently active entry.
        @return Map.Entry<K, V>
        <!-- ACCEPT >=> 684e5e7f-9f1d-11ea-8a69-333445793454 -->



# File: `java.org.apache.commons.collections4.map.FixedSizeMap`

## Class: `java.org.apache.commons.collections4.map.FixedSizeMap` / `implements BoundedMap<K, V>, Serializable`


        <!-- 684e5e80-9f1d-11ea-8a6a-333445793454 <=< ACCEPT -->
        Decorates another <code>Map</code> to fix the size, preventing add/remove.
        <p>
        Any action that would change the size of the map is disallowed.
        The put method is allowed to change the value associated with an existing
        key however.
        <p>
        If trying to remove or clear the map, an UnsupportedOperationException is
        thrown. If trying to put a new mapping into the map, an
        IllegalArgumentException is thrown. This is because the put method can
        succeed if the mapping's key already exists in the map, so the put method
        is not always unsupported.
        <p>
        <strong>Note that FixedSizeMap is not synchronized and is not thread-safe.</strong>
        If you wish to use this map from multiple threads concurrently, you must use
        appropriate synchronization. The simplest approach is to wrap this map
        using {@link java.util.Collections#synchronizedMap(Map)}. This class may throw
        exceptions when accessed by concurrent threads without synchronization.
        <p>
        This class is Serializable from Commons Collections 3.1.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 684e5e80-9f1d-11ea-8a6a-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.FixedSizeMap` / `private static final long serialVersionUID`


        <!-- 684e5e81-9f1d-11ea-8a6b-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 684e5e81-9f1d-11ea-8a6b-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.FixedSizeMap` / `public static <K, V> FixedSizeMap<K, V> fixedSizeMap(final Map<K, V> map)`


        <!-- 684e5e82-9f1d-11ea-8a6c-333445793454 <=< ACCEPT -->
        Factory method to create a fixed size map.
        @param <K>  the key type
        @param <V>  the value type
        @param map  the map to decorate, must not be null
        @return a new fixed size map
        @throws NullPointerException if map is null
        @since 4.0
        <!-- ACCEPT >=> 684e5e82-9f1d-11ea-8a6c-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.FixedSizeMap` / `protected FixedSizeMap(final Map<K, V> map)`


        <!-- 684e5e83-9f1d-11ea-8a6d-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param map  the map to decorate, must not be null
        @throws NullPointerException if map is null
        <!-- ACCEPT >=> 684e5e83-9f1d-11ea-8a6d-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.FixedSizeMap` / `private void writeObject(final ObjectOutputStream out) throws IOException`


        <!-- 684e5e84-9f1d-11ea-8a6e-333445793454 <=< ACCEPT -->
        Write the map out using a custom routine.
        @param out  the output stream
        @throws IOException
        @since 3.1
        <!-- ACCEPT >=> 684e5e84-9f1d-11ea-8a6e-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.FixedSizeMap` / `private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException`


        <!-- 684e857e-9f1d-11ea-8a6f-333445793454 <=< ACCEPT -->
        Read the map in using a custom routine.
        @param in  the input stream
        @throws IOException
        @throws ClassNotFoundException
        @since 3.1
        <!-- ACCEPT >=> 684e857e-9f1d-11ea-8a6f-333445793454 -->



# File: `java.org.apache.commons.collections4.map.FixedSizeSortedMap`

## Class: `java.org.apache.commons.collections4.map.FixedSizeSortedMap` / `implements BoundedMap<K, V>, Serializable`


        <!-- 684e857f-9f1d-11ea-8a70-333445793454 <=< ACCEPT -->
        Decorates another <code>SortedMap</code> to fix the size blocking add/remove.
        <p>
        Any action that would change the size of the map is disallowed.
        The put method is allowed to change the value associated with an existing
        key however.
        <p>
        If trying to remove or clear the map, an UnsupportedOperationException is
        thrown. If trying to put a new mapping into the map, an
        IllegalArgumentException is thrown. This is because the put method can
        succeed if the mapping's key already exists in the map, so the put method
        is not always unsupported.
        <p>
        <strong>Note that FixedSizeSortedMap is not synchronized and is not thread-safe.</strong>
        If you wish to use this map from multiple threads concurrently, you must use
        appropriate synchronization. The simplest approach is to wrap this map
        using {@link java.util.Collections#synchronizedSortedMap}. This class may throw
        exceptions when accessed by concurrent threads without synchronization.
        <p>
        This class is Serializable from Commons Collections 3.1.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 684e857f-9f1d-11ea-8a70-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.FixedSizeSortedMap` / `private static final long serialVersionUID`


        <!-- 684e8580-9f1d-11ea-8a71-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 684e8580-9f1d-11ea-8a71-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.FixedSizeSortedMap` / `public static <K, V> FixedSizeSortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)`


        <!-- 684e8581-9f1d-11ea-8a72-333445793454 <=< ACCEPT -->
        Factory method to create a fixed size sorted map.
        @param <K>  the key type
        @param <V>  the value type
        @param map  the map to decorate, must not be null
        @return a new fixed size sorted map
        @throws NullPointerException if map is null
        @since 4.0
        <!-- ACCEPT >=> 684e8581-9f1d-11ea-8a72-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.FixedSizeSortedMap` / `protected FixedSizeSortedMap(final SortedMap<K, V> map)`


        <!-- 684e8582-9f1d-11ea-8a73-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param map  the map to decorate, must not be null
        @throws NullPointerException if map is null
        <!-- ACCEPT >=> 684e8582-9f1d-11ea-8a73-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.FixedSizeSortedMap` / `protected SortedMap<K, V> getSortedMap()`


        <!-- 684e8583-9f1d-11ea-8a74-333445793454 <=< ACCEPT -->
        Gets the map being decorated.
        @return the decorated map
        <!-- ACCEPT >=> 684e8583-9f1d-11ea-8a74-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.FixedSizeSortedMap` / `private void writeObject(final ObjectOutputStream out) throws IOException`


        <!-- 684e8584-9f1d-11ea-8a75-333445793454 <=< ACCEPT -->
        Write the map out using a custom routine.
        <!-- ACCEPT >=> 684e8584-9f1d-11ea-8a75-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.FixedSizeSortedMap` / `private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException`


        <!-- 684e8585-9f1d-11ea-8a76-333445793454 <=< ACCEPT -->
        Read the map in using a custom routine.
        <!-- ACCEPT >=> 684e8585-9f1d-11ea-8a76-333445793454 -->



# File: `java.org.apache.commons.collections4.map.Flat3Map`

## Class: `java.org.apache.commons.collections4.map.Flat3Map` / `public class Flat3Map<K, V> implements IterableMap<K, V>, Serializable, Cloneable`


        <!-- 684e8586-9f1d-11ea-8a77-333445793454 <=< ACCEPT -->
        A <code>Map</code> implementation that stores data in simple fields until
        the size is greater than 3.
        <p>
        This map is designed for performance and can outstrip HashMap.
        It also has good garbage collection characteristics.
        <ul>
        <li>Optimised for operation at size 3 or less.
        <li>Still works well once size 3 exceeded.
        <li>Gets at size 3 or less are about 0-10% faster than HashMap,
        <li>Puts at size 3 or less are over 4 times faster than HashMap.
        <li>Performance 5% slower than HashMap once size 3 exceeded once.
        </ul>
        The design uses two distinct modes of operation - flat and delegate.
        While the map is size 3 or less, operations map straight onto fields using
        switch statements. Once size 4 is reached, the map switches to delegate mode
        and only switches back when cleared. In delegate mode, all operations are
        forwarded straight to a HashMap resulting in the 5% performance loss.
        <p>
        The performance gains on puts are due to not needing to create a Map Entry
        object. This is a large saving not only in performance but in garbage collection.
        <p>
        Whilst in flat mode this map is also easy for the garbage collector to dispatch.
        This is because it contains no complex objects or arrays which slow the progress.
        <p>
        Do not use <code>Flat3Map</code> if the size is likely to grow beyond 3.
        <p>
        <strong>Note that Flat3Map is not synchronized and is not thread-safe.</strong>
        If you wish to use this map from multiple threads concurrently, you must use
        appropriate synchronization. The simplest approach is to wrap this map
        using {@link java.util.Collections#synchronizedMap(Map)}. This class may throw
        exceptions when accessed by concurrent threads without synchronization.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 684e8586-9f1d-11ea-8a77-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.Flat3Map` / `private static final long serialVersionUID`


        <!-- 684e8587-9f1d-11ea-8a78-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 684e8587-9f1d-11ea-8a78-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.Flat3Map` / `private transient int size`


        <!-- 684e8588-9f1d-11ea-8a79-333445793454 <=< ACCEPT -->
        The size of the map, used while in flat mode
        <!-- ACCEPT >=> 684e8588-9f1d-11ea-8a79-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.Flat3Map` / `private transient int hash1`


        <!-- 684e8589-9f1d-11ea-8a7a-333445793454 <=< ACCEPT -->
        Hash, used while in flat mode
        <!-- ACCEPT >=> 684e8589-9f1d-11ea-8a7a-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.Flat3Map` / `private transient int hash2`


        <!-- 684e858a-9f1d-11ea-8a7b-333445793454 <=< ACCEPT -->
        Hash, used while in flat mode
        <!-- ACCEPT >=> 684e858a-9f1d-11ea-8a7b-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.Flat3Map` / `private transient int hash3`


        <!-- 684e858b-9f1d-11ea-8a7c-333445793454 <=< ACCEPT -->
        Hash, used while in flat mode
        <!-- ACCEPT >=> 684e858b-9f1d-11ea-8a7c-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.Flat3Map` / `private transient K key1`


        <!-- 684e858c-9f1d-11ea-8a7d-333445793454 <=< ACCEPT -->
        Key, used while in flat mode
        <!-- ACCEPT >=> 684e858c-9f1d-11ea-8a7d-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.Flat3Map` / `private transient K key2`


        <!-- 684e858d-9f1d-11ea-8a7e-333445793454 <=< ACCEPT -->
        Key, used while in flat mode
        <!-- ACCEPT >=> 684e858d-9f1d-11ea-8a7e-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.Flat3Map` / `private transient K key3`


        <!-- 684e858e-9f1d-11ea-8a7f-333445793454 <=< ACCEPT -->
        Key, used while in flat mode
        <!-- ACCEPT >=> 684e858e-9f1d-11ea-8a7f-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.Flat3Map` / `private transient V value1`


        <!-- 684e858f-9f1d-11ea-8a80-333445793454 <=< ACCEPT -->
        Value, used while in flat mode
        <!-- ACCEPT >=> 684e858f-9f1d-11ea-8a80-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.Flat3Map` / `private transient V value2`


        <!-- 684e8590-9f1d-11ea-8a81-333445793454 <=< ACCEPT -->
        Value, used while in flat mode
        <!-- ACCEPT >=> 684e8590-9f1d-11ea-8a81-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.Flat3Map` / `private transient V value3`


        <!-- 684e8591-9f1d-11ea-8a82-333445793454 <=< ACCEPT -->
        Value, used while in flat mode
        <!-- ACCEPT >=> 684e8591-9f1d-11ea-8a82-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.Flat3Map` / `private transient AbstractHashedMap<K, V> delegateMap`


        <!-- 684e8592-9f1d-11ea-8a83-333445793454 <=< ACCEPT -->
        Map, used while in delegate mode
        <!-- ACCEPT >=> 684e8592-9f1d-11ea-8a83-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.Flat3Map` / `public Flat3Map()`


        <!-- 684e8593-9f1d-11ea-8a84-333445793454 <=< ACCEPT -->
        Constructor.
        <!-- ACCEPT >=> 684e8593-9f1d-11ea-8a84-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.Flat3Map` / `public Flat3Map(final Map<? extends K, ? extends V> map)`


        <!-- 684e8594-9f1d-11ea-8a85-333445793454 <=< ACCEPT -->
        Constructor copying elements from another map.
        @param map  the map to copy
        @throws NullPointerException if the map is null
        <!-- ACCEPT >=> 684e8594-9f1d-11ea-8a85-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.Flat3Map` / `public V get(final Object key)`


        <!-- 684eac88-9f1d-11ea-8a86-333445793454 <=< ACCEPT -->
        Gets the value mapped to the key specified.
        @param key  the key
        @return the mapped value, null if no match
        <!-- ACCEPT >=> 684eac88-9f1d-11ea-8a86-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.Flat3Map` / `public int size()`


        <!-- 684eac89-9f1d-11ea-8a87-333445793454 <=< ACCEPT -->
        Gets the size of the map.
        @return the size
        <!-- ACCEPT >=> 684eac89-9f1d-11ea-8a87-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.Flat3Map` / `public boolean isEmpty()`


        <!-- 684eac8a-9f1d-11ea-8a88-333445793454 <=< ACCEPT -->
        Checks whether the map is currently empty.
        @return true if the map is currently size zero
        <!-- ACCEPT >=> 684eac8a-9f1d-11ea-8a88-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.Flat3Map` / `public boolean containsKey(final Object key)`


        <!-- 684eac8b-9f1d-11ea-8a89-333445793454 <=< ACCEPT -->
        Checks whether the map contains the specified key.
        @param key  the key to search for
        @return true if the map contains the key
        <!-- ACCEPT >=> 684eac8b-9f1d-11ea-8a89-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.Flat3Map` / `public boolean containsValue(final Object value)`


        <!-- 684eac8c-9f1d-11ea-8a8a-333445793454 <=< ACCEPT -->
        Checks whether the map contains the specified value.
        @param value  the value to search for
        @return true if the map contains the key
        <!-- ACCEPT >=> 684eac8c-9f1d-11ea-8a8a-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.Flat3Map` / `public V put(final K key, final V value)`


        <!-- 684eac8d-9f1d-11ea-8a8b-333445793454 <=< ACCEPT -->
        Puts a key-value mapping into this map.
        @param key  the key to add
        @param value  the value to add
        @return the value previously mapped to this key, null if none
        <!-- ACCEPT >=> 684eac8d-9f1d-11ea-8a8b-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.Flat3Map` / `public void putAll(final Map<? extends K, ? extends V> map)`


        <!-- 684eac8e-9f1d-11ea-8a8c-333445793454 <=< ACCEPT -->
        Puts all the values from the specified map into this map.
        @param map  the map to add
        @throws NullPointerException if the map is null
        <!-- ACCEPT >=> 684eac8e-9f1d-11ea-8a8c-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.Flat3Map` / `private void convertToMap()`


        <!-- 684eac8f-9f1d-11ea-8a8d-333445793454 <=< ACCEPT -->
        Converts the flat map data to a map.
        <!-- ACCEPT >=> 684eac8f-9f1d-11ea-8a8d-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.Flat3Map` / `protected AbstractHashedMap<K, V> createDelegateMap()`


        <!-- 684eac90-9f1d-11ea-8a8e-333445793454 <=< ACCEPT -->
        Create an instance of the map used for storage when in delegation mode.
        <p>
        This can be overridden by subclasses to provide a different map implementation.
        Not every AbstractHashedMap is suitable, identity and reference based maps
        would be poor choices.
        @return a new AbstractHashedMap or subclass
        @since 3.1
        <!-- ACCEPT >=> 684eac90-9f1d-11ea-8a8e-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.Flat3Map` / `public V remove(final Object key)`


        <!-- 684eac91-9f1d-11ea-8a8f-333445793454 <=< ACCEPT -->
        Removes the specified mapping from this map.
        @param key  the mapping to remove
        @return the value mapped to the removed key, null if key not in map
        <!-- ACCEPT >=> 684eac91-9f1d-11ea-8a8f-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.Flat3Map` / `public void clear()`


        <!-- 684eac92-9f1d-11ea-8a90-333445793454 <=< ACCEPT -->
        Clears the map, resetting the size to zero and nullifying references
        to avoid garbage collection issues.
        <!-- ACCEPT >=> 684eac92-9f1d-11ea-8a90-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.Flat3Map` / `public MapIterator<K, V> mapIterator()`


        <!-- 684eac93-9f1d-11ea-8a91-333445793454 <=< ACCEPT -->
        Gets an iterator over the map.
        Changes made to the iterator affect this map.
        <p>
        A MapIterator returns the keys in the map. It also provides convenient
        methods to get the key and value, and set the value.
        It avoids the need to create an entrySet/keySet/values object.
        It also avoids creating the Map Entry object.
        @return the map iterator
        <!-- ACCEPT >=> 684eac93-9f1d-11ea-8a91-333445793454 -->



## Class: `java.org.apache.commons.collections4.map.Flat3Map` / `static class FlatMapIterator<K, V> implements MapIterator<K, V>, ResettableIterator<K>`


        <!-- 684eac94-9f1d-11ea-8a92-333445793454 <=< ACCEPT -->
        FlatMapIterator
        <!-- ACCEPT >=> 684eac94-9f1d-11ea-8a92-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.Flat3Map` / `public Set<Map.Entry<K, V>> entrySet()`


        <!-- 684eac95-9f1d-11ea-8a93-333445793454 <=< ACCEPT -->
        Gets the entrySet view of the map.
        Changes made to the view affect this map.
        <p>
        NOTE: from 4.0, the returned Map Entry will be an independent object and will
        not change anymore as the iterator progresses. To avoid this additional object
        creation and simply iterate through the entries, use {@link #mapIterator()}.
        @return the entrySet view
        <!-- ACCEPT >=> 684eac95-9f1d-11ea-8a93-333445793454 -->



## Class: `java.org.apache.commons.collections4.map.Flat3Map` / `static class EntrySet<K, V> extends AbstractSet<Map.Entry<K, V>>`


        <!-- 684eac96-9f1d-11ea-8a94-333445793454 <=< ACCEPT -->
        EntrySet
        <!-- ACCEPT >=> 684eac96-9f1d-11ea-8a94-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.Flat3Map` / `void setRemoved(final boolean flag)`


        <!-- 684eac97-9f1d-11ea-8a95-333445793454 <=< ACCEPT -->
        Used by the iterator that created this entry to indicate that
        {@link java.util.Iterator#remove()} has been called.
        <p>
        As a consequence, all subsequent call to {@link #getKey()},
        {@link #setValue(Object)} and {@link #getValue()} will fail.
        @param flag
        <!-- ACCEPT >=> 684eac97-9f1d-11ea-8a95-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.Flat3Map` / `public EntryIterator(final Flat3Map<K, V> parent)`


        <!-- 684eac98-9f1d-11ea-8a96-333445793454 <=< ACCEPT -->
        Create a new Flat3Map.EntryIterator.
        <!-- ACCEPT >=> 684eac98-9f1d-11ea-8a96-333445793454 -->



## Class: `java.org.apache.commons.collections4.map.Flat3Map` / `static class EntrySetIterator<K, V> extends EntryIterator<K, V> implements Iterator<Map.Entry<K, V>>`


        <!-- 684eac99-9f1d-11ea-8a97-333445793454 <=< ACCEPT -->
        EntrySetIterator and MapEntry
        <!-- ACCEPT >=> 684eac99-9f1d-11ea-8a97-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.Flat3Map` / `public Set<K> keySet()`


        <!-- 684eac9a-9f1d-11ea-8a98-333445793454 <=< ACCEPT -->
        Gets the keySet view of the map.
        Changes made to the view affect this map.
        To simply iterate through the keys, use {@link #mapIterator()}.
        @return the keySet view
        <!-- ACCEPT >=> 684eac9a-9f1d-11ea-8a98-333445793454 -->



## Class: `java.org.apache.commons.collections4.map.Flat3Map` / `static class KeySet<K> extends AbstractSet<K>`


        <!-- 684eac9b-9f1d-11ea-8a99-333445793454 <=< ACCEPT -->
        KeySet
        <!-- ACCEPT >=> 684eac9b-9f1d-11ea-8a99-333445793454 -->



## Class: `java.org.apache.commons.collections4.map.Flat3Map` / `static class KeySetIterator<K> extends EntryIterator<K, Object> implements Iterator<K>`


        <!-- 684eac9c-9f1d-11ea-8a9a-333445793454 <=< ACCEPT -->
        KeySetIterator
        <!-- ACCEPT >=> 684eac9c-9f1d-11ea-8a9a-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.Flat3Map` / `public Collection<V> values()`


        <!-- 684eac9d-9f1d-11ea-8a9b-333445793454 <=< ACCEPT -->
        Gets the values view of the map.
        Changes made to the view affect this map.
        To simply iterate through the values, use {@link #mapIterator()}.
        @return the values view
        <!-- ACCEPT >=> 684eac9d-9f1d-11ea-8a9b-333445793454 -->



## Class: `java.org.apache.commons.collections4.map.Flat3Map` / `static class Values<V> extends AbstractCollection<V>`


        <!-- 684eac9e-9f1d-11ea-8a9c-333445793454 <=< ACCEPT -->
        Values
        <!-- ACCEPT >=> 684eac9e-9f1d-11ea-8a9c-333445793454 -->



## Class: `java.org.apache.commons.collections4.map.Flat3Map` / `static class ValuesIterator<V> extends EntryIterator<Object, V> implements Iterator<V>`


        <!-- 684ed392-9f1d-11ea-8a9d-333445793454 <=< ACCEPT -->
        ValuesIterator
        <!-- ACCEPT >=> 684ed392-9f1d-11ea-8a9d-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.Flat3Map` / `private void writeObject(final ObjectOutputStream out) throws IOException`


        <!-- 684ed393-9f1d-11ea-8a9e-333445793454 <=< ACCEPT -->
        Write the map out using a custom routine.
        <!-- ACCEPT >=> 684ed393-9f1d-11ea-8a9e-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.Flat3Map` / `private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException`


        <!-- 684ed394-9f1d-11ea-8a9f-333445793454 <=< ACCEPT -->
        Read the map in using a custom routine.
        <!-- ACCEPT >=> 684ed394-9f1d-11ea-8a9f-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.Flat3Map` / `public Flat3Map<K, V> clone()`


        <!-- 684ed395-9f1d-11ea-8aa0-333445793454 <=< ACCEPT -->
        Clones the map without cloning the keys or values.
        @return a shallow clone
        @since 3.1
        <!-- ACCEPT >=> 684ed395-9f1d-11ea-8aa0-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.Flat3Map` / `public boolean equals(final Object obj)`


        <!-- 684ed396-9f1d-11ea-8aa1-333445793454 <=< ACCEPT -->
        Compares this map with another.
        @param obj  the object to compare to
        @return true if equal
        <!-- ACCEPT >=> 684ed396-9f1d-11ea-8aa1-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.Flat3Map` / `public int hashCode()`


        <!-- 684ed397-9f1d-11ea-8aa2-333445793454 <=< ACCEPT -->
        Gets the standard Map hashCode.
        @return the hash code defined in the Map interface
        <!-- ACCEPT >=> 684ed397-9f1d-11ea-8aa2-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.Flat3Map` / `public String toString()`


        <!-- 684ed398-9f1d-11ea-8aa3-333445793454 <=< ACCEPT -->
        Gets the map as a String.
        @return a string version of the map
        <!-- ACCEPT >=> 684ed398-9f1d-11ea-8aa3-333445793454 -->



# File: `java.org.apache.commons.collections4.map.HashedMap`

## Class: `java.org.apache.commons.collections4.map.HashedMap` / `extends AbstractHashedMap<K, V> implements Serializable, Cloneable`


        <!-- 684ed399-9f1d-11ea-8aa4-333445793454 <=< ACCEPT -->
        A <code>Map</code> implementation that is a general purpose alternative
        to <code>HashMap</code>.
        <p>
        This implementation improves on the JDK1.4 HashMap by adding the
        {@link org.apache.commons.collections4.MapIterator MapIterator}
        functionality and many methods for subclassing.
        <p>
        <strong>Note that HashedMap is not synchronized and is not thread-safe.</strong>
        If you wish to use this map from multiple threads concurrently, you must use
        appropriate synchronization. The simplest approach is to wrap this map
        using {@link java.util.Collections#synchronizedMap(Map)}. This class may throw
        exceptions when accessed by concurrent threads without synchronization.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 684ed399-9f1d-11ea-8aa4-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.HashedMap` / `private static final long serialVersionUID`


        <!-- 684ed39a-9f1d-11ea-8aa5-333445793454 <=< ACCEPT -->
        Serialisation version
        <!-- ACCEPT >=> 684ed39a-9f1d-11ea-8aa5-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.HashedMap` / `public HashedMap()`


        <!-- 684ed39b-9f1d-11ea-8aa6-333445793454 <=< ACCEPT -->
        Constructs a new empty map with default size and load factor.
        <!-- ACCEPT >=> 684ed39b-9f1d-11ea-8aa6-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.HashedMap` / `public HashedMap(final int initialCapacity)`


        <!-- 684ed39c-9f1d-11ea-8aa7-333445793454 <=< ACCEPT -->
        Constructs a new, empty map with the specified initial capacity.
        @param initialCapacity  the initial capacity
        @throws IllegalArgumentException if the initial capacity is negative
        <!-- ACCEPT >=> 684ed39c-9f1d-11ea-8aa7-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.HashedMap` / `public HashedMap(final int initialCapacity, final float loadFactor)`


        <!-- 684ed39d-9f1d-11ea-8aa8-333445793454 <=< ACCEPT -->
        Constructs a new, empty map with the specified initial capacity and
        load factor.
        @param initialCapacity  the initial capacity
        @param loadFactor  the load factor
        @throws IllegalArgumentException if the initial capacity is negative
        @throws IllegalArgumentException if the load factor is less than zero
        <!-- ACCEPT >=> 684ed39d-9f1d-11ea-8aa8-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.HashedMap` / `public HashedMap(final Map<? extends K, ? extends V> map)`


        <!-- 684ed39e-9f1d-11ea-8aa9-333445793454 <=< ACCEPT -->
        Constructor copying elements from another map.
        @param map  the map to copy
        @throws NullPointerException if the map is null
        <!-- ACCEPT >=> 684ed39e-9f1d-11ea-8aa9-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.HashedMap` / `public HashedMap<K, V> clone()`


        <!-- 684ed39f-9f1d-11ea-8aaa-333445793454 <=< ACCEPT -->
        Clones the map without cloning the keys or values.
        @return a shallow clone
        <!-- ACCEPT >=> 684ed39f-9f1d-11ea-8aaa-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.HashedMap` / `private void writeObject(final ObjectOutputStream out) throws IOException`


        <!-- 684ed3a0-9f1d-11ea-8aab-333445793454 <=< ACCEPT -->
        Write the map out using a custom routine.
        <!-- ACCEPT >=> 684ed3a0-9f1d-11ea-8aab-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.HashedMap` / `private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException`


        <!-- 684ed3a1-9f1d-11ea-8aac-333445793454 <=< ACCEPT -->
        Read the map in using a custom routine.
        <!-- ACCEPT >=> 684ed3a1-9f1d-11ea-8aac-333445793454 -->



# File: `java.org.apache.commons.collections4.map.LRUMap`

## Class: `java.org.apache.commons.collections4.map.LRUMap` / `extends AbstractLinkedMap<K, V> implements BoundedMap<K, V>, Serializable, Cloneable`


        <!-- 684ed3a2-9f1d-11ea-8aad-333445793454 <=< ACCEPT -->
        A <code>Map</code> implementation with a fixed maximum size which removes
        the least recently used entry if an entry is added when full.
        <p>
        The least recently used algorithm works on the get and put operations only.
        Iteration of any kind, including setting the value by iteration, does not
        change the order. Queries such as containsKey and containsValue or access
        via views also do not change the order.
        <p>
        A somewhat subtle ramification of the least recently used
        algorithm is that calls to {@link #get(Object)} stand a very good chance
        of modifying the map's iteration order and thus invalidating any
        iterators currently in use.  It is therefore suggested that iterations
        over an {@link LRUMap} instance access entry values only through a
        {@link org.apache.commons.collections4.MapIterator MapIterator} or {@link #entrySet()} iterator.
        <p>
        The map implements <code>OrderedMap</code> and entries may be queried using
        the bidirectional <code>OrderedMapIterator</code>. The order returned is
        least recently used to most recently used. Iterators from map views can
        also be cast to <code>OrderedIterator</code> if required.
        <p>
        All the available iterators can be reset back to the start by casting to
        <code>ResettableIterator</code> and calling <code>reset()</code>.
        <p>
        <strong>Note that LRUMap is not synchronized and is not thread-safe.</strong>
        If you wish to use this map from multiple threads concurrently, you must use
        appropriate synchronization. The simplest approach is to wrap this map
        using {@link java.util.Collections#synchronizedMap(Map)}. This class may throw
        <code>NullPointerException</code>'s when accessed by concurrent threads.
        @since 3.0 (previously in main package v1.0)
        @version $Id$
        <!-- ACCEPT >=> 684ed3a2-9f1d-11ea-8aad-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.LRUMap` / `private static final long serialVersionUID`


        <!-- 684ed3a3-9f1d-11ea-8aae-333445793454 <=< ACCEPT -->
        Serialisation version
        <!-- ACCEPT >=> 684ed3a3-9f1d-11ea-8aae-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.LRUMap` / `protected static final int DEFAULT_MAX_SIZE`


        <!-- 684ed3a4-9f1d-11ea-8aaf-333445793454 <=< ACCEPT -->
        Default maximum size
        <!-- ACCEPT >=> 684ed3a4-9f1d-11ea-8aaf-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.LRUMap` / `private transient int maxSize`


        <!-- 684efa9e-9f1d-11ea-8ab0-333445793454 <=< ACCEPT -->
        Maximum size
        <!-- ACCEPT >=> 684efa9e-9f1d-11ea-8ab0-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.LRUMap` / `private boolean scanUntilRemovable`


        <!-- 684efa9f-9f1d-11ea-8ab1-333445793454 <=< ACCEPT -->
        Scan behaviour
        <!-- ACCEPT >=> 684efa9f-9f1d-11ea-8ab1-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.LRUMap` / `public LRUMap()`


        <!-- 684efaa0-9f1d-11ea-8ab2-333445793454 <=< ACCEPT -->
        Constructs a new empty map with a maximum size of 100.
        <!-- ACCEPT >=> 684efaa0-9f1d-11ea-8ab2-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.LRUMap` / `public LRUMap(final int maxSize)`


        <!-- 684efaa1-9f1d-11ea-8ab3-333445793454 <=< ACCEPT -->
        Constructs a new, empty map with the specified maximum size.
        @param maxSize  the maximum size of the map
        @throws IllegalArgumentException if the maximum size is less than one
        <!-- ACCEPT >=> 684efaa1-9f1d-11ea-8ab3-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.LRUMap` / `public LRUMap(final int maxSize, final int initialSize)`


        <!-- 684efaa2-9f1d-11ea-8ab4-333445793454 <=< ACCEPT -->
        Constructs a new, empty map with the specified maximum size.
        @param maxSize  the maximum size of the map
        @param initialSize  the initial size of the map
        @throws IllegalArgumentException if the maximum size is less than one
        @throws IllegalArgumentException if the initial size is negative or larger than the maximum size
        @since 4.1
        <!-- ACCEPT >=> 684efaa2-9f1d-11ea-8ab4-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.LRUMap` / `public LRUMap(final int maxSize, final boolean scanUntilRemovable)`


        <!-- 684efaa3-9f1d-11ea-8ab5-333445793454 <=< ACCEPT -->
        Constructs a new, empty map with the specified maximum size.
        @param maxSize  the maximum size of the map
        @param scanUntilRemovable  scan until a removeable entry is found, default false
        @throws IllegalArgumentException if the maximum size is less than one
        @since 3.1
        <!-- ACCEPT >=> 684efaa3-9f1d-11ea-8ab5-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.LRUMap` / `public LRUMap(final int maxSize, final float loadFactor)`


        <!-- 684efaa4-9f1d-11ea-8ab6-333445793454 <=< ACCEPT -->
        Constructs a new, empty map with the specified max capacity and
        load factor.
        @param maxSize  the maximum size of the map
        @param loadFactor  the load factor
        @throws IllegalArgumentException if the maximum size is less than one
        @throws IllegalArgumentException if the load factor is less than zero
        <!-- ACCEPT >=> 684efaa4-9f1d-11ea-8ab6-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.LRUMap` / `public LRUMap(final int maxSize, final int initialSize, final float loadFactor)`


        <!-- 684efaa5-9f1d-11ea-8ab7-333445793454 <=< ACCEPT -->
        Constructs a new, empty map with the specified max / initial capacity and
        load factor.
        @param maxSize  the maximum size of the map
        @param initialSize  the initial size of the map
        @param loadFactor  the load factor
        @throws IllegalArgumentException if the maximum size is less than one
        @throws IllegalArgumentException if the initial size is negative or larger than the maximum size
        @throws IllegalArgumentException if the load factor is less than zero
        @since 4.1
        <!-- ACCEPT >=> 684efaa5-9f1d-11ea-8ab7-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.LRUMap` / `public LRUMap(final int maxSize, final float loadFactor, final boolean scanUntilRemovable)`


        <!-- 684efaa6-9f1d-11ea-8ab8-333445793454 <=< ACCEPT -->
        Constructs a new, empty map with the specified max capacity and load factor.
        @param maxSize  the maximum size of the map
        @param loadFactor  the load factor
        @param scanUntilRemovable  scan until a removeable entry is found, default false
        @throws IllegalArgumentException if the maximum size is less than one
        @throws IllegalArgumentException if the load factor is less than zero
        @since 3.1
        <!-- ACCEPT >=> 684efaa6-9f1d-11ea-8ab8-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.LRUMap` / `final boolean scanUntilRemovable)`


        <!-- 684efaa7-9f1d-11ea-8ab9-333445793454 <=< ACCEPT -->
        Constructs a new, empty map with the specified max / initial capacity and load factor.
        @param maxSize  the maximum size of the map
        @param initialSize  the initial size of the map
        @param loadFactor  the load factor
        @param scanUntilRemovable  scan until a removeable entry is found, default false
        @throws IllegalArgumentException if the maximum size is less than one
        @throws IllegalArgumentException if the initial size is negative or larger than the maximum size
        @throws IllegalArgumentException if the load factor is less than zero
        @since 4.1
        <!-- ACCEPT >=> 684efaa7-9f1d-11ea-8ab9-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.LRUMap` / `public LRUMap(final Map<? extends K, ? extends V> map)`


        <!-- 684efaa8-9f1d-11ea-8aba-333445793454 <=< ACCEPT -->
        Constructor copying elements from another map.
        <p>
        The maximum size is set from the map's size.
        @param map  the map to copy
        @throws NullPointerException if the map is null
        @throws IllegalArgumentException if the map is empty
        <!-- ACCEPT >=> 684efaa8-9f1d-11ea-8aba-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.LRUMap` / `public LRUMap(final Map<? extends K, ? extends V> map, final boolean scanUntilRemovable)`


        <!-- 684efaa9-9f1d-11ea-8abb-333445793454 <=< ACCEPT -->
        Constructor copying elements from another map.
        <p/>
        The maximum size is set from the map's size.
        @param map  the map to copy
        @param scanUntilRemovable  scan until a removeable entry is found, default false
        @throws NullPointerException if the map is null
        @throws IllegalArgumentException if the map is empty
        @since 3.1
        <!-- ACCEPT >=> 684efaa9-9f1d-11ea-8abb-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.LRUMap` / `public V get(final Object key)`


        <!-- 684efaaa-9f1d-11ea-8abc-333445793454 <=< ACCEPT -->
        Gets the value mapped to the key specified.
        <p>
        This operation changes the position of the key in the map to the
        most recently used position (last).
        @param key  the key
        @return the mapped value, null if no match
        <!-- ACCEPT >=> 684efaaa-9f1d-11ea-8abc-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.LRUMap` / `public V get(final Object key, final boolean updateToMRU)`


        <!-- 684efaab-9f1d-11ea-8abd-333445793454 <=< ACCEPT -->
        Gets the value mapped to the key specified.
        <p>
        If {@code updateToMRU} is {@code true}, the position of the key in the map
        is changed to the most recently used position (last), otherwise the iteration
        order is not changed by this operation.
        @param key  the key
        @param updateToMRU  whether the key shall be updated to the
        most recently used position
        @return the mapped value, null if no match
        @since 4.1
        <!-- ACCEPT >=> 684efaab-9f1d-11ea-8abd-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.LRUMap` / `protected void moveToMRU(final LinkEntry<K, V> entry)`


        <!-- 684efaac-9f1d-11ea-8abe-333445793454 <=< ACCEPT -->
        Moves an entry to the MRU position at the end of the list.
        <p>
        This implementation moves the updated entry to the end of the list.
        @param entry  the entry to update
        <!-- ACCEPT >=> 684efaac-9f1d-11ea-8abe-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.LRUMap` / `protected void updateEntry(final HashEntry<K, V> entry, final V newValue)`


        <!-- 684f2196-9f1d-11ea-8abf-333445793454 <=< ACCEPT -->
        Updates an existing key-value mapping.
        <p>
        This implementation moves the updated entry to the end of the list
        using {@link #moveToMRU(AbstractLinkedMap.LinkEntry)}.
        @param entry  the entry to update
        @param newValue  the new value to store
        <!-- ACCEPT >=> 684f2196-9f1d-11ea-8abf-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.LRUMap` / `protected void addMapping(final int hashIndex, final int hashCode, final K key, final V value)`


        <!-- 684f2197-9f1d-11ea-8ac0-333445793454 <=< ACCEPT -->
        Adds a new key-value mapping into this map.
        <p>
        This implementation checks the LRU size and determines whether to
        discard an entry or not using {@link #removeLRU(AbstractLinkedMap.LinkEntry)}.
        <p>
        From Commons Collections 3.1 this method uses {@link #isFull()} rather
        than accessing <code>size</code> and <code>maxSize</code> directly.
        It also handles the scanUntilRemovable functionality.
        @param hashIndex  the index into the data array to store at
        @param hashCode  the hash code of the key to add
        @param key  the key to add
        @param value  the value to add
        <!-- ACCEPT >=> 684f2197-9f1d-11ea-8ac0-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.LRUMap` / `final K key, final V value)`


        <!-- 684f2198-9f1d-11ea-8ac1-333445793454 <=< ACCEPT -->
        Reuses an entry by removing it and moving it to a new place in the map.
        <p>
        This method uses {@link #removeEntry}, {@link #reuseEntry} and {@link #addEntry}.
        @param entry  the entry to reuse
        @param hashIndex  the index into the data array to store at
        @param hashCode  the hash code of the key to add
        @param key  the key to add
        @param value  the value to add
        <!-- ACCEPT >=> 684f2198-9f1d-11ea-8ac1-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.LRUMap` / `protected boolean removeLRU(final LinkEntry<K, V> entry)`


        <!-- 684f2199-9f1d-11ea-8ac2-333445793454 <=< ACCEPT -->
        Subclass method to control removal of the least recently used entry from the map.
        <p>
        This method exists for subclasses to override. A subclass may wish to
        provide cleanup of resources when an entry is removed. For example:
        <pre>
        protected boolean removeLRU(LinkEntry entry) {
        releaseResources(entry.getValue());  // release resources held by entry
        return true;  // actually delete entry
        }
        </pre>
        <p>
        Alternatively, a subclass may choose to not remove the entry or selectively
        keep certain LRU entries. For example:
        <pre>
        protected boolean removeLRU(LinkEntry entry) {
        if (entry.getKey().toString().startsWith("System.")) {
        return false;  // entry not removed from LRUMap
        } else {
        return true;  // actually delete entry
        }
        }
        </pre>
        The effect of returning false is dependent on the scanUntilRemovable flag.
        If the flag is true, the next LRU entry will be passed to this method and so on
        until one returns false and is removed, or every entry in the map has been passed.
        If the scanUntilRemovable flag is false, the map will exceed the maximum size.
        <p>
        NOTE: Commons Collections 3.0 passed the wrong entry to this method.
        This is fixed in version 3.1 onwards.
        @param entry  the entry to be removed
        @return {@code true}
        <!-- ACCEPT >=> 684f2199-9f1d-11ea-8ac2-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.LRUMap` / `public boolean isFull()`


        <!-- 684f219a-9f1d-11ea-8ac3-333445793454 <=< ACCEPT -->
        Returns true if this map is full and no new mappings can be added.
        @return <code>true</code> if the map is full
        <!-- ACCEPT >=> 684f219a-9f1d-11ea-8ac3-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.LRUMap` / `public int maxSize()`


        <!-- 684f219b-9f1d-11ea-8ac4-333445793454 <=< ACCEPT -->
        Gets the maximum size of the map (the bound).
        @return the maximum number of elements the map can hold
        <!-- ACCEPT >=> 684f219b-9f1d-11ea-8ac4-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.LRUMap` / `public boolean isScanUntilRemovable()`


        <!-- 684f219c-9f1d-11ea-8ac5-333445793454 <=< ACCEPT -->
        Whether this LRUMap will scan until a removable entry is found when the
        map is full.
        @return true if this map scans
        @since 3.1
        <!-- ACCEPT >=> 684f219c-9f1d-11ea-8ac5-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.LRUMap` / `public LRUMap<K, V> clone()`


        <!-- 684f219d-9f1d-11ea-8ac6-333445793454 <=< ACCEPT -->
        Clones the map without cloning the keys or values.
        @return a shallow clone
        <!-- ACCEPT >=> 684f219d-9f1d-11ea-8ac6-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.LRUMap` / `private void writeObject(final ObjectOutputStream out) throws IOException`


        <!-- 684f219e-9f1d-11ea-8ac7-333445793454 <=< ACCEPT -->
        Write the map out using a custom routine.
        <!-- ACCEPT >=> 684f219e-9f1d-11ea-8ac7-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.LRUMap` / `private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException`


        <!-- 684f219f-9f1d-11ea-8ac8-333445793454 <=< ACCEPT -->
        Read the map in using a custom routine.
        <!-- ACCEPT >=> 684f219f-9f1d-11ea-8ac8-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.LRUMap` / `protected void doWriteObject(final ObjectOutputStream out) throws IOException`


        <!-- 684f21a0-9f1d-11ea-8ac9-333445793454 <=< ACCEPT -->
        Writes the data necessary for <code>put()</code> to work in deserialization.
        @param out  the output stream
        @throws IOException if an error occurs while writing to the stream
        <!-- ACCEPT >=> 684f21a0-9f1d-11ea-8ac9-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.LRUMap` / `protected void doReadObject(final ObjectInputStream in) throws IOException, ClassNotFoundException`


        <!-- 684f21a1-9f1d-11ea-8aca-333445793454 <=< ACCEPT -->
        Reads the data necessary for <code>put()</code> to work in the superclass.
        @param in  the input stream
        @throws IOException if an error occurs while reading from the stream
        @throws ClassNotFoundException if an object read from the stream can not be loaded
        <!-- ACCEPT >=> 684f21a1-9f1d-11ea-8aca-333445793454 -->



# File: `java.org.apache.commons.collections4.map.LazyMap`

## Class: `java.org.apache.commons.collections4.map.LazyMap` / `public class LazyMap<K, V> extends AbstractMapDecorator<K, V> implements Serializable`


        <!-- 684f21a2-9f1d-11ea-8acb-333445793454 <=< ACCEPT -->
        Decorates another <code>Map</code> to create objects in the map on demand.
        <p>
        When the {@link #get(Object)} method is called with a key that does not
        exist in the map, the factory is used to create the object. The created
        object will be added to the map using the requested key.
        <p>
        For instance:
        <pre>
        Factory&lt;Date&gt; factory = new Factory&lt;Date&gt;() {
        public Date create() {
        return new Date();
        }
        }
        Map&lt;String, Date&gt; lazy = LazyMap.lazyMap(new HashMap&lt;String, Date&gt;(), factory);
        Date date = lazy.get("NOW");
        </pre>
        After the above code is executed, <code>date</code> will refer to
        a new <code>Date</code> instance. Furthermore, that <code>Date</code>
        instance is mapped to the "NOW" key in the map.
        <p>
        <strong>Note that LazyMap is not synchronized and is not thread-safe.</strong>
        If you wish to use this map from multiple threads concurrently, you must use
        appropriate synchronization. The simplest approach is to wrap this map
        using {@link java.util.Collections#synchronizedMap(Map)}. This class may throw
        exceptions when accessed by concurrent threads without synchronization.
        <p>
        This class is Serializable from Commons Collections 3.1.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 684f21a2-9f1d-11ea-8acb-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.LazyMap` / `private static final long serialVersionUID`


        <!-- 684f21a3-9f1d-11ea-8acc-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 684f21a3-9f1d-11ea-8acc-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.LazyMap` / `protected final Transformer<? super K, ? extends V> factory`


        <!-- 684f21a4-9f1d-11ea-8acd-333445793454 <=< ACCEPT -->
        The factory to use to construct elements
        <!-- ACCEPT >=> 684f21a4-9f1d-11ea-8acd-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.LazyMap` / `public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory< ? extends V> factory)`


        <!-- 684f21a5-9f1d-11ea-8ace-333445793454 <=< ACCEPT -->
        Factory method to create a lazily instantiated map.
        @param <K>  the key type
        @param <V>  the value type
        @param map  the map to decorate, must not be null
        @param factory  the factory to use, must not be null
        @return a new lazy map
        @throws NullPointerException if map or factory is null
        @since 4.0
        <!-- ACCEPT >=> 684f21a5-9f1d-11ea-8ace-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.LazyMap` / `public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory)`


        <!-- 684f21a6-9f1d-11ea-8acf-333445793454 <=< ACCEPT -->
        Factory method to create a lazily instantiated map.
        @param <K>  the key type
        @param <V>  the value type
        @param map  the map to decorate, must not be null
        @param factory  the factory to use, must not be null
        @return a new lazy map
        @throws NullPointerException if map or factory is null
        @since 4.0
        <!-- ACCEPT >=> 684f21a6-9f1d-11ea-8acf-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.LazyMap` / `protected LazyMap(final Map<K,V> map, final Factory<? extends V> factory)`


        <!-- 684f489e-9f1d-11ea-8ad0-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param map  the map to decorate, must not be null
        @param factory  the factory to use, must not be null
        @throws NullPointerException if map or factory is null
        <!-- ACCEPT >=> 684f489e-9f1d-11ea-8ad0-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.LazyMap` / `protected LazyMap(final Map<K,V> map, final Transformer<? super K, ? extends V> factory)`


        <!-- 684f489f-9f1d-11ea-8ad1-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param map  the map to decorate, must not be null
        @param factory  the factory to use, must not be null
        @throws NullPointerException if map or factory is null
        <!-- ACCEPT >=> 684f489f-9f1d-11ea-8ad1-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.LazyMap` / `private void writeObject(final ObjectOutputStream out) throws IOException`


        <!-- 684f48a0-9f1d-11ea-8ad2-333445793454 <=< ACCEPT -->
        Write the map out using a custom routine.
        @param out  the output stream
        @throws IOException
        @since 3.1
        <!-- ACCEPT >=> 684f48a0-9f1d-11ea-8ad2-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.LazyMap` / `private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException`


        <!-- 684f48a1-9f1d-11ea-8ad3-333445793454 <=< ACCEPT -->
        Read the map in using a custom routine.
        @param in  the input stream
        @throws IOException
        @throws ClassNotFoundException
        @since 3.1
        <!-- ACCEPT >=> 684f48a1-9f1d-11ea-8ad3-333445793454 -->



# File: `java.org.apache.commons.collections4.map.LazySortedMap`

## Class: `java.org.apache.commons.collections4.map.LazySortedMap` / `public class LazySortedMap<K,V> extends LazyMap<K,V> implements SortedMap<K,V>`


        <!-- 684f48a2-9f1d-11ea-8ad4-333445793454 <=< ACCEPT -->
        Decorates another <code>SortedMap</code> to create objects in the map on demand.
        <p>
        When the {@link #get(Object)} method is called with a key that does not
        exist in the map, the factory is used to create the object. The created
        object will be added to the map using the requested key.
        <p>
        For instance:
        <pre>
        Factory&lt;Date&gt; factory = new Factory&lt;Date&gt;() {
        public Date create() {
        return new Date();
        }
        }
        SortedMap&lt;String, Date&gt; lazy =
        LazySortedMap.lazySortedMap(new HashMap&lt;String, Date&gt;(), factory);
        Date date = lazy.get("NOW");
        </pre>
        After the above code is executed, <code>date</code> will refer to
        a new <code>Date</code> instance. Furthermore, that <code>Date</code>
        instance is mapped to the "NOW" key in the map.
        <p>
        <strong>Note that LazySortedMap is not synchronized and is not thread-safe.</strong>
        If you wish to use this map from multiple threads concurrently, you must use
        appropriate synchronization. The simplest approach is to wrap this map
        using {@link java.util.Collections#synchronizedSortedMap}. This class may throw
        exceptions when accessed by concurrent threads without synchronization.
        <p>
        This class is Serializable from Commons Collections 3.1.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 684f48a2-9f1d-11ea-8ad4-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.LazySortedMap` / `private static final long serialVersionUID`


        <!-- 684f48a3-9f1d-11ea-8ad5-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 684f48a3-9f1d-11ea-8ad5-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.LazySortedMap` / `final Factory<? extends V> factory)`


        <!-- 684f48a4-9f1d-11ea-8ad6-333445793454 <=< ACCEPT -->
        Factory method to create a lazily instantiated sorted map.
        @param <K>  the key type
        @param <V>  the value type
        @param map  the map to decorate, must not be null
        @param factory  the factory to use, must not be null
        @return a new lazy sorted map
        @throws NullPointerException if map or factory is null
        @since 4.0
        <!-- ACCEPT >=> 684f48a4-9f1d-11ea-8ad6-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.LazySortedMap` / `final Transformer<? super K, ? extends V> factory)`


        <!-- 684f48a5-9f1d-11ea-8ad7-333445793454 <=< ACCEPT -->
        Factory method to create a lazily instantiated sorted map.
        @param <K>  the key type
        @param <V>  the value type
        @param map  the map to decorate, must not be null
        @param factory  the factory to use, must not be null
        @return a new lazy sorted map
        @throws NullPointerException if map or factory is null
        @since 4.0
        <!-- ACCEPT >=> 684f48a5-9f1d-11ea-8ad7-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.LazySortedMap` / `protected LazySortedMap(final SortedMap<K,V> map, final Factory<? extends V> factory)`


        <!-- 684f48a6-9f1d-11ea-8ad8-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param map  the map to decorate, must not be null
        @param factory  the factory to use, must not be null
        @throws NullPointerException if map or factory is null
        <!-- ACCEPT >=> 684f48a6-9f1d-11ea-8ad8-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.LazySortedMap` / `protected LazySortedMap(final SortedMap<K,V> map, final Transformer<? super K, ? extends V> factory)`


        <!-- 684f48a7-9f1d-11ea-8ad9-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param map  the map to decorate, must not be null
        @param factory  the factory to use, must not be null
        @throws NullPointerException if map or factory is null
        <!-- ACCEPT >=> 684f48a7-9f1d-11ea-8ad9-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.LazySortedMap` / `protected SortedMap<K,V> getSortedMap()`


        <!-- 684f48a8-9f1d-11ea-8ada-333445793454 <=< ACCEPT -->
        Gets the map being decorated.
        @return the decorated map
        <!-- ACCEPT >=> 684f48a8-9f1d-11ea-8ada-333445793454 -->



# File: `java.org.apache.commons.collections4.map.LinkedMap`

## Class: `java.org.apache.commons.collections4.map.LinkedMap` / `public class LinkedMap<K, V> extends AbstractLinkedMap<K, V> implements Serializable, Cloneable`


        <!-- 684f48a9-9f1d-11ea-8adb-333445793454 <=< ACCEPT -->
        A <code>Map</code> implementation that maintains the order of the entries.
        In this implementation order is maintained by original insertion.
        <p>
        This implementation improves on the JDK1.4 LinkedHashMap by adding the
        {@link org.apache.commons.collections4.MapIterator MapIterator}
        functionality, additional convenience methods and allowing
        bidirectional iteration. It also implements <code>OrderedMap</code>.
        In addition, non-interface methods are provided to access the map by index.
        <p>
        The <code>orderedMapIterator()</code> method provides direct access to a
        bidirectional iterator. The iterators from the other views can also be cast
        to <code>OrderedIterator</code> if required.
        <p>
        All the available iterators can be reset back to the start by casting to
        <code>ResettableIterator</code> and calling <code>reset()</code>.
        <p>
        The implementation is also designed to be subclassed, with lots of useful
        methods exposed.
        <p>
        <strong>Note that LinkedMap is not synchronized and is not thread-safe.</strong>
        If you wish to use this map from multiple threads concurrently, you must use
        appropriate synchronization. The simplest approach is to wrap this map
        using {@link java.util.Collections#synchronizedMap(Map)}. This class may throw
        exceptions when accessed by concurrent threads without synchronization.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 684f48a9-9f1d-11ea-8adb-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.LinkedMap` / `private static final long serialVersionUID`


        <!-- 684f48aa-9f1d-11ea-8adc-333445793454 <=< ACCEPT -->
        Serialisation version
        <!-- ACCEPT >=> 684f48aa-9f1d-11ea-8adc-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.LinkedMap` / `public LinkedMap()`


        <!-- 684f48ab-9f1d-11ea-8add-333445793454 <=< ACCEPT -->
        Constructs a new empty map with default size and load factor.
        <!-- ACCEPT >=> 684f48ab-9f1d-11ea-8add-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.LinkedMap` / `public LinkedMap(final int initialCapacity)`


        <!-- 684f48ac-9f1d-11ea-8ade-333445793454 <=< ACCEPT -->
        Constructs a new, empty map with the specified initial capacity.
        @param initialCapacity  the initial capacity
        @throws IllegalArgumentException if the initial capacity is negative
        <!-- ACCEPT >=> 684f48ac-9f1d-11ea-8ade-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.LinkedMap` / `public LinkedMap(final int initialCapacity, final float loadFactor)`


        <!-- 684f48ad-9f1d-11ea-8adf-333445793454 <=< ACCEPT -->
        Constructs a new, empty map with the specified initial capacity and
        load factor.
        @param initialCapacity  the initial capacity
        @param loadFactor  the load factor
        @throws IllegalArgumentException if the initial capacity is negative
        @throws IllegalArgumentException if the load factor is less than zero
        <!-- ACCEPT >=> 684f48ad-9f1d-11ea-8adf-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.LinkedMap` / `public LinkedMap(final Map<? extends K, ? extends V> map)`


        <!-- 684f48ae-9f1d-11ea-8ae0-333445793454 <=< ACCEPT -->
        Constructor copying elements from another map.
        @param map  the map to copy
        @throws NullPointerException if the map is null
        <!-- ACCEPT >=> 684f48ae-9f1d-11ea-8ae0-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.LinkedMap` / `public LinkedMap<K, V> clone()`


        <!-- 684f48af-9f1d-11ea-8ae1-333445793454 <=< ACCEPT -->
        Clones the map without cloning the keys or values.
        @return a shallow clone
        <!-- ACCEPT >=> 684f48af-9f1d-11ea-8ae1-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.LinkedMap` / `private void writeObject(final ObjectOutputStream out) throws IOException`


        <!-- 684f48b0-9f1d-11ea-8ae2-333445793454 <=< ACCEPT -->
        Write the map out using a custom routine.
        <!-- ACCEPT >=> 684f48b0-9f1d-11ea-8ae2-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.LinkedMap` / `private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException`


        <!-- 684f6fa8-9f1d-11ea-8ae3-333445793454 <=< ACCEPT -->
        Read the map in using a custom routine.
        <!-- ACCEPT >=> 684f6fa8-9f1d-11ea-8ae3-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.LinkedMap` / `public K get(final int index)`


        <!-- 684f6fa9-9f1d-11ea-8ae4-333445793454 <=< ACCEPT -->
        Gets the key at the specified index.
        @param index  the index to retrieve
        @return the key at the specified index
        @throws IndexOutOfBoundsException if the index is invalid
        <!-- ACCEPT >=> 684f6fa9-9f1d-11ea-8ae4-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.LinkedMap` / `public V getValue(final int index)`


        <!-- 684f6faa-9f1d-11ea-8ae5-333445793454 <=< ACCEPT -->
        Gets the value at the specified index.
        @param index  the index to retrieve
        @return the value at the specified index
        @throws IndexOutOfBoundsException if the index is invalid
        <!-- ACCEPT >=> 684f6faa-9f1d-11ea-8ae5-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.LinkedMap` / `public int indexOf(Object key)`


        <!-- 684f6fab-9f1d-11ea-8ae6-333445793454 <=< ACCEPT -->
        Gets the index of the specified key.
        @param key  the key to find the index of
        @return the index, or -1 if not found
        <!-- ACCEPT >=> 684f6fab-9f1d-11ea-8ae6-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.LinkedMap` / `public V remove(final int index)`


        <!-- 684f6fac-9f1d-11ea-8ae7-333445793454 <=< ACCEPT -->
        Removes the element at the specified index.
        @param index  the index of the object to remove
        @return the previous value corresponding the <code>key</code>,
        or <code>null</code> if none existed
        @throws IndexOutOfBoundsException if the index is invalid
        <!-- ACCEPT >=> 684f6fac-9f1d-11ea-8ae7-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.LinkedMap` / `public List<K> asList()`


        <!-- 684f6fad-9f1d-11ea-8ae8-333445793454 <=< ACCEPT -->
        Gets an unmodifiable List view of the keys.
        <p>
        The returned list is unmodifiable because changes to the values of
        the list (using {@link java.util.ListIterator#set(Object)}) will
        effectively remove the value from the list and reinsert that value at
        the end of the list, which is an unexpected side effect of changing the
        value of a list.  This occurs because changing the key, changes when the
        mapping is added to the map and thus where it appears in the list.
        <p>
        An alternative to this method is to use {@link #keySet()}.
        @see #keySet()
        @return The ordered list of keys.
        <!-- ACCEPT >=> 684f6fad-9f1d-11ea-8ae8-333445793454 -->



## Class: `java.org.apache.commons.collections4.map.LinkedMap` / `static class LinkedMapList<K> extends AbstractList<K>`


        <!-- 684f6fae-9f1d-11ea-8ae9-333445793454 <=< ACCEPT -->
        List view of map.
        <!-- ACCEPT >=> 684f6fae-9f1d-11ea-8ae9-333445793454 -->



# File: `java.org.apache.commons.collections4.map.ListOrderedMap`

## Class: `java.org.apache.commons.collections4.map.ListOrderedMap` / `implements OrderedMap<K, V>, Serializable`


        <!-- 684f6faf-9f1d-11ea-8aea-333445793454 <=< ACCEPT -->
        Decorates a <code>Map</code> to ensure that the order of addition is retained
        using a <code>List</code> to maintain order.
        <p>
        The order will be used via the iterators and toArray methods on the views.
        The order is also returned by the <code>MapIterator</code>.
        The <code>orderedMapIterator()</code> method accesses an iterator that can
        iterate both forwards and backwards through the map.
        In addition, non-interface methods are provided to access the map by index.
        <p>
        If an object is added to the Map for a second time, it will remain in the
        original position in the iteration.
        <p>
        <strong>Note that ListOrderedMap is not synchronized and is not thread-safe.</strong>
        If you wish to use this map from multiple threads concurrently, you must use
        appropriate synchronization. The simplest approach is to wrap this map
        using {@link java.util.Collections#synchronizedMap(Map)}. This class may throw
        exceptions when accessed by concurrent threads without synchronization.
        <p>
        <strong>Note that ListOrderedMap doesn't work with
        {@link java.util.IdentityHashMap IdentityHashMap}, {@link CaseInsensitiveMap},
        or similar maps that violate the general contract of {@link java.util.Map}.</strong>
        The <code>ListOrderedMap</code> (or, more precisely, the underlying <code>List</code>)
        is relying on {@link Object#equals(Object) equals()}. This is fine, as long as the
        decorated <code>Map</code> is also based on {@link Object#equals(Object) equals()},
        and {@link Object#hashCode() hashCode()}, which
        {@link java.util.IdentityHashMap IdentityHashMap}, and
        {@link CaseInsensitiveMap} don't: The former uses <code>==</code>, and
        the latter uses {@link Object#equals(Object) equals()} on a lower-cased
        key.
        <p>
        This class is {@link Serializable} starting with Commons Collections 3.1.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 684f6faf-9f1d-11ea-8aea-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.ListOrderedMap` / `private static final long serialVersionUID`


        <!-- 684f6fb0-9f1d-11ea-8aeb-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 684f6fb0-9f1d-11ea-8aeb-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.ListOrderedMap` / `private final List<K> insertOrder`


        <!-- 684f6fb1-9f1d-11ea-8aec-333445793454 <=< ACCEPT -->
        Internal list to hold the sequence of objects
        <!-- ACCEPT >=> 684f6fb1-9f1d-11ea-8aec-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.ListOrderedMap` / `public static <K, V> ListOrderedMap<K, V> listOrderedMap(final Map<K, V> map)`


        <!-- 684f6fb2-9f1d-11ea-8aed-333445793454 <=< ACCEPT -->
        Factory method to create an ordered map.
        <p>
        An <code>ArrayList</code> is used to retain order.
        @param <K>  the key type
        @param <V>  the value type
        @param map  the map to decorate, must not be null
        @return a new list ordered map
        @throws NullPointerException if map is null
        @since 4.0
        <!-- ACCEPT >=> 684f6fb2-9f1d-11ea-8aed-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.ListOrderedMap` / `public ListOrderedMap()`


        <!-- 684f6fb3-9f1d-11ea-8aee-333445793454 <=< ACCEPT -->
        Constructs a new empty <code>ListOrderedMap</code> that decorates
        a <code>HashMap</code>.
        @since 3.1
        <!-- ACCEPT >=> 684f6fb3-9f1d-11ea-8aee-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.ListOrderedMap` / `protected ListOrderedMap(final Map<K, V> map)`


        <!-- 684f6fb4-9f1d-11ea-8aef-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param map  the map to decorate, must not be null
        @throws NullPointerException if map is null
        <!-- ACCEPT >=> 684f6fb4-9f1d-11ea-8aef-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.ListOrderedMap` / `private void writeObject(final ObjectOutputStream out) throws IOException`


        <!-- 684f6fb5-9f1d-11ea-8af0-333445793454 <=< ACCEPT -->
        Write the map out using a custom routine.
        @param out  the output stream
        @throws IOException
        @since 3.1
        <!-- ACCEPT >=> 684f6fb5-9f1d-11ea-8af0-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.ListOrderedMap` / `private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException`


        <!-- 684f6fb6-9f1d-11ea-8af1-333445793454 <=< ACCEPT -->
        Read the map in using a custom routine.
        @param in  the input stream
        @throws IOException
        @throws ClassNotFoundException
        @since 3.1
        <!-- ACCEPT >=> 684f6fb6-9f1d-11ea-8af1-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.ListOrderedMap` / `public K firstKey()`


        <!-- 684f6fb7-9f1d-11ea-8af2-333445793454 <=< ACCEPT -->
        Gets the first key in this map by insert order.
        @return the first key currently in this map
        @throws NoSuchElementException if this map is empty
        <!-- ACCEPT >=> 684f6fb7-9f1d-11ea-8af2-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.ListOrderedMap` / `public K lastKey()`


        <!-- 684f6fb8-9f1d-11ea-8af3-333445793454 <=< ACCEPT -->
        Gets the last key in this map by insert order.
        @return the last key currently in this map
        @throws NoSuchElementException if this map is empty
        <!-- ACCEPT >=> 684f6fb8-9f1d-11ea-8af3-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.ListOrderedMap` / `public K nextKey(final Object key)`


        <!-- 684f6fb9-9f1d-11ea-8af4-333445793454 <=< ACCEPT -->
        Gets the next key to the one specified using insert order.
        This method performs a list search to find the key and is O(n).
        @param key  the key to find previous for
        @return the next key, null if no match or at start
        <!-- ACCEPT >=> 684f6fb9-9f1d-11ea-8af4-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.ListOrderedMap` / `public K previousKey(final Object key)`


        <!-- 684f6fba-9f1d-11ea-8af5-333445793454 <=< ACCEPT -->
        Gets the previous key to the one specified using insert order.
        This method performs a list search to find the key and is O(n).
        @param key  the key to find previous for
        @return the previous key, null if no match or at start
        <!-- ACCEPT >=> 684f6fba-9f1d-11ea-8af5-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.ListOrderedMap` / `public void putAll(int index, final Map<? extends K, ? extends V> map)`


        <!-- 684f6fbb-9f1d-11ea-8af6-333445793454 <=< ACCEPT -->
        Puts the values contained in a supplied Map into the Map starting at
        the specified index.
        @param index the index in the Map to start at.
        @param map the Map containing the entries to be added.
        @throws IndexOutOfBoundsException if the index is out of range [0, size]
        <!-- ACCEPT >=> 684f6fbb-9f1d-11ea-8af6-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.ListOrderedMap` / `public Set<K> keySet()`


        <!-- 684f6fbc-9f1d-11ea-8af7-333445793454 <=< ACCEPT -->
        Gets a view over the keys in the map.
        <p>
        The Collection will be ordered by object insertion into the map.
        @see #keyList()
        @return the fully modifiable collection view over the keys
        <!-- ACCEPT >=> 684f6fbc-9f1d-11ea-8af7-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.ListOrderedMap` / `public List<K> keyList()`


        <!-- 684f96b2-9f1d-11ea-8af8-333445793454 <=< ACCEPT -->
        Gets a view over the keys in the map as a List.
        <p>
        The List will be ordered by object insertion into the map.
        The List is unmodifiable.
        @see #keySet()
        @return the unmodifiable list view over the keys
        @since 3.2
        <!-- ACCEPT >=> 684f96b2-9f1d-11ea-8af8-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.ListOrderedMap` / `public Collection<V> values()`


        <!-- 684f96b3-9f1d-11ea-8af9-333445793454 <=< ACCEPT -->
        Gets a view over the values in the map.
        <p>
        The Collection will be ordered by object insertion into the map.
        <p>
        From Commons Collections 3.2, this Collection can be cast
        to a list, see {@link #valueList()}
        @see #valueList()
        @return the fully modifiable collection view over the values
        <!-- ACCEPT >=> 684f96b3-9f1d-11ea-8af9-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.ListOrderedMap` / `public List<V> valueList()`


        <!-- 684f96b4-9f1d-11ea-8afa-333445793454 <=< ACCEPT -->
        Gets a view over the values in the map as a List.
        <p>
        The List will be ordered by object insertion into the map.
        The List supports remove and set, but does not support add.
        @see #values()
        @return the partially modifiable list view over the values
        @since 3.2
        <!-- ACCEPT >=> 684f96b4-9f1d-11ea-8afa-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.ListOrderedMap` / `public Set<Map.Entry<K, V>> entrySet()`


        <!-- 684f96b5-9f1d-11ea-8afb-333445793454 <=< ACCEPT -->
        Gets a view over the entries in the map.
        <p>
        The Set will be ordered by object insertion into the map.
        @return the fully modifiable set view over the entries
        <!-- ACCEPT >=> 684f96b5-9f1d-11ea-8afb-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.ListOrderedMap` / `public String toString()`


        <!-- 684f96b6-9f1d-11ea-8afc-333445793454 <=< ACCEPT -->
        Returns the Map as a string.
        @return the Map as a String
        <!-- ACCEPT >=> 684f96b6-9f1d-11ea-8afc-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.ListOrderedMap` / `public K get(final int index)`


        <!-- 684f96b7-9f1d-11ea-8afd-333445793454 <=< ACCEPT -->
        Gets the key at the specified index.
        @param index  the index to retrieve
        @return the key at the specified index
        @throws IndexOutOfBoundsException if the index is invalid
        <!-- ACCEPT >=> 684f96b7-9f1d-11ea-8afd-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.ListOrderedMap` / `public V getValue(final int index)`


        <!-- 684f96b8-9f1d-11ea-8afe-333445793454 <=< ACCEPT -->
        Gets the value at the specified index.
        @param index  the index to retrieve
        @return the key at the specified index
        @throws IndexOutOfBoundsException if the index is invalid
        <!-- ACCEPT >=> 684f96b8-9f1d-11ea-8afe-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.ListOrderedMap` / `public int indexOf(final Object key)`


        <!-- 684f96b9-9f1d-11ea-8aff-333445793454 <=< ACCEPT -->
        Gets the index of the specified key.
        @param key  the key to find the index of
        @return the index, or -1 if not found
        <!-- ACCEPT >=> 684f96b9-9f1d-11ea-8aff-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.ListOrderedMap` / `public V setValue(final int index, final V value)`


        <!-- 684f96ba-9f1d-11ea-8b00-333445793454 <=< ACCEPT -->
        Sets the value at the specified index.
        @param index  the index of the value to set
        @param value  the new value to set
        @return the previous value at that index
        @throws IndexOutOfBoundsException if the index is invalid
        @since 3.2
        <!-- ACCEPT >=> 684f96ba-9f1d-11ea-8b00-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.ListOrderedMap` / `public V put(int index, final K key, final V value)`


        <!-- 684f96bb-9f1d-11ea-8b01-333445793454 <=< ACCEPT -->
        Puts a key-value mapping into the map at the specified index.
        <p>
        If the map already contains the key, then the original mapping
        is removed and the new mapping added at the specified index.
        The remove may change the effect of the index. The index is
        always calculated relative to the original state of the map.
        <p>
        Thus the steps are: (1) remove the existing key-value mapping,
        then (2) insert the new key-value mapping at the position it
        would have been inserted had the remove not occurred.
        @param index  the index at which the mapping should be inserted
        @param key  the key
        @param value  the value
        @return the value previously mapped to the key
        @throws IndexOutOfBoundsException if the index is out of range [0, size]
        @since 3.2
        <!-- ACCEPT >=> 684f96bb-9f1d-11ea-8b01-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.ListOrderedMap` / `public V remove(final int index)`


        <!-- 684f96bc-9f1d-11ea-8b02-333445793454 <=< ACCEPT -->
        Removes the element at the specified index.
        @param index  the index of the object to remove
        @return the removed value, or <code>null</code> if none existed
        @throws IndexOutOfBoundsException if the index is invalid
        <!-- ACCEPT >=> 684f96bc-9f1d-11ea-8b02-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.ListOrderedMap` / `public List<K> asList()`


        <!-- 684f96bd-9f1d-11ea-8b03-333445793454 <=< ACCEPT -->
        Gets an unmodifiable List view of the keys which changes as the map changes.
        <p>
        The returned list is unmodifiable because changes to the values of
        the list (using {@link java.util.ListIterator#set(Object)}) will
        effectively remove the value from the list and reinsert that value at
        the end of the list, which is an unexpected side effect of changing the
        value of a list.  This occurs because changing the key, changes when the
        mapping is added to the map and thus where it appears in the list.
        <p>
        An alternative to this method is to use the better named
        {@link #keyList()} or {@link #keySet()}.
        @see #keyList()
        @see #keySet()
        @return The ordered list of keys.
        <!-- ACCEPT >=> 684f96bd-9f1d-11ea-8b03-333445793454 -->



# File: `java.org.apache.commons.collections4.map.MultiKeyMap`

## Class: `java.org.apache.commons.collections4.map.MultiKeyMap` / `implements Serializable, Cloneable`


        <!-- 684f96be-9f1d-11ea-8b04-333445793454 <=< ACCEPT -->
        A <code>Map</code> implementation that uses multiple keys to map the value.
        <p>
        This class is the most efficient way to uses multiple keys to map to a value.
        The best way to use this class is via the additional map-style methods.
        These provide <code>get</code>, <code>containsKey</code>, <code>put</code> and
        <code>remove</code> for individual keys which operate without extra object creation.
        <p>
        The additional methods are the main interface of this map.
        As such, you will not normally hold this map in a variable of type <code>Map</code>.
        <p>
        The normal map methods take in and return a {@link MultiKey}.
        If you try to use <code>put()</code> with any other object type a
        <code>ClassCastException</code> is thrown. If you try to use <code>null</code> as
        the key in <code>put()</code> a <code>NullPointerException</code> is thrown.
        <p>
        This map is implemented as a decorator of a <code>AbstractHashedMap</code> which
        enables extra behaviour to be added easily.
        <ul>
        <li><code>MultiKeyMap.decorate(new LinkedMap())</code> creates an ordered map.
        <li><code>MultiKeyMap.decorate(new LRUMap())</code> creates an least recently used map.
        <li><code>MultiKeyMap.decorate(new ReferenceMap())</code> creates a garbage collector sensitive map.
        </ul>
        Note that <code>IdentityMap</code> and <code>ReferenceIdentityMap</code> are unsuitable
        for use as the key comparison would work on the whole MultiKey, not the elements within.
        <p>
        As an example, consider a least recently used cache that uses a String airline code
        and a Locale to lookup the airline's name:
        <pre>
        private MultiKeyMap cache = MultiKeyMap.multiKeyMap(new LRUMap(50));
        public String getAirlineName(String code, String locale) {
        String name = (String) cache.get(code, locale);
        if (name == null) {
        name = getAirlineNameFromDB(code, locale);
        cache.put(code, locale, name);
        }
        return name;
        }
        </pre>
        <p>
        <strong>Note that MultiKeyMap is not synchronized and is not thread-safe.</strong>
        If you wish to use this map from multiple threads concurrently, you must use
        appropriate synchronization. This class may throw exceptions when accessed
        by concurrent threads without synchronization.
        @since 3.1
        @version $Id$
        <!-- ACCEPT >=> 684f96be-9f1d-11ea-8b04-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.MultiKeyMap` / `private static final long serialVersionUID`


        <!-- 684f96bf-9f1d-11ea-8b05-333445793454 <=< ACCEPT -->
        Serialisation version
        <!-- ACCEPT >=> 684f96bf-9f1d-11ea-8b05-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.MultiKeyMap` / `public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map)`


        <!-- 684f96c0-9f1d-11ea-8b06-333445793454 <=< ACCEPT -->
        Decorates the specified map to add the MultiKeyMap API and fast query.
        The map must not be null and must be empty.
        @param <K>  the key type
        @param <V>  the value type
        @param map  the map to decorate, not null
        @return a new multi key map
        @throws NullPointerException if map is null
        @throws IllegalArgumentException if the map is not empty
        @since 4.0
        <!-- ACCEPT >=> 684f96c0-9f1d-11ea-8b06-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.MultiKeyMap` / `public MultiKeyMap()`


        <!-- 684f96c1-9f1d-11ea-8b07-333445793454 <=< ACCEPT -->
        Constructs a new MultiKeyMap that decorates a <code>HashedMap</code>.
        <!-- ACCEPT >=> 684f96c1-9f1d-11ea-8b07-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.MultiKeyMap` / `protected MultiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map)`


        <!-- 684f96c2-9f1d-11ea-8b08-333445793454 <=< ACCEPT -->
        Constructor that decorates the specified map and is called from
        {@link #multiKeyMap(AbstractHashedMap)}.
        The map must not be null and should be empty or only contain valid keys.
        This constructor performs no validation.
        @param map  the map to decorate
        <!-- ACCEPT >=> 684f96c2-9f1d-11ea-8b08-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.MultiKeyMap` / `public V get(final Object key1, final Object key2)`


        <!-- 684f96c3-9f1d-11ea-8b09-333445793454 <=< ACCEPT -->
        Gets the value mapped to the specified multi-key.
        @param key1  the first key
        @param key2  the second key
        @return the mapped value, null if no match
        <!-- ACCEPT >=> 684f96c3-9f1d-11ea-8b09-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.MultiKeyMap` / `public boolean containsKey(final Object key1, final Object key2)`


        <!-- 684fbdba-9f1d-11ea-8b0a-333445793454 <=< ACCEPT -->
        Checks whether the map contains the specified multi-key.
        @param key1  the first key
        @param key2  the second key
        @return true if the map contains the key
        <!-- ACCEPT >=> 684fbdba-9f1d-11ea-8b0a-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.MultiKeyMap` / `public V put(final K key1, final K key2, final V value)`


        <!-- 684fbdbb-9f1d-11ea-8b0b-333445793454 <=< ACCEPT -->
        Stores the value against the specified multi-key.
        @param key1  the first key
        @param key2  the second key
        @param value  the value to store
        @return the value previously mapped to this combined key, null if none
        <!-- ACCEPT >=> 684fbdbb-9f1d-11ea-8b0b-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.MultiKeyMap` / `public V removeMultiKey(final Object key1, final Object key2)`


        <!-- 684fbdbc-9f1d-11ea-8b0c-333445793454 <=< ACCEPT -->
        Removes the specified multi-key from this map.
        @param key1  the first key
        @param key2  the second key
        @return the value mapped to the removed key, null if key not in map
        @since 4.0 (previous name: remove(Object, Object))
        <!-- ACCEPT >=> 684fbdbc-9f1d-11ea-8b0c-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.MultiKeyMap` / `protected int hash(final Object key1, final Object key2)`


        <!-- 684fbdbd-9f1d-11ea-8b0d-333445793454 <=< ACCEPT -->
        Gets the hash code for the specified multi-key.
        @param key1  the first key
        @param key2  the second key
        @return the hash code
        <!-- ACCEPT >=> 684fbdbd-9f1d-11ea-8b0d-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.MultiKeyMap` / `final Object key1, final Object key2)`


        <!-- 684fbdbe-9f1d-11ea-8b0e-333445793454 <=< ACCEPT -->
        Is the key equal to the combined key.
        @param entry  the entry to compare to
        @param key1  the first key
        @param key2  the second key
        @return true if the key matches
        <!-- ACCEPT >=> 684fbdbe-9f1d-11ea-8b0e-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.MultiKeyMap` / `public V get(final Object key1, final Object key2, final Object key3)`


        <!-- 684fbdbf-9f1d-11ea-8b0f-333445793454 <=< ACCEPT -->
        Gets the value mapped to the specified multi-key.
        @param key1  the first key
        @param key2  the second key
        @param key3  the third key
        @return the mapped value, null if no match
        <!-- ACCEPT >=> 684fbdbf-9f1d-11ea-8b0f-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.MultiKeyMap` / `public boolean containsKey(final Object key1, final Object key2, final Object key3)`


        <!-- 684fbdc0-9f1d-11ea-8b10-333445793454 <=< ACCEPT -->
        Checks whether the map contains the specified multi-key.
        @param key1  the first key
        @param key2  the second key
        @param key3  the third key
        @return true if the map contains the key
        <!-- ACCEPT >=> 684fbdc0-9f1d-11ea-8b10-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.MultiKeyMap` / `public V put(final K key1, final K key2, final K key3, final V value)`


        <!-- 684fbdc1-9f1d-11ea-8b11-333445793454 <=< ACCEPT -->
        Stores the value against the specified multi-key.
        @param key1  the first key
        @param key2  the second key
        @param key3  the third key
        @param value  the value to store
        @return the value previously mapped to this combined key, null if none
        <!-- ACCEPT >=> 684fbdc1-9f1d-11ea-8b11-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.MultiKeyMap` / `public V removeMultiKey(final Object key1, final Object key2, final Object key3)`


        <!-- 684fbdc2-9f1d-11ea-8b12-333445793454 <=< ACCEPT -->
        Removes the specified multi-key from this map.
        @param key1  the first key
        @param key2  the second key
        @param key3  the third key
        @return the value mapped to the removed key, null if key not in map
        @since 4.0 (previous name: remove(Object, Object, Object))
        <!-- ACCEPT >=> 684fbdc2-9f1d-11ea-8b12-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.MultiKeyMap` / `protected int hash(final Object key1, final Object key2, final Object key3)`


        <!-- 684fbdc3-9f1d-11ea-8b13-333445793454 <=< ACCEPT -->
        Gets the hash code for the specified multi-key.
        @param key1  the first key
        @param key2  the second key
        @param key3  the third key
        @return the hash code
        <!-- ACCEPT >=> 684fbdc3-9f1d-11ea-8b13-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.MultiKeyMap` / `final Object key1, final Object key2, final Object key3)`


        <!-- 684fbdc4-9f1d-11ea-8b14-333445793454 <=< ACCEPT -->
        Is the key equal to the combined key.
        @param entry  the entry to compare to
        @param key1  the first key
        @param key2  the second key
        @param key3  the third key
        @return true if the key matches
        <!-- ACCEPT >=> 684fbdc4-9f1d-11ea-8b14-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.MultiKeyMap` / `public V get(final Object key1, final Object key2, final Object key3, final Object key4)`


        <!-- 684fbdc5-9f1d-11ea-8b15-333445793454 <=< ACCEPT -->
        Gets the value mapped to the specified multi-key.
        @param key1  the first key
        @param key2  the second key
        @param key3  the third key
        @param key4  the fourth key
        @return the mapped value, null if no match
        <!-- ACCEPT >=> 684fbdc5-9f1d-11ea-8b15-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.MultiKeyMap` / `public boolean containsKey(final Object key1, final Object key2, final Object key3, final Object key4)`


        <!-- 684fbdc6-9f1d-11ea-8b16-333445793454 <=< ACCEPT -->
        Checks whether the map contains the specified multi-key.
        @param key1  the first key
        @param key2  the second key
        @param key3  the third key
        @param key4  the fourth key
        @return true if the map contains the key
        <!-- ACCEPT >=> 684fbdc6-9f1d-11ea-8b16-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.MultiKeyMap` / `public V put(final K key1, final K key2, final K key3, final K key4, final V value)`


        <!-- 684fbdc7-9f1d-11ea-8b17-333445793454 <=< ACCEPT -->
        Stores the value against the specified multi-key.
        @param key1  the first key
        @param key2  the second key
        @param key3  the third key
        @param key4  the fourth key
        @param value  the value to store
        @return the value previously mapped to this combined key, null if none
        <!-- ACCEPT >=> 684fbdc7-9f1d-11ea-8b17-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.MultiKeyMap` / `public V removeMultiKey(final Object key1, final Object key2, final Object key3, final Object key4)`


        <!-- 684fbdc8-9f1d-11ea-8b18-333445793454 <=< ACCEPT -->
        Removes the specified multi-key from this map.
        @param key1  the first key
        @param key2  the second key
        @param key3  the third key
        @param key4  the fourth key
        @return the value mapped to the removed key, null if key not in map
        @since 4.0 (previous name: remove(Object, Object, Object, Object))
        <!-- ACCEPT >=> 684fbdc8-9f1d-11ea-8b18-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.MultiKeyMap` / `protected int hash(final Object key1, final Object key2, final Object key3, final Object key4)`


        <!-- 684fbdc9-9f1d-11ea-8b19-333445793454 <=< ACCEPT -->
        Gets the hash code for the specified multi-key.
        @param key1  the first key
        @param key2  the second key
        @param key3  the third key
        @param key4  the fourth key
        @return the hash code
        <!-- ACCEPT >=> 684fbdc9-9f1d-11ea-8b19-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.MultiKeyMap` / `final Object key1, final Object key2, final Object key3, final Object key4)`


        <!-- 684fbdca-9f1d-11ea-8b1a-333445793454 <=< ACCEPT -->
        Is the key equal to the combined key.
        @param entry  the entry to compare to
        @param key1  the first key
        @param key2  the second key
        @param key3  the third key
        @param key4  the fourth key
        @return true if the key matches
        <!-- ACCEPT >=> 684fbdca-9f1d-11ea-8b1a-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.MultiKeyMap` / `public V get(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)`


        <!-- 684fbdcb-9f1d-11ea-8b1b-333445793454 <=< ACCEPT -->
        Gets the value mapped to the specified multi-key.
        @param key1  the first key
        @param key2  the second key
        @param key3  the third key
        @param key4  the fourth key
        @param key5  the fifth key
        @return the mapped value, null if no match
        <!-- ACCEPT >=> 684fbdcb-9f1d-11ea-8b1b-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.MultiKeyMap` / `final Object key4, final Object key5)`


        <!-- 684fbdcc-9f1d-11ea-8b1c-333445793454 <=< ACCEPT -->
        Checks whether the map contains the specified multi-key.
        @param key1  the first key
        @param key2  the second key
        @param key3  the third key
        @param key4  the fourth key
        @param key5  the fifth key
        @return true if the map contains the key
        <!-- ACCEPT >=> 684fbdcc-9f1d-11ea-8b1c-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.MultiKeyMap` / `public V put(final K key1, final K key2, final K key3, final K key4, final K key5, final V value)`


        <!-- 684fbdcd-9f1d-11ea-8b1d-333445793454 <=< ACCEPT -->
        Stores the value against the specified multi-key.
        @param key1  the first key
        @param key2  the second key
        @param key3  the third key
        @param key4  the fourth key
        @param key5  the fifth key
        @param value  the value to store
        @return the value previously mapped to this combined key, null if none
        <!-- ACCEPT >=> 684fbdcd-9f1d-11ea-8b1d-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.MultiKeyMap` / `final Object key4, final Object key5)`


        <!-- 684fbdce-9f1d-11ea-8b1e-333445793454 <=< ACCEPT -->
        Removes the specified multi-key from this map.
        @param key1  the first key
        @param key2  the second key
        @param key3  the third key
        @param key4  the fourth key
        @param key5  the fifth key
        @return the value mapped to the removed key, null if key not in map
        @since 4.0 (previous name: remove(Object, Object, Object, Object, Object))
        <!-- ACCEPT >=> 684fbdce-9f1d-11ea-8b1e-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.MultiKeyMap` / `protected int hash(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)`


        <!-- 684fe4c5-9f1d-11ea-8b1f-333445793454 <=< ACCEPT -->
        Gets the hash code for the specified multi-key.
        @param key1  the first key
        @param key2  the second key
        @param key3  the third key
        @param key4  the fourth key
        @param key5  the fifth key
        @return the hash code
        <!-- ACCEPT >=> 684fe4c5-9f1d-11ea-8b1f-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.MultiKeyMap` / `final Object key1, final Object key2, final Object key3, final Object key4, final Object key5)`


        <!-- 684fe4c6-9f1d-11ea-8b20-333445793454 <=< ACCEPT -->
        Is the key equal to the combined key.
        @param entry  the entry to compare to
        @param key1  the first key
        @param key2  the second key
        @param key3  the third key
        @param key4  the fourth key
        @param key5  the fifth key
        @return true if the key matches
        <!-- ACCEPT >=> 684fe4c6-9f1d-11ea-8b20-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.MultiKeyMap` / `public boolean removeAll(final Object key1)`


        <!-- 684fe4c7-9f1d-11ea-8b21-333445793454 <=< ACCEPT -->
        Removes all mappings where the first key is that specified.
        <p>
        This method removes all the mappings where the <code>MultiKey</code>
        has one or more keys, and the first matches that specified.
        @param key1  the first key
        @return true if any elements were removed
        <!-- ACCEPT >=> 684fe4c7-9f1d-11ea-8b21-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.MultiKeyMap` / `public boolean removeAll(final Object key1, final Object key2)`


        <!-- 684fe4c8-9f1d-11ea-8b22-333445793454 <=< ACCEPT -->
        Removes all mappings where the first two keys are those specified.
        <p>
        This method removes all the mappings where the <code>MultiKey</code>
        has two or more keys, and the first two match those specified.
        @param key1  the first key
        @param key2  the second key
        @return true if any elements were removed
        <!-- ACCEPT >=> 684fe4c8-9f1d-11ea-8b22-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.MultiKeyMap` / `public boolean removeAll(final Object key1, final Object key2, final Object key3)`


        <!-- 684fe4c9-9f1d-11ea-8b23-333445793454 <=< ACCEPT -->
        Removes all mappings where the first three keys are those specified.
        <p>
        This method removes all the mappings where the <code>MultiKey</code>
        has three or more keys, and the first three match those specified.
        @param key1  the first key
        @param key2  the second key
        @param key3  the third key
        @return true if any elements were removed
        <!-- ACCEPT >=> 684fe4c9-9f1d-11ea-8b23-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.MultiKeyMap` / `public boolean removeAll(final Object key1, final Object key2, final Object key3, final Object key4)`


        <!-- 684fe4ca-9f1d-11ea-8b24-333445793454 <=< ACCEPT -->
        Removes all mappings where the first four keys are those specified.
        <p>
        This method removes all the mappings where the <code>MultiKey</code>
        has four or more keys, and the first four match those specified.
        @param key1  the first key
        @param key2  the second key
        @param key3  the third key
        @param key4  the fourth key
        @return true if any elements were removed
        <!-- ACCEPT >=> 684fe4ca-9f1d-11ea-8b24-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.MultiKeyMap` / `protected void checkKey(final MultiKey<?> key)`


        <!-- 684fe4cb-9f1d-11ea-8b25-333445793454 <=< ACCEPT -->
        Check to ensure that input keys are valid MultiKey objects.
        @param key  the key to check
        <!-- ACCEPT >=> 684fe4cb-9f1d-11ea-8b25-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.MultiKeyMap` / `public MultiKeyMap<K, V> clone()`


        <!-- 684fe4cc-9f1d-11ea-8b26-333445793454 <=< ACCEPT -->
        Clones the map without cloning the keys or values.
        @return a shallow clone
        <!-- ACCEPT >=> 684fe4cc-9f1d-11ea-8b26-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.MultiKeyMap` / `public V put(final MultiKey<? extends K> key, final V value)`


        <!-- 684fe4cd-9f1d-11ea-8b27-333445793454 <=< ACCEPT -->
        Puts the key and value into the map, where the key must be a non-null
        MultiKey object.
        @param key  the non-null MultiKey object
        @param value  the value to store
        @return the previous value for the key
        @throws NullPointerException if the key is null
        @throws ClassCastException if the key is not a MultiKey
        <!-- ACCEPT >=> 684fe4cd-9f1d-11ea-8b27-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.MultiKeyMap` / `public void putAll(final Map<? extends MultiKey<? extends K>, ? extends V> mapToCopy)`


        <!-- 684fe4ce-9f1d-11ea-8b28-333445793454 <=< ACCEPT -->
        Copies all of the keys and values from the specified map to this map.
        Each key must be non-null and a MultiKey object.
        @param mapToCopy  to this map
        @throws NullPointerException if the mapToCopy or any key within is null
        @throws ClassCastException if any key in mapToCopy is not a MultiKey
        <!-- ACCEPT >=> 684fe4ce-9f1d-11ea-8b28-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.MultiKeyMap` / `protected AbstractHashedMap<MultiKey<? extends K>, V> decorated()`


        <!-- 684fe4cf-9f1d-11ea-8b29-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <!-- ACCEPT >=> 684fe4cf-9f1d-11ea-8b29-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.MultiKeyMap` / `private void writeObject(final ObjectOutputStream out) throws IOException`


        <!-- 684fe4d0-9f1d-11ea-8b2a-333445793454 <=< ACCEPT -->
        Write the map out using a custom routine.
        @param out  the output stream
        @throws IOException
        <!-- ACCEPT >=> 684fe4d0-9f1d-11ea-8b2a-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.MultiKeyMap` / `private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException`


        <!-- 684fe4d1-9f1d-11ea-8b2b-333445793454 <=< ACCEPT -->
        Read the map in using a custom routine.
        @param in  the input stream
        @throws IOException
        @throws ClassNotFoundException
        <!-- ACCEPT >=> 684fe4d1-9f1d-11ea-8b2b-333445793454 -->



# File: `java.org.apache.commons.collections4.map.MultiValueMap`

## Class: `java.org.apache.commons.collections4.map.MultiValueMap` / `public class MultiValueMap<K, V> extends AbstractMapDecorator<K, Object> implements MultiMap<K, V>, Serializable`


        <!-- 684fe4d2-9f1d-11ea-8b2c-333445793454 <=< ACCEPT -->
        A MultiValueMap decorates another map, allowing it to have
        more than one value for a key.
        <p>
        A <code>MultiMap</code> is a Map with slightly different semantics.
        Putting a value into the map will add the value to a Collection at that key.
        Getting a value will return a Collection, holding all the values put to that key.
        <p>
        This implementation is a decorator, allowing any Map implementation
        to be used as the base.
        <p>
        In addition, this implementation allows the type of collection used
        for the values to be controlled. By default, an <code>ArrayList</code>
        is used, however a <code>Class</code> to instantiate may be specified,
        or a factory that returns a <code>Collection</code> instance.
        <p>
        <strong>Note that MultiValueMap is not synchronized and is not thread-safe.</strong>
        If you wish to use this map from multiple threads concurrently, you must use
        appropriate synchronization. This class may throw exceptions when accessed
        by concurrent threads without synchronization.
        @since 3.2
        @version $Id$
        @deprecated since 4.1, use {@link org.apache.commons.collections4.MultiValuedMap MultiValuedMap} instead
        <!-- ACCEPT >=> 684fe4d2-9f1d-11ea-8b2c-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.MultiValueMap` / `private static final long serialVersionUID`


        <!-- 684fe4d3-9f1d-11ea-8b2d-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 684fe4d3-9f1d-11ea-8b2d-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.MultiValueMap` / `private final Factory<? extends Collection<V>> collectionFactory`


        <!-- 684fe4d4-9f1d-11ea-8b2e-333445793454 <=< ACCEPT -->
        The factory for creating value collections.
        <!-- ACCEPT >=> 684fe4d4-9f1d-11ea-8b2e-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.MultiValueMap` / `private transient Collection<V> valuesView`


        <!-- 684fe4d5-9f1d-11ea-8b2f-333445793454 <=< ACCEPT -->
        The cached values.
        <!-- ACCEPT >=> 684fe4d5-9f1d-11ea-8b2f-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.MultiValueMap` / `public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)`


        <!-- 684fe4d6-9f1d-11ea-8b30-333445793454 <=< ACCEPT -->
        Creates a map which wraps the given map and
        maps keys to ArrayLists.
        @param <K>  the key type
        @param <V>  the value type
        @param map  the map to wrap
        @return a new multi-value map
        @since 4.0
        <!-- ACCEPT >=> 684fe4d6-9f1d-11ea-8b30-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.MultiValueMap` / `final Class<C> collectionClass)`


        <!-- 684fe4d7-9f1d-11ea-8b31-333445793454 <=< ACCEPT -->
        Creates a map which decorates the given <code>map</code> and
        maps keys to collections of type <code>collectionClass</code>.
        @param <K>  the key type
        @param <V>  the value type
        @param <C>  the collection class type
        @param map  the map to wrap
        @param collectionClass  the type of the collection class
        @return a new multi-value map
        @since 4.0
        <!-- ACCEPT >=> 684fe4d7-9f1d-11ea-8b31-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.MultiValueMap` / `final Factory<C> collectionFactory)`


        <!-- 684fe4d8-9f1d-11ea-8b32-333445793454 <=< ACCEPT -->
        Creates a map which decorates the given <code>map</code> and
        creates the value collections using the supplied <code>collectionFactory</code>.
        @param <K>  the key type
        @param <V>  the value type
        @param <C>  the collection class type
        @param map  the map to decorate
        @param collectionFactory  the collection factory (must return a Collection object).
        @return a new multi-value map
        @since 4.0
        <!-- ACCEPT >=> 684fe4d8-9f1d-11ea-8b32-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.MultiValueMap` / `public MultiValueMap()`


        <!-- 684fe4d9-9f1d-11ea-8b33-333445793454 <=< ACCEPT -->
        Creates a MultiValueMap based on a <code>HashMap</code> and
        storing the multiple values in an <code>ArrayList</code>.
        <!-- ACCEPT >=> 684fe4d9-9f1d-11ea-8b33-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.MultiValueMap` / `final Factory<C> collectionFactory)`


        <!-- 68500bcf-9f1d-11ea-8b34-333445793454 <=< ACCEPT -->
        Creates a MultiValueMap which decorates the given <code>map</code> and
        creates the value collections using the supplied <code>collectionFactory</code>.
        @param <C>  the collection class type
        @param map  the map to decorate
        @param collectionFactory  the collection factory which must return a Collection instance
        <!-- ACCEPT >=> 68500bcf-9f1d-11ea-8b34-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.MultiValueMap` / `private void writeObject(final ObjectOutputStream out) throws IOException`


        <!-- 68500bd0-9f1d-11ea-8b35-333445793454 <=< ACCEPT -->
        Write the map out using a custom routine.
        @param out  the output stream
        @throws IOException
        @since 4.0
        <!-- ACCEPT >=> 68500bd0-9f1d-11ea-8b35-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.MultiValueMap` / `private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException`


        <!-- 68500bd1-9f1d-11ea-8b36-333445793454 <=< ACCEPT -->
        Read the map in using a custom routine.
        @param in  the input stream
        @throws IOException
        @throws ClassNotFoundException
        @since 4.0
        <!-- ACCEPT >=> 68500bd1-9f1d-11ea-8b36-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.MultiValueMap` / `public void clear()`


        <!-- 68500bd2-9f1d-11ea-8b37-333445793454 <=< ACCEPT -->
        Clear the map.
        <!-- ACCEPT >=> 68500bd2-9f1d-11ea-8b37-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.MultiValueMap` / `public boolean removeMapping(final Object key, final Object value)`


        <!-- 68500bd3-9f1d-11ea-8b38-333445793454 <=< ACCEPT -->
        Removes a specific value from map.
        <p>
        The item is removed from the collection mapped to the specified key.
        Other values attached to that key are unaffected.
        <p>
        If the last value for a key is removed, <code>null</code> will be returned
        from a subsequent <code>get(key)</code>.
        @param key  the key to remove from
        @param value the value to remove
        @return {@code true} if the mapping was removed, {@code false} otherwise
        <!-- ACCEPT >=> 68500bd3-9f1d-11ea-8b38-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.MultiValueMap` / `public boolean containsValue(final Object value)`


        <!-- 68500bd4-9f1d-11ea-8b39-333445793454 <=< ACCEPT -->
        Checks whether the map contains the value specified.
        <p>
        This checks all collections against all keys for the value, and thus could be slow.
        @param value  the value to search for
        @return true if the map contains the value
        <!-- ACCEPT >=> 68500bd4-9f1d-11ea-8b39-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.MultiValueMap` / `public Object put(final K key, final Object value)`


        <!-- 68500bd5-9f1d-11ea-8b3a-333445793454 <=< ACCEPT -->
        Adds the value to the collection associated with the specified key.
        <p>
        Unlike a normal <code>Map</code> the previous value is not replaced.
        Instead the new value is added to the collection stored against the key.
        @param key  the key to store against
        @param value  the value to add to the collection at the key
        @return the value added if the map changed and null if the map did not change
        <!-- ACCEPT >=> 68500bd5-9f1d-11ea-8b3a-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.MultiValueMap` / `public void putAll(final Map<? extends K, ?> map)`


        <!-- 68500bd6-9f1d-11ea-8b3b-333445793454 <=< ACCEPT -->
        Override superclass to ensure that MultiMap instances are
        correctly handled.
        <p>
        If you call this method with a normal map, each entry is
        added using <code>put(Object,Object)</code>.
        If you call this method with a multi map, each entry is
        added using <code>putAll(Object,Collection)</code>.
        @param map  the map to copy (either a normal or multi map)
        <!-- ACCEPT >=> 68500bd6-9f1d-11ea-8b3b-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.MultiValueMap` / `public Set<Entry<K, Object>> entrySet()`


        <!-- 68500bd7-9f1d-11ea-8b3c-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <p>
        NOTE: the returned Entry objects will contain as value a {@link Collection}
        of all values that are mapped to the given key. To get a "flattened" version
        of all mappings contained in this map, use {@link #iterator()}.
        @see #iterator()
        <!-- ACCEPT >=> 68500bd7-9f1d-11ea-8b3c-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.MultiValueMap` / `public Collection<Object> values()`


        <!-- 68500bd8-9f1d-11ea-8b3d-333445793454 <=< ACCEPT -->
        Gets a collection containing all the values in the map.
        <p>
        This returns a collection containing the combination of values from all keys.
        @return a collection view of the values contained in this map
        <!-- ACCEPT >=> 68500bd8-9f1d-11ea-8b3d-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.MultiValueMap` / `public boolean containsValue(final Object key, final Object value)`


        <!-- 68500bd9-9f1d-11ea-8b3e-333445793454 <=< ACCEPT -->
        Checks whether the collection at the specified key contains the value.
        @param key  the key to search for
        @param value  the value to search for
        @return true if the map contains the value
        <!-- ACCEPT >=> 68500bd9-9f1d-11ea-8b3e-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.MultiValueMap` / `public Collection<V> getCollection(final Object key)`


        <!-- 68500bda-9f1d-11ea-8b3f-333445793454 <=< ACCEPT -->
        Gets the collection mapped to the specified key.
        This method is a convenience method to typecast the result of <code>get(key)</code>.
        @param key  the key to retrieve
        @return the collection mapped to the key, null if no mapping
        <!-- ACCEPT >=> 68500bda-9f1d-11ea-8b3f-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.MultiValueMap` / `public int size(final Object key)`


        <!-- 68500bdb-9f1d-11ea-8b40-333445793454 <=< ACCEPT -->
        Gets the size of the collection mapped to the specified key.
        @param key  the key to get size for
        @return the size of the collection at the key, zero if key not in map
        <!-- ACCEPT >=> 68500bdb-9f1d-11ea-8b40-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.MultiValueMap` / `public boolean putAll(final K key, final Collection<V> values)`


        <!-- 68500bdc-9f1d-11ea-8b41-333445793454 <=< ACCEPT -->
        Adds a collection of values to the collection associated with
        the specified key.
        @param key  the key to store against
        @param values  the values to add to the collection at the key, null ignored
        @return true if this map changed
        <!-- ACCEPT >=> 68500bdc-9f1d-11ea-8b41-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.MultiValueMap` / `public Iterator<V> iterator(final Object key)`


        <!-- 68500bdd-9f1d-11ea-8b42-333445793454 <=< ACCEPT -->
        Gets an iterator for the collection mapped to the specified key.
        @param key  the key to get an iterator for
        @return the iterator of the collection at the key, empty iterator if key not in map
        <!-- ACCEPT >=> 68500bdd-9f1d-11ea-8b42-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.MultiValueMap` / `public Iterator<Entry<K, V>> iterator()`


        <!-- 68500bde-9f1d-11ea-8b43-333445793454 <=< ACCEPT -->
        Gets an iterator for all mappings stored in this {@link MultiValueMap}.
        <p>
        The iterator will return multiple Entry objects with the same key
        if there are multiple values mapped to this key.
        <p>
        NOTE: calling {@link java.util.Map.Entry#setValue(Object)} on any of the returned
        elements will result in a {@link UnsupportedOperationException}.
        @return the iterator of all mappings in this map
        @since 4.0
        <!-- ACCEPT >=> 68500bde-9f1d-11ea-8b43-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.MultiValueMap` / `public int totalSize()`


        <!-- 68500bdf-9f1d-11ea-8b44-333445793454 <=< ACCEPT -->
        Gets the total size of the map by counting all the values.
        @return the total size of the map counting all values
        <!-- ACCEPT >=> 68500bdf-9f1d-11ea-8b44-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.MultiValueMap` / `protected Collection<V> createCollection(final int size)`


        <!-- 68500be0-9f1d-11ea-8b45-333445793454 <=< ACCEPT -->
        Creates a new instance of the map value Collection container
        using the factory.
        <p>
        This method can be overridden to perform your own processing
        instead of using the factory.
        @param size  the collection size that is about to be added
        @return the new collection
        <!-- ACCEPT >=> 68500be0-9f1d-11ea-8b45-333445793454 -->



## Class: `java.org.apache.commons.collections4.map.MultiValueMap` / `private class Values extends AbstractCollection<V>`


        <!-- 68500be1-9f1d-11ea-8b46-333445793454 <=< ACCEPT -->
        Inner class that provides the values view.
        <!-- ACCEPT >=> 68500be1-9f1d-11ea-8b46-333445793454 -->



## Class: `java.org.apache.commons.collections4.map.MultiValueMap` / `private class ValuesIterator implements Iterator<V>`


        <!-- 68500be2-9f1d-11ea-8b47-333445793454 <=< ACCEPT -->
        Inner class that provides the values iterator.
        <!-- ACCEPT >=> 68500be2-9f1d-11ea-8b47-333445793454 -->



## Class: `java.org.apache.commons.collections4.map.MultiValueMap` / `private static class ReflectionFactory<T extends Collection<?>> implements Factory<T>, Serializable`


        <!-- 68500be3-9f1d-11ea-8b48-333445793454 <=< ACCEPT -->
        Inner class that provides a simple reflection factory.
        <!-- ACCEPT >=> 68500be3-9f1d-11ea-8b48-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.MultiValueMap` / `private static final long serialVersionUID`


        <!-- 68500be4-9f1d-11ea-8b49-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 68500be4-9f1d-11ea-8b49-333445793454 -->



# File: `java.org.apache.commons.collections4.map.PassiveExpiringMap`

## Class: `java.org.apache.commons.collections4.map.PassiveExpiringMap` / `implements Serializable`


        <!-- 685032d9-9f1d-11ea-8b4a-333445793454 <=< ACCEPT -->
        Decorates a <code>Map</code> to evict expired entries once their expiration
        time has been reached.
        <p>
        When putting a key-value pair in the map this decorator uses a
        {@link ExpirationPolicy} to determine how long the entry should remain alive
        as defined by an expiration time value.
        </p>
        <p>
        When accessing the mapped value for a key, its expiration time is checked,
        and if it is a negative value or if it is greater than the current time, the
        mapped value is returned. Otherwise, the key is removed from the decorated
        map, and <code>null</code> is returned.
        </p>
        <p>
        When invoking methods that involve accessing the entire map contents (i.e
        {@link #containsKey(Object)}, {@link #entrySet()}, etc.) this decorator
        removes all expired entries prior to actually completing the invocation.
        </p>
        <p>
        <strong>Note that {@link PassiveExpiringMap} is not synchronized and is not
        thread-safe.</strong> If you wish to use this map from multiple threads
        concurrently, you must use appropriate synchronization. The simplest approach
        is to wrap this map using {@link java.util.Collections#synchronizedMap(Map)}.
        This class may throw exceptions when accessed by concurrent threads without
        synchronization.
        </p>
        @param <K> the type of the keys in the map
        @param <V> the type of the values in the map
        @since 4.0
        @version $Id$
        <!-- ACCEPT >=> 685032d9-9f1d-11ea-8b4a-333445793454 -->



## Class: `java.org.apache.commons.collections4.map.PassiveExpiringMap` / `implements ExpirationPolicy<K, V>`


        <!-- 685032da-9f1d-11ea-8b4b-333445793454 <=< ACCEPT -->
        A {@link org.apache.commons.collections4.map.PassiveExpiringMap.ExpirationPolicy ExpirationPolicy}
        that returns a expiration time that is a
        constant about of time in the future from the current time.
        @param <K> the type of the keys in the map
        @param <V> the type of the values in the map
        @since 4.0
        @version $Id$
        <!-- ACCEPT >=> 685032da-9f1d-11ea-8b4b-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.PassiveExpiringMap` / `private static final long serialVersionUID`


        <!-- 685032db-9f1d-11ea-8b4c-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 685032db-9f1d-11ea-8b4c-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.PassiveExpiringMap` / `private final long timeToLiveMillis`


        <!-- 685032dc-9f1d-11ea-8b4d-333445793454 <=< ACCEPT -->
        the constant time-to-live value measured in milliseconds.
        <!-- ACCEPT >=> 685032dc-9f1d-11ea-8b4d-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.PassiveExpiringMap` / `public ConstantTimeToLiveExpirationPolicy()`


        <!-- 685032dd-9f1d-11ea-8b4e-333445793454 <=< ACCEPT -->
        Default constructor. Constructs a policy using a negative
        time-to-live value that results in entries never expiring.
        <!-- ACCEPT >=> 685032dd-9f1d-11ea-8b4e-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.PassiveExpiringMap` / `public ConstantTimeToLiveExpirationPolicy(final long timeToLiveMillis)`


        <!-- 685032de-9f1d-11ea-8b4f-333445793454 <=< ACCEPT -->
        Construct a policy with the given time-to-live constant measured in
        milliseconds. A negative time-to-live value indicates entries never
        expire. A zero time-to-live value indicates entries expire (nearly)
        immediately.
        @param timeToLiveMillis the constant amount of time (in milliseconds)
        an entry is available before it expires. A negative value
        results in entries that NEVER expire. A zero value results in
        entries that ALWAYS expire.
        <!-- ACCEPT >=> 685032de-9f1d-11ea-8b4f-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.PassiveExpiringMap` / `final TimeUnit timeUnit)`


        <!-- 685032df-9f1d-11ea-8b50-333445793454 <=< ACCEPT -->
        Construct a policy with the given time-to-live constant measured in
        the given time unit of measure.
        @param timeToLive the constant amount of time an entry is available
        before it expires. A negative value results in entries that
        NEVER expire. A zero value results in entries that ALWAYS
        expire.
        @param timeUnit the unit of time for the <code>timeToLive</code>
        parameter, must not be null.
        @throws NullPointerException if the time unit is null.
        <!-- ACCEPT >=> 685032df-9f1d-11ea-8b50-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.PassiveExpiringMap` / `public long expirationTime(final K key, final V value)`


        <!-- 685032e0-9f1d-11ea-8b51-333445793454 <=< ACCEPT -->
        Determine the expiration time for the given key-value entry.
        @param key the key for the entry (ignored).
        @param value the value for the entry (ignored).
        @return if {@link #timeToLiveMillis} &ge; 0, an expiration time of
        {@link #timeToLiveMillis} +
        {@link System#currentTimeMillis()} is returned. Otherwise, -1
        is returned indicating the entry never expires.
        <!-- ACCEPT >=> 685032e0-9f1d-11ea-8b51-333445793454 -->



## Interface: `java.org.apache.commons.collections4.map.PassiveExpiringMap` / `extends Serializable`


        <!-- 685032e1-9f1d-11ea-8b52-333445793454 <=< ACCEPT -->
        A policy to determine the expiration time for key-value entries.
        @param <K> the key object type.
        @param <V> the value object type
        @since 4.0
        @version $Id$
        <!-- ACCEPT >=> 685032e1-9f1d-11ea-8b52-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.PassiveExpiringMap` / `long expirationTime(K key, V value)`


        <!-- 685032e2-9f1d-11ea-8b53-333445793454 <=< ACCEPT -->
        Determine the expiration time for the given key-value entry.
        @param key the key for the entry.
        @param value the value for the entry.
        @return the expiration time value measured in milliseconds. A
        negative return value indicates the entry never expires.
        <!-- ACCEPT >=> 685032e2-9f1d-11ea-8b53-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.PassiveExpiringMap` / `private static final long serialVersionUID`


        <!-- 685032e3-9f1d-11ea-8b54-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 685032e3-9f1d-11ea-8b54-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.PassiveExpiringMap` / `final TimeUnit timeUnit)`


        <!-- 685032e4-9f1d-11ea-8b55-333445793454 <=< ACCEPT -->
        First validate the input parameters. If the parameters are valid, convert
        the given time measured in the given units to the same time measured in
        milliseconds.
        @param timeToLive the constant amount of time an entry is available
        before it expires. A negative value results in entries that NEVER
        expire. A zero value results in entries that ALWAYS expire.
        @param timeUnit the unit of time for the <code>timeToLive</code>
        parameter, must not be null.
        @throws NullPointerException if the time unit is null.
        <!-- ACCEPT >=> 685032e4-9f1d-11ea-8b55-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.PassiveExpiringMap` / `private final Map<Object, Long> expirationMap`


        <!-- 685032e5-9f1d-11ea-8b56-333445793454 <=< ACCEPT -->
        map used to manage expiration times for the actual map entries.
        <!-- ACCEPT >=> 685032e5-9f1d-11ea-8b56-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.PassiveExpiringMap` / `private final ExpirationPolicy<K, V> expiringPolicy`


        <!-- 685032e6-9f1d-11ea-8b57-333445793454 <=< ACCEPT -->
        the policy used to determine time-to-live values for map entries.
        <!-- ACCEPT >=> 685032e6-9f1d-11ea-8b57-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.PassiveExpiringMap` / `public PassiveExpiringMap()`


        <!-- 685032e7-9f1d-11ea-8b58-333445793454 <=< ACCEPT -->
        Default constructor. Constructs a map decorator that results in entries
        NEVER expiring.
        <!-- ACCEPT >=> 685032e7-9f1d-11ea-8b58-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.PassiveExpiringMap` / `public PassiveExpiringMap(final ExpirationPolicy<K, V> expiringPolicy)`


        <!-- 685032e8-9f1d-11ea-8b59-333445793454 <=< ACCEPT -->
        Construct a map decorator using the given expiration policy to determine
        expiration times.
        @param expiringPolicy the policy used to determine expiration times of
        entries as they are added.
        @throws NullPointerException if expiringPolicy is null
        <!-- ACCEPT >=> 685032e8-9f1d-11ea-8b59-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.PassiveExpiringMap` / `final Map<K, V> map)`


        <!-- 685032e9-9f1d-11ea-8b5a-333445793454 <=< ACCEPT -->
        Construct a map decorator that decorates the given map and uses the given
        expiration policy to determine expiration times. If there are any
        elements already in the map being decorated, they will NEVER expire
        unless they are replaced.
        @param expiringPolicy the policy used to determine expiration times of
        entries as they are added.
        @param map the map to decorate, must not be null.
        @throws NullPointerException if the map or expiringPolicy is null.
        <!-- ACCEPT >=> 685032e9-9f1d-11ea-8b5a-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.PassiveExpiringMap` / `public PassiveExpiringMap(final long timeToLiveMillis)`


        <!-- 685032ea-9f1d-11ea-8b5b-333445793454 <=< ACCEPT -->
        Construct a map decorator that decorates the given map using the given
        time-to-live value measured in milliseconds to create and use a
        {@link ConstantTimeToLiveExpirationPolicy} expiration policy.
        @param timeToLiveMillis the constant amount of time (in milliseconds) an
        entry is available before it expires. A negative value results in
        entries that NEVER expire. A zero value results in entries that
        ALWAYS expire.
        <!-- ACCEPT >=> 685032ea-9f1d-11ea-8b5b-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.PassiveExpiringMap` / `public PassiveExpiringMap(final long timeToLiveMillis, final Map<K, V> map)`


        <!-- 685032eb-9f1d-11ea-8b5c-333445793454 <=< ACCEPT -->
        Construct a map decorator using the given time-to-live value measured in
        milliseconds to create and use a
        {@link ConstantTimeToLiveExpirationPolicy} expiration policy. If there
        are any elements already in the map being decorated, they will NEVER
        expire unless they are replaced.
        @param timeToLiveMillis the constant amount of time (in milliseconds) an
        entry is available before it expires. A negative value results in
        entries that NEVER expire. A zero value results in entries that
        ALWAYS expire.
        @param map the map to decorate, must not be null.
        @throws NullPointerException if the map is null.
        <!-- ACCEPT >=> 685032eb-9f1d-11ea-8b5c-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.PassiveExpiringMap` / `public PassiveExpiringMap(final long timeToLive, final TimeUnit timeUnit)`


        <!-- 685059e2-9f1d-11ea-8b5d-333445793454 <=< ACCEPT -->
        Construct a map decorator using the given time-to-live value measured in
        the given time units of measure to create and use a
        {@link ConstantTimeToLiveExpirationPolicy} expiration policy.
        @param timeToLive the constant amount of time an entry is available
        before it expires. A negative value results in entries that NEVER
        expire. A zero value results in entries that ALWAYS expire.
        @param timeUnit the unit of time for the <code>timeToLive</code>
        parameter, must not be null.
        @throws NullPointerException if the time unit is null.
        <!-- ACCEPT >=> 685059e2-9f1d-11ea-8b5d-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.PassiveExpiringMap` / `public PassiveExpiringMap(final long timeToLive, final TimeUnit timeUnit, final Map<K, V> map)`


        <!-- 685059e3-9f1d-11ea-8b5e-333445793454 <=< ACCEPT -->
        Construct a map decorator that decorates the given map using the given
        time-to-live value measured in the given time units of measure to create
        {@link ConstantTimeToLiveExpirationPolicy} expiration policy. This policy
        is used to determine expiration times. If there are any elements already
        in the map being decorated, they will NEVER expire unless they are
        replaced.
        @param timeToLive the constant amount of time an entry is available
        before it expires. A negative value results in entries that NEVER
        expire. A zero value results in entries that ALWAYS expire.
        @param timeUnit the unit of time for the <code>timeToLive</code>
        parameter, must not be null.
        @param map the map to decorate, must not be null.
        @throws NullPointerException if the map or time unit is null.
        <!-- ACCEPT >=> 685059e3-9f1d-11ea-8b5e-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.PassiveExpiringMap` / `public PassiveExpiringMap(final Map<K, V> map)`


        <!-- 685059e4-9f1d-11ea-8b5f-333445793454 <=< ACCEPT -->
        Constructs a map decorator that decorates the given map and results in
        entries NEVER expiring. If there are any elements already in the map
        being decorated, they also will NEVER expire.
        @param map the map to decorate, must not be null.
        @throws NullPointerException if the map is null.
        <!-- ACCEPT >=> 685059e4-9f1d-11ea-8b5f-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.PassiveExpiringMap` / `public void clear()`


        <!-- 685059e5-9f1d-11ea-8b60-333445793454 <=< ACCEPT -->
        Normal {@link Map#clear()} behavior with the addition of clearing all
        expiration entries as well.
        <!-- ACCEPT >=> 685059e5-9f1d-11ea-8b60-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.PassiveExpiringMap` / `public boolean containsKey(final Object key)`


        <!-- 685059e6-9f1d-11ea-8b61-333445793454 <=< ACCEPT -->
        All expired entries are removed from the map prior to determining the
        contains result.
        {@inheritDoc}
        <!-- ACCEPT >=> 685059e6-9f1d-11ea-8b61-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.PassiveExpiringMap` / `public boolean containsValue(final Object value)`


        <!-- 685059e7-9f1d-11ea-8b62-333445793454 <=< ACCEPT -->
        All expired entries are removed from the map prior to determining the
        contains result.
        {@inheritDoc}
        <!-- ACCEPT >=> 685059e7-9f1d-11ea-8b62-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.PassiveExpiringMap` / `public Set<Entry<K, V>> entrySet()`


        <!-- 685059e8-9f1d-11ea-8b63-333445793454 <=< ACCEPT -->
        All expired entries are removed from the map prior to returning the entry set.
        {@inheritDoc}
        <!-- ACCEPT >=> 685059e8-9f1d-11ea-8b63-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.PassiveExpiringMap` / `public V get(final Object key)`


        <!-- 685059e9-9f1d-11ea-8b64-333445793454 <=< ACCEPT -->
        All expired entries are removed from the map prior to returning the entry value.
        {@inheritDoc}
        <!-- ACCEPT >=> 685059e9-9f1d-11ea-8b64-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.PassiveExpiringMap` / `public boolean isEmpty()`


        <!-- 685059ea-9f1d-11ea-8b65-333445793454 <=< ACCEPT -->
        All expired entries are removed from the map prior to determining if it is empty.
        {@inheritDoc}
        <!-- ACCEPT >=> 685059ea-9f1d-11ea-8b65-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.PassiveExpiringMap` / `private boolean isExpired(final long now, final Long expirationTimeObject)`


        <!-- 685059eb-9f1d-11ea-8b66-333445793454 <=< ACCEPT -->
        Determines if the given expiration time is less than <code>now</code>.
        @param now the time in milliseconds used to compare against the
        expiration time.
        @param expirationTimeObject the expiration time value retrieved from
        {@link #expirationMap}, can be null.
        @return <code>true</code> if <code>expirationTimeObject</code> is &ge; 0
        and <code>expirationTimeObject</code> &lt; <code>now</code>.
        <code>false</code> otherwise.
        <!-- ACCEPT >=> 685059eb-9f1d-11ea-8b66-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.PassiveExpiringMap` / `public Set<K> keySet()`


        <!-- 685059ec-9f1d-11ea-8b67-333445793454 <=< ACCEPT -->
        All expired entries are removed from the map prior to returning the key set.
        {@inheritDoc}
        <!-- ACCEPT >=> 685059ec-9f1d-11ea-8b67-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.PassiveExpiringMap` / `private long now()`


        <!-- 685059ed-9f1d-11ea-8b68-333445793454 <=< ACCEPT -->
        The current time in milliseconds.
        <!-- ACCEPT >=> 685059ed-9f1d-11ea-8b68-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.PassiveExpiringMap` / `public V put(final K key, final V value)`


        <!-- 685059ee-9f1d-11ea-8b69-333445793454 <=< ACCEPT -->
        Add the given key-value pair to this map as well as recording the entry's expiration time based on
        the current time in milliseconds and this map's {@link #expiringPolicy}.
        <p>
        {@inheritDoc}
        <!-- ACCEPT >=> 685059ee-9f1d-11ea-8b69-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.PassiveExpiringMap` / `public V remove(final Object key)`


        <!-- 685059ef-9f1d-11ea-8b6a-333445793454 <=< ACCEPT -->
        Normal {@link Map#remove(Object)} behavior with the addition of removing
        any expiration entry as well.
        {@inheritDoc}
        <!-- ACCEPT >=> 685059ef-9f1d-11ea-8b6a-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.PassiveExpiringMap` / `private void removeAllExpired(final long now)`


        <!-- 685059f0-9f1d-11ea-8b6b-333445793454 <=< ACCEPT -->
        Removes all entries in the map whose expiration time is less than
        <code>now</code>. The exceptions are entries with negative expiration
        times; those entries are never removed.
        @see #isExpired(long, Long)
        <!-- ACCEPT >=> 685059f0-9f1d-11ea-8b6b-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.PassiveExpiringMap` / `private void removeIfExpired(final Object key, final long now)`


        <!-- 685059f1-9f1d-11ea-8b6c-333445793454 <=< ACCEPT -->
        Removes the entry with the given key if the entry's expiration time is
        less than <code>now</code>. If the entry has a negative expiration time,
        the entry is never removed.
        <!-- ACCEPT >=> 685059f1-9f1d-11ea-8b6c-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.PassiveExpiringMap` / `public int size()`


        <!-- 685059f2-9f1d-11ea-8b6d-333445793454 <=< ACCEPT -->
        All expired entries are removed from the map prior to returning the size.
        {@inheritDoc}
        <!-- ACCEPT >=> 685059f2-9f1d-11ea-8b6d-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.PassiveExpiringMap` / `throws IOException, ClassNotFoundException`


        <!-- 685059f3-9f1d-11ea-8b6e-333445793454 <=< ACCEPT -->
        Read the map in using a custom routine.
        @param in the input stream
        @throws IOException
        @throws ClassNotFoundException
        <!-- ACCEPT >=> 685059f3-9f1d-11ea-8b6e-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.PassiveExpiringMap` / `throws IOException`


        <!-- 685059f4-9f1d-11ea-8b6f-333445793454 <=< ACCEPT -->
        Write the map out using a custom routine.
        @param out the output stream
        @throws IOException
        <!-- ACCEPT >=> 685059f4-9f1d-11ea-8b6f-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.PassiveExpiringMap` / `public Collection<V> values()`


        <!-- 685059f5-9f1d-11ea-8b70-333445793454 <=< ACCEPT -->
        All expired entries are removed from the map prior to returning the value collection.
        {@inheritDoc}
        <!-- ACCEPT >=> 685059f5-9f1d-11ea-8b70-333445793454 -->



# File: `java.org.apache.commons.collections4.map.PredicatedMap`

## Class: `java.org.apache.commons.collections4.map.PredicatedMap` / `implements Serializable`


        <!-- 685059f6-9f1d-11ea-8b71-333445793454 <=< ACCEPT -->
        Decorates another <code>Map</code> to validate that additions
        match a specified predicate.
        <p>
        This map exists to provide validation for the decorated map.
        It is normally created to decorate an empty map.
        If an object cannot be added to the map, an IllegalArgumentException is thrown.
        <p>
        One usage would be to ensure that no null keys are added to the map.
        <pre>Map map = PredicatedSet.decorate(new HashMap(), NotNullPredicate.INSTANCE, null);</pre>
        <p>
        <strong>Note that PredicatedMap is not synchronized and is not thread-safe.</strong>
        If you wish to use this map from multiple threads concurrently, you must use
        appropriate synchronization. The simplest approach is to wrap this map
        using {@link java.util.Collections#synchronizedMap(Map)}. This class may throw
        exceptions when accessed by concurrent threads without synchronization.
        <p>
        This class is Serializable from Commons Collections 3.1.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 685059f6-9f1d-11ea-8b71-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.PredicatedMap` / `private static final long serialVersionUID`


        <!-- 685059f7-9f1d-11ea-8b72-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 685059f7-9f1d-11ea-8b72-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.PredicatedMap` / `protected final Predicate<? super K> keyPredicate`


        <!-- 685059f8-9f1d-11ea-8b73-333445793454 <=< ACCEPT -->
        The key predicate to use
        <!-- ACCEPT >=> 685059f8-9f1d-11ea-8b73-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.PredicatedMap` / `protected final Predicate<? super V> valuePredicate`


        <!-- 685080eb-9f1d-11ea-8b74-333445793454 <=< ACCEPT -->
        The value predicate to use
        <!-- ACCEPT >=> 685080eb-9f1d-11ea-8b74-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.PredicatedMap` / `final Predicate<? super V> valuePredicate)`


        <!-- 685080ec-9f1d-11ea-8b75-333445793454 <=< ACCEPT -->
        Factory method to create a predicated (validating) map.
        <p>
        If there are any elements already in the list being decorated, they
        are validated.
        @param <K>  the key type
        @param <V>  the value type
        @param map  the map to decorate, must not be null
        @param keyPredicate  the predicate to validate the keys, null means no check
        @param valuePredicate  the predicate to validate to values, null means no check
        @return a new predicated map
        @throws NullPointerException if the map is null
        @since 4.0
        <!-- ACCEPT >=> 685080ec-9f1d-11ea-8b75-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.PredicatedMap` / `final Predicate<? super V> valuePredicate)`


        <!-- 685080ed-9f1d-11ea-8b76-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param map  the map to decorate, must not be null
        @param keyPredicate  the predicate to validate the keys, null means no check
        @param valuePredicate  the predicate to validate to values, null means no check
        @throws NullPointerException if the map is null
        <!-- ACCEPT >=> 685080ed-9f1d-11ea-8b76-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.PredicatedMap` / `private void writeObject(final ObjectOutputStream out) throws IOException`


        <!-- 685080ee-9f1d-11ea-8b77-333445793454 <=< ACCEPT -->
        Write the map out using a custom routine.
        @param out  the output stream
        @throws IOException
        @since 3.1
        <!-- ACCEPT >=> 685080ee-9f1d-11ea-8b77-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.PredicatedMap` / `private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException`


        <!-- 685080ef-9f1d-11ea-8b78-333445793454 <=< ACCEPT -->
        Read the map in using a custom routine.
        @param in  the input stream
        @throws IOException
        @throws ClassNotFoundException
        @since 3.1
        <!-- ACCEPT >=> 685080ef-9f1d-11ea-8b78-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.PredicatedMap` / `protected void validate(final K key, final V value)`


        <!-- 685080f0-9f1d-11ea-8b79-333445793454 <=< ACCEPT -->
        Validates a key value pair.
        @param key  the key to validate
        @param value  the value to validate
        @throws IllegalArgumentException if invalid
        <!-- ACCEPT >=> 685080f0-9f1d-11ea-8b79-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.PredicatedMap` / `protected V checkSetValue(final V value)`


        <!-- 685080f1-9f1d-11ea-8b7a-333445793454 <=< ACCEPT -->
        Override to validate an object set into the map via <code>setValue</code>.
        @param value  the value to validate
        @return the value itself
        @throws IllegalArgumentException if invalid
        @since 3.1
        <!-- ACCEPT >=> 685080f1-9f1d-11ea-8b7a-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.PredicatedMap` / `protected boolean isSetValueChecking()`


        <!-- 685080f2-9f1d-11ea-8b7b-333445793454 <=< ACCEPT -->
        Override to only return true when there is a value transformer.
        @return true if a value predicate is in use
        @since 3.1
        <!-- ACCEPT >=> 685080f2-9f1d-11ea-8b7b-333445793454 -->



# File: `java.org.apache.commons.collections4.map.PredicatedSortedMap`

## Class: `java.org.apache.commons.collections4.map.PredicatedSortedMap` / `public class PredicatedSortedMap<K, V> extends PredicatedMap<K, V> implements SortedMap<K, V>`


        <!-- 685080f3-9f1d-11ea-8b7c-333445793454 <=< ACCEPT -->
        Decorates another <code>SortedMap</code> to validate that additions
        match a specified predicate.
        <p>
        This map exists to provide validation for the decorated map.
        It is normally created to decorate an empty map.
        If an object cannot be added to the map, an IllegalArgumentException is thrown.
        <p>
        One usage would be to ensure that no null keys are added to the map.
        <pre>
        SortedMap map =
        PredicatedSortedMap.predicatedSortedMap(new TreeMap(),
        NotNullPredicate.notNullPredicate(),
        null);
        </pre>
        <p>
        <strong>Note that PredicatedSortedMap is not synchronized and is not thread-safe.</strong>
        If you wish to use this map from multiple threads concurrently, you must use
        appropriate synchronization. The simplest approach is to wrap this map
        using {@link java.util.Collections#synchronizedSortedMap}. This class may throw
        exceptions when accessed by concurrent threads without synchronization.
        <p>
        This class is Serializable from Commons Collections 3.1.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 685080f3-9f1d-11ea-8b7c-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.PredicatedSortedMap` / `private static final long serialVersionUID`


        <!-- 685080f4-9f1d-11ea-8b7d-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 685080f4-9f1d-11ea-8b7d-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.PredicatedSortedMap` / `final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)`


        <!-- 685080f5-9f1d-11ea-8b7e-333445793454 <=< ACCEPT -->
        Factory method to create a predicated (validating) sorted map.
        <p>
        If there are any elements already in the list being decorated, they
        are validated.
        @param <K>  the key type
        @param <V>  the value type
        @param map  the map to decorate, must not be null
        @param keyPredicate  the predicate to validate the keys, null means no check
        @param valuePredicate  the predicate to validate to values, null means no check
        @return a new predicated sorted map
        @throws NullPointerException if the map is null
        @since 4.0
        <!-- ACCEPT >=> 685080f5-9f1d-11ea-8b7e-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.PredicatedSortedMap` / `final Predicate<? super V> valuePredicate)`


        <!-- 685080f6-9f1d-11ea-8b7f-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param map  the map to decorate, must not be null
        @param keyPredicate  the predicate to validate the keys, null means no check
        @param valuePredicate  the predicate to validate to values, null means no check
        @throws NullPointerException if the map is null
        <!-- ACCEPT >=> 685080f6-9f1d-11ea-8b7f-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.PredicatedSortedMap` / `protected SortedMap<K, V> getSortedMap()`


        <!-- 685080f7-9f1d-11ea-8b80-333445793454 <=< ACCEPT -->
        Gets the map being decorated.
        @return the decorated map
        <!-- ACCEPT >=> 685080f7-9f1d-11ea-8b80-333445793454 -->



# File: `java.org.apache.commons.collections4.map.ReferenceIdentityMap`

## Class: `java.org.apache.commons.collections4.map.ReferenceIdentityMap` / `public class ReferenceIdentityMap<K, V> extends AbstractReferenceMap<K, V> implements Serializable`


        <!-- 685080f8-9f1d-11ea-8b81-333445793454 <=< ACCEPT -->
        A <code>Map</code> implementation that allows mappings to be
        removed by the garbage collector and matches keys and values based
        on <code>==</code> not <code>equals()</code>.
        <p>
        <p>
        When you construct a <code>ReferenceIdentityMap</code>, you can specify what kind
        of references are used to store the map's keys and values.
        If non-hard references are used, then the garbage collector can remove
        mappings if a key or value becomes unreachable, or if the JVM's memory is
        running low. For information on how the different reference types behave,
        see {@link Reference}.
        <p>
        Different types of references can be specified for keys and values.
        The default constructor uses hard keys and soft values, providing a
        memory-sensitive cache.
        <p>
        This map is similar to
        {@link org.apache.commons.collections4.map.ReferenceMap ReferenceMap}.
        It differs in that keys and values in this class are compared using <code>==</code>.
        <p>
        This map will violate the detail of various Map and map view contracts.
        As a general rule, don't compare this map to other maps.
        <p>
        This {@link java.util.Map Map} implementation does <i>not</i> allow null elements.
        Attempting to add a null key or value to the map will raise a <code>NullPointerException</code>.
        <p>
        This implementation is not synchronized.
        You can use {@link java.util.Collections#synchronizedMap} to
        provide synchronized access to a <code>ReferenceIdentityMap</code>.
        Remember that synchronization will not stop the garbage collector removing entries.
        <p>
        All the available iterators can be reset back to the start by casting to
        <code>ResettableIterator</code> and calling <code>reset()</code>.
        <p>
        <strong>Note that ReferenceIdentityMap is not synchronized and is not thread-safe.</strong>
        If you wish to use this map from multiple threads concurrently, you must use
        appropriate synchronization. The simplest approach is to wrap this map
        using {@link java.util.Collections#synchronizedMap}. This class may throw
        exceptions when accessed by concurrent threads without synchronization.
        @see java.lang.ref.Reference
        @since 3.0 (previously in main package v2.1)
        @version $Id$
        <!-- ACCEPT >=> 685080f8-9f1d-11ea-8b81-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.ReferenceIdentityMap` / `private static final long serialVersionUID`


        <!-- 685080f9-9f1d-11ea-8b82-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 685080f9-9f1d-11ea-8b82-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.ReferenceIdentityMap` / `public ReferenceIdentityMap()`


        <!-- 685080fa-9f1d-11ea-8b83-333445793454 <=< ACCEPT -->
        Constructs a new <code>ReferenceIdentityMap</code> that will
        use hard references to keys and soft references to values.
        <!-- ACCEPT >=> 685080fa-9f1d-11ea-8b83-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.ReferenceIdentityMap` / `public ReferenceIdentityMap(final ReferenceStrength keyType, final ReferenceStrength valueType)`


        <!-- 685080fb-9f1d-11ea-8b84-333445793454 <=< ACCEPT -->
        Constructs a new <code>ReferenceIdentityMap</code> that will
        use the specified types of references.
        @param keyType  the type of reference to use for keys;
        must be {@link AbstractReferenceMap.ReferenceStrength#HARD HARD},
        {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT},
        {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}
        @param valueType  the type of reference to use for values;
        must be {@link AbstractReferenceMap.ReferenceStrength#HARD HARD},
        {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT},
        {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}
        <!-- ACCEPT >=> 685080fb-9f1d-11ea-8b84-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.ReferenceIdentityMap` / `final boolean purgeValues)`


        <!-- 6850a7f7-9f1d-11ea-8b85-333445793454 <=< ACCEPT -->
        Constructs a new <code>ReferenceIdentityMap</code> that will
        use the specified types of references.
        @param keyType  the type of reference to use for keys;
        must be {@link AbstractReferenceMap.ReferenceStrength#HARD HARD},
        {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT},
        {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}
        @param valueType  the type of reference to use for values;
        must be {@link AbstractReferenceMap.ReferenceStrength#HARD HARD},
        {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT},
        {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}
        @param purgeValues should the value be automatically purged when the
        key is garbage collected
        <!-- ACCEPT >=> 6850a7f7-9f1d-11ea-8b85-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.ReferenceIdentityMap` / `final int capacity, final float loadFactor)`


        <!-- 6850a7f8-9f1d-11ea-8b86-333445793454 <=< ACCEPT -->
        Constructs a new <code>ReferenceIdentityMap</code> with the
        specified reference types, load factor and initial capacity.
        @param keyType  the type of reference to use for keys;
        must be {@link AbstractReferenceMap.ReferenceStrength#HARD HARD},
        {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT},
        {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}
        @param valueType  the type of reference to use for values;
        must be {@link AbstractReferenceMap.ReferenceStrength#HARD HARD},
        {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT},
        {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}
        @param capacity  the initial capacity for the map
        @param loadFactor  the load factor for the map
        <!-- ACCEPT >=> 6850a7f8-9f1d-11ea-8b86-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.ReferenceIdentityMap` / `final int capacity, final float loadFactor, final boolean purgeValues)`


        <!-- 6850a7f9-9f1d-11ea-8b87-333445793454 <=< ACCEPT -->
        Constructs a new <code>ReferenceIdentityMap</code> with the
        specified reference types, load factor and initial capacity.
        @param keyType  the type of reference to use for keys;
        must be {@link AbstractReferenceMap.ReferenceStrength#HARD HARD},
        {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT},
        {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}
        @param valueType  the type of reference to use for values;
        must be {@link AbstractReferenceMap.ReferenceStrength#HARD HARD},
        {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT},
        {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}
        @param capacity  the initial capacity for the map
        @param loadFactor  the load factor for the map
        @param purgeValues  should the value be automatically purged when the
        key is garbage collected
        <!-- ACCEPT >=> 6850a7f9-9f1d-11ea-8b87-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.ReferenceIdentityMap` / `protected int hash(final Object key)`


        <!-- 6850a7fa-9f1d-11ea-8b88-333445793454 <=< ACCEPT -->
        Gets the hash code for the key specified.
        <p>
        This implementation uses the identity hash code.
        @param key  the key to get a hash code for
        @return the hash code
        <!-- ACCEPT >=> 6850a7fa-9f1d-11ea-8b88-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.ReferenceIdentityMap` / `protected int hashEntry(final Object key, final Object value)`


        <!-- 6850a7fb-9f1d-11ea-8b89-333445793454 <=< ACCEPT -->
        Gets the hash code for a MapEntry.
        <p>
        This implementation uses the identity hash code.
        @param key  the key to get a hash code for, may be null
        @param value  the value to get a hash code for, may be null
        @return the hash code, as per the MapEntry specification
        <!-- ACCEPT >=> 6850a7fb-9f1d-11ea-8b89-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.ReferenceIdentityMap` / `protected boolean isEqualKey(final Object key1, Object key2)`


        <!-- 6850a7fc-9f1d-11ea-8b8a-333445793454 <=< ACCEPT -->
        Compares two keys for equals.
        <p>
        This implementation converts the key from the entry to a real reference
        before comparison and uses <code>==</code>.
        @param key1  the first key to compare passed in from outside
        @param key2  the second key extracted from the entry via <code>entry.key</code>
        @return true if equal by identity
        <!-- ACCEPT >=> 6850a7fc-9f1d-11ea-8b8a-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.ReferenceIdentityMap` / `protected boolean isEqualValue(final Object value1, final Object value2)`


        <!-- 6850a7fd-9f1d-11ea-8b8b-333445793454 <=< ACCEPT -->
        Compares two values for equals.
        <p>
        This implementation uses <code>==</code>.
        @param value1  the first value to compare passed in from outside
        @param value2  the second value extracted from the entry via <code>getValue()</code>
        @return true if equal by identity
        <!-- ACCEPT >=> 6850a7fd-9f1d-11ea-8b8b-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.ReferenceIdentityMap` / `private void writeObject(final ObjectOutputStream out) throws IOException`


        <!-- 6850a7fe-9f1d-11ea-8b8c-333445793454 <=< ACCEPT -->
        Write the map out using a custom routine.
        <!-- ACCEPT >=> 6850a7fe-9f1d-11ea-8b8c-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.ReferenceIdentityMap` / `private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException`


        <!-- 6850a7ff-9f1d-11ea-8b8d-333445793454 <=< ACCEPT -->
        Read the map in using a custom routine.
        <!-- ACCEPT >=> 6850a7ff-9f1d-11ea-8b8d-333445793454 -->



# File: `java.org.apache.commons.collections4.map.ReferenceMap`

## Class: `java.org.apache.commons.collections4.map.ReferenceMap` / `public class ReferenceMap<K, V> extends AbstractReferenceMap<K, V> implements Serializable`


        <!-- 6850a800-9f1d-11ea-8b8e-333445793454 <=< ACCEPT -->
        A <code>Map</code> implementation that allows mappings to be
        removed by the garbage collector.
        <p>
        When you construct a <code>ReferenceMap</code>, you can specify what kind
        of references are used to store the map's keys and values.
        If non-hard references are used, then the garbage collector can remove
        mappings if a key or value becomes unreachable, or if the JVM's memory is
        running low. For information on how the different reference types behave,
        see {@link java.lang.ref.Reference Reference}.
        <p>
        Different types of references can be specified for keys and values.
        The keys can be configured to be weak but the values hard,
        in which case this class will behave like a
        <a href="http://java.sun.com/j2se/1.4/docs/api/java/util/WeakHashMap.html">
        <code>WeakHashMap</code></a>. However, you can also specify hard keys and
        weak values, or any other combination. The default constructor uses
        hard keys and soft values, providing a memory-sensitive cache.
        <p>
        This map is similar to
        {@link org.apache.commons.collections4.map.ReferenceIdentityMap ReferenceIdentityMap}.
        It differs in that keys and values in this class are compared using <code>equals()</code>.
        <p>
        This {@link java.util.Map Map} implementation does <i>not</i> allow null elements.
        Attempting to add a null key or value to the map will raise a <code>NullPointerException</code>.
        <p>
        This implementation is not synchronized.
        You can use {@link java.util.Collections#synchronizedMap} to
        provide synchronized access to a <code>ReferenceMap</code>.
        Remember that synchronization will not stop the garbage collector removing entries.
        <p>
        All the available iterators can be reset back to the start by casting to
        <code>ResettableIterator</code> and calling <code>reset()</code>.
        <p>
        <strong>Note that ReferenceMap is not synchronized and is not thread-safe.</strong>
        If you wish to use this map from multiple threads concurrently, you must use
        appropriate synchronization. The simplest approach is to wrap this map
        using {@link java.util.Collections#synchronizedMap}. This class may throw
        exceptions when accessed by concurrent threads without synchronization.
        <p>
        NOTE: As from Commons Collections 3.1 this map extends <code>AbstractReferenceMap</code>
        (previously it extended AbstractMap). As a result, the implementation is now
        extensible and provides a <code>MapIterator</code>.
        @see java.lang.ref.Reference
        @since 3.0 (previously in main package v2.1)
        @version $Id$
        <!-- ACCEPT >=> 6850a800-9f1d-11ea-8b8e-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.ReferenceMap` / `private static final long serialVersionUID`


        <!-- 6850a801-9f1d-11ea-8b8f-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 6850a801-9f1d-11ea-8b8f-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.ReferenceMap` / `public ReferenceMap()`


        <!-- 6850a802-9f1d-11ea-8b90-333445793454 <=< ACCEPT -->
        Constructs a new <code>ReferenceMap</code> that will
        use hard references to keys and soft references to values.
        <!-- ACCEPT >=> 6850a802-9f1d-11ea-8b90-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.ReferenceMap` / `public ReferenceMap(final ReferenceStrength keyType, final ReferenceStrength valueType)`


        <!-- 6850a803-9f1d-11ea-8b91-333445793454 <=< ACCEPT -->
        Constructs a new <code>ReferenceMap</code> that will
        use the specified types of references.
        @param keyType  the type of reference to use for keys;
        must be {@link AbstractReferenceMap.ReferenceStrength#HARD HARD},
        {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT},
        {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}
        @param valueType  the type of reference to use for values;
        must be {@link AbstractReferenceMap.ReferenceStrength#HARD HARD},
        {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT},
        {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}
        <!-- ACCEPT >=> 6850a803-9f1d-11ea-8b91-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.ReferenceMap` / `public ReferenceMap(final ReferenceStrength keyType, final ReferenceStrength valueType, final boolean purgeValues)`


        <!-- 6850a804-9f1d-11ea-8b92-333445793454 <=< ACCEPT -->
        Constructs a new <code>ReferenceMap</code> that will
        use the specified types of references.
        @param keyType  the type of reference to use for keys;
        must be {@link AbstractReferenceMap.ReferenceStrength#HARD HARD},
        {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT},
        {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}
        @param valueType  the type of reference to use for values;
        must be {@link AbstractReferenceMap.ReferenceStrength#HARD HARD},
        {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT},
        {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}
        @param purgeValues should the value be automatically purged when the
        key is garbage collected
        <!-- ACCEPT >=> 6850a804-9f1d-11ea-8b92-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.ReferenceMap` / `final float loadFactor)`


        <!-- 6850ceff-9f1d-11ea-8b93-333445793454 <=< ACCEPT -->
        Constructs a new <code>ReferenceMap</code> with the
        specified reference types, load factor and initial
        capacity.
        @param keyType  the type of reference to use for keys;
        must be {@link AbstractReferenceMap.ReferenceStrength#HARD HARD},
        {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT},
        {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}
        @param valueType  the type of reference to use for values;
        must be {@link AbstractReferenceMap.ReferenceStrength#HARD HARD},
        {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT},
        {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}
        @param capacity  the initial capacity for the map
        @param loadFactor  the load factor for the map
        <!-- ACCEPT >=> 6850ceff-9f1d-11ea-8b93-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.ReferenceMap` / `final float loadFactor, final boolean purgeValues)`


        <!-- 6850cf00-9f1d-11ea-8b94-333445793454 <=< ACCEPT -->
        Constructs a new <code>ReferenceMap</code> with the
        specified reference types, load factor and initial
        capacity.
        @param keyType  the type of reference to use for keys;
        must be {@link AbstractReferenceMap.ReferenceStrength#HARD HARD},
        {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT},
        {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}
        @param valueType  the type of reference to use for values;
        must be {@link AbstractReferenceMap.ReferenceStrength#HARD HARD},
        {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT},
        {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}
        @param capacity  the initial capacity for the map
        @param loadFactor  the load factor for the map
        @param purgeValues  should the value be automatically purged when the
        key is garbage collected
        <!-- ACCEPT >=> 6850cf00-9f1d-11ea-8b94-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.ReferenceMap` / `private void writeObject(final ObjectOutputStream out) throws IOException`


        <!-- 6850cf01-9f1d-11ea-8b95-333445793454 <=< ACCEPT -->
        Write the map out using a custom routine.
        <!-- ACCEPT >=> 6850cf01-9f1d-11ea-8b95-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.ReferenceMap` / `private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException`


        <!-- 6850cf02-9f1d-11ea-8b96-333445793454 <=< ACCEPT -->
        Read the map in using a custom routine.
        <!-- ACCEPT >=> 6850cf02-9f1d-11ea-8b96-333445793454 -->



# File: `java.org.apache.commons.collections4.map.SingletonMap`

## Class: `java.org.apache.commons.collections4.map.SingletonMap` / `implements OrderedMap<K, V>, BoundedMap<K, V>, KeyValue<K, V>, Serializable, Cloneable`


        <!-- 6850cf03-9f1d-11ea-8b97-333445793454 <=< ACCEPT -->
        A <code>Map</code> implementation that holds a single item and is fixed size.
        <p>
        The single key/value pair is specified at creation.
        The map is fixed size so any action that would change the size is disallowed.
        However, the <code>put</code> or <code>setValue</code> methods can <i>change</i>
        the value associated with the key.
        <p>
        If trying to remove or clear the map, an UnsupportedOperationException is thrown.
        If trying to put a new mapping into the map, an  IllegalArgumentException is thrown.
        The put method will only succeed if the key specified is the same as the
        singleton key.
        <p>
        The key and value can be obtained by:
        <ul>
        <li>normal Map methods and views
        <li>the <code>MapIterator</code>, see {@link #mapIterator()}
        <li>the <code>KeyValue</code> interface (just cast - no object creation)
        </ul>
        @since 3.1
        @version $Id$
        <!-- ACCEPT >=> 6850cf03-9f1d-11ea-8b97-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.SingletonMap` / `private static final long serialVersionUID`


        <!-- 6850cf04-9f1d-11ea-8b98-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 6850cf04-9f1d-11ea-8b98-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.SingletonMap` / `private final K key`


        <!-- 6850cf05-9f1d-11ea-8b99-333445793454 <=< ACCEPT -->
        Singleton key
        <!-- ACCEPT >=> 6850cf05-9f1d-11ea-8b99-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.SingletonMap` / `private V value`


        <!-- 6850cf06-9f1d-11ea-8b9a-333445793454 <=< ACCEPT -->
        Singleton value
        <!-- ACCEPT >=> 6850cf06-9f1d-11ea-8b9a-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.SingletonMap` / `public SingletonMap()`


        <!-- 6850cf07-9f1d-11ea-8b9b-333445793454 <=< ACCEPT -->
        Constructor that creates a map of <code>null</code> to <code>null</code>.
        <!-- ACCEPT >=> 6850cf07-9f1d-11ea-8b9b-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.SingletonMap` / `public SingletonMap(final K key, final V value)`


        <!-- 6850cf08-9f1d-11ea-8b9c-333445793454 <=< ACCEPT -->
        Constructor specifying the key and value.
        @param key  the key to use
        @param value  the value to use
        <!-- ACCEPT >=> 6850cf08-9f1d-11ea-8b9c-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.SingletonMap` / `public SingletonMap(final KeyValue<K, V> keyValue)`


        <!-- 6850cf09-9f1d-11ea-8b9d-333445793454 <=< ACCEPT -->
        Constructor specifying the key and value as a <code>KeyValue</code>.
        @param keyValue  the key value pair to use
        <!-- ACCEPT >=> 6850cf09-9f1d-11ea-8b9d-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.SingletonMap` / `public SingletonMap(final Map.Entry<? extends K, ? extends V> mapEntry)`


        <!-- 6850cf0a-9f1d-11ea-8b9e-333445793454 <=< ACCEPT -->
        Constructor specifying the key and value as a <code>MapEntry</code>.
        @param mapEntry  the mapEntry to use
        <!-- ACCEPT >=> 6850cf0a-9f1d-11ea-8b9e-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.SingletonMap` / `public SingletonMap(final Map<? extends K, ? extends V> map)`


        <!-- 6850cf0b-9f1d-11ea-8b9f-333445793454 <=< ACCEPT -->
        Constructor copying elements from another map.
        @param map  the map to copy, must be size 1
        @throws NullPointerException if the map is null
        @throws IllegalArgumentException if the size is not 1
        <!-- ACCEPT >=> 6850cf0b-9f1d-11ea-8b9f-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.SingletonMap` / `public K getKey()`


        <!-- 6850cf0c-9f1d-11ea-8ba0-333445793454 <=< ACCEPT -->
        Gets the key.
        @return the key
        <!-- ACCEPT >=> 6850cf0c-9f1d-11ea-8ba0-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.SingletonMap` / `public V getValue()`


        <!-- 6850cf0d-9f1d-11ea-8ba1-333445793454 <=< ACCEPT -->
        Gets the value.
        @return the value
        <!-- ACCEPT >=> 6850cf0d-9f1d-11ea-8ba1-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.SingletonMap` / `public V setValue(final V value)`


        <!-- 6850cf0e-9f1d-11ea-8ba2-333445793454 <=< ACCEPT -->
        Sets the value.
        @param value  the new value to set
        @return the old value
        <!-- ACCEPT >=> 6850cf0e-9f1d-11ea-8ba2-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.SingletonMap` / `public boolean isFull()`


        <!-- 6850cf0f-9f1d-11ea-8ba3-333445793454 <=< ACCEPT -->
        Is the map currently full, always true.
        @return true always
        <!-- ACCEPT >=> 6850cf0f-9f1d-11ea-8ba3-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.SingletonMap` / `public int maxSize()`


        <!-- 6850cf10-9f1d-11ea-8ba4-333445793454 <=< ACCEPT -->
        Gets the maximum size of the map, always 1.
        @return 1 always
        <!-- ACCEPT >=> 6850cf10-9f1d-11ea-8ba4-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.SingletonMap` / `public V get(final Object key)`


        <!-- 6850cf11-9f1d-11ea-8ba5-333445793454 <=< ACCEPT -->
        Gets the value mapped to the key specified.
        @param key  the key
        @return the mapped value, null if no match
        <!-- ACCEPT >=> 6850cf11-9f1d-11ea-8ba5-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.SingletonMap` / `public int size()`


        <!-- 6850cf12-9f1d-11ea-8ba6-333445793454 <=< ACCEPT -->
        Gets the size of the map, always 1.
        @return the size of 1
        <!-- ACCEPT >=> 6850cf12-9f1d-11ea-8ba6-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.SingletonMap` / `public boolean isEmpty()`


        <!-- 6850cf13-9f1d-11ea-8ba7-333445793454 <=< ACCEPT -->
        Checks whether the map is currently empty, which it never is.
        @return false always
        <!-- ACCEPT >=> 6850cf13-9f1d-11ea-8ba7-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.SingletonMap` / `public boolean containsKey(final Object key)`


        <!-- 6850cf14-9f1d-11ea-8ba8-333445793454 <=< ACCEPT -->
        Checks whether the map contains the specified key.
        @param key  the key to search for
        @return true if the map contains the key
        <!-- ACCEPT >=> 6850cf14-9f1d-11ea-8ba8-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.SingletonMap` / `public boolean containsValue(final Object value)`


        <!-- 6850cf15-9f1d-11ea-8ba9-333445793454 <=< ACCEPT -->
        Checks whether the map contains the specified value.
        @param value  the value to search for
        @return true if the map contains the key
        <!-- ACCEPT >=> 6850cf15-9f1d-11ea-8ba9-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.SingletonMap` / `public V put(final K key, final V value)`


        <!-- 6850cf16-9f1d-11ea-8baa-333445793454 <=< ACCEPT -->
        Puts a key-value mapping into this map where the key must match the existing key.
        <p>
        An IllegalArgumentException is thrown if the key does not match as the map
        is fixed size.
        @param key  the key to set, must be the key of the map
        @param value  the value to set
        @return the value previously mapped to this key, null if none
        @throws IllegalArgumentException if the key does not match
        <!-- ACCEPT >=> 6850cf16-9f1d-11ea-8baa-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.SingletonMap` / `public void putAll(final Map<? extends K, ? extends V> map)`


        <!-- 6850f60a-9f1d-11ea-8bab-333445793454 <=< ACCEPT -->
        Puts the values from the specified map into this map.
        <p>
        The map must be of size 0 or size 1.
        If it is size 1, the key must match the key of this map otherwise an
        IllegalArgumentException is thrown.
        @param map  the map to add, must be size 0 or 1, and the key must match
        @throws NullPointerException if the map is null
        @throws IllegalArgumentException if the key does not match
        <!-- ACCEPT >=> 6850f60a-9f1d-11ea-8bab-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.SingletonMap` / `public V remove(final Object key)`


        <!-- 6850f60b-9f1d-11ea-8bac-333445793454 <=< ACCEPT -->
        Unsupported operation.
        @param key  the mapping to remove
        @return the value mapped to the removed key, null if key not in map
        @throws UnsupportedOperationException always
        <!-- ACCEPT >=> 6850f60b-9f1d-11ea-8bac-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.SingletonMap` / `public void clear()`


        <!-- 6850f60c-9f1d-11ea-8bad-333445793454 <=< ACCEPT -->
        Unsupported operation.
        <!-- ACCEPT >=> 6850f60c-9f1d-11ea-8bad-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.SingletonMap` / `public Set<Map.Entry<K, V>> entrySet()`


        <!-- 6850f60d-9f1d-11ea-8bae-333445793454 <=< ACCEPT -->
        Gets the entrySet view of the map.
        Changes made via <code>setValue</code> affect this map.
        To simply iterate through the entries, use {@link #mapIterator()}.
        @return the entrySet view
        <!-- ACCEPT >=> 6850f60d-9f1d-11ea-8bae-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.SingletonMap` / `public Set<K> keySet()`


        <!-- 6850f60e-9f1d-11ea-8baf-333445793454 <=< ACCEPT -->
        Gets the unmodifiable keySet view of the map.
        Changes made to the view affect this map.
        To simply iterate through the keys, use {@link #mapIterator()}.
        @return the keySet view
        <!-- ACCEPT >=> 6850f60e-9f1d-11ea-8baf-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.SingletonMap` / `public Collection<V> values()`


        <!-- 6850f60f-9f1d-11ea-8bb0-333445793454 <=< ACCEPT -->
        Gets the unmodifiable values view of the map.
        Changes made to the view affect this map.
        To simply iterate through the values, use {@link #mapIterator()}.
        @return the values view
        <!-- ACCEPT >=> 6850f60f-9f1d-11ea-8bb0-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.SingletonMap` / `public OrderedMapIterator<K, V> mapIterator()`


        <!-- 6850f610-9f1d-11ea-8bb1-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <!-- ACCEPT >=> 6850f610-9f1d-11ea-8bb1-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.SingletonMap` / `public K firstKey()`


        <!-- 6850f611-9f1d-11ea-8bb2-333445793454 <=< ACCEPT -->
        Gets the first (and only) key in the map.
        @return the key
        <!-- ACCEPT >=> 6850f611-9f1d-11ea-8bb2-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.SingletonMap` / `public K lastKey()`


        <!-- 6850f612-9f1d-11ea-8bb3-333445793454 <=< ACCEPT -->
        Gets the last (and only) key in the map.
        @return the key
        <!-- ACCEPT >=> 6850f612-9f1d-11ea-8bb3-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.SingletonMap` / `public K nextKey(final K key)`


        <!-- 6850f613-9f1d-11ea-8bb4-333445793454 <=< ACCEPT -->
        Gets the next key after the key specified, always null.
        @param key  the next key
        @return null always
        <!-- ACCEPT >=> 6850f613-9f1d-11ea-8bb4-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.SingletonMap` / `public K previousKey(final K key)`


        <!-- 6850f614-9f1d-11ea-8bb5-333445793454 <=< ACCEPT -->
        Gets the previous key before the key specified, always null.
        @param key  the next key
        @return null always
        <!-- ACCEPT >=> 6850f614-9f1d-11ea-8bb5-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.SingletonMap` / `protected boolean isEqualKey(final Object key)`


        <!-- 6850f615-9f1d-11ea-8bb6-333445793454 <=< ACCEPT -->
        Compares the specified key to the stored key.
        @param key  the key to compare
        @return true if equal
        <!-- ACCEPT >=> 6850f615-9f1d-11ea-8bb6-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.SingletonMap` / `protected boolean isEqualValue(final Object value)`


        <!-- 6850f616-9f1d-11ea-8bb7-333445793454 <=< ACCEPT -->
        Compares the specified value to the stored value.
        @param value  the value to compare
        @return true if equal
        <!-- ACCEPT >=> 6850f616-9f1d-11ea-8bb7-333445793454 -->



## Class: `java.org.apache.commons.collections4.map.SingletonMap` / `static class SingletonMapIterator<K, V> implements OrderedMapIterator<K, V>, ResettableIterator<K>`


        <!-- 6850f617-9f1d-11ea-8bb8-333445793454 <=< ACCEPT -->
        SingletonMapIterator.
        <!-- ACCEPT >=> 6850f617-9f1d-11ea-8bb8-333445793454 -->



## Class: `java.org.apache.commons.collections4.map.SingletonMap` / `static class SingletonValues<V> extends AbstractSet<V> implements Serializable`


        <!-- 6850f618-9f1d-11ea-8bb9-333445793454 <=< ACCEPT -->
        Values implementation for the SingletonMap.
        This class is needed as values is a view that must update as the map updates.
        <!-- ACCEPT >=> 6850f618-9f1d-11ea-8bb9-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.SingletonMap` / `public SingletonMap<K, V> clone()`


        <!-- 6850f619-9f1d-11ea-8bba-333445793454 <=< ACCEPT -->
        Clones the map without cloning the key or value.
        @return a shallow clone
        <!-- ACCEPT >=> 6850f619-9f1d-11ea-8bba-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.SingletonMap` / `public boolean equals(final Object obj)`


        <!-- 6850f61a-9f1d-11ea-8bbb-333445793454 <=< ACCEPT -->
        Compares this map with another.
        @param obj  the object to compare to
        @return true if equal
        <!-- ACCEPT >=> 6850f61a-9f1d-11ea-8bbb-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.SingletonMap` / `public int hashCode()`


        <!-- 6850f61b-9f1d-11ea-8bbc-333445793454 <=< ACCEPT -->
        Gets the standard Map hashCode.
        @return the hash code defined in the Map interface
        <!-- ACCEPT >=> 6850f61b-9f1d-11ea-8bbc-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.SingletonMap` / `public String toString()`


        <!-- 6850f61c-9f1d-11ea-8bbd-333445793454 <=< ACCEPT -->
        Gets the map as a String.
        @return a string version of the map
        <!-- ACCEPT >=> 6850f61c-9f1d-11ea-8bbd-333445793454 -->



# File: `java.org.apache.commons.collections4.map.StaticBucketMap`

## Class: `java.org.apache.commons.collections4.map.StaticBucketMap` / `public final class StaticBucketMap<K, V> extends AbstractIterableMap<K, V>`


        <!-- 6850f61d-9f1d-11ea-8bbe-333445793454 <=< ACCEPT -->
        A StaticBucketMap is an efficient, thread-safe implementation of
        <code>java.util.Map</code> that performs well in in a highly
        thread-contentious environment.  The map supports very efficient
        {@link #get(Object) get}, {@link #put(Object,Object) put},
        {@link #remove(Object) remove} and {@link #containsKey(Object) containsKey}
        operations, assuming (approximate) uniform hashing and
        that the number of entries does not exceed the number of buckets.  If the
        number of entries exceeds the number of buckets or if the hash codes of the
        objects are not uniformly distributed, these operations have a worst case
        scenario that is proportional to the number of elements in the map
        (<i>O(n)</i>).<p>
        Each bucket in the hash table has its own monitor, so two threads can
        safely operate on the map at the same time, often without incurring any
        monitor contention.  This means that you don't have to wrap instances
        of this class with {@link java.util.Collections#synchronizedMap(Map)};
        instances are already thread-safe.  Unfortunately, however, this means
        that this map implementation behaves in ways you may find disconcerting.
        Bulk operations, such as {@link #putAll(Map) putAll} or the
        {@link Collection#retainAll(Collection) retainAll} operation in collection
        views, are <i>not</i> atomic.  If two threads are simultaneously
        executing
        <pre>
        staticBucketMapInstance.putAll(map);
        </pre>
        and
        <pre>
        staticBucketMapInstance.entrySet().removeAll(map.entrySet());
        </pre>
        then the results are generally random.  Those two statement could cancel
        each other out, leaving <code>staticBucketMapInstance</code> essentially
        unchanged, or they could leave some random subset of <code>map</code> in
        <code>staticBucketMapInstance</code>.<p>
        Also, much like an encyclopedia, the results of {@link #size()} and
        {@link #isEmpty()} are out-of-date as soon as they are produced.<p>
        The iterators returned by the collection views of this class are <i>not</i>
        fail-fast.  They will <i>never</i> raise a
        {@link java.util.ConcurrentModificationException}.  Keys and values
        added to the map after the iterator is created do not necessarily appear
        during iteration.  Similarly, the iterator does not necessarily fail to
        return keys and values that were removed after the iterator was created.<p>
        Finally, unlike {@link java.util.HashMap}-style implementations, this
        class <i>never</i> rehashes the map.  The number of buckets is fixed
        at construction time and never altered.  Performance may degrade if
        you do not allocate enough buckets upfront.<p>
        The {@link #atomic(Runnable)} method is provided to allow atomic iterations
        and bulk operations; however, overuse of {@link #atomic(Runnable) atomic}
        will basically result in a map that's slower than an ordinary synchronized
        {@link java.util.HashMap}.
        Use this class if you do not require reliable bulk operations and
        iterations, or if you can make your own guarantees about how bulk
        operations will affect the map.<p>
        @since 3.0 (previously in main package v2.1)
        @version $Id$
        <!-- ACCEPT >=> 6850f61d-9f1d-11ea-8bbe-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.StaticBucketMap` / `private static final int DEFAULT_BUCKETS`


        <!-- 6850f61e-9f1d-11ea-8bbf-333445793454 <=< ACCEPT -->
        The default number of buckets to use
        <!-- ACCEPT >=> 6850f61e-9f1d-11ea-8bbf-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.StaticBucketMap` / `private final Node<K, V>[] buckets`


        <!-- 6850f61f-9f1d-11ea-8bc0-333445793454 <=< ACCEPT -->
        The array of buckets, where the actual data is held
        <!-- ACCEPT >=> 6850f61f-9f1d-11ea-8bc0-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.StaticBucketMap` / `private final Lock[] locks`


        <!-- 68511d13-9f1d-11ea-8bc1-333445793454 <=< ACCEPT -->
        The matching array of locks
        <!-- ACCEPT >=> 68511d13-9f1d-11ea-8bc1-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.StaticBucketMap` / `public StaticBucketMap()`


        <!-- 68511d14-9f1d-11ea-8bc2-333445793454 <=< ACCEPT -->
        Initializes the map with the default number of buckets (255).
        <!-- ACCEPT >=> 68511d14-9f1d-11ea-8bc2-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.StaticBucketMap` / `public StaticBucketMap(final int numBuckets)`


        <!-- 68511d15-9f1d-11ea-8bc3-333445793454 <=< ACCEPT -->
        Initializes the map with a specified number of buckets.  The number
        of buckets is never below 17, and is always an odd number (StaticBucketMap
        ensures this). The number of buckets is inversely proportional to the
        chances for thread contention.  The fewer buckets, the more chances for
        thread contention.  The more buckets the fewer chances for thread
        contention.
        @param numBuckets  the number of buckets for this map
        <!-- ACCEPT >=> 68511d15-9f1d-11ea-8bc3-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.StaticBucketMap` / `private int getHash(final Object key)`


        <!-- 68511d16-9f1d-11ea-8bc4-333445793454 <=< ACCEPT -->
        Determine the exact hash entry for the key.  The hash algorithm
        is rather simplistic, but it does the job:
        <pre>
        He = |Hk mod n|
        </pre>
        <p>
        He is the entry's hashCode, Hk is the key's hashCode, and n is
        the number of buckets.
        </p>
        <!-- ACCEPT >=> 68511d16-9f1d-11ea-8bc4-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.StaticBucketMap` / `public int size()`


        <!-- 68511d17-9f1d-11ea-8bc5-333445793454 <=< ACCEPT -->
        Gets the current size of the map.
        The value is computed fresh each time the method is called.
        @return the current size
        <!-- ACCEPT >=> 68511d17-9f1d-11ea-8bc5-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.StaticBucketMap` / `public boolean isEmpty()`


        <!-- 68511d18-9f1d-11ea-8bc6-333445793454 <=< ACCEPT -->
        Checks if the size is currently zero.
        @return true if empty
        <!-- ACCEPT >=> 68511d18-9f1d-11ea-8bc6-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.StaticBucketMap` / `public V get(final Object key)`


        <!-- 68511d19-9f1d-11ea-8bc7-333445793454 <=< ACCEPT -->
        Gets the value associated with the key.
        @param key  the key to retrieve
        @return the associated value
        <!-- ACCEPT >=> 68511d19-9f1d-11ea-8bc7-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.StaticBucketMap` / `public boolean containsKey(final Object key)`


        <!-- 68511d1a-9f1d-11ea-8bc8-333445793454 <=< ACCEPT -->
        Checks if the map contains the specified key.
        @param key  the key to check
        @return true if found
        <!-- ACCEPT >=> 68511d1a-9f1d-11ea-8bc8-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.StaticBucketMap` / `public boolean containsValue(final Object value)`


        <!-- 68511d1b-9f1d-11ea-8bc9-333445793454 <=< ACCEPT -->
        Checks if the map contains the specified value.
        @param value  the value to check
        @return true if found
        <!-- ACCEPT >=> 68511d1b-9f1d-11ea-8bc9-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.StaticBucketMap` / `public V put(final K key, final V value)`


        <!-- 68511d1c-9f1d-11ea-8bca-333445793454 <=< ACCEPT -->
        Puts a new key value mapping into the map.
        @param key  the key to use
        @param value  the value to use
        @return the previous mapping for the key
        <!-- ACCEPT >=> 68511d1c-9f1d-11ea-8bca-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.StaticBucketMap` / `public V remove(final Object key)`


        <!-- 68511d1d-9f1d-11ea-8bcb-333445793454 <=< ACCEPT -->
        Removes the specified key from the map.
        @param key  the key to remove
        @return the previous value at this key
        <!-- ACCEPT >=> 68511d1d-9f1d-11ea-8bcb-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.StaticBucketMap` / `public Set<K> keySet()`


        <!-- 68511d1e-9f1d-11ea-8bcc-333445793454 <=< ACCEPT -->
        Gets the key set.
        @return the key set
        <!-- ACCEPT >=> 68511d1e-9f1d-11ea-8bcc-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.StaticBucketMap` / `public Collection<V> values()`


        <!-- 68511d1f-9f1d-11ea-8bcd-333445793454 <=< ACCEPT -->
        Gets the values.
        @return the values
        <!-- ACCEPT >=> 68511d1f-9f1d-11ea-8bcd-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.StaticBucketMap` / `public Set<Map.Entry<K, V>> entrySet()`


        <!-- 68511d20-9f1d-11ea-8bce-333445793454 <=< ACCEPT -->
        Gets the entry set.
        @return the entry set
        <!-- ACCEPT >=> 68511d20-9f1d-11ea-8bce-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.StaticBucketMap` / `public void putAll(final Map<? extends K, ? extends V> map)`


        <!-- 68511d21-9f1d-11ea-8bcf-333445793454 <=< ACCEPT -->
        Puts all the entries from the specified map into this map.
        This operation is <b>not atomic</b> and may have undesired effects.
        @param map  the map of entries to add
        <!-- ACCEPT >=> 68511d21-9f1d-11ea-8bcf-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.StaticBucketMap` / `public void clear()`


        <!-- 68511d22-9f1d-11ea-8bd0-333445793454 <=< ACCEPT -->
        Clears the map of all entries.
        <!-- ACCEPT >=> 68511d22-9f1d-11ea-8bd0-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.StaticBucketMap` / `public boolean equals(final Object obj)`


        <!-- 68511d23-9f1d-11ea-8bd1-333445793454 <=< ACCEPT -->
        Compares this map to another, as per the Map specification.
        @param obj  the object to compare to
        @return true if equal
        <!-- ACCEPT >=> 68511d23-9f1d-11ea-8bd1-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.StaticBucketMap` / `public int hashCode()`


        <!-- 68511d24-9f1d-11ea-8bd2-333445793454 <=< ACCEPT -->
        Gets the hash code, as per the Map specification.
        @return the hash code
        <!-- ACCEPT >=> 68511d24-9f1d-11ea-8bd2-333445793454 -->



## Class: `java.org.apache.commons.collections4.map.StaticBucketMap` / `private static final class Node<K, V> implements Map.Entry<K, V>, KeyValue<K, V>`


        <!-- 68511d25-9f1d-11ea-8bd3-333445793454 <=< ACCEPT -->
        The Map.Entry for the StaticBucketMap.
        <!-- ACCEPT >=> 68511d25-9f1d-11ea-8bd3-333445793454 -->



## Class: `java.org.apache.commons.collections4.map.StaticBucketMap` / `private final static class Lock`


        <!-- 68511d26-9f1d-11ea-8bd4-333445793454 <=< ACCEPT -->
        The lock object, which also includes a count of the nodes in this lock.
        <!-- ACCEPT >=> 68511d26-9f1d-11ea-8bd4-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.StaticBucketMap` / `public void atomic(final Runnable r)`


        <!-- 68511d27-9f1d-11ea-8bd5-333445793454 <=< ACCEPT -->
        Prevents any operations from occurring on this map while the
        given {@link Runnable} executes.  This method can be used, for
        instance, to execute a bulk operation atomically:
        <pre>
        staticBucketMapInstance.atomic(new Runnable() {
        public void run() {
        staticBucketMapInstance.putAll(map);
        }
        });
        </pre>
        It can also be used if you need a reliable iterator:
        <pre>
        staticBucketMapInstance.atomic(new Runnable() {
        public void run() {
        Iterator iterator = staticBucketMapInstance.iterator();
        while (iterator.hasNext()) {
        foo(iterator.next();
        }
        }
        });
        </pre>
        <b>Implementation note:</b> This method requires a lot of time
        and a ton of stack space.  Essentially a recursive algorithm is used
        to enter each bucket's monitor.  If you have twenty thousand buckets
        in your map, then the recursive method will be invoked twenty thousand
        times.  You have been warned.
        @param r  the code to execute atomically
        <!-- ACCEPT >=> 68511d27-9f1d-11ea-8bd5-333445793454 -->



# File: `java.org.apache.commons.collections4.map.TransformedMap`

## Class: `java.org.apache.commons.collections4.map.TransformedMap` / `implements Serializable`


        <!-- 68511d28-9f1d-11ea-8bd6-333445793454 <=< ACCEPT -->
        Decorates another <code>Map</code> to transform objects that are added.
        <p>
        The Map put methods and Map.Entry setValue method are affected by this class.
        Thus objects must be removed or searched for using their transformed form.
        For example, if the transformation converts Strings to Integers, you must
        use the Integer form to remove objects.
        <p>
        <strong>Note that TransformedMap is not synchronized and is not thread-safe.</strong>
        If you wish to use this map from multiple threads concurrently, you must use
        appropriate synchronization. The simplest approach is to wrap this map
        using {@link java.util.Collections#synchronizedMap(Map)}. This class may throw
        exceptions when accessed by concurrent threads without synchronization.
        <p>
        This class is Serializable from Commons Collections 3.1.
        <p>
        @see org.apache.commons.collections4.splitmap.TransformedSplitMap
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 68511d28-9f1d-11ea-8bd6-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.TransformedMap` / `private static final long serialVersionUID`


        <!-- 6851441e-9f1d-11ea-8bd7-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 6851441e-9f1d-11ea-8bd7-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.TransformedMap` / `protected final Transformer<? super K, ? extends K> keyTransformer`


        <!-- 6851441f-9f1d-11ea-8bd8-333445793454 <=< ACCEPT -->
        The transformer to use for the key
        <!-- ACCEPT >=> 6851441f-9f1d-11ea-8bd8-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.TransformedMap` / `protected final Transformer<? super V, ? extends V> valueTransformer`


        <!-- 68514420-9f1d-11ea-8bd9-333445793454 <=< ACCEPT -->
        The transformer to use for the value
        <!-- ACCEPT >=> 68514420-9f1d-11ea-8bd9-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.TransformedMap` / `final Transformer<? super V, ? extends V> valueTransformer)`


        <!-- 68514421-9f1d-11ea-8bda-333445793454 <=< ACCEPT -->
        Factory method to create a transforming map.
        <p>
        If there are any elements already in the map being decorated, they
        are NOT transformed.
        Contrast this with {@link #transformedMap(Map, Transformer, Transformer)}.
        @param <K>  the key type
        @param <V>  the value type
        @param map  the map to decorate, must not be null
        @param keyTransformer  the transformer to use for key conversion, null means no transformation
        @param valueTransformer  the transformer to use for value conversion, null means no transformation
        @return a new transformed map
        @throws NullPointerException if map is null
        @since 4.0
        <!-- ACCEPT >=> 68514421-9f1d-11ea-8bda-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.TransformedMap` / `final Transformer<? super V, ? extends V> valueTransformer)`


        <!-- 68514422-9f1d-11ea-8bdb-333445793454 <=< ACCEPT -->
        Factory method to create a transforming map that will transform
        existing contents of the specified map.
        <p>
        If there are any elements already in the map being decorated, they
        will be transformed by this method.
        Contrast this with {@link #transformingMap(Map, Transformer, Transformer)}.
        @param <K>  the key type
        @param <V>  the value type
        @param map  the map to decorate, must not be null
        @param keyTransformer  the transformer to use for key conversion, null means no transformation
        @param valueTransformer  the transformer to use for value conversion, null means no transformation
        @return a new transformed map
        @throws NullPointerException if map is null
        @since 4.0
        <!-- ACCEPT >=> 68514422-9f1d-11ea-8bdb-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.TransformedMap` / `final Transformer<? super V, ? extends V> valueTransformer)`


        <!-- 68514423-9f1d-11ea-8bdc-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        <p>
        If there are any elements already in the collection being decorated, they
        are NOT transformed.
        @param map  the map to decorate, must not be null
        @param keyTransformer  the transformer to use for key conversion, null means no conversion
        @param valueTransformer  the transformer to use for value conversion, null means no conversion
        @throws NullPointerException if map is null
        <!-- ACCEPT >=> 68514423-9f1d-11ea-8bdc-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.TransformedMap` / `private void writeObject(final ObjectOutputStream out) throws IOException`


        <!-- 68514424-9f1d-11ea-8bdd-333445793454 <=< ACCEPT -->
        Write the map out using a custom routine.
        @param out  the output stream
        @throws IOException
        @since 3.1
        <!-- ACCEPT >=> 68514424-9f1d-11ea-8bdd-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.TransformedMap` / `private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException`


        <!-- 68514425-9f1d-11ea-8bde-333445793454 <=< ACCEPT -->
        Read the map in using a custom routine.
        @param in  the input stream
        @throws IOException
        @throws ClassNotFoundException
        @since 3.1
        <!-- ACCEPT >=> 68514425-9f1d-11ea-8bde-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.TransformedMap` / `protected K transformKey(final K object)`


        <!-- 68514426-9f1d-11ea-8bdf-333445793454 <=< ACCEPT -->
        Transforms a key.
        <p>
        The transformer itself may throw an exception if necessary.
        @param object  the object to transform
        @return the transformed object
        <!-- ACCEPT >=> 68514426-9f1d-11ea-8bdf-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.TransformedMap` / `protected V transformValue(final V object)`


        <!-- 68514427-9f1d-11ea-8be0-333445793454 <=< ACCEPT -->
        Transforms a value.
        <p>
        The transformer itself may throw an exception if necessary.
        @param object  the object to transform
        @return the transformed object
        <!-- ACCEPT >=> 68514427-9f1d-11ea-8be0-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.TransformedMap` / `protected Map<K, V> transformMap(final Map<? extends K, ? extends V> map)`


        <!-- 68514428-9f1d-11ea-8be1-333445793454 <=< ACCEPT -->
        Transforms a map.
        <p>
        The transformer itself may throw an exception if necessary.
        @param map  the map to transform
        @return the transformed object
        <!-- ACCEPT >=> 68514428-9f1d-11ea-8be1-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.TransformedMap` / `protected V checkSetValue(final V value)`


        <!-- 68514429-9f1d-11ea-8be2-333445793454 <=< ACCEPT -->
        Override to transform the value when using <code>setValue</code>.
        @param value  the value to transform
        @return the transformed value
        @since 3.1
        <!-- ACCEPT >=> 68514429-9f1d-11ea-8be2-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.TransformedMap` / `protected boolean isSetValueChecking()`


        <!-- 6851442a-9f1d-11ea-8be3-333445793454 <=< ACCEPT -->
        Override to only return true when there is a value transformer.
        @return true if a value transformer is in use
        @since 3.1
        <!-- ACCEPT >=> 6851442a-9f1d-11ea-8be3-333445793454 -->



# File: `java.org.apache.commons.collections4.map.TransformedSortedMap`

## Class: `java.org.apache.commons.collections4.map.TransformedSortedMap` / `implements SortedMap<K, V>`


        <!-- 6851442b-9f1d-11ea-8be4-333445793454 <=< ACCEPT -->
        Decorates another <code>SortedMap </code> to transform objects that are added.
        <p>
        The Map put methods and Map.Entry setValue method are affected by this class.
        Thus objects must be removed or searched for using their transformed form.
        For example, if the transformation converts Strings to Integers, you must
        use the Integer form to remove objects.
        <p>
        <strong>Note that TransformedSortedMap is not synchronized and is not thread-safe.</strong>
        If you wish to use this map from multiple threads concurrently, you must use
        appropriate synchronization. The simplest approach is to wrap this map
        using {@link java.util.Collections#synchronizedSortedMap}. This class may throw
        exceptions when accessed by concurrent threads without synchronization.
        <p>
        This class is Serializable from Commons Collections 3.1.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 6851442b-9f1d-11ea-8be4-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.TransformedSortedMap` / `private static final long serialVersionUID`


        <!-- 6851442c-9f1d-11ea-8be5-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 6851442c-9f1d-11ea-8be5-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.TransformedSortedMap` / `final Transformer<? super V, ? extends V> valueTransformer)`


        <!-- 6851442d-9f1d-11ea-8be6-333445793454 <=< ACCEPT -->
        Factory method to create a transforming sorted map.
        <p>
        If there are any elements already in the map being decorated, they are NOT transformed.
        Contrast this with {@link #transformedSortedMap(SortedMap, Transformer, Transformer)}.
        @param <K>  the key type
        @param <V>  the value type
        @param map  the map to decorate, must not be null
        @param keyTransformer  the predicate to validate the keys, null means no transformation
        @param valueTransformer  the predicate to validate to values, null means no transformation
        @return a new transformed sorted map
        @throws NullPointerException if the map is null
        @since 4.0
        <!-- ACCEPT >=> 6851442d-9f1d-11ea-8be6-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.TransformedSortedMap` / `final Transformer<? super V, ? extends V> valueTransformer)`


        <!-- 6851442e-9f1d-11ea-8be7-333445793454 <=< ACCEPT -->
        Factory method to create a transforming sorted map that will transform
        existing contents of the specified map.
        <p>
        If there are any elements already in the map being decorated, they
        will be transformed by this method.
        Contrast this with {@link #transformingSortedMap(SortedMap, Transformer, Transformer)}.
        @param <K>  the key type
        @param <V>  the value type
        @param map  the map to decorate, must not be null
        @param keyTransformer  the transformer to use for key conversion, null means no transformation
        @param valueTransformer  the transformer to use for value conversion, null means no transformation
        @return a new transformed sorted map
        @throws NullPointerException if map is null
        @since 4.0
        <!-- ACCEPT >=> 6851442e-9f1d-11ea-8be7-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.TransformedSortedMap` / `final Transformer<? super V, ? extends V> valueTransformer)`


        <!-- 6851442f-9f1d-11ea-8be8-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        <p>
        If there are any elements already in the collection being decorated, they
        are NOT transformed.</p>
        @param map  the map to decorate, must not be null
        @param keyTransformer  the predicate to validate the keys, null means no transformation
        @param valueTransformer  the predicate to validate to values, null means no transformation
        @throws NullPointerException if the map is null
        <!-- ACCEPT >=> 6851442f-9f1d-11ea-8be8-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.TransformedSortedMap` / `protected SortedMap<K, V> getSortedMap()`


        <!-- 68514430-9f1d-11ea-8be9-333445793454 <=< ACCEPT -->
        Gets the map being decorated.
        @return the decorated map
        <!-- ACCEPT >=> 68514430-9f1d-11ea-8be9-333445793454 -->



# File: `java.org.apache.commons.collections4.map.UnmodifiableEntrySet`

## Class: `java.org.apache.commons.collections4.map.UnmodifiableEntrySet` / `extends AbstractSetDecorator<Map.Entry<K, V>> implements Unmodifiable`


        <!-- 68516b27-9f1d-11ea-8bea-333445793454 <=< ACCEPT -->
        Decorates a map entry <code>Set</code> to ensure it can't be altered.
        <p>
        Attempts to modify it will result in an UnsupportedOperationException.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 68516b27-9f1d-11ea-8bea-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.UnmodifiableEntrySet` / `private static final long serialVersionUID`


        <!-- 68516b28-9f1d-11ea-8beb-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 68516b28-9f1d-11ea-8beb-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.UnmodifiableEntrySet` / `public static <K, V> Set<Map.Entry<K, V>> unmodifiableEntrySet(final Set<Map.Entry<K, V>> set)`


        <!-- 68516b29-9f1d-11ea-8bec-333445793454 <=< ACCEPT -->
        Factory method to create an unmodifiable set of Map Entry objects.
        @param <K>  the key type
        @param <V>  the value type
        @param set  the set to decorate, must not be null
        @return a new unmodifiable entry set
        @throws NullPointerException if set is null
        @since 4.0
        <!-- ACCEPT >=> 68516b29-9f1d-11ea-8bec-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.UnmodifiableEntrySet` / `private UnmodifiableEntrySet(final Set<Map.Entry<K, V>> set)`


        <!-- 68516b2a-9f1d-11ea-8bed-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param set  the set to decorate, must not be null
        @throws NullPointerException if set is null
        <!-- ACCEPT >=> 68516b2a-9f1d-11ea-8bed-333445793454 -->



## Class: `java.org.apache.commons.collections4.map.UnmodifiableEntrySet` / `private class UnmodifiableEntrySetIterator extends AbstractIteratorDecorator<Map.Entry<K, V>>`


        <!-- 68516b2b-9f1d-11ea-8bee-333445793454 <=< ACCEPT -->
        Implementation of an entry set iterator.
        <!-- ACCEPT >=> 68516b2b-9f1d-11ea-8bee-333445793454 -->



## Class: `java.org.apache.commons.collections4.map.UnmodifiableEntrySet` / `private class UnmodifiableEntry extends AbstractMapEntryDecorator<K, V>`


        <!-- 68516b2c-9f1d-11ea-8bef-333445793454 <=< ACCEPT -->
        Implementation of a map entry that is unmodifiable.
        <!-- ACCEPT >=> 68516b2c-9f1d-11ea-8bef-333445793454 -->



# File: `java.org.apache.commons.collections4.map.UnmodifiableMap`

## Class: `java.org.apache.commons.collections4.map.UnmodifiableMap` / `implements Unmodifiable, Serializable`


        <!-- 68516b2d-9f1d-11ea-8bf0-333445793454 <=< ACCEPT -->
        Decorates another <code>Map</code> to ensure it can't be altered.
        <p>
        This class is Serializable from Commons Collections 3.1.
        <p>
        Attempts to modify it will result in an UnsupportedOperationException.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 68516b2d-9f1d-11ea-8bf0-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.UnmodifiableMap` / `private static final long serialVersionUID`


        <!-- 68516b2e-9f1d-11ea-8bf1-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 68516b2e-9f1d-11ea-8bf1-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.UnmodifiableMap` / `public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)`


        <!-- 68516b2f-9f1d-11ea-8bf2-333445793454 <=< ACCEPT -->
        Factory method to create an unmodifiable map.
        @param <K>  the key type
        @param <V>  the value type
        @param map  the map to decorate, must not be null
        @return a new unmodifiable map
        @throws NullPointerException if map is null
        @since 4.0
        <!-- ACCEPT >=> 68516b2f-9f1d-11ea-8bf2-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.UnmodifiableMap` / `private UnmodifiableMap(final Map<? extends K, ? extends V> map)`


        <!-- 68516b30-9f1d-11ea-8bf3-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param map  the map to decorate, must not be null
        @throws NullPointerException if map is null
        <!-- ACCEPT >=> 68516b30-9f1d-11ea-8bf3-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.UnmodifiableMap` / `private void writeObject(final ObjectOutputStream out) throws IOException`


        <!-- 68516b31-9f1d-11ea-8bf4-333445793454 <=< ACCEPT -->
        Write the map out using a custom routine.
        @param out  the output stream
        @throws IOException
        @since 3.1
        <!-- ACCEPT >=> 68516b31-9f1d-11ea-8bf4-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.UnmodifiableMap` / `private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException`


        <!-- 68516b32-9f1d-11ea-8bf5-333445793454 <=< ACCEPT -->
        Read the map in using a custom routine.
        @param in  the input stream
        @throws IOException
        @throws ClassNotFoundException
        @since 3.1
        <!-- ACCEPT >=> 68516b32-9f1d-11ea-8bf5-333445793454 -->



# File: `java.org.apache.commons.collections4.map.UnmodifiableOrderedMap`

## Class: `java.org.apache.commons.collections4.map.UnmodifiableOrderedMap` / `Unmodifiable, Serializable`


        <!-- 68516b33-9f1d-11ea-8bf6-333445793454 <=< ACCEPT -->
        Decorates another <code>OrderedMap</code> to ensure it can't be altered.
        <p>
        This class is Serializable from Commons Collections 3.1.
        <p>
        Attempts to modify it will result in an UnsupportedOperationException.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 68516b33-9f1d-11ea-8bf6-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.UnmodifiableOrderedMap` / `private static final long serialVersionUID`


        <!-- 68516b34-9f1d-11ea-8bf7-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 68516b34-9f1d-11ea-8bf7-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.UnmodifiableOrderedMap` / `public static <K, V> OrderedMap<K, V> unmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map)`


        <!-- 68516b35-9f1d-11ea-8bf8-333445793454 <=< ACCEPT -->
        Factory method to create an unmodifiable sorted map.
        @param <K>  the key type
        @param <V>  the value type
        @param map  the map to decorate, must not be null
        @return a new ordered map
        @throws NullPointerException if map is null
        @since 4.0
        <!-- ACCEPT >=> 68516b35-9f1d-11ea-8bf8-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.UnmodifiableOrderedMap` / `private UnmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map)`


        <!-- 68516b36-9f1d-11ea-8bf9-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param map  the map to decorate, must not be null
        @throws NullPointerException if map is null
        <!-- ACCEPT >=> 68516b36-9f1d-11ea-8bf9-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.UnmodifiableOrderedMap` / `private void writeObject(final ObjectOutputStream out) throws IOException`


        <!-- 68516b37-9f1d-11ea-8bfa-333445793454 <=< ACCEPT -->
        Write the map out using a custom routine.
        @param out  the output stream
        @throws IOException
        @since 3.1
        <!-- ACCEPT >=> 68516b37-9f1d-11ea-8bfa-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.UnmodifiableOrderedMap` / `private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException`


        <!-- 68516b38-9f1d-11ea-8bfb-333445793454 <=< ACCEPT -->
        Read the map in using a custom routine.
        @param in  the input stream
        @throws IOException
        @throws ClassNotFoundException
        @since 3.1
        <!-- ACCEPT >=> 68516b38-9f1d-11ea-8bfb-333445793454 -->



# File: `java.org.apache.commons.collections4.map.UnmodifiableSortedMap`

## Class: `java.org.apache.commons.collections4.map.UnmodifiableSortedMap` / `implements Unmodifiable, Serializable`


        <!-- 6851922e-9f1d-11ea-8bfc-333445793454 <=< ACCEPT -->
        Decorates another <code>SortedMap</code> to ensure it can't be altered.
        <p>
        This class is Serializable from Commons Collections 3.1.
        <p>
        Attempts to modify it will result in an UnsupportedOperationException.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 6851922e-9f1d-11ea-8bfc-333445793454 -->



## Field: `java.org.apache.commons.collections4.map.UnmodifiableSortedMap` / `private static final long serialVersionUID`


        <!-- 6851922f-9f1d-11ea-8bfd-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 6851922f-9f1d-11ea-8bfd-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.UnmodifiableSortedMap` / `public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)`


        <!-- 68519230-9f1d-11ea-8bfe-333445793454 <=< ACCEPT -->
        Factory method to create an unmodifiable sorted map.
        @param <K>  the key type
        @param <V>  the value type
        @param map  the map to decorate, must not be null
        @return a new unmodifiable sorted map
        @throws NullPointerException if map is null
        @since 4.0
        <!-- ACCEPT >=> 68519230-9f1d-11ea-8bfe-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.map.UnmodifiableSortedMap` / `private UnmodifiableSortedMap(final SortedMap<K, ? extends V> map)`


        <!-- 68519231-9f1d-11ea-8bff-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param map  the map to decorate, must not be null
        @throws NullPointerException if map is null
        <!-- ACCEPT >=> 68519231-9f1d-11ea-8bff-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.UnmodifiableSortedMap` / `private void writeObject(final ObjectOutputStream out) throws IOException`


        <!-- 68519232-9f1d-11ea-8c00-333445793454 <=< ACCEPT -->
        Write the map out using a custom routine.
        @param out  the output stream
        @throws IOException
        @since 3.1
        <!-- ACCEPT >=> 68519232-9f1d-11ea-8c00-333445793454 -->



## Method: `java.org.apache.commons.collections4.map.UnmodifiableSortedMap` / `private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException`


        <!-- 68519233-9f1d-11ea-8c01-333445793454 <=< ACCEPT -->
        Read the map in using a custom routine.
        @param in  the input stream
        @throws IOException
        @throws ClassNotFoundException
        @since 3.1
        <!-- ACCEPT >=> 68519233-9f1d-11ea-8c01-333445793454 -->



# File: `java.org.apache.commons.collections4.map.package-info`

## Package: `java.org.apache.commons.collections4.map.package-info` / `package org.apache.commons.collections4.map`


        <!-- 68519234-9f1d-11ea-8c02-333445793454 <=< ACCEPT -->
        This package contains implementations of the {@link java.util.Map Map},
        {@link org.apache.commons.collections4.IterableMap IterableMap},
        {@link org.apache.commons.collections4.OrderedMap OrderedMap} and
        {@link java.util.SortedMap SortedMap} interfaces.
        A Map provides a lookup from a key to a value.
        A number of implementations also support the new MapIterator interface that enables
        simple iteration of map keys and values.
        <p>
        The following implementations are provided:
        <ul>
        <li>CaseInsensitiveMap - map that compares keys in a case insensitive way
        <li>CompositeMap - map that combines multiple maps into a single view
        <li>HashedMap - general purpose HashMap replacement supporting MapIterator
        <li>Flat3Map - designed for good performance at size 3 or less
        <li>LinkedMap - a hash map that maintains insertion order, supporting OrderedMapIterator
        <li>LRUMap - a hash map that maintains a maximum size by removing the least recently used entries
        <li>MultiKeyMap - map that provides special methods for using more than one key to access the value
        <li>ReferenceMap - allows the garbage collector to collect keys and values using equals() for comparison
        <li>ReferenceIdentityMap - allows the garbage collector to collect keys and values using == for comparison
        <li>SingletonMap - a fully featured map to hold one key-value pair
        <li>StaticBucketMap - internally synchronized and designed for thread-contentious environments
        </ul>
        <p>
        The following decorators are provided:
        <ul>
        <li>Unmodifiable - ensures the collection cannot be altered
        <li>Predicated - ensures that only elements that are valid according to a predicate can be added
        <li>Transformed - transforms each element added
        <li>FixedSize - ensures that the size of the map cannot change
        <li>Defaulted - provides default values for non-existing keys
        <li>Lazy - creates objects in the map on demand
        <li>ListOrdered - ensures that insertion order is retained
        </ul>
        @version $Id$
        <!-- ACCEPT >=> 68519234-9f1d-11ea-8c02-333445793454 -->



# File: `java.org.apache.commons.collections4.multimap.AbstractListValuedMap`

## Class: `java.org.apache.commons.collections4.multimap.AbstractListValuedMap` / `implements ListValuedMap<K, V>`


        <!-- 68519235-9f1d-11ea-8c03-333445793454 <=< ACCEPT -->
        Abstract implementation of the {@link ListValuedMap} interface to simplify
        the creation of subclass implementations.
        <p>
        Subclasses specify a Map implementation to use as the internal storage and
        the List implementation to use as values.
        @since 4.1
        @version $Id$
        <!-- ACCEPT >=> 68519235-9f1d-11ea-8c03-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.multimap.AbstractListValuedMap` / `protected AbstractListValuedMap()`


        <!-- 68519236-9f1d-11ea-8c04-333445793454 <=< ACCEPT -->
        Constructor needed for subclass serialisation.
        <!-- ACCEPT >=> 68519236-9f1d-11ea-8c04-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.multimap.AbstractListValuedMap` / `protected AbstractListValuedMap(final Map<K, ? extends List<V>> map)`


        <!-- 68519237-9f1d-11ea-8c05-333445793454 <=< ACCEPT -->
        A constructor that wraps, not copies
        @param map  the map to wrap, must not be null
        @throws NullPointerException if the map is null
        <!-- ACCEPT >=> 68519237-9f1d-11ea-8c05-333445793454 -->



## Method: `java.org.apache.commons.collections4.multimap.AbstractListValuedMap` / `protected abstract List<V> createCollection()`


        <!-- 68519238-9f1d-11ea-8c06-333445793454 <=< ACCEPT -->
        Creates a new value collection using the provided factory.
        @return a new list
        <!-- ACCEPT >=> 68519238-9f1d-11ea-8c06-333445793454 -->



## Method: `java.org.apache.commons.collections4.multimap.AbstractListValuedMap` / `public List<V> get(final K key)`


        <!-- 68519239-9f1d-11ea-8c07-333445793454 <=< ACCEPT -->
        Gets the list of values associated with the specified key. This would
        return an empty list in case the mapping is not present
        @param key  the key to retrieve
        @return the {@code List} of values, will return an empty {@link List} for no mapping
        <!-- ACCEPT >=> 68519239-9f1d-11ea-8c07-333445793454 -->



## Method: `java.org.apache.commons.collections4.multimap.AbstractListValuedMap` / `public List<V> remove(Object key)`


        <!-- 6851923a-9f1d-11ea-8c08-333445793454 <=< ACCEPT -->
        Removes all values associated with the specified key.
        <p>
        A subsequent <code>get(Object)</code> would return an empty list.
        @param key  the key to remove values from
        @return the <code>List</code> of values removed, will return an empty,
        unmodifiable list for no mapping found.
        <!-- ACCEPT >=> 6851923a-9f1d-11ea-8c08-333445793454 -->



## Class: `java.org.apache.commons.collections4.multimap.AbstractListValuedMap` / `private class WrappedList extends WrappedCollection implements List<V>`


        <!-- 6851923b-9f1d-11ea-8c09-333445793454 <=< ACCEPT -->
        Wrapped list to handle add and remove on the list returned by get(object)
        <!-- ACCEPT >=> 6851923b-9f1d-11ea-8c09-333445793454 -->



## Class: `java.org.apache.commons.collections4.multimap.AbstractListValuedMap` / `private class ValuesListIterator implements ListIterator<V>`


        <!-- 6851923c-9f1d-11ea-8c0a-333445793454 <=< ACCEPT -->
        Values ListIterator
        <!-- ACCEPT >=> 6851923c-9f1d-11ea-8c0a-333445793454 -->



# File: `java.org.apache.commons.collections4.multimap.AbstractMultiValuedMap`

## Class: `java.org.apache.commons.collections4.multimap.AbstractMultiValuedMap` / `public abstract class AbstractMultiValuedMap<K, V> implements MultiValuedMap<K, V>`


        <!-- 6851923d-9f1d-11ea-8c0b-333445793454 <=< ACCEPT -->
        Abstract implementation of the {@link MultiValuedMap} interface to simplify
        the creation of subclass implementations.
        <p>
        Subclasses specify a Map implementation to use as the internal storage.
        @since 4.1
        @version $Id$
        <!-- ACCEPT >=> 6851923d-9f1d-11ea-8c0b-333445793454 -->



## Field: `java.org.apache.commons.collections4.multimap.AbstractMultiValuedMap` / `private transient Collection<V> valuesView`


        <!-- 6851b957-9f1d-11ea-8c0c-333445793454 <=< ACCEPT -->
        The values view
        <!-- ACCEPT >=> 6851b957-9f1d-11ea-8c0c-333445793454 -->



## Field: `java.org.apache.commons.collections4.multimap.AbstractMultiValuedMap` / `private transient EntryValues entryValuesView`


        <!-- 6851b958-9f1d-11ea-8c0d-333445793454 <=< ACCEPT -->
        The EntryValues view
        <!-- ACCEPT >=> 6851b958-9f1d-11ea-8c0d-333445793454 -->



## Field: `java.org.apache.commons.collections4.multimap.AbstractMultiValuedMap` / `private transient MultiSet<K> keysMultiSetView`


        <!-- 6851b959-9f1d-11ea-8c0e-333445793454 <=< ACCEPT -->
        The KeyMultiSet view
        <!-- ACCEPT >=> 6851b959-9f1d-11ea-8c0e-333445793454 -->



## Field: `java.org.apache.commons.collections4.multimap.AbstractMultiValuedMap` / `private transient AsMap asMapView`


        <!-- 6851b95a-9f1d-11ea-8c0f-333445793454 <=< ACCEPT -->
        The AsMap view
        <!-- ACCEPT >=> 6851b95a-9f1d-11ea-8c0f-333445793454 -->



## Field: `java.org.apache.commons.collections4.multimap.AbstractMultiValuedMap` / `private transient Map<K, Collection<V>> map`


        <!-- 6851b95b-9f1d-11ea-8c10-333445793454 <=< ACCEPT -->
        The map used to store the data
        <!-- ACCEPT >=> 6851b95b-9f1d-11ea-8c10-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.multimap.AbstractMultiValuedMap` / `protected AbstractMultiValuedMap()`


        <!-- 6851b95c-9f1d-11ea-8c11-333445793454 <=< ACCEPT -->
        Constructor needed for subclass serialisation.
        <!-- ACCEPT >=> 6851b95c-9f1d-11ea-8c11-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.multimap.AbstractMultiValuedMap` / `protected AbstractMultiValuedMap(final Map<K, ? extends Collection<V>> map)`


        <!-- 6851b95d-9f1d-11ea-8c12-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param map  the map to wrap, must not be null
        @throws NullPointerException if the map is null
        <!-- ACCEPT >=> 6851b95d-9f1d-11ea-8c12-333445793454 -->



## Method: `java.org.apache.commons.collections4.multimap.AbstractMultiValuedMap` / `protected Map<K, ? extends Collection<V>> getMap()`


        <!-- 6851b95e-9f1d-11ea-8c13-333445793454 <=< ACCEPT -->
        Gets the map being wrapped.
        @return the wrapped map
        <!-- ACCEPT >=> 6851b95e-9f1d-11ea-8c13-333445793454 -->



## Method: `java.org.apache.commons.collections4.multimap.AbstractMultiValuedMap` / `protected void setMap(Map<K, ? extends Collection<V>> map)`


        <!-- 6851b95f-9f1d-11ea-8c14-333445793454 <=< ACCEPT -->
        Sets the map being wrapped.
        <p>
        <b>NOTE:</b> this method should only be used during deserialization
        @param map the map to wrap
        <!-- ACCEPT >=> 6851b95f-9f1d-11ea-8c14-333445793454 -->



## Method: `java.org.apache.commons.collections4.multimap.AbstractMultiValuedMap` / `public Collection<V> get(final K key)`


        <!-- 6851b960-9f1d-11ea-8c15-333445793454 <=< ACCEPT -->
        Gets the collection of values associated with the specified key. This
        would return an empty collection in case the mapping is not present
        @param key the key to retrieve
        @return the {@code Collection} of values, will return an empty {@code Collection} for no mapping
        <!-- ACCEPT >=> 6851b960-9f1d-11ea-8c15-333445793454 -->



## Method: `java.org.apache.commons.collections4.multimap.AbstractMultiValuedMap` / `public Collection<V> remove(Object key)`


        <!-- 6851b961-9f1d-11ea-8c16-333445793454 <=< ACCEPT -->
        Removes all values associated with the specified key.
        <p>
        A subsequent <code>get(Object)</code> would return an empty collection.
        @param key  the key to remove values from
        @return the <code>Collection</code> of values removed, will return an
        empty, unmodifiable collection for no mapping found
        <!-- ACCEPT >=> 6851b961-9f1d-11ea-8c16-333445793454 -->



## Method: `java.org.apache.commons.collections4.multimap.AbstractMultiValuedMap` / `public boolean removeMapping(final Object key, final Object value)`


        <!-- 6851b962-9f1d-11ea-8c17-333445793454 <=< ACCEPT -->
        Removes a specific key/value mapping from the multi-valued map.
        <p>
        The value is removed from the collection mapped to the specified key.
        Other values attached to that key are unaffected.
        <p>
        If the last value for a key is removed, an empty collection would be
        returned from a subsequent {@link #get(Object)}.
        @param key the key to remove from
        @param value the value to remove
        @return true if the mapping was removed, false otherwise
        <!-- ACCEPT >=> 6851b962-9f1d-11ea-8c17-333445793454 -->



## Method: `java.org.apache.commons.collections4.multimap.AbstractMultiValuedMap` / `public int size()`


        <!-- 6851b963-9f1d-11ea-8c18-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <p>
        This implementation does <b>not</b> cache the total size
        of the multi-valued map, but rather calculates it by iterating
        over the entries of the underlying map.
        <!-- ACCEPT >=> 6851b963-9f1d-11ea-8c18-333445793454 -->



## Method: `java.org.apache.commons.collections4.multimap.AbstractMultiValuedMap` / `public Collection<V> values()`


        <!-- 6851b964-9f1d-11ea-8c19-333445793454 <=< ACCEPT -->
        Gets a collection containing all the values in the map.
        <p>
        Returns a collection containing all the values from all keys.
        @return a collection view of the values contained in this map
        <!-- ACCEPT >=> 6851b964-9f1d-11ea-8c19-333445793454 -->



## Method: `java.org.apache.commons.collections4.multimap.AbstractMultiValuedMap` / `public boolean put(final K key, final V value)`


        <!-- 6851b965-9f1d-11ea-8c1a-333445793454 <=< ACCEPT -->
        Adds the value to the collection associated with the specified key.
        <p>
        Unlike a normal <code>Map</code> the previous value is not replaced.
        Instead the new value is added to the collection stored against the key.
        @param key the key to store against
        @param value the value to add to the collection at the key
        @return the value added if the map changed and null if the map did not change
        <!-- ACCEPT >=> 6851b965-9f1d-11ea-8c1a-333445793454 -->



## Method: `java.org.apache.commons.collections4.multimap.AbstractMultiValuedMap` / `public boolean putAll(final Map<? extends K, ? extends V> map)`


        <!-- 6851b966-9f1d-11ea-8c1b-333445793454 <=< ACCEPT -->
        Copies all of the mappings from the specified map to this map. The effect
        of this call is equivalent to that of calling {@link #put(Object,Object)
        put(k, v)} on this map once for each mapping from key {@code k} to value
        {@code v} in the specified map. The behavior of this operation is
        undefined if the specified map is modified while the operation is in
        progress.
        @param map mappings to be stored in this map, may not be null
        @return true if the map changed as a result of this operation
        @throws NullPointerException if map is null
        <!-- ACCEPT >=> 6851b966-9f1d-11ea-8c1b-333445793454 -->



## Method: `java.org.apache.commons.collections4.multimap.AbstractMultiValuedMap` / `public boolean putAll(final MultiValuedMap<? extends K, ? extends V> map)`


        <!-- 6851b967-9f1d-11ea-8c1c-333445793454 <=< ACCEPT -->
        Copies all of the mappings from the specified MultiValuedMap to this map.
        The effect of this call is equivalent to that of calling
        {@link #put(Object,Object) put(k, v)} on this map once for each mapping
        from key {@code k} to value {@code v} in the specified map. The
        behavior of this operation is undefined if the specified map is modified
        while the operation is in progress.
        @param map mappings to be stored in this map, may not be null
        @return true if the map changed as a result of this operation
        @throws NullPointerException if map is null
        <!-- ACCEPT >=> 6851b967-9f1d-11ea-8c1c-333445793454 -->



## Method: `java.org.apache.commons.collections4.multimap.AbstractMultiValuedMap` / `public MultiSet<K> keys()`


        <!-- 6851b968-9f1d-11ea-8c1d-333445793454 <=< ACCEPT -->
        Returns a {@link MultiSet} view of the key mapping contained in this map.
        <p>
        Returns a MultiSet of keys with its values count as the count of the MultiSet.
        This multiset is backed by the map, so any changes in the map is reflected here.
        Any method which modifies this multiset like {@code add}, {@code remove},
        {@link Iterator#remove()} etc throws {@code UnsupportedOperationException}.
        @return a bag view of the key mapping contained in this map
        <!-- ACCEPT >=> 6851b968-9f1d-11ea-8c1d-333445793454 -->



## Method: `java.org.apache.commons.collections4.multimap.AbstractMultiValuedMap` / `public boolean putAll(final K key, final Iterable<? extends V> values)`


        <!-- 6851b969-9f1d-11ea-8c1e-333445793454 <=< ACCEPT -->
        Adds Iterable values to the collection associated with the specified key.
        @param key the key to store against
        @param values the values to add to the collection at the key, may not be null
        @return true if this map changed
        @throws NullPointerException if values is null
        <!-- ACCEPT >=> 6851b969-9f1d-11ea-8c1e-333445793454 -->



## Class: `java.org.apache.commons.collections4.multimap.AbstractMultiValuedMap` / `class WrappedCollection implements Collection<V>`


        <!-- 6851b96a-9f1d-11ea-8c1f-333445793454 <=< ACCEPT -->
        Wrapped collection to handle add and remove on the collection returned
        by get(object).
        <p>
        Currently, the wrapped collection is not cached and has to be retrieved
        from the underlying map. This is safe, but not very efficient and
        should be improved in subsequent releases. For this purpose, the
        scope of this collection is set to package private to simplify later
        refactoring.
        <!-- ACCEPT >=> 6851b96a-9f1d-11ea-8c1f-333445793454 -->



## Class: `java.org.apache.commons.collections4.multimap.AbstractMultiValuedMap` / `private class KeysMultiSet extends AbstractMultiSet<K>`


        <!-- 6851b96b-9f1d-11ea-8c20-333445793454 <=< ACCEPT -->
        Inner class that provides a MultiSet<K> keys view.
        <!-- ACCEPT >=> 6851b96b-9f1d-11ea-8c20-333445793454 -->



## Class: `java.org.apache.commons.collections4.multimap.AbstractMultiValuedMap` / `private class EntryValues extends AbstractCollection<Entry<K, V>>`


        <!-- 6851b96c-9f1d-11ea-8c21-333445793454 <=< ACCEPT -->
        Inner class that provides the Entry<K, V> view
        <!-- ACCEPT >=> 6851b96c-9f1d-11ea-8c21-333445793454 -->



## Class: `java.org.apache.commons.collections4.multimap.AbstractMultiValuedMap` / `private class MultiValuedMapEntry extends AbstractMapEntry<K, V>`


        <!-- 6851e05f-9f1d-11ea-8c22-333445793454 <=< ACCEPT -->
        Inner class for MultiValuedMap Entries.
        <!-- ACCEPT >=> 6851e05f-9f1d-11ea-8c22-333445793454 -->



## Class: `java.org.apache.commons.collections4.multimap.AbstractMultiValuedMap` / `private class MultiValuedMapIterator implements MapIterator<K, V>`


        <!-- 6851e060-9f1d-11ea-8c23-333445793454 <=< ACCEPT -->
        Inner class for MapIterator.
        <!-- ACCEPT >=> 6851e060-9f1d-11ea-8c23-333445793454 -->



## Class: `java.org.apache.commons.collections4.multimap.AbstractMultiValuedMap` / `private class Values extends AbstractCollection<V>`


        <!-- 6851e061-9f1d-11ea-8c24-333445793454 <=< ACCEPT -->
        Inner class that provides the values view.
        <!-- ACCEPT >=> 6851e061-9f1d-11ea-8c24-333445793454 -->



## Class: `java.org.apache.commons.collections4.multimap.AbstractMultiValuedMap` / `private class ValuesIterator implements Iterator<V>`


        <!-- 6851e062-9f1d-11ea-8c25-333445793454 <=< ACCEPT -->
        Inner class that provides the values iterator.
        <!-- ACCEPT >=> 6851e062-9f1d-11ea-8c25-333445793454 -->



## Class: `java.org.apache.commons.collections4.multimap.AbstractMultiValuedMap` / `private class AsMap extends AbstractMap<K, Collection<V>>`


        <!-- 6851e063-9f1d-11ea-8c26-333445793454 <=< ACCEPT -->
        Inner class that provides the AsMap view.
        <!-- ACCEPT >=> 6851e063-9f1d-11ea-8c26-333445793454 -->



## Class: `java.org.apache.commons.collections4.multimap.AbstractMultiValuedMap` / `class AsMapEntrySetIterator extends AbstractIteratorDecorator<Map.Entry<K, Collection<V>>>`


        <!-- 6851e064-9f1d-11ea-8c27-333445793454 <=< ACCEPT -->
        EntrySet iterator for the asMap view.
        <!-- ACCEPT >=> 6851e064-9f1d-11ea-8c27-333445793454 -->



## Method: `java.org.apache.commons.collections4.multimap.AbstractMultiValuedMap` / `protected void doWriteObject(final ObjectOutputStream out) throws IOException`


        <!-- 6851e065-9f1d-11ea-8c28-333445793454 <=< ACCEPT -->
        Write the map out using a custom routine.
        @param out the output stream
        @throws IOException any of the usual I/O related exceptions
        <!-- ACCEPT >=> 6851e065-9f1d-11ea-8c28-333445793454 -->



## Method: `java.org.apache.commons.collections4.multimap.AbstractMultiValuedMap` / `throws IOException, ClassNotFoundException`


        <!-- 6851e066-9f1d-11ea-8c29-333445793454 <=< ACCEPT -->
        Read the map in using a custom routine.
        @param in the input stream
        @throws IOException any of the usual I/O related exceptions
        @throws ClassNotFoundException if the stream contains an object which class can not be loaded
        @throws ClassCastException if the stream does not contain the correct objects
        <!-- ACCEPT >=> 6851e066-9f1d-11ea-8c29-333445793454 -->



# File: `java.org.apache.commons.collections4.multimap.AbstractMultiValuedMapDecorator`

## Class: `java.org.apache.commons.collections4.multimap.AbstractMultiValuedMapDecorator` / `implements MultiValuedMap<K, V>, Serializable`


        <!-- 6851e067-9f1d-11ea-8c2a-333445793454 <=< ACCEPT -->
        Decorates another <code>MultiValuedMap</code> to provide additional behaviour.
        <p>
        Each method call made on this <code>MultiValuedMap</code> is forwarded to the
        decorated <code>MultiValuedMap</code>. This class is used as a framework to build
        to extensions such as synchronized and unmodifiable behaviour.
        @param <K> the type of key elements
        @param <V> the type of value elements
        @since 4.1
        @version $Id$
        <!-- ACCEPT >=> 6851e067-9f1d-11ea-8c2a-333445793454 -->



## Field: `java.org.apache.commons.collections4.multimap.AbstractMultiValuedMapDecorator` / `private static final long serialVersionUID`


        <!-- 6851e068-9f1d-11ea-8c2b-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 6851e068-9f1d-11ea-8c2b-333445793454 -->



## Field: `java.org.apache.commons.collections4.multimap.AbstractMultiValuedMapDecorator` / `private final MultiValuedMap<K, V> map`


        <!-- 6851e069-9f1d-11ea-8c2c-333445793454 <=< ACCEPT -->
        MultiValuedMap to decorate
        <!-- ACCEPT >=> 6851e069-9f1d-11ea-8c2c-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.multimap.AbstractMultiValuedMapDecorator` / `protected AbstractMultiValuedMapDecorator(final MultiValuedMap<K, V> map)`


        <!-- 6851e06a-9f1d-11ea-8c2d-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param map  the map to decorate, must not be null
        @throws NullPointerException if the map is null
        <!-- ACCEPT >=> 6851e06a-9f1d-11ea-8c2d-333445793454 -->



## Method: `java.org.apache.commons.collections4.multimap.AbstractMultiValuedMapDecorator` / `protected MultiValuedMap<K, V> decorated()`


        <!-- 6851e06b-9f1d-11ea-8c2e-333445793454 <=< ACCEPT -->
        The decorated multi-valued map.
        @return the map to decorate
        <!-- ACCEPT >=> 6851e06b-9f1d-11ea-8c2e-333445793454 -->



# File: `java.org.apache.commons.collections4.multimap.AbstractSetValuedMap`

## Class: `java.org.apache.commons.collections4.multimap.AbstractSetValuedMap` / `implements SetValuedMap<K, V>`


        <!-- 6851e06c-9f1d-11ea-8c2f-333445793454 <=< ACCEPT -->
        Abstract implementation of the {@link SetValuedMap} interface to simplify the
        creation of subclass implementations.
        <p>
        Subclasses specify a Map implementation to use as the internal storage and
        the Set implementation to use as values.
        @since 4.1
        @version $Id$
        <!-- ACCEPT >=> 6851e06c-9f1d-11ea-8c2f-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.multimap.AbstractSetValuedMap` / `protected AbstractSetValuedMap()`


        <!-- 6851e06d-9f1d-11ea-8c30-333445793454 <=< ACCEPT -->
        Constructor needed for subclass serialisation.
        <!-- ACCEPT >=> 6851e06d-9f1d-11ea-8c30-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.multimap.AbstractSetValuedMap` / `protected AbstractSetValuedMap(Map<K, ? extends Set<V>> map)`


        <!-- 6851e06e-9f1d-11ea-8c31-333445793454 <=< ACCEPT -->
        A constructor that wraps, not copies
        @param map  the map to wrap, must not be null
        @throws NullPointerException if the map is null
        <!-- ACCEPT >=> 6851e06e-9f1d-11ea-8c31-333445793454 -->



## Method: `java.org.apache.commons.collections4.multimap.AbstractSetValuedMap` / `protected abstract Set<V> createCollection()`


        <!-- 6851e06f-9f1d-11ea-8c32-333445793454 <=< ACCEPT -->
        Creates a new value collection using the provided factory.
        @return a new list
        <!-- ACCEPT >=> 6851e06f-9f1d-11ea-8c32-333445793454 -->



## Method: `java.org.apache.commons.collections4.multimap.AbstractSetValuedMap` / `public Set<V> get(final K key)`


        <!-- 6851e070-9f1d-11ea-8c33-333445793454 <=< ACCEPT -->
        Gets the set of values associated with the specified key. This would
        return an empty set in case the mapping is not present
        @param key  the key to retrieve
        @return the <code>Set</code> of values, will return an empty
        <code>Set</code> for no mapping
        <!-- ACCEPT >=> 6851e070-9f1d-11ea-8c33-333445793454 -->



## Method: `java.org.apache.commons.collections4.multimap.AbstractSetValuedMap` / `public Set<V> remove(Object key)`


        <!-- 6851e071-9f1d-11ea-8c34-333445793454 <=< ACCEPT -->
        Removes all values associated with the specified key.
        <p>
        A subsequent <code>get(Object)</code> would return an empty set.
        @param key the key to remove values from
        @return the <code>Set</code> of values removed, will return an empty,
        unmodifiable set for no mapping found.
        <!-- ACCEPT >=> 6851e071-9f1d-11ea-8c34-333445793454 -->



## Class: `java.org.apache.commons.collections4.multimap.AbstractSetValuedMap` / `private class WrappedSet extends WrappedCollection implements Set<V>`


        <!-- 6851e072-9f1d-11ea-8c35-333445793454 <=< ACCEPT -->
        Wrapped set to handle add and remove on the collection returned by
        {@code get(Object)}.
        <!-- ACCEPT >=> 6851e072-9f1d-11ea-8c35-333445793454 -->



# File: `java.org.apache.commons.collections4.multimap.ArrayListValuedHashMap`

## Class: `java.org.apache.commons.collections4.multimap.ArrayListValuedHashMap` / `implements Serializable`


        <!-- 6851e073-9f1d-11ea-8c36-333445793454 <=< ACCEPT -->
        Implements a {@code ListValuedMap}, using a {@link HashMap} to provide data
        storage and {@link ArrayList}s as value collections. This is the standard
        implementation of a ListValuedMap.
        <p>
        <strong>Note that ArrayListValuedHashMap is not synchronized and is not
        thread-safe.</strong> If you wish to use this map from multiple threads
        concurrently, you must use appropriate synchronization. This class may throw
        exceptions when accessed by concurrent threads without synchronization.
        @since 4.1
        @version $Id$
        <!-- ACCEPT >=> 6851e073-9f1d-11ea-8c36-333445793454 -->



## Field: `java.org.apache.commons.collections4.multimap.ArrayListValuedHashMap` / `private static final long serialVersionUID`


        <!-- 6851e074-9f1d-11ea-8c37-333445793454 <=< ACCEPT -->
        Serialization Version
        <!-- ACCEPT >=> 6851e074-9f1d-11ea-8c37-333445793454 -->



## Field: `java.org.apache.commons.collections4.multimap.ArrayListValuedHashMap` / `private static final int DEFAULT_INITIAL_MAP_CAPACITY`


        <!-- 6851e075-9f1d-11ea-8c38-333445793454 <=< ACCEPT -->
        The initial map capacity used when none specified in constructor.
        <!-- ACCEPT >=> 6851e075-9f1d-11ea-8c38-333445793454 -->



## Field: `java.org.apache.commons.collections4.multimap.ArrayListValuedHashMap` / `private static final int DEFAULT_INITIAL_LIST_CAPACITY`


        <!-- 6851e076-9f1d-11ea-8c39-333445793454 <=< ACCEPT -->
        The initial list capacity when using none specified in constructor.
        <!-- ACCEPT >=> 6851e076-9f1d-11ea-8c39-333445793454 -->



## Field: `java.org.apache.commons.collections4.multimap.ArrayListValuedHashMap` / `private final int initialListCapacity`


        <!-- 6852076a-9f1d-11ea-8c3a-333445793454 <=< ACCEPT -->
        The initial list capacity when creating a new value collection.
        <!-- ACCEPT >=> 6852076a-9f1d-11ea-8c3a-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.multimap.ArrayListValuedHashMap` / `public ArrayListValuedHashMap()`


        <!-- 6852076b-9f1d-11ea-8c3b-333445793454 <=< ACCEPT -->
        Creates an empty ArrayListValuedHashMap with the default initial
        map capacity (16) and the default initial list capacity (3).
        <!-- ACCEPT >=> 6852076b-9f1d-11ea-8c3b-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.multimap.ArrayListValuedHashMap` / `public ArrayListValuedHashMap(int initialListCapacity)`


        <!-- 6852076c-9f1d-11ea-8c3c-333445793454 <=< ACCEPT -->
        Creates an empty ArrayListValuedHashMap with the default initial
        map capacity (16) and the specified initial list capacity.
        @param initialListCapacity  the initial capacity used for value collections
        <!-- ACCEPT >=> 6852076c-9f1d-11ea-8c3c-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.multimap.ArrayListValuedHashMap` / `public ArrayListValuedHashMap(int initialMapCapacity, int initialListCapacity)`


        <!-- 6852076d-9f1d-11ea-8c3d-333445793454 <=< ACCEPT -->
        Creates an empty ArrayListValuedHashMap with the specified initial
        map and list capacities.
        @param initialMapCapacity  the initial hashmap capacity
        @param initialListCapacity  the initial capacity used for value collections
        <!-- ACCEPT >=> 6852076d-9f1d-11ea-8c3d-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.multimap.ArrayListValuedHashMap` / `public ArrayListValuedHashMap(final MultiValuedMap<? extends K, ? extends V> map)`


        <!-- 6852076e-9f1d-11ea-8c3e-333445793454 <=< ACCEPT -->
        Creates an ArrayListValuedHashMap copying all the mappings of the given map.
        @param map a <code>MultiValuedMap</code> to copy into this map
        <!-- ACCEPT >=> 6852076e-9f1d-11ea-8c3e-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.multimap.ArrayListValuedHashMap` / `public ArrayListValuedHashMap(final Map<? extends K, ? extends V> map)`


        <!-- 6852076f-9f1d-11ea-8c3f-333445793454 <=< ACCEPT -->
        Creates an ArrayListValuedHashMap copying all the mappings of the given map.
        @param map a <code>Map</code> to copy into this map
        <!-- ACCEPT >=> 6852076f-9f1d-11ea-8c3f-333445793454 -->



## Method: `java.org.apache.commons.collections4.multimap.ArrayListValuedHashMap` / `public void trimToSize()`


        <!-- 68520770-9f1d-11ea-8c40-333445793454 <=< ACCEPT -->
        Trims the capacity of all value collections to their current size.
        <!-- ACCEPT >=> 68520770-9f1d-11ea-8c40-333445793454 -->



# File: `java.org.apache.commons.collections4.multimap.HashSetValuedHashMap`

## Class: `java.org.apache.commons.collections4.multimap.HashSetValuedHashMap` / `implements Serializable`


        <!-- 68520771-9f1d-11ea-8c41-333445793454 <=< ACCEPT -->
        Implements a {@code SetValuedMap}, using a {@link HashMap} to provide data
        storage and {@link HashSet}s as value collections. This is the standard
        implementation of a SetValuedMap.
        <p>
        <strong>Note that HashSetValuedHashMap is not synchronized and is not
        thread-safe.</strong> If you wish to use this map from multiple threads
        concurrently, you must use appropriate synchronization. This class may throw
        exceptions when accessed by concurrent threads without synchronization.
        @since 4.1
        @version $Id$
        <!-- ACCEPT >=> 68520771-9f1d-11ea-8c41-333445793454 -->



## Field: `java.org.apache.commons.collections4.multimap.HashSetValuedHashMap` / `private static final long serialVersionUID`


        <!-- 68520772-9f1d-11ea-8c42-333445793454 <=< ACCEPT -->
        Serialization Version
        <!-- ACCEPT >=> 68520772-9f1d-11ea-8c42-333445793454 -->



## Field: `java.org.apache.commons.collections4.multimap.HashSetValuedHashMap` / `private static final int DEFAULT_INITIAL_MAP_CAPACITY`


        <!-- 68520773-9f1d-11ea-8c43-333445793454 <=< ACCEPT -->
        The initial map capacity used when none specified in constructor.
        <!-- ACCEPT >=> 68520773-9f1d-11ea-8c43-333445793454 -->



## Field: `java.org.apache.commons.collections4.multimap.HashSetValuedHashMap` / `private static final int DEFAULT_INITIAL_SET_CAPACITY`


        <!-- 68520774-9f1d-11ea-8c44-333445793454 <=< ACCEPT -->
        The initial set capacity when using none specified in constructor.
        <!-- ACCEPT >=> 68520774-9f1d-11ea-8c44-333445793454 -->



## Field: `java.org.apache.commons.collections4.multimap.HashSetValuedHashMap` / `private final int initialSetCapacity`


        <!-- 68520775-9f1d-11ea-8c45-333445793454 <=< ACCEPT -->
        The initial list capacity when creating a new value collection.
        <!-- ACCEPT >=> 68520775-9f1d-11ea-8c45-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.multimap.HashSetValuedHashMap` / `public HashSetValuedHashMap()`


        <!-- 68520776-9f1d-11ea-8c46-333445793454 <=< ACCEPT -->
        Creates an empty HashSetValuedHashMap with the default initial
        map capacity (16) and the default initial set capacity (3).
        <!-- ACCEPT >=> 68520776-9f1d-11ea-8c46-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.multimap.HashSetValuedHashMap` / `public HashSetValuedHashMap(int initialSetCapacity)`


        <!-- 68520777-9f1d-11ea-8c47-333445793454 <=< ACCEPT -->
        Creates an empty HashSetValuedHashMap with the default initial
        map capacity (16) and the specified initial set capacity.
        @param initialSetCapacity  the initial capacity used for value collections
        <!-- ACCEPT >=> 68520777-9f1d-11ea-8c47-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.multimap.HashSetValuedHashMap` / `public HashSetValuedHashMap(int initialMapCapacity, int initialSetCapacity)`


        <!-- 68520778-9f1d-11ea-8c48-333445793454 <=< ACCEPT -->
        Creates an empty HashSetValuedHashMap with the specified initial
        map and list capacities.
        @param initialMapCapacity  the initial hashmap capacity
        @param initialSetCapacity  the initial capacity used for value collections
        <!-- ACCEPT >=> 68520778-9f1d-11ea-8c48-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.multimap.HashSetValuedHashMap` / `public HashSetValuedHashMap(final MultiValuedMap<? extends K, ? extends V> map)`


        <!-- 68520779-9f1d-11ea-8c49-333445793454 <=< ACCEPT -->
        Creates an HashSetValuedHashMap copying all the mappings of the given map.
        @param map a <code>MultiValuedMap</code> to copy into this map
        <!-- ACCEPT >=> 68520779-9f1d-11ea-8c49-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.multimap.HashSetValuedHashMap` / `public HashSetValuedHashMap(final Map<? extends K, ? extends V> map)`


        <!-- 6852077a-9f1d-11ea-8c4a-333445793454 <=< ACCEPT -->
        Creates an HashSetValuedHashMap copying all the mappings of the given map.
        @param map a <code>Map</code> to copy into this map
        <!-- ACCEPT >=> 6852077a-9f1d-11ea-8c4a-333445793454 -->



# File: `java.org.apache.commons.collections4.multimap.TransformedMultiValuedMap`

## Class: `java.org.apache.commons.collections4.multimap.TransformedMultiValuedMap` / `public class TransformedMultiValuedMap<K, V> extends AbstractMultiValuedMapDecorator<K, V>`


        <!-- 6852077b-9f1d-11ea-8c4b-333445793454 <=< ACCEPT -->
        Decorates another <code>MultiValuedMap</code> to transform objects that are added.
        <p>
        This class affects the MultiValuedMap put methods. Thus objects must be
        removed or searched for using their transformed form. For example, if the
        transformation converts Strings to Integers, you must use the Integer form to
        remove objects.
        <p>
        <strong>Note that TransformedMultiValuedMap is not synchronized and is not thread-safe.</strong>
        @since 4.1
        @version $Id$
        <!-- ACCEPT >=> 6852077b-9f1d-11ea-8c4b-333445793454 -->



## Field: `java.org.apache.commons.collections4.multimap.TransformedMultiValuedMap` / `private static final long serialVersionUID`


        <!-- 6852077c-9f1d-11ea-8c4c-333445793454 <=< ACCEPT -->
        Serialization Version
        <!-- ACCEPT >=> 6852077c-9f1d-11ea-8c4c-333445793454 -->



## Field: `java.org.apache.commons.collections4.multimap.TransformedMultiValuedMap` / `private final Transformer<? super K, ? extends K> keyTransformer`


        <!-- 6852077d-9f1d-11ea-8c4d-333445793454 <=< ACCEPT -->
        The key transformer
        <!-- ACCEPT >=> 6852077d-9f1d-11ea-8c4d-333445793454 -->



## Field: `java.org.apache.commons.collections4.multimap.TransformedMultiValuedMap` / `private final Transformer<? super V, ? extends V> valueTransformer`


        <!-- 6852077e-9f1d-11ea-8c4e-333445793454 <=< ACCEPT -->
        The value transformer
        <!-- ACCEPT >=> 6852077e-9f1d-11ea-8c4e-333445793454 -->



## Method: `java.org.apache.commons.collections4.multimap.TransformedMultiValuedMap` / `final Transformer<? super V, ? extends V> valueTransformer)`


        <!-- 6852077f-9f1d-11ea-8c4f-333445793454 <=< ACCEPT -->
        Factory method to create a transforming MultiValuedMap.
        <p>
        If there are any elements already in the map being decorated, they are
        NOT transformed. Contrast this with
        {@link #transformedMap(MultiValuedMap, Transformer, Transformer)}.
        @param <K> the key type
        @param <V> the value type
        @param map  the MultiValuedMap to decorate, may not be null
        @param keyTransformer  the transformer to use for key conversion, null means no conversion
        @param valueTransformer  the transformer to use for value conversion, null means no conversion
        @return a new transformed MultiValuedMap
        @throws NullPointerException if map is null
        <!-- ACCEPT >=> 6852077f-9f1d-11ea-8c4f-333445793454 -->



## Method: `java.org.apache.commons.collections4.multimap.TransformedMultiValuedMap` / `final Transformer<? super V, ? extends V> valueTransformer)`


        <!-- 68522e73-9f1d-11ea-8c50-333445793454 <=< ACCEPT -->
        Factory method to create a transforming MultiValuedMap that will
        transform existing contents of the specified map.
        <p>
        If there are any elements already in the map being decorated, they will
        be transformed by this method. Contrast this with
        {@link #transformingMap(MultiValuedMap, Transformer, Transformer)}.
        @param <K> the key type
        @param <V> the value type
        @param map  the MultiValuedMap to decorate, may not be null
        @param keyTransformer  the transformer to use for key conversion, null means no conversion
        @param valueTransformer  the transformer to use for value conversion, null means no conversion
        @return a new transformed MultiValuedMap
        @throws NullPointerException if map is null
        <!-- ACCEPT >=> 68522e73-9f1d-11ea-8c50-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.multimap.TransformedMultiValuedMap` / `final Transformer<? super V, ? extends V> valueTransformer)`


        <!-- 68522e74-9f1d-11ea-8c51-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        <p>
        If there are any elements already in the collection being decorated, they
        are NOT transformed.
        @param map  the MultiValuedMap to decorate, may not be null
        @param keyTransformer  the transformer to use for key conversion, null means no conversion
        @param valueTransformer  the transformer to use for value conversion, null means no conversion
        @throws NullPointerException if map is null
        <!-- ACCEPT >=> 68522e74-9f1d-11ea-8c51-333445793454 -->



## Method: `java.org.apache.commons.collections4.multimap.TransformedMultiValuedMap` / `protected K transformKey(final K object)`


        <!-- 68522e75-9f1d-11ea-8c52-333445793454 <=< ACCEPT -->
        Transforms a key.
        <p>
        The transformer itself may throw an exception if necessary.
        @param object  the object to transform
        @return the transformed object
        <!-- ACCEPT >=> 68522e75-9f1d-11ea-8c52-333445793454 -->



## Method: `java.org.apache.commons.collections4.multimap.TransformedMultiValuedMap` / `protected V transformValue(final V object)`


        <!-- 68522e76-9f1d-11ea-8c53-333445793454 <=< ACCEPT -->
        Transforms a value.
        <p>
        The transformer itself may throw an exception if necessary.
        @param object  the object to transform
        @return the transformed object
        <!-- ACCEPT >=> 68522e76-9f1d-11ea-8c53-333445793454 -->



# File: `java.org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMap`

## Class: `java.org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMap` / `extends AbstractMultiValuedMapDecorator<K, V> implements Unmodifiable`


        <!-- 68522e77-9f1d-11ea-8c54-333445793454 <=< ACCEPT -->
        Decorates another {@link MultiValuedMap} to ensure it can't be altered.
        <p>
        Attempts to modify it will result in an UnsupportedOperationException.
        @param <K> the type of key elements
        @param <V> the type of value elements
        @since 4.1
        @version $Id$
        <!-- ACCEPT >=> 68522e77-9f1d-11ea-8c54-333445793454 -->



## Field: `java.org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMap` / `private static final long serialVersionUID`


        <!-- 68522e78-9f1d-11ea-8c55-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 68522e78-9f1d-11ea-8c55-333445793454 -->



## Method: `java.org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMap` / `MultiValuedMap<? extends K, ? extends V> map)`


        <!-- 68522e79-9f1d-11ea-8c56-333445793454 <=< ACCEPT -->
        Factory method to create an unmodifiable MultiValuedMap.
        <p>
        If the map passed in is already unmodifiable, it is returned.
        @param <K> the type of key elements
        @param <V> the type of value elements
        @param map  the map to decorate, may not be null
        @return an unmodifiable MultiValuedMap
        @throws NullPointerException if map is null
        <!-- ACCEPT >=> 68522e79-9f1d-11ea-8c56-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMap` / `private UnmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map)`


        <!-- 68522e7a-9f1d-11ea-8c57-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param map  the MultiValuedMap to decorate, may not be null
        @throws NullPointerException if the map is null
        <!-- ACCEPT >=> 68522e7a-9f1d-11ea-8c57-333445793454 -->



# File: `java.org.apache.commons.collections4.multimap.package-info`

## Package: `java.org.apache.commons.collections4.multimap.package-info` / `package org.apache.commons.collections4.multimap`


        <!-- 68522e7b-9f1d-11ea-8c58-333445793454 <=< ACCEPT -->
        This package contains implementations of the {@link org.apache.commons.collections4.MultiValuedMap} interfaces.
        A MultiValuedMap holds a collection of values against each key.
        <p>
        The following implementations are provided in the package:
        <ul>
        <li>ArrayListValuedHashMap - ListValuedMap implementation using a HashMap/ArrayList
        <li>HashSetValuedHashMap   - SetValuedMap implementation using a HashMap/HashSet
        </ul>
        <p>
        The following decorators are provided in the package:
        <ul>
        <li>Transformed - transforms elements added to the MultiValuedMap
        <li>Unmodifiable - ensures the collection cannot be altered
        </ul>
        @version $Id$
        <!-- ACCEPT >=> 68522e7b-9f1d-11ea-8c58-333445793454 -->



# File: `java.org.apache.commons.collections4.multiset.AbstractMapMultiSet`

## Class: `java.org.apache.commons.collections4.multiset.AbstractMapMultiSet` / `public abstract class AbstractMapMultiSet<E> extends AbstractMultiSet<E>`


        <!-- 68522e7c-9f1d-11ea-8c59-333445793454 <=< ACCEPT -->
        Abstract implementation of the {@link MultiSet} interface to simplify the
        creation of subclass implementations.
        <p>
        Subclasses specify a Map implementation to use as the internal storage. The
        map will be used to map multiset elements to a number; the number represents the
        number of occurrences of that element in the multiset.
        @since 4.1
        @version $Id$
        <!-- ACCEPT >=> 68522e7c-9f1d-11ea-8c59-333445793454 -->



## Field: `java.org.apache.commons.collections4.multiset.AbstractMapMultiSet` / `private transient Map<E, MutableInteger> map`


        <!-- 68522e7d-9f1d-11ea-8c5a-333445793454 <=< ACCEPT -->
        The map to use to store the data
        <!-- ACCEPT >=> 68522e7d-9f1d-11ea-8c5a-333445793454 -->



## Field: `java.org.apache.commons.collections4.multiset.AbstractMapMultiSet` / `private transient int size`


        <!-- 68522e7e-9f1d-11ea-8c5b-333445793454 <=< ACCEPT -->
        The current total size of the multiset
        <!-- ACCEPT >=> 68522e7e-9f1d-11ea-8c5b-333445793454 -->



## Field: `java.org.apache.commons.collections4.multiset.AbstractMapMultiSet` / `private transient int modCount`


        <!-- 68522e7f-9f1d-11ea-8c5c-333445793454 <=< ACCEPT -->
        The modification count for fail fast iterators
        <!-- ACCEPT >=> 68522e7f-9f1d-11ea-8c5c-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.multiset.AbstractMapMultiSet` / `protected AbstractMapMultiSet()`


        <!-- 68522e80-9f1d-11ea-8c5d-333445793454 <=< ACCEPT -->
        Constructor needed for subclass serialisation.
        <!-- ACCEPT >=> 68522e80-9f1d-11ea-8c5d-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.multiset.AbstractMapMultiSet` / `protected AbstractMapMultiSet(final Map<E, MutableInteger> map)`


        <!-- 68522e81-9f1d-11ea-8c5e-333445793454 <=< ACCEPT -->
        Constructor that assigns the specified Map as the backing store. The map
        must be empty and non-null.
        @param map the map to assign
        <!-- ACCEPT >=> 68522e81-9f1d-11ea-8c5e-333445793454 -->



## Method: `java.org.apache.commons.collections4.multiset.AbstractMapMultiSet` / `protected Map<E, MutableInteger> getMap()`


        <!-- 68522e82-9f1d-11ea-8c5f-333445793454 <=< ACCEPT -->
        Utility method for implementations to access the map that backs this multiset.
        Not intended for interactive use outside of subclasses.
        @return the map being used by the MultiSet
        <!-- ACCEPT >=> 68522e82-9f1d-11ea-8c5f-333445793454 -->



## Method: `java.org.apache.commons.collections4.multiset.AbstractMapMultiSet` / `protected void setMap(Map<E, MutableInteger> map)`


        <!-- 68522e83-9f1d-11ea-8c60-333445793454 <=< ACCEPT -->
        Sets the map being wrapped.
        <p>
        <b>NOTE:</b> this method should only be used during deserialization
        @param map the map to wrap
        <!-- ACCEPT >=> 68522e83-9f1d-11ea-8c60-333445793454 -->



## Method: `java.org.apache.commons.collections4.multiset.AbstractMapMultiSet` / `public int size()`


        <!-- 68522e84-9f1d-11ea-8c61-333445793454 <=< ACCEPT -->
        Returns the number of elements in this multiset.
        @return current size of the multiset
        <!-- ACCEPT >=> 68522e84-9f1d-11ea-8c61-333445793454 -->



## Method: `java.org.apache.commons.collections4.multiset.AbstractMapMultiSet` / `public boolean isEmpty()`


        <!-- 68522e85-9f1d-11ea-8c62-333445793454 <=< ACCEPT -->
        Returns true if the underlying map is empty.
        @return true if multiset is empty
        <!-- ACCEPT >=> 68522e85-9f1d-11ea-8c62-333445793454 -->



## Method: `java.org.apache.commons.collections4.multiset.AbstractMapMultiSet` / `public int getCount(final Object object)`


        <!-- 68522e86-9f1d-11ea-8c63-333445793454 <=< ACCEPT -->
        Returns the number of occurrence of the given element in this multiset by
        looking up its count in the underlying map.
        @param object the object to search for
        @return the number of occurrences of the object, zero if not found
        <!-- ACCEPT >=> 68522e86-9f1d-11ea-8c63-333445793454 -->



## Method: `java.org.apache.commons.collections4.multiset.AbstractMapMultiSet` / `public boolean contains(final Object object)`


        <!-- 68522e87-9f1d-11ea-8c64-333445793454 <=< ACCEPT -->
        Determines if the multiset contains the given element by checking if the
        underlying map contains the element as a key.
        @param object the object to search for
        @return true if the multiset contains the given element
        <!-- ACCEPT >=> 68522e87-9f1d-11ea-8c64-333445793454 -->



## Method: `java.org.apache.commons.collections4.multiset.AbstractMapMultiSet` / `public Iterator<E> iterator()`


        <!-- 68522e88-9f1d-11ea-8c65-333445793454 <=< ACCEPT -->
        Gets an iterator over the multiset elements. Elements present in the
        MultiSet more than once will be returned repeatedly.
        @return the iterator
        <!-- ACCEPT >=> 68522e88-9f1d-11ea-8c65-333445793454 -->



## Class: `java.org.apache.commons.collections4.multiset.AbstractMapMultiSet` / `private static class MapBasedMultiSetIterator<E> implements Iterator<E>`


        <!-- 68522e89-9f1d-11ea-8c66-333445793454 <=< ACCEPT -->
        Inner class iterator for the MultiSet.
        <!-- ACCEPT >=> 68522e89-9f1d-11ea-8c66-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.multiset.AbstractMapMultiSet` / `public MapBasedMultiSetIterator(final AbstractMapMultiSet<E> parent)`


        <!-- 6852557d-9f1d-11ea-8c67-333445793454 <=< ACCEPT -->
        Constructor.
        @param parent the parent multiset
        <!-- ACCEPT >=> 6852557d-9f1d-11ea-8c67-333445793454 -->



## Method: `java.org.apache.commons.collections4.multiset.AbstractMapMultiSet` / `public boolean hasNext()`


        <!-- 6852557e-9f1d-11ea-8c68-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <!-- ACCEPT >=> 6852557e-9f1d-11ea-8c68-333445793454 -->



## Method: `java.org.apache.commons.collections4.multiset.AbstractMapMultiSet` / `public E next()`


        <!-- 6852557f-9f1d-11ea-8c69-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <!-- ACCEPT >=> 6852557f-9f1d-11ea-8c69-333445793454 -->



## Method: `java.org.apache.commons.collections4.multiset.AbstractMapMultiSet` / `public void remove()`


        <!-- 68525580-9f1d-11ea-8c6a-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <!-- ACCEPT >=> 68525580-9f1d-11ea-8c6a-333445793454 -->



## Method: `java.org.apache.commons.collections4.multiset.AbstractMapMultiSet` / `public void clear()`


        <!-- 68525581-9f1d-11ea-8c6b-333445793454 <=< ACCEPT -->
        Clears the multiset by clearing the underlying map.
        <!-- ACCEPT >=> 68525581-9f1d-11ea-8c6b-333445793454 -->



## Class: `java.org.apache.commons.collections4.multiset.AbstractMapMultiSet` / `protected static class MutableInteger`


        <!-- 68525582-9f1d-11ea-8c6c-333445793454 <=< ACCEPT -->
        Mutable integer class for storing the data.
        <!-- ACCEPT >=> 68525582-9f1d-11ea-8c6c-333445793454 -->



## Field: `java.org.apache.commons.collections4.multiset.AbstractMapMultiSet` / `protected int value`


        <!-- 68525583-9f1d-11ea-8c6d-333445793454 <=< ACCEPT -->
        The value of this mutable.
        <!-- ACCEPT >=> 68525583-9f1d-11ea-8c6d-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.multiset.AbstractMapMultiSet` / `MutableInteger(final int value)`


        <!-- 68525584-9f1d-11ea-8c6e-333445793454 <=< ACCEPT -->
        Constructor.
        @param value the initial value
        <!-- ACCEPT >=> 68525584-9f1d-11ea-8c6e-333445793454 -->



## Class: `java.org.apache.commons.collections4.multiset.AbstractMapMultiSet` / `protected static class UniqueSetIterator<E> extends AbstractIteratorDecorator<E>`


        <!-- 68525585-9f1d-11ea-8c6f-333445793454 <=< ACCEPT -->
        Inner class UniqueSetIterator.
        <!-- ACCEPT >=> 68525585-9f1d-11ea-8c6f-333445793454 -->



## Field: `java.org.apache.commons.collections4.multiset.AbstractMapMultiSet` / `protected final AbstractMapMultiSet<E> parent`


        <!-- 68525586-9f1d-11ea-8c70-333445793454 <=< ACCEPT -->
        The parent multiset
        <!-- ACCEPT >=> 68525586-9f1d-11ea-8c70-333445793454 -->



## Field: `java.org.apache.commons.collections4.multiset.AbstractMapMultiSet` / `protected E lastElement`


        <!-- 68525587-9f1d-11ea-8c71-333445793454 <=< ACCEPT -->
        The last returned element
        <!-- ACCEPT >=> 68525587-9f1d-11ea-8c71-333445793454 -->



## Field: `java.org.apache.commons.collections4.multiset.AbstractMapMultiSet` / `protected boolean canRemove`


        <!-- 68525588-9f1d-11ea-8c72-333445793454 <=< ACCEPT -->
        Whether remove is allowed at present
        <!-- ACCEPT >=> 68525588-9f1d-11ea-8c72-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.multiset.AbstractMapMultiSet` / `protected UniqueSetIterator(final Iterator<E> iterator, final AbstractMapMultiSet<E> parent)`


        <!-- 68525589-9f1d-11ea-8c73-333445793454 <=< ACCEPT -->
        Constructor.
        @param iterator  the iterator to decorate
        @param parent  the parent multiset
        <!-- ACCEPT >=> 68525589-9f1d-11ea-8c73-333445793454 -->



## Class: `java.org.apache.commons.collections4.multiset.AbstractMapMultiSet` / `protected static class EntrySetIterator<E> implements Iterator<Entry<E>>`


        <!-- 6852558a-9f1d-11ea-8c74-333445793454 <=< ACCEPT -->
        Inner class EntrySetIterator.
        <!-- ACCEPT >=> 6852558a-9f1d-11ea-8c74-333445793454 -->



## Field: `java.org.apache.commons.collections4.multiset.AbstractMapMultiSet` / `protected final AbstractMapMultiSet<E> parent`


        <!-- 6852558b-9f1d-11ea-8c75-333445793454 <=< ACCEPT -->
        The parent map
        <!-- ACCEPT >=> 6852558b-9f1d-11ea-8c75-333445793454 -->



## Field: `java.org.apache.commons.collections4.multiset.AbstractMapMultiSet` / `protected Entry<E> last`


        <!-- 6852558c-9f1d-11ea-8c76-333445793454 <=< ACCEPT -->
        The last returned entry
        <!-- ACCEPT >=> 6852558c-9f1d-11ea-8c76-333445793454 -->



## Field: `java.org.apache.commons.collections4.multiset.AbstractMapMultiSet` / `protected boolean canRemove`


        <!-- 6852558d-9f1d-11ea-8c77-333445793454 <=< ACCEPT -->
        Whether remove is allowed at present
        <!-- ACCEPT >=> 6852558d-9f1d-11ea-8c77-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.multiset.AbstractMapMultiSet` / `final AbstractMapMultiSet<E> parent)`


        <!-- 6852558e-9f1d-11ea-8c78-333445793454 <=< ACCEPT -->
        Constructor.
        @param iterator  the iterator to decorate
        @param parent  the parent multiset
        <!-- ACCEPT >=> 6852558e-9f1d-11ea-8c78-333445793454 -->



## Class: `java.org.apache.commons.collections4.multiset.AbstractMapMultiSet` / `protected static class MultiSetEntry<E> extends AbstractEntry<E>`


        <!-- 6852558f-9f1d-11ea-8c79-333445793454 <=< ACCEPT -->
        Inner class MultiSetEntry.
        <!-- ACCEPT >=> 6852558f-9f1d-11ea-8c79-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.multiset.AbstractMapMultiSet` / `protected MultiSetEntry(final Map.Entry<E, MutableInteger> parentEntry)`


        <!-- 68525590-9f1d-11ea-8c7a-333445793454 <=< ACCEPT -->
        Constructor.
        @param parentEntry  the entry to decorate
        <!-- ACCEPT >=> 68525590-9f1d-11ea-8c7a-333445793454 -->



## Method: `java.org.apache.commons.collections4.multiset.AbstractMapMultiSet` / `protected void doWriteObject(final ObjectOutputStream out) throws IOException`


        <!-- 68525591-9f1d-11ea-8c7b-333445793454 <=< ACCEPT -->
        Write the multiset out using a custom routine.
        @param out the output stream
        @throws IOException any of the usual I/O related exceptions
        <!-- ACCEPT >=> 68525591-9f1d-11ea-8c7b-333445793454 -->



## Method: `java.org.apache.commons.collections4.multiset.AbstractMapMultiSet` / `throws IOException, ClassNotFoundException`


        <!-- 68525592-9f1d-11ea-8c7c-333445793454 <=< ACCEPT -->
        Read the multiset in using a custom routine.
        @param in the input stream
        @throws IOException any of the usual I/O related exceptions
        @throws ClassNotFoundException if the stream contains an object which class can not be loaded
        @throws ClassCastException if the stream does not contain the correct objects
        <!-- ACCEPT >=> 68525592-9f1d-11ea-8c7c-333445793454 -->



## Method: `java.org.apache.commons.collections4.multiset.AbstractMapMultiSet` / `public Object[] toArray()`


        <!-- 68525593-9f1d-11ea-8c7d-333445793454 <=< ACCEPT -->
        Returns an array of all of this multiset's elements.
        @return an array of all of this multiset's elements
        <!-- ACCEPT >=> 68525593-9f1d-11ea-8c7d-333445793454 -->



## Method: `java.org.apache.commons.collections4.multiset.AbstractMapMultiSet` / `public <T> T[] toArray(T[] array)`


        <!-- 68525594-9f1d-11ea-8c7e-333445793454 <=< ACCEPT -->
        Returns an array of all of this multiset's elements.
        If the input array has more elements than are in the multiset,
        trailing elements will be set to null.
        @param <T> the type of the array elements
        @param array the array to populate
        @return an array of all of this multiset's elements
        @throws ArrayStoreException if the runtime type of the specified array is not
        a supertype of the runtime type of the elements in this list
        @throws NullPointerException if the specified array is null
        <!-- ACCEPT >=> 68525594-9f1d-11ea-8c7e-333445793454 -->



# File: `java.org.apache.commons.collections4.multiset.AbstractMultiSet`

## Class: `java.org.apache.commons.collections4.multiset.AbstractMultiSet` / `public abstract class AbstractMultiSet<E> extends AbstractCollection<E> implements MultiSet<E>`


        <!-- 68525595-9f1d-11ea-8c7f-333445793454 <=< ACCEPT -->
        Abstract implementation of the {@link MultiSet} interface to simplify the
        creation of subclass implementations.
        @since 4.1
        @version $Id$
        <!-- ACCEPT >=> 68525595-9f1d-11ea-8c7f-333445793454 -->



## Field: `java.org.apache.commons.collections4.multiset.AbstractMultiSet` / `private transient Set<E> uniqueSet`


        <!-- 68525596-9f1d-11ea-8c80-333445793454 <=< ACCEPT -->
        View of the elements
        <!-- ACCEPT >=> 68525596-9f1d-11ea-8c80-333445793454 -->



## Field: `java.org.apache.commons.collections4.multiset.AbstractMultiSet` / `private transient Set<Entry<E>> entrySet`


        <!-- 68527c87-9f1d-11ea-8c81-333445793454 <=< ACCEPT -->
        View of the entries
        <!-- ACCEPT >=> 68527c87-9f1d-11ea-8c81-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.multiset.AbstractMultiSet` / `protected AbstractMultiSet()`


        <!-- 68527c88-9f1d-11ea-8c82-333445793454 <=< ACCEPT -->
        Constructor needed for subclass serialisation.
        <!-- ACCEPT >=> 68527c88-9f1d-11ea-8c82-333445793454 -->



## Method: `java.org.apache.commons.collections4.multiset.AbstractMultiSet` / `public int size()`


        <!-- 68527c89-9f1d-11ea-8c83-333445793454 <=< ACCEPT -->
        Returns the number of elements in this multiset.
        @return current size of the multiset
        <!-- ACCEPT >=> 68527c89-9f1d-11ea-8c83-333445793454 -->



## Method: `java.org.apache.commons.collections4.multiset.AbstractMultiSet` / `public int getCount(final Object object)`


        <!-- 68527c8a-9f1d-11ea-8c84-333445793454 <=< ACCEPT -->
        Returns the number of occurrence of the given element in this multiset by
        iterating over its entrySet.
        @param object the object to search for
        @return the number of occurrences of the object, zero if not found
        <!-- ACCEPT >=> 68527c8a-9f1d-11ea-8c84-333445793454 -->



## Method: `java.org.apache.commons.collections4.multiset.AbstractMultiSet` / `public boolean contains(final Object object)`


        <!-- 68527c8b-9f1d-11ea-8c85-333445793454 <=< ACCEPT -->
        Determines if the multiset contains the given element.
        @param object the object to search for
        @return true if the multiset contains the given element
        <!-- ACCEPT >=> 68527c8b-9f1d-11ea-8c85-333445793454 -->



## Method: `java.org.apache.commons.collections4.multiset.AbstractMultiSet` / `public Iterator<E> iterator()`


        <!-- 68527c8c-9f1d-11ea-8c86-333445793454 <=< ACCEPT -->
        Gets an iterator over the multiset elements. Elements present in the
        MultiSet more than once will be returned repeatedly.
        @return the iterator
        <!-- ACCEPT >=> 68527c8c-9f1d-11ea-8c86-333445793454 -->



## Class: `java.org.apache.commons.collections4.multiset.AbstractMultiSet` / `private static class MultiSetIterator<E> implements Iterator<E>`


        <!-- 68527c8d-9f1d-11ea-8c87-333445793454 <=< ACCEPT -->
        Inner class iterator for the MultiSet.
        <!-- ACCEPT >=> 68527c8d-9f1d-11ea-8c87-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.multiset.AbstractMultiSet` / `public MultiSetIterator(final AbstractMultiSet<E> parent)`


        <!-- 68527c8e-9f1d-11ea-8c88-333445793454 <=< ACCEPT -->
        Constructor.
        @param parent the parent multiset
        <!-- ACCEPT >=> 68527c8e-9f1d-11ea-8c88-333445793454 -->



## Method: `java.org.apache.commons.collections4.multiset.AbstractMultiSet` / `public boolean hasNext()`


        <!-- 68527c8f-9f1d-11ea-8c89-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <!-- ACCEPT >=> 68527c8f-9f1d-11ea-8c89-333445793454 -->



## Method: `java.org.apache.commons.collections4.multiset.AbstractMultiSet` / `public E next()`


        <!-- 68527c90-9f1d-11ea-8c8a-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <!-- ACCEPT >=> 68527c90-9f1d-11ea-8c8a-333445793454 -->



## Method: `java.org.apache.commons.collections4.multiset.AbstractMultiSet` / `public void remove()`


        <!-- 68527c91-9f1d-11ea-8c8b-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <!-- ACCEPT >=> 68527c91-9f1d-11ea-8c8b-333445793454 -->



## Method: `java.org.apache.commons.collections4.multiset.AbstractMultiSet` / `public void clear()`


        <!-- 68527c92-9f1d-11ea-8c8c-333445793454 <=< ACCEPT -->
        Clears the multiset removing all elements from the entrySet.
        <!-- ACCEPT >=> 68527c92-9f1d-11ea-8c8c-333445793454 -->



## Method: `java.org.apache.commons.collections4.multiset.AbstractMultiSet` / `public Set<E> uniqueSet()`


        <!-- 68527c93-9f1d-11ea-8c8d-333445793454 <=< ACCEPT -->
        Returns a view of the unique elements of this multiset.
        @return the set of unique elements in this multiset
        <!-- ACCEPT >=> 68527c93-9f1d-11ea-8c8d-333445793454 -->



## Method: `java.org.apache.commons.collections4.multiset.AbstractMultiSet` / `protected Set<E> createUniqueSet()`


        <!-- 68527c94-9f1d-11ea-8c8e-333445793454 <=< ACCEPT -->
        Create a new view for the set of unique elements in this multiset.
        @return a view of the set of unique elements
        <!-- ACCEPT >=> 68527c94-9f1d-11ea-8c8e-333445793454 -->



## Method: `java.org.apache.commons.collections4.multiset.AbstractMultiSet` / `protected Iterator<E> createUniqueSetIterator()`


        <!-- 68527c95-9f1d-11ea-8c8f-333445793454 <=< ACCEPT -->
        Creates a unique set iterator.
        Subclasses can override this to return iterators with different properties.
        @return the uniqueSet iterator
        <!-- ACCEPT >=> 68527c95-9f1d-11ea-8c8f-333445793454 -->



## Method: `java.org.apache.commons.collections4.multiset.AbstractMultiSet` / `public Set<Entry<E>> entrySet()`


        <!-- 68527c96-9f1d-11ea-8c90-333445793454 <=< ACCEPT -->
        Returns an unmodifiable view of the entries of this multiset.
        @return the set of entries in this multiset
        <!-- ACCEPT >=> 68527c96-9f1d-11ea-8c90-333445793454 -->



## Method: `java.org.apache.commons.collections4.multiset.AbstractMultiSet` / `protected Set<Entry<E>> createEntrySet()`


        <!-- 68527c97-9f1d-11ea-8c91-333445793454 <=< ACCEPT -->
        Create a new view for the set of entries in this multiset.
        @return a view of the set of entries
        <!-- ACCEPT >=> 68527c97-9f1d-11ea-8c91-333445793454 -->



## Method: `java.org.apache.commons.collections4.multiset.AbstractMultiSet` / `protected abstract int uniqueElements()`


        <!-- 68527c98-9f1d-11ea-8c92-333445793454 <=< ACCEPT -->
        Returns the number of unique elements in this multiset.
        @return the number of unique elements
        <!-- ACCEPT >=> 68527c98-9f1d-11ea-8c92-333445793454 -->



## Method: `java.org.apache.commons.collections4.multiset.AbstractMultiSet` / `protected abstract Iterator<Entry<E>> createEntrySetIterator()`


        <!-- 68527c99-9f1d-11ea-8c93-333445793454 <=< ACCEPT -->
        Creates an entry set iterator.
        Subclasses can override this to return iterators with different properties.
        @return the entrySet iterator
        <!-- ACCEPT >=> 68527c99-9f1d-11ea-8c93-333445793454 -->



## Class: `java.org.apache.commons.collections4.multiset.AbstractMultiSet` / `protected static class UniqueSet<E> extends AbstractSet<E>`


        <!-- 68527c9a-9f1d-11ea-8c94-333445793454 <=< ACCEPT -->
        Inner class UniqueSet.
        <!-- ACCEPT >=> 68527c9a-9f1d-11ea-8c94-333445793454 -->



## Field: `java.org.apache.commons.collections4.multiset.AbstractMultiSet` / `protected final AbstractMultiSet<E> parent`


        <!-- 68527c9b-9f1d-11ea-8c95-333445793454 <=< ACCEPT -->
        The parent multiset
        <!-- ACCEPT >=> 68527c9b-9f1d-11ea-8c95-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.multiset.AbstractMultiSet` / `protected UniqueSet(final AbstractMultiSet<E> parent)`


        <!-- 68527c9c-9f1d-11ea-8c96-333445793454 <=< ACCEPT -->
        Constructs a new unique element view of the MultiSet.
        @param parent  the parent MultiSet
        <!-- ACCEPT >=> 68527c9c-9f1d-11ea-8c96-333445793454 -->



## Class: `java.org.apache.commons.collections4.multiset.AbstractMultiSet` / `protected static class EntrySet<E> extends AbstractSet<Entry<E>>`


        <!-- 68527c9d-9f1d-11ea-8c97-333445793454 <=< ACCEPT -->
        Inner class EntrySet.
        <!-- ACCEPT >=> 68527c9d-9f1d-11ea-8c97-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.multiset.AbstractMultiSet` / `protected EntrySet(final AbstractMultiSet<E> parent)`


        <!-- 68527c9e-9f1d-11ea-8c98-333445793454 <=< ACCEPT -->
        Constructs a new view of the MultiSet.
        @param parent  the parent MultiSet
        <!-- ACCEPT >=> 68527c9e-9f1d-11ea-8c98-333445793454 -->



## Class: `java.org.apache.commons.collections4.multiset.AbstractMultiSet` / `protected static abstract class AbstractEntry<E> implements Entry<E>`


        <!-- 68527c9f-9f1d-11ea-8c99-333445793454 <=< ACCEPT -->
        Inner class AbstractEntry.
        <!-- ACCEPT >=> 68527c9f-9f1d-11ea-8c99-333445793454 -->



## Method: `java.org.apache.commons.collections4.multiset.AbstractMultiSet` / `protected void doWriteObject(final ObjectOutputStream out) throws IOException`


        <!-- 6852a391-9f1d-11ea-8c9a-333445793454 <=< ACCEPT -->
        Write the multiset out using a custom routine.
        @param out the output stream
        @throws IOException any of the usual I/O related exceptions
        <!-- ACCEPT >=> 6852a391-9f1d-11ea-8c9a-333445793454 -->



## Method: `java.org.apache.commons.collections4.multiset.AbstractMultiSet` / `throws IOException, ClassNotFoundException`


        <!-- 6852a392-9f1d-11ea-8c9b-333445793454 <=< ACCEPT -->
        Read the multiset in using a custom routine.
        @param in the input stream
        @throws IOException any of the usual I/O related exceptions
        @throws ClassNotFoundException if the stream contains an object which class can not be loaded
        @throws ClassCastException if the stream does not contain the correct objects
        <!-- ACCEPT >=> 6852a392-9f1d-11ea-8c9b-333445793454 -->



## Method: `java.org.apache.commons.collections4.multiset.AbstractMultiSet` / `public String toString()`


        <!-- 6852a393-9f1d-11ea-8c9c-333445793454 <=< ACCEPT -->
        Implement a toString() method suitable for debugging.
        @return a debugging toString
        <!-- ACCEPT >=> 6852a393-9f1d-11ea-8c9c-333445793454 -->



# File: `java.org.apache.commons.collections4.multiset.AbstractMultiSetDecorator`

## Class: `java.org.apache.commons.collections4.multiset.AbstractMultiSetDecorator` / `extends AbstractCollectionDecorator<E> implements MultiSet<E>`


        <!-- 6852a394-9f1d-11ea-8c9d-333445793454 <=< ACCEPT -->
        Decorates another <code>MultSet</code> to provide additional behaviour.
        <p>
        Methods are forwarded directly to the decorated multiset.
        @since 4.1
        @version $Id$
        <!-- ACCEPT >=> 6852a394-9f1d-11ea-8c9d-333445793454 -->



## Field: `java.org.apache.commons.collections4.multiset.AbstractMultiSetDecorator` / `private static final long serialVersionUID`


        <!-- 6852a395-9f1d-11ea-8c9e-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 6852a395-9f1d-11ea-8c9e-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.multiset.AbstractMultiSetDecorator` / `protected AbstractMultiSetDecorator()`


        <!-- 6852a396-9f1d-11ea-8c9f-333445793454 <=< ACCEPT -->
        Constructor only used in deserialization, do not use otherwise.
        <!-- ACCEPT >=> 6852a396-9f1d-11ea-8c9f-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.multiset.AbstractMultiSetDecorator` / `protected AbstractMultiSetDecorator(final MultiSet<E> multiset)`


        <!-- 6852a397-9f1d-11ea-8ca0-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param multiset  the multiset to decorate, must not be null
        @throws NullPointerException if multiset is null
        <!-- ACCEPT >=> 6852a397-9f1d-11ea-8ca0-333445793454 -->



## Method: `java.org.apache.commons.collections4.multiset.AbstractMultiSetDecorator` / `protected MultiSet<E> decorated()`


        <!-- 6852a398-9f1d-11ea-8ca1-333445793454 <=< ACCEPT -->
        Gets the multiset being decorated.
        @return the decorated multiset
        <!-- ACCEPT >=> 6852a398-9f1d-11ea-8ca1-333445793454 -->



# File: `java.org.apache.commons.collections4.multiset.HashMultiSet`

## Class: `java.org.apache.commons.collections4.multiset.HashMultiSet` / `public class HashMultiSet<E> extends AbstractMapMultiSet<E> implements Serializable`


        <!-- 6852a399-9f1d-11ea-8ca2-333445793454 <=< ACCEPT -->
        Implements {@code MultiSet}, using a {@link HashMap} to provide the
        data storage. This is the standard implementation of a multiset.
        <p>
        A {@code MultiSet} stores each object in the collection together with a
        count of occurrences. Extra methods on the interface allow multiple copies
        of an object to be added or removed at once.
        @since 4.1
        @version $Id$
        <!-- ACCEPT >=> 6852a399-9f1d-11ea-8ca2-333445793454 -->



## Field: `java.org.apache.commons.collections4.multiset.HashMultiSet` / `private static final long serialVersionUID`


        <!-- 6852a39a-9f1d-11ea-8ca3-333445793454 <=< ACCEPT -->
        Serial version lock
        <!-- ACCEPT >=> 6852a39a-9f1d-11ea-8ca3-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.multiset.HashMultiSet` / `public HashMultiSet()`


        <!-- 6852a39b-9f1d-11ea-8ca4-333445793454 <=< ACCEPT -->
        Constructs an empty {@link HashMultiSet}.
        <!-- ACCEPT >=> 6852a39b-9f1d-11ea-8ca4-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.multiset.HashMultiSet` / `public HashMultiSet(final Collection<? extends E> coll)`


        <!-- 6852a39c-9f1d-11ea-8ca5-333445793454 <=< ACCEPT -->
        Constructs a multiset containing all the members of the given collection.
        @param coll  a collection to copy into this multiset
        <!-- ACCEPT >=> 6852a39c-9f1d-11ea-8ca5-333445793454 -->



## Method: `java.org.apache.commons.collections4.multiset.HashMultiSet` / `private void writeObject(final ObjectOutputStream out) throws IOException`


        <!-- 6852a39d-9f1d-11ea-8ca6-333445793454 <=< ACCEPT -->
        Write the multiset out using a custom routine.
        <!-- ACCEPT >=> 6852a39d-9f1d-11ea-8ca6-333445793454 -->



## Method: `java.org.apache.commons.collections4.multiset.HashMultiSet` / `private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException`


        <!-- 6852a39e-9f1d-11ea-8ca7-333445793454 <=< ACCEPT -->
        Read the multiset in using a custom routine.
        <!-- ACCEPT >=> 6852a39e-9f1d-11ea-8ca7-333445793454 -->



# File: `java.org.apache.commons.collections4.multiset.PredicatedMultiSet`

## Class: `java.org.apache.commons.collections4.multiset.PredicatedMultiSet` / `public class PredicatedMultiSet<E> extends PredicatedCollection<E> implements MultiSet<E>`


        <!-- 6852a39f-9f1d-11ea-8ca8-333445793454 <=< ACCEPT -->
        Decorates another {@link MultiSet} to validate that additions
        match a specified predicate.
        <p>
        This multiset exists to provide validation for the decorated multiset.
        It is normally created to decorate an empty multiset.
        If an object cannot be added to the multiset, an {@link IllegalArgumentException}
        is thrown.
        <p>
        One usage would be to ensure that no null entries are added to the multiset.
        <pre>
        MultiSet&lt;E&gt; set =
        PredicatedMultiSet.predicatedMultiSet(new HashMultiSet&lt;E&gt;(),
        NotNullPredicate.notNullPredicate());
        </pre>
        @since 4.1
        @version $Id$
        <!-- ACCEPT >=> 6852a39f-9f1d-11ea-8ca8-333445793454 -->



## Field: `java.org.apache.commons.collections4.multiset.PredicatedMultiSet` / `private static final long serialVersionUID`


        <!-- 6852a3a0-9f1d-11ea-8ca9-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 6852a3a0-9f1d-11ea-8ca9-333445793454 -->



## Method: `java.org.apache.commons.collections4.multiset.PredicatedMultiSet` / `final Predicate<? super E> predicate)`


        <!-- 6852a3a1-9f1d-11ea-8caa-333445793454 <=< ACCEPT -->
        Factory method to create a predicated (validating) multiset.
        <p>
        If there are any elements already in the multiset being decorated, they
        are validated.
        @param <E> the type of the elements in the multiset
        @param multiset  the multiset to decorate, must not be null
        @param predicate  the predicate to use for validation, must not be null
        @return a new predicated MultiSet
        @throws NullPointerException if multiset or predicate is null
        @throws IllegalArgumentException if the multiset contains invalid elements
        <!-- ACCEPT >=> 6852a3a1-9f1d-11ea-8caa-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.multiset.PredicatedMultiSet` / `protected PredicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)`


        <!-- 6852a3a2-9f1d-11ea-8cab-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        <p>
        If there are any elements already in the multiset being decorated, they
        are validated.
        @param multiset  the multiset to decorate, must not be null
        @param predicate  the predicate to use for validation, must not be null
        @throws NullPointerException if multiset or predicate is null
        @throws IllegalArgumentException if the multiset contains invalid elements
        <!-- ACCEPT >=> 6852a3a2-9f1d-11ea-8cab-333445793454 -->



## Method: `java.org.apache.commons.collections4.multiset.PredicatedMultiSet` / `protected MultiSet<E> decorated()`


        <!-- 6852a3a3-9f1d-11ea-8cac-333445793454 <=< ACCEPT -->
        Gets the decorated multiset.
        @return the decorated multiset
        <!-- ACCEPT >=> 6852a3a3-9f1d-11ea-8cac-333445793454 -->



# File: `java.org.apache.commons.collections4.multiset.SynchronizedMultiSet`

## Class: `java.org.apache.commons.collections4.multiset.SynchronizedMultiSet` / `public class SynchronizedMultiSet<E> extends SynchronizedCollection<E> implements MultiSet<E>`


        <!-- 6852a3a4-9f1d-11ea-8cad-333445793454 <=< ACCEPT -->
        Decorates another {@link MultiSet} to synchronize its behaviour
        for a multi-threaded environment.
        <p>
        Methods are synchronized, then forwarded to the decorated multiset.
        Iterators must be separately synchronized around the loop.
        @since 4.1
        @version $Id$
        <!-- ACCEPT >=> 6852a3a4-9f1d-11ea-8cad-333445793454 -->



## Field: `java.org.apache.commons.collections4.multiset.SynchronizedMultiSet` / `private static final long serialVersionUID`


        <!-- 6852a3a5-9f1d-11ea-8cae-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 6852a3a5-9f1d-11ea-8cae-333445793454 -->



## Method: `java.org.apache.commons.collections4.multiset.SynchronizedMultiSet` / `public static <E> SynchronizedMultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)`


        <!-- 6852a3a6-9f1d-11ea-8caf-333445793454 <=< ACCEPT -->
        Factory method to create a synchronized multiset.
        @param <E> the type of the elements in the multiset
        @param multiset  the multiset to decorate, must not be null
        @return a new synchronized MultiSet
        @throws NullPointerException if multiset is null
        <!-- ACCEPT >=> 6852a3a6-9f1d-11ea-8caf-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.multiset.SynchronizedMultiSet` / `protected SynchronizedMultiSet(final MultiSet<E> multiset)`


        <!-- 6852a3a7-9f1d-11ea-8cb0-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param multiset  the multiset to decorate, must not be null
        @throws NullPointerException if multiset is null
        <!-- ACCEPT >=> 6852a3a7-9f1d-11ea-8cb0-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.multiset.SynchronizedMultiSet` / `protected SynchronizedMultiSet(final MultiSet<E> multiset, final Object lock)`


        <!-- 6852ca9b-9f1d-11ea-8cb1-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param multiset  the multiset to decorate, must not be null
        @param lock  the lock to use, must not be null
        @throws NullPointerException if multiset or lock is null
        <!-- ACCEPT >=> 6852ca9b-9f1d-11ea-8cb1-333445793454 -->



## Method: `java.org.apache.commons.collections4.multiset.SynchronizedMultiSet` / `protected MultiSet<E> decorated()`


        <!-- 6852ca9c-9f1d-11ea-8cb2-333445793454 <=< ACCEPT -->
        Gets the multiset being decorated.
        @return the decorated multiset
        <!-- ACCEPT >=> 6852ca9c-9f1d-11ea-8cb2-333445793454 -->



## Class: `java.org.apache.commons.collections4.multiset.SynchronizedMultiSet` / `static class SynchronizedSet<T> extends SynchronizedCollection<T> implements Set<T>`


        <!-- 6852ca9d-9f1d-11ea-8cb3-333445793454 <=< ACCEPT -->
        Synchronized Set for the MultiSet class.
        <!-- ACCEPT >=> 6852ca9d-9f1d-11ea-8cb3-333445793454 -->



## Field: `java.org.apache.commons.collections4.multiset.SynchronizedMultiSet` / `private static final long serialVersionUID`


        <!-- 6852ca9e-9f1d-11ea-8cb4-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 6852ca9e-9f1d-11ea-8cb4-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.multiset.SynchronizedMultiSet` / `SynchronizedSet(final Set<T> set, final Object lock)`


        <!-- 6852ca9f-9f1d-11ea-8cb5-333445793454 <=< ACCEPT -->
        Constructor.
        @param set  the set to decorate
        @param lock  the lock to use, shared with the multiset
        <!-- ACCEPT >=> 6852ca9f-9f1d-11ea-8cb5-333445793454 -->



# File: `java.org.apache.commons.collections4.multiset.UnmodifiableMultiSet`

## Class: `java.org.apache.commons.collections4.multiset.UnmodifiableMultiSet` / `extends AbstractMultiSetDecorator<E> implements Unmodifiable`


        <!-- 6852caa0-9f1d-11ea-8cb6-333445793454 <=< ACCEPT -->
        Decorates another {@link MultiSet} to ensure it can't be altered.
        <p>
        Attempts to modify it will result in an UnsupportedOperationException.
        @since 4.1
        @version $Id$
        <!-- ACCEPT >=> 6852caa0-9f1d-11ea-8cb6-333445793454 -->



## Field: `java.org.apache.commons.collections4.multiset.UnmodifiableMultiSet` / `private static final long serialVersionUID`


        <!-- 6852caa1-9f1d-11ea-8cb7-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 6852caa1-9f1d-11ea-8cb7-333445793454 -->



## Method: `java.org.apache.commons.collections4.multiset.UnmodifiableMultiSet` / `public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)`


        <!-- 6852caa2-9f1d-11ea-8cb8-333445793454 <=< ACCEPT -->
        Factory method to create an unmodifiable multiset.
        <p>
        If the multiset passed in is already unmodifiable, it is returned.
        @param <E>  the type of the elements in the multiset
        @param multiset  the multiset to decorate, may not be null
        @return an unmodifiable MultiSet
        @throws NullPointerException if multiset is null
        <!-- ACCEPT >=> 6852caa2-9f1d-11ea-8cb8-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.multiset.UnmodifiableMultiSet` / `private UnmodifiableMultiSet(final MultiSet<? extends E> multiset)`


        <!-- 6852caa3-9f1d-11ea-8cb9-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param multiset  the multiset to decorate, may not be null
        @throws NullPointerException if multiset is null
        <!-- ACCEPT >=> 6852caa3-9f1d-11ea-8cb9-333445793454 -->



## Method: `java.org.apache.commons.collections4.multiset.UnmodifiableMultiSet` / `private void writeObject(final ObjectOutputStream out) throws IOException`


        <!-- 6852caa4-9f1d-11ea-8cba-333445793454 <=< ACCEPT -->
        Write the collection out using a custom routine.
        @param out  the output stream
        @throws IOException
        <!-- ACCEPT >=> 6852caa4-9f1d-11ea-8cba-333445793454 -->



## Method: `java.org.apache.commons.collections4.multiset.UnmodifiableMultiSet` / `private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException`


        <!-- 6852caa5-9f1d-11ea-8cbb-333445793454 <=< ACCEPT -->
        Read the collection in using a custom routine.
        @param in  the input stream
        @throws IOException
        @throws ClassNotFoundException
        @throws ClassCastException if deserialised object has wrong type
        <!-- ACCEPT >=> 6852caa5-9f1d-11ea-8cbb-333445793454 -->



# File: `java.org.apache.commons.collections4.multiset.package-info`

## Package: `java.org.apache.commons.collections4.multiset.package-info` / `package org.apache.commons.collections4.multiset`


        <!-- 6852caa6-9f1d-11ea-8cbc-333445793454 <=< ACCEPT -->
        This package contains implementations of the
        {@link org.apache.commons.collections4.MultiSet MultiSet} and
        {@link org.apache.commons.collections4.SortedMultiSet SortedMultiSet} interfaces.
        A multiset stores an object and a count of the number of occurrences of the object.
        <p>
        The following implementations are provided in the package:
        <ul>
        <li>HashMultiSet - implementation that uses a HashMap to store the data
        <li>TreeMultiSet - implementation that uses a TreeMap to store the data
        </ul>
        <p>
        The following decorators are provided in the package:
        <ul>
        <li>Predicated   - ensures that only elements that are valid according to a predicate can be added
        <li>Synchronized - synchronizes method access for multi-threaded environments
        <li>Unmodifiable - ensures the multiset cannot be altered
        </ul>
        @version $Id$
        <!-- ACCEPT >=> 6852caa6-9f1d-11ea-8cbc-333445793454 -->



# File: `java.org.apache.commons.collections4.package-info`

## Package: `java.org.apache.commons.collections4.package-info` / `package org.apache.commons.collections4`


        <!-- 6852caa7-9f1d-11ea-8cbd-333445793454 <=< ACCEPT -->
        This package contains the interfaces and utilities shared across all the subpackages of this component.
        <p>
        The following collection implementations are provided in the package:
        <ul>
        <li>ArrayStack - a non synchronized Stack that follows the same API as {@code java.util Stack}
        </ul>
        @version $Id$
        <!-- ACCEPT >=> 6852caa7-9f1d-11ea-8cbd-333445793454 -->



# File: `java.org.apache.commons.collections4.queue.AbstractQueueDecorator`

## Class: `java.org.apache.commons.collections4.queue.AbstractQueueDecorator` / `implements Queue<E>`


        <!-- 6852caa8-9f1d-11ea-8cbe-333445793454 <=< ACCEPT -->
        Decorates another {@link Queue} to provide additional behaviour.
        <p>
        Methods are forwarded directly to the decorated queue.
        <p>
        This implementation does not forward the hashCode and equals methods through
        to the backing object, but relies on Object's implementation. This is
        necessary as some Queue implementations, e.g. LinkedList, have custom a
        equals implementation for which symmetry can not be preserved.
        See class javadoc of AbstractCollectionDecorator for more information.
        @param <E> the type of the elements in the queue
        @since 4.0
        @version $Id$
        <!-- ACCEPT >=> 6852caa8-9f1d-11ea-8cbe-333445793454 -->



## Field: `java.org.apache.commons.collections4.queue.AbstractQueueDecorator` / `private static final long serialVersionUID`


        <!-- 6852caa9-9f1d-11ea-8cbf-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 6852caa9-9f1d-11ea-8cbf-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.queue.AbstractQueueDecorator` / `protected AbstractQueueDecorator()`


        <!-- 6852caaa-9f1d-11ea-8cc0-333445793454 <=< ACCEPT -->
        Constructor only used in deserialization, do not use otherwise.
        <!-- ACCEPT >=> 6852caaa-9f1d-11ea-8cc0-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.queue.AbstractQueueDecorator` / `protected AbstractQueueDecorator(final Queue<E> queue)`


        <!-- 6852caab-9f1d-11ea-8cc1-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param queue  the queue to decorate, must not be null
        @throws NullPointerException if queue is null
        <!-- ACCEPT >=> 6852caab-9f1d-11ea-8cc1-333445793454 -->



## Method: `java.org.apache.commons.collections4.queue.AbstractQueueDecorator` / `protected Queue<E> decorated()`


        <!-- 6852caac-9f1d-11ea-8cc2-333445793454 <=< ACCEPT -->
        Gets the queue being decorated.
        @return the decorated queue
        <!-- ACCEPT >=> 6852caac-9f1d-11ea-8cc2-333445793454 -->



# File: `java.org.apache.commons.collections4.queue.CircularFifoQueue`

## Class: `java.org.apache.commons.collections4.queue.CircularFifoQueue` / `implements Queue<E>, BoundedCollection<E>, Serializable`


        <!-- 6852caad-9f1d-11ea-8cc3-333445793454 <=< ACCEPT -->
        CircularFifoQueue is a first-in first-out queue with a fixed size that
        replaces its oldest element if full.
        <p>
        The removal order of a {@link CircularFifoQueue} is based on the
        insertion order; elements are removed in the same order in which they
        were added.  The iteration order is the same as the removal order.
        <p>
        The {@link #add(Object)}, {@link #remove()}, {@link #peek()}, {@link #poll},
        {@link #offer(Object)} operations all perform in constant time.
        All other operations perform in linear time or worse.
        <p>
        This queue prevents null objects from being added.
        @since 4.0
        @version $Id$
        <!-- ACCEPT >=> 6852caad-9f1d-11ea-8cc3-333445793454 -->



## Field: `java.org.apache.commons.collections4.queue.CircularFifoQueue` / `private static final long serialVersionUID`


        <!-- 6852caae-9f1d-11ea-8cc4-333445793454 <=< ACCEPT -->
        Serialization version.
        <!-- ACCEPT >=> 6852caae-9f1d-11ea-8cc4-333445793454 -->



## Field: `java.org.apache.commons.collections4.queue.CircularFifoQueue` / `private transient E[] elements`


        <!-- 6852caaf-9f1d-11ea-8cc5-333445793454 <=< ACCEPT -->
        Underlying storage array.
        <!-- ACCEPT >=> 6852caaf-9f1d-11ea-8cc5-333445793454 -->



## Field: `java.org.apache.commons.collections4.queue.CircularFifoQueue` / `private transient int start`


        <!-- 6852f1a4-9f1d-11ea-8cc6-333445793454 <=< ACCEPT -->
        Array index of first (oldest) queue element.
        <!-- ACCEPT >=> 6852f1a4-9f1d-11ea-8cc6-333445793454 -->



## Field: `java.org.apache.commons.collections4.queue.CircularFifoQueue` / `private transient int end`


        <!-- 6852f1a5-9f1d-11ea-8cc7-333445793454 <=< ACCEPT -->
        Index mod maxElements of the array position following the last queue
        element.  Queue elements start at elements[start] and "wrap around"
        elements[maxElements-1], ending at elements[decrement(end)].
        For example, elements = {c,a,b}, start=1, end=1 corresponds to
        the queue [a,b,c].
        <!-- ACCEPT >=> 6852f1a5-9f1d-11ea-8cc7-333445793454 -->



## Field: `java.org.apache.commons.collections4.queue.CircularFifoQueue` / `private transient boolean full`


        <!-- 6852f1a6-9f1d-11ea-8cc8-333445793454 <=< ACCEPT -->
        Flag to indicate if the queue is currently full.
        <!-- ACCEPT >=> 6852f1a6-9f1d-11ea-8cc8-333445793454 -->



## Field: `java.org.apache.commons.collections4.queue.CircularFifoQueue` / `private final int maxElements`


        <!-- 6852f1a7-9f1d-11ea-8cc9-333445793454 <=< ACCEPT -->
        Capacity of the queue.
        <!-- ACCEPT >=> 6852f1a7-9f1d-11ea-8cc9-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.queue.CircularFifoQueue` / `public CircularFifoQueue()`


        <!-- 6852f1a8-9f1d-11ea-8cca-333445793454 <=< ACCEPT -->
        Constructor that creates a queue with the default size of 32.
        <!-- ACCEPT >=> 6852f1a8-9f1d-11ea-8cca-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.queue.CircularFifoQueue` / `public CircularFifoQueue(final int size)`


        <!-- 6852f1a9-9f1d-11ea-8ccb-333445793454 <=< ACCEPT -->
        Constructor that creates a queue with the specified size.
        @param size  the size of the queue (cannot be changed)
        @throws IllegalArgumentException  if the size is &lt; 1
        <!-- ACCEPT >=> 6852f1a9-9f1d-11ea-8ccb-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.queue.CircularFifoQueue` / `public CircularFifoQueue(final Collection<? extends E> coll)`


        <!-- 6852f1aa-9f1d-11ea-8ccc-333445793454 <=< ACCEPT -->
        Constructor that creates a queue from the specified collection.
        The collection size also sets the queue size.
        @param coll  the collection to copy into the queue, may not be null
        @throws NullPointerException if the collection is null
        <!-- ACCEPT >=> 6852f1aa-9f1d-11ea-8ccc-333445793454 -->



## Method: `java.org.apache.commons.collections4.queue.CircularFifoQueue` / `private void writeObject(final ObjectOutputStream out) throws IOException`


        <!-- 6852f1ab-9f1d-11ea-8ccd-333445793454 <=< ACCEPT -->
        Write the queue out using a custom routine.
        @param out  the output stream
        @throws IOException if an I/O error occurs while writing to the output stream
        <!-- ACCEPT >=> 6852f1ab-9f1d-11ea-8ccd-333445793454 -->



## Method: `java.org.apache.commons.collections4.queue.CircularFifoQueue` / `private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException`


        <!-- 6852f1ac-9f1d-11ea-8cce-333445793454 <=< ACCEPT -->
        Read the queue in using a custom routine.
        @param in  the input stream
        @throws IOException if an I/O error occurs while writing to the output stream
        @throws ClassNotFoundException if the class of a serialized object can not be found
        <!-- ACCEPT >=> 6852f1ac-9f1d-11ea-8cce-333445793454 -->



## Method: `java.org.apache.commons.collections4.queue.CircularFifoQueue` / `public int size()`


        <!-- 6852f1ad-9f1d-11ea-8ccf-333445793454 <=< ACCEPT -->
        Returns the number of elements stored in the queue.
        @return this queue's size
        <!-- ACCEPT >=> 6852f1ad-9f1d-11ea-8ccf-333445793454 -->



## Method: `java.org.apache.commons.collections4.queue.CircularFifoQueue` / `public boolean isEmpty()`


        <!-- 6852f1ae-9f1d-11ea-8cd0-333445793454 <=< ACCEPT -->
        Returns true if this queue is empty; false otherwise.
        @return true if this queue is empty
        <!-- ACCEPT >=> 6852f1ae-9f1d-11ea-8cd0-333445793454 -->



## Method: `java.org.apache.commons.collections4.queue.CircularFifoQueue` / `public boolean isFull()`


        <!-- 6852f1af-9f1d-11ea-8cd1-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <p>
        A {@code CircularFifoQueue} can never be full, thus this returns always
        {@code false}.
        @return always returns {@code false}
        <!-- ACCEPT >=> 6852f1af-9f1d-11ea-8cd1-333445793454 -->



## Method: `java.org.apache.commons.collections4.queue.CircularFifoQueue` / `public boolean isAtFullCapacity()`


        <!-- 6852f1b0-9f1d-11ea-8cd2-333445793454 <=< ACCEPT -->
        Returns {@code true} if the capacity limit of this queue has been reached,
        i.e. the number of elements stored in the queue equals its maximum size.
        @return {@code true} if the capacity limit has been reached, {@code false} otherwise
        @since 4.1
        <!-- ACCEPT >=> 6852f1b0-9f1d-11ea-8cd2-333445793454 -->



## Method: `java.org.apache.commons.collections4.queue.CircularFifoQueue` / `public int maxSize()`


        <!-- 6852f1b1-9f1d-11ea-8cd3-333445793454 <=< ACCEPT -->
        Gets the maximum size of the collection (the bound).
        @return the maximum number of elements the collection can hold
        <!-- ACCEPT >=> 6852f1b1-9f1d-11ea-8cd3-333445793454 -->



## Method: `java.org.apache.commons.collections4.queue.CircularFifoQueue` / `public void clear()`


        <!-- 6852f1b2-9f1d-11ea-8cd4-333445793454 <=< ACCEPT -->
        Clears this queue.
        <!-- ACCEPT >=> 6852f1b2-9f1d-11ea-8cd4-333445793454 -->



## Method: `java.org.apache.commons.collections4.queue.CircularFifoQueue` / `public boolean add(final E element)`


        <!-- 6852f1b3-9f1d-11ea-8cd5-333445793454 <=< ACCEPT -->
        Adds the given element to this queue. If the queue is full, the least recently added
        element is discarded so that a new element can be inserted.
        @param element  the element to add
        @return true, always
        @throws NullPointerException  if the given element is null
        <!-- ACCEPT >=> 6852f1b3-9f1d-11ea-8cd5-333445793454 -->



## Method: `java.org.apache.commons.collections4.queue.CircularFifoQueue` / `public E get(final int index)`


        <!-- 6852f1b4-9f1d-11ea-8cd6-333445793454 <=< ACCEPT -->
        Returns the element at the specified position in this queue.
        @param index the position of the element in the queue
        @return the element at position {@code index}
        @throws NoSuchElementException if the requested position is outside the range [0, size)
        <!-- ACCEPT >=> 6852f1b4-9f1d-11ea-8cd6-333445793454 -->



## Method: `java.org.apache.commons.collections4.queue.CircularFifoQueue` / `public boolean offer(E element)`


        <!-- 6852f1b5-9f1d-11ea-8cd7-333445793454 <=< ACCEPT -->
        Adds the given element to this queue. If the queue is full, the least recently added
        element is discarded so that a new element can be inserted.
        @param element  the element to add
        @return true, always
        @throws NullPointerException  if the given element is null
        <!-- ACCEPT >=> 6852f1b5-9f1d-11ea-8cd7-333445793454 -->



## Method: `java.org.apache.commons.collections4.queue.CircularFifoQueue` / `private int increment(int index)`


        <!-- 6852f1b6-9f1d-11ea-8cd8-333445793454 <=< ACCEPT -->
        Increments the internal index.
        @param index  the index to increment
        @return the updated index
        <!-- ACCEPT >=> 6852f1b6-9f1d-11ea-8cd8-333445793454 -->



## Method: `java.org.apache.commons.collections4.queue.CircularFifoQueue` / `private int decrement(int index)`


        <!-- 6852f1b7-9f1d-11ea-8cd9-333445793454 <=< ACCEPT -->
        Decrements the internal index.
        @param index  the index to decrement
        @return the updated index
        <!-- ACCEPT >=> 6852f1b7-9f1d-11ea-8cd9-333445793454 -->



## Method: `java.org.apache.commons.collections4.queue.CircularFifoQueue` / `public Iterator<E> iterator()`


        <!-- 6852f1b8-9f1d-11ea-8cda-333445793454 <=< ACCEPT -->
        Returns an iterator over this queue's elements.
        @return an iterator over this queue's elements
        <!-- ACCEPT >=> 6852f1b8-9f1d-11ea-8cda-333445793454 -->



# File: `java.org.apache.commons.collections4.queue.PredicatedQueue`

## Class: `java.org.apache.commons.collections4.queue.PredicatedQueue` / `public class PredicatedQueue<E> extends PredicatedCollection<E> implements Queue<E>`


        <!-- 6852f1b9-9f1d-11ea-8cdb-333445793454 <=< ACCEPT -->
        Decorates another {@link Queue} to validate that additions
        match a specified predicate.
        <p>
        This queue exists to provide validation for the decorated queue.
        It is normally created to decorate an empty queue.
        If an object cannot be added to the queue, an IllegalArgumentException is thrown.
        <p>
        One usage would be to ensure that no null entries are added to the queue.
        <pre>Queue queue = PredicatedQueue.predicatedQueue(new UnboundedFifoQueue(), NotNullPredicate.INSTANCE);</pre>
        @since 4.0
        @version $Id$
        <!-- ACCEPT >=> 6852f1b9-9f1d-11ea-8cdb-333445793454 -->



## Field: `java.org.apache.commons.collections4.queue.PredicatedQueue` / `private static final long serialVersionUID`


        <!-- 6852f1ba-9f1d-11ea-8cdc-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 6852f1ba-9f1d-11ea-8cdc-333445793454 -->



## Method: `java.org.apache.commons.collections4.queue.PredicatedQueue` / `final Predicate<? super E> predicate)`


        <!-- 6852f1bb-9f1d-11ea-8cdd-333445793454 <=< ACCEPT -->
        Factory method to create a predicated (validating) queue.
        <p>
        If there are any elements already in the queue being decorated, they
        are validated.
        @param <E> the type of the elements in the queue
        @param Queue  the queue to decorate, must not be null
        @param predicate  the predicate to use for validation, must not be null
        @return a new predicated queue
        @throws NullPointerException if queue or predicate is null
        @throws IllegalArgumentException if the queue contains invalid elements
        <!-- ACCEPT >=> 6852f1bb-9f1d-11ea-8cdd-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.queue.PredicatedQueue` / `protected PredicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate)`


        <!-- 685318ae-9f1d-11ea-8cde-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        <p>
        If there are any elements already in the collection being decorated, they
        are validated.
        @param queue  the queue to decorate, must not be null
        @param predicate  the predicate to use for validation, must not be null
        @throws NullPointerException if queue or predicate is null
        @throws IllegalArgumentException if the Queue contains invalid elements
        <!-- ACCEPT >=> 685318ae-9f1d-11ea-8cde-333445793454 -->



## Method: `java.org.apache.commons.collections4.queue.PredicatedQueue` / `protected Queue<E> decorated()`


        <!-- 685318af-9f1d-11ea-8cdf-333445793454 <=< ACCEPT -->
        Gets the queue being decorated.
        @return the decorated queue
        <!-- ACCEPT >=> 685318af-9f1d-11ea-8cdf-333445793454 -->



## Method: `java.org.apache.commons.collections4.queue.PredicatedQueue` / `public boolean offer(final E object)`


        <!-- 685318b0-9f1d-11ea-8ce0-333445793454 <=< ACCEPT -->
        Override to validate the object being added to ensure it matches
        the predicate.
        @param object  the object being added
        @return the result of adding to the underlying queue
        @throws IllegalArgumentException if the add is invalid
        <!-- ACCEPT >=> 685318b0-9f1d-11ea-8ce0-333445793454 -->



# File: `java.org.apache.commons.collections4.queue.TransformedQueue`

## Class: `java.org.apache.commons.collections4.queue.TransformedQueue` / `public class TransformedQueue<E> extends TransformedCollection<E> implements Queue<E>`


        <!-- 685318b1-9f1d-11ea-8ce1-333445793454 <=< ACCEPT -->
        Decorates another {@link Queue} to transform objects that are added.
        <p>
        The add/offer methods are affected by this class.
        Thus objects must be removed or searched for using their transformed form.
        For example, if the transformation converts Strings to Integers, you must
        use the Integer form to remove objects.
        @since 4.0
        @version $Id$
        <!-- ACCEPT >=> 685318b1-9f1d-11ea-8ce1-333445793454 -->



## Field: `java.org.apache.commons.collections4.queue.TransformedQueue` / `private static final long serialVersionUID`


        <!-- 685318b2-9f1d-11ea-8ce2-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 685318b2-9f1d-11ea-8ce2-333445793454 -->



## Method: `java.org.apache.commons.collections4.queue.TransformedQueue` / `final Transformer<? super E, ? extends E> transformer)`


        <!-- 685318b3-9f1d-11ea-8ce3-333445793454 <=< ACCEPT -->
        Factory method to create a transforming queue.
        <p>
        If there are any elements already in the queue being decorated, they
        are NOT transformed.
        Contrast this with {@link #transformedQueue(Queue, Transformer)}.
        @param <E> the type of the elements in the queue
        @param queue  the queue to decorate, must not be null
        @param transformer  the transformer to use for conversion, must not be null
        @return a new transformed Queue
        @throws NullPointerException if queue or transformer is null
        <!-- ACCEPT >=> 685318b3-9f1d-11ea-8ce3-333445793454 -->



## Method: `java.org.apache.commons.collections4.queue.TransformedQueue` / `final Transformer<? super E, ? extends E> transformer)`


        <!-- 685318b4-9f1d-11ea-8ce4-333445793454 <=< ACCEPT -->
        Factory method to create a transforming queue that will transform
        existing contents of the specified queue.
        <p>
        If there are any elements already in the queue being decorated, they
        will be transformed by this method.
        Contrast this with {@link #transformingQueue(Queue, Transformer)}.
        @param <E> the type of the elements in the queue
        @param queue  the queue to decorate, must not be null
        @param transformer  the transformer to use for conversion, must not be null
        @return a new transformed Queue
        @throws NullPointerException if queue or transformer is null
        @since 4.0
        <!-- ACCEPT >=> 685318b4-9f1d-11ea-8ce4-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.queue.TransformedQueue` / `protected TransformedQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)`


        <!-- 685318b5-9f1d-11ea-8ce5-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        <p>
        If there are any elements already in the queue being decorated, they
        are NOT transformed.
        @param queue  the queue to decorate, must not be null
        @param transformer  the transformer to use for conversion, must not be null
        @throws NullPointerException if queue or transformer is null
        <!-- ACCEPT >=> 685318b5-9f1d-11ea-8ce5-333445793454 -->



## Method: `java.org.apache.commons.collections4.queue.TransformedQueue` / `protected Queue<E> getQueue()`


        <!-- 685318b6-9f1d-11ea-8ce6-333445793454 <=< ACCEPT -->
        Gets the decorated queue.
        @return the decorated queue
        <!-- ACCEPT >=> 685318b6-9f1d-11ea-8ce6-333445793454 -->



# File: `java.org.apache.commons.collections4.queue.UnmodifiableQueue`

## Class: `java.org.apache.commons.collections4.queue.UnmodifiableQueue` / `implements Unmodifiable`


        <!-- 685318b7-9f1d-11ea-8ce7-333445793454 <=< ACCEPT -->
        Decorates another {@link Queue} to ensure it can't be altered.
        <p>
        Attempts to modify it will result in an UnsupportedOperationException.
        @since 4.0
        @version $Id$
        <!-- ACCEPT >=> 685318b7-9f1d-11ea-8ce7-333445793454 -->



## Field: `java.org.apache.commons.collections4.queue.UnmodifiableQueue` / `private static final long serialVersionUID`


        <!-- 685318b8-9f1d-11ea-8ce8-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 685318b8-9f1d-11ea-8ce8-333445793454 -->



## Method: `java.org.apache.commons.collections4.queue.UnmodifiableQueue` / `public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)`


        <!-- 685318b9-9f1d-11ea-8ce9-333445793454 <=< ACCEPT -->
        Factory method to create an unmodifiable queue.
        <p>
        If the queue passed in is already unmodifiable, it is returned.
        @param <E> the type of the elements in the queue
        @param queue  the queue to decorate, must not be null
        @return an unmodifiable Queue
        @throws NullPointerException if queue is null
        <!-- ACCEPT >=> 685318b9-9f1d-11ea-8ce9-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.queue.UnmodifiableQueue` / `private UnmodifiableQueue(final Queue<? extends E> queue)`


        <!-- 685318ba-9f1d-11ea-8cea-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param queue  the queue to decorate, must not be null
        @throws NullPointerException if queue is null
        <!-- ACCEPT >=> 685318ba-9f1d-11ea-8cea-333445793454 -->



## Method: `java.org.apache.commons.collections4.queue.UnmodifiableQueue` / `private void writeObject(final ObjectOutputStream out) throws IOException`


        <!-- 685318bb-9f1d-11ea-8ceb-333445793454 <=< ACCEPT -->
        Write the collection out using a custom routine.
        @param out  the output stream
        @throws IOException if an I/O error occurs while writing to the output stream
        <!-- ACCEPT >=> 685318bb-9f1d-11ea-8ceb-333445793454 -->



## Method: `java.org.apache.commons.collections4.queue.UnmodifiableQueue` / `private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException`


        <!-- 685318bc-9f1d-11ea-8cec-333445793454 <=< ACCEPT -->
        Read the collection in using a custom routine.
        @param in  the input stream
        @throws IOException if an I/O error occurs while reading from the input stream
        @throws ClassNotFoundException if the class of a serialized object can not be found
        <!-- ACCEPT >=> 685318bc-9f1d-11ea-8cec-333445793454 -->



# File: `java.org.apache.commons.collections4.queue.package-info`

## Package: `java.org.apache.commons.collections4.queue.package-info` / `package org.apache.commons.collections4.queue`


        <!-- 685318bd-9f1d-11ea-8ced-333445793454 <=< ACCEPT -->
        This package contains implementations for the {@link java.util.Queue Queue} interface.
        <p>
        The following implementations are provided in the package:
        <ul>
        <li>CircularFifoQueue - implements a queue with a fixed size that discards oldest when full
        </ul>
        <p>
        The following decorators are provided in the package:
        <ul>
        <li>Predicated - ensures that only elements that are valid according to a predicate can be added
        <li>Transformed - transforms elements added to the queue
        <li>Unmodifiable - ensures the collection cannot be altered
        </ul>
        @version $Id$
        <!-- ACCEPT >=> 685318bd-9f1d-11ea-8ced-333445793454 -->



# File: `java.org.apache.commons.collections4.sequence.CommandVisitor`

## Interface: `java.org.apache.commons.collections4.sequence.CommandVisitor` / `public interface CommandVisitor<T>`


        <!-- 68533fb8-9f1d-11ea-8cee-333445793454 <=< ACCEPT -->
        This interface should be implemented by user object to walk
        through {@link EditScript EditScript} objects.
        <p>
        Users should implement this interface in order to walk through
        the {@link EditScript EditScript} object created by the comparison
        of two sequences. This is a direct application of the visitor
        design pattern. The {@link EditScript#visit EditScript.visit}
        method takes an object implementing this interface as an argument,
        it will perform the loop over all commands in the script and the
        proper methods of the user class will be called as the commands are
        encountered.
        <p>
        The implementation of the user visitor class will depend on the
        need. Here are two examples.
        <p>
        The first example is a visitor that build the longest common
        subsequence:
        <pre>
        import org.apache.commons.collections4.comparators.sequence.CommandVisitor;
        import java.util.ArrayList;
        public class LongestCommonSubSequence implements CommandVisitor {
        public LongestCommonSubSequence() {
        a = new ArrayList();
        }
        public void visitInsertCommand(Object object) {
        }
        public void visitKeepCommand(Object object) {
        a.add(object);
        }
        public void visitDeleteCommand(Object object) {
        }
        public Object[] getSubSequence() {
        return a.toArray();
        }
        private ArrayList a;
        }
        </pre>
        <p>
        The second example is a visitor that shows the commands and the way
        they transform the first sequence into the second one:
        <pre>
        import org.apache.commons.collections4.comparators.sequence.CommandVisitor;
        import java.util.Arrays;
        import java.util.ArrayList;
        import java.util.Iterator;
        public class ShowVisitor implements CommandVisitor {
        public ShowVisitor(Object[] sequence1) {
        v = new ArrayList();
        v.addAll(Arrays.asList(sequence1));
        index = 0;
        }
        public void visitInsertCommand(Object object) {
        v.insertElementAt(object, index++);
        display("insert", object);
        }
        public void visitKeepCommand(Object object) {
        ++index;
        display("keep  ", object);
        }
        public void visitDeleteCommand(Object object) {
        v.remove(index);
        display("delete", object);
        }
        private void display(String commandName, Object object) {
        System.out.println(commandName + " " + object + " ->" + this);
        }
        public String toString() {
        StringBuffer buffer = new StringBuffer();
        for (Iterator iter = v.iterator(); iter.hasNext();) {
        buffer.append(' ').append(iter.next());
        }
        return buffer.toString();
        }
        private ArrayList v;
        private int index;
        }
        </pre>
        @since 4.0
        @version $Id$
        <!-- ACCEPT >=> 68533fb8-9f1d-11ea-8cee-333445793454 -->



## Method: `java.org.apache.commons.collections4.sequence.CommandVisitor` / `void visitInsertCommand(T object)`


        <!-- 68533fb9-9f1d-11ea-8cef-333445793454 <=< ACCEPT -->
        Method called when an insert command is encountered.
        @param object object to insert (this object comes from the second sequence)
        <!-- ACCEPT >=> 68533fb9-9f1d-11ea-8cef-333445793454 -->



## Method: `java.org.apache.commons.collections4.sequence.CommandVisitor` / `void visitKeepCommand(T object)`


        <!-- 68533fba-9f1d-11ea-8cf0-333445793454 <=< ACCEPT -->
        Method called when a keep command is encountered.
        @param object object to keep (this object comes from the first sequence)
        <!-- ACCEPT >=> 68533fba-9f1d-11ea-8cf0-333445793454 -->



## Method: `java.org.apache.commons.collections4.sequence.CommandVisitor` / `void visitDeleteCommand(T object)`


        <!-- 68533fbb-9f1d-11ea-8cf1-333445793454 <=< ACCEPT -->
        Method called when a delete command is encountered.
        @param object object to delete (this object comes from the first sequence)
        <!-- ACCEPT >=> 68533fbb-9f1d-11ea-8cf1-333445793454 -->



# File: `java.org.apache.commons.collections4.sequence.DeleteCommand`

## Class: `java.org.apache.commons.collections4.sequence.DeleteCommand` / `public class DeleteCommand<T> extends EditCommand<T>`


        <!-- 68533fbc-9f1d-11ea-8cf2-333445793454 <=< ACCEPT -->
        Command representing the deletion of one object of the first sequence.
        <p>
        When one object of the first sequence has no corresponding object in the
        second sequence at the right place, the {@link EditScript edit script}
        transforming the first sequence into the second sequence uses an instance of
        this class to represent the deletion of this object. The objects embedded in
        these type of commands always come from the first sequence.
        @see SequencesComparator
        @see EditScript
        @since 4.0
        @version $Id$
        <!-- ACCEPT >=> 68533fbc-9f1d-11ea-8cf2-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.sequence.DeleteCommand` / `public DeleteCommand(final T object)`


        <!-- 68533fbd-9f1d-11ea-8cf3-333445793454 <=< ACCEPT -->
        Simple constructor. Creates a new instance of {@link DeleteCommand}.
        @param object  the object of the first sequence that should be deleted
        <!-- ACCEPT >=> 68533fbd-9f1d-11ea-8cf3-333445793454 -->



## Method: `java.org.apache.commons.collections4.sequence.DeleteCommand` / `public void accept(final CommandVisitor<T> visitor)`


        <!-- 68533fbe-9f1d-11ea-8cf4-333445793454 <=< ACCEPT -->
        Accept a visitor. When a <code>DeleteCommand</code> accepts a visitor, it calls
        its {@link CommandVisitor#visitDeleteCommand visitDeleteCommand} method.
        @param visitor  the visitor to be accepted
        <!-- ACCEPT >=> 68533fbe-9f1d-11ea-8cf4-333445793454 -->



# File: `java.org.apache.commons.collections4.sequence.EditCommand`

## Class: `java.org.apache.commons.collections4.sequence.EditCommand` / `public abstract class EditCommand<T>`


        <!-- 68533fbf-9f1d-11ea-8cf5-333445793454 <=< ACCEPT -->
        Abstract base class for all commands used to transform an objects sequence
        into another one.
        <p>
        When two objects sequences are compared through the
        {@link SequencesComparator#getScript SequencesComparator.getScript} method,
        the result is provided has a {@link EditScript script} containing the commands
        that progressively transform the first sequence into the second one.
        <p>
        There are only three types of commands, all of which are subclasses of this
        abstract class. Each command is associated with one object belonging to at
        least one of the sequences. These commands are {@link InsertCommand
        InsertCommand} which correspond to an object of the second sequence being
        inserted into the first sequence, {@link DeleteCommand DeleteCommand} which
        correspond to an object of the first sequence being removed and
        {@link KeepCommand KeepCommand} which correspond to an object of the first
        sequence which <code>equals</code> an object in the second sequence. It is
        guaranteed that comparison is always performed this way (i.e. the
        <code>equals</code> method of the object from the first sequence is used and
        the object passed as an argument comes from the second sequence) ; this can
        be important if subclassing is used for some elements in the first sequence
        and the <code>equals</code> method is specialized.
        @see SequencesComparator
        @see EditScript
        @since 4.0
        @version $Id$
        <!-- ACCEPT >=> 68533fbf-9f1d-11ea-8cf5-333445793454 -->



## Field: `java.org.apache.commons.collections4.sequence.EditCommand` / `private final T object`


        <!-- 68533fc0-9f1d-11ea-8cf6-333445793454 <=< ACCEPT -->
        Object on which the command should be applied.
        <!-- ACCEPT >=> 68533fc0-9f1d-11ea-8cf6-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.sequence.EditCommand` / `protected EditCommand(final T object)`


        <!-- 68533fc1-9f1d-11ea-8cf7-333445793454 <=< ACCEPT -->
        Simple constructor. Creates a new instance of EditCommand
        @param object  reference to the object associated with this command, this
        refers to an element of one of the sequences being compared
        <!-- ACCEPT >=> 68533fc1-9f1d-11ea-8cf7-333445793454 -->



## Method: `java.org.apache.commons.collections4.sequence.EditCommand` / `protected T getObject()`


        <!-- 68533fc2-9f1d-11ea-8cf8-333445793454 <=< ACCEPT -->
        Returns the object associated with this command.
        @return the object on which the command is applied
        <!-- ACCEPT >=> 68533fc2-9f1d-11ea-8cf8-333445793454 -->



## Method: `java.org.apache.commons.collections4.sequence.EditCommand` / `public abstract void accept(CommandVisitor<T> visitor)`


        <!-- 68533fc3-9f1d-11ea-8cf9-333445793454 <=< ACCEPT -->
        Accept a visitor.
        <p>
        This method is invoked for each commands belonging to
        an {@link EditScript EditScript}, in order to implement the visitor design pattern
        @param visitor  the visitor to be accepted
        <!-- ACCEPT >=> 68533fc3-9f1d-11ea-8cf9-333445793454 -->



# File: `java.org.apache.commons.collections4.sequence.EditScript`

## Class: `java.org.apache.commons.collections4.sequence.EditScript` / `public class EditScript<T>`


        <!-- 68533fc4-9f1d-11ea-8cfa-333445793454 <=< ACCEPT -->
        This class gathers all the {@link EditCommand commands} needed to transform
        one objects sequence into another objects sequence.
        <p>
        An edit script is the most general view of the differences between two
        sequences. It is built as the result of the comparison between two sequences
        by the {@link SequencesComparator SequencesComparator} class. The user can
        walk through it using the <em>visitor</em> design pattern.
        <p>
        It is guaranteed that the objects embedded in the {@link InsertCommand insert
        commands} come from the second sequence and that the objects embedded in
        either the {@link DeleteCommand delete commands} or {@link KeepCommand keep
        commands} come from the first sequence. This can be important if subclassing
        is used for some elements in the first sequence and the <code>equals</code>
        method is specialized.
        @see SequencesComparator
        @see EditCommand
        @see CommandVisitor
        @see ReplacementsHandler
        @since 4.0
        @version $Id$
        <!-- ACCEPT >=> 68533fc4-9f1d-11ea-8cfa-333445793454 -->



## Field: `java.org.apache.commons.collections4.sequence.EditScript` / `private final List<EditCommand<T>> commands`


        <!-- 68533fc5-9f1d-11ea-8cfb-333445793454 <=< ACCEPT -->
        Container for the commands.
        <!-- ACCEPT >=> 68533fc5-9f1d-11ea-8cfb-333445793454 -->



## Field: `java.org.apache.commons.collections4.sequence.EditScript` / `private int lcsLength`


        <!-- 68533fc6-9f1d-11ea-8cfc-333445793454 <=< ACCEPT -->
        Length of the longest common subsequence.
        <!-- ACCEPT >=> 68533fc6-9f1d-11ea-8cfc-333445793454 -->



## Field: `java.org.apache.commons.collections4.sequence.EditScript` / `private int modifications`


        <!-- 68533fc7-9f1d-11ea-8cfd-333445793454 <=< ACCEPT -->
        Number of modifications.
        <!-- ACCEPT >=> 68533fc7-9f1d-11ea-8cfd-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.sequence.EditScript` / `public EditScript()`


        <!-- 68533fc8-9f1d-11ea-8cfe-333445793454 <=< ACCEPT -->
        Simple constructor. Creates a new empty script.
        <!-- ACCEPT >=> 68533fc8-9f1d-11ea-8cfe-333445793454 -->



## Method: `java.org.apache.commons.collections4.sequence.EditScript` / `public void append(final KeepCommand<T> command)`


        <!-- 68533fc9-9f1d-11ea-8cff-333445793454 <=< ACCEPT -->
        Add a keep command to the script.
        @param command  command to add
        <!-- ACCEPT >=> 68533fc9-9f1d-11ea-8cff-333445793454 -->



## Method: `java.org.apache.commons.collections4.sequence.EditScript` / `public void append(final InsertCommand<T> command)`


        <!-- 68533fca-9f1d-11ea-8d00-333445793454 <=< ACCEPT -->
        Add an insert command to the script.
        @param command  command to add
        <!-- ACCEPT >=> 68533fca-9f1d-11ea-8d00-333445793454 -->



## Method: `java.org.apache.commons.collections4.sequence.EditScript` / `public void append(final DeleteCommand<T> command)`


        <!-- 685366c2-9f1d-11ea-8d01-333445793454 <=< ACCEPT -->
        Add a delete command to the script.
        @param command  command to add
        <!-- ACCEPT >=> 685366c2-9f1d-11ea-8d01-333445793454 -->



## Method: `java.org.apache.commons.collections4.sequence.EditScript` / `public void visit(final CommandVisitor<T> visitor)`


        <!-- 685366c3-9f1d-11ea-8d02-333445793454 <=< ACCEPT -->
        Visit the script. The script implements the <em>visitor</em> design
        pattern, this method is the entry point to which the user supplies its
        own visitor, the script will be responsible to drive it through the
        commands in order and call the appropriate method as each command is
        encountered.
        @param visitor  the visitor that will visit all commands in turn
        <!-- ACCEPT >=> 685366c3-9f1d-11ea-8d02-333445793454 -->



## Method: `java.org.apache.commons.collections4.sequence.EditScript` / `public int getLCSLength()`


        <!-- 685366c4-9f1d-11ea-8d03-333445793454 <=< ACCEPT -->
        Get the length of the Longest Common Subsequence (LCS). The length of the
        longest common subsequence is the number of {@link KeepCommand keep
        commands} in the script.
        @return length of the Longest Common Subsequence
        <!-- ACCEPT >=> 685366c4-9f1d-11ea-8d03-333445793454 -->



## Method: `java.org.apache.commons.collections4.sequence.EditScript` / `public int getModifications()`


        <!-- 685366c5-9f1d-11ea-8d04-333445793454 <=< ACCEPT -->
        Get the number of effective modifications. The number of effective
        modification is the number of {@link DeleteCommand delete} and
        {@link InsertCommand insert} commands in the script.
        @return number of effective modifications
        <!-- ACCEPT >=> 685366c5-9f1d-11ea-8d04-333445793454 -->



# File: `java.org.apache.commons.collections4.sequence.InsertCommand`

## Class: `java.org.apache.commons.collections4.sequence.InsertCommand` / `public class InsertCommand<T> extends EditCommand<T>`


        <!-- 685366c6-9f1d-11ea-8d05-333445793454 <=< ACCEPT -->
        Command representing the insertion of one object of the second sequence.
        <p>
        When one object of the second sequence has no corresponding object in the
        first sequence at the right place, the {@link EditScript edit script}
        transforming the first sequence into the second sequence uses an instance of
        this class to represent the insertion of this object. The objects embedded in
        these type of commands always come from the second sequence.
        @see SequencesComparator
        @see EditScript
        @since 4.0
        @version $Id$
        <!-- ACCEPT >=> 685366c6-9f1d-11ea-8d05-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.sequence.InsertCommand` / `public InsertCommand(final T object)`


        <!-- 685366c7-9f1d-11ea-8d06-333445793454 <=< ACCEPT -->
        Simple constructor. Creates a new instance of InsertCommand
        @param object  the object of the second sequence that should be inserted
        <!-- ACCEPT >=> 685366c7-9f1d-11ea-8d06-333445793454 -->



## Method: `java.org.apache.commons.collections4.sequence.InsertCommand` / `public void accept(final CommandVisitor<T> visitor)`


        <!-- 685366c8-9f1d-11ea-8d07-333445793454 <=< ACCEPT -->
        Accept a visitor. When an <code>InsertCommand</code> accepts a visitor,
        it calls its {@link CommandVisitor#visitInsertCommand visitInsertCommand}
        method.
        @param visitor  the visitor to be accepted
        <!-- ACCEPT >=> 685366c8-9f1d-11ea-8d07-333445793454 -->



# File: `java.org.apache.commons.collections4.sequence.KeepCommand`

## Class: `java.org.apache.commons.collections4.sequence.KeepCommand` / `public class KeepCommand<T> extends EditCommand<T>`


        <!-- 685366c9-9f1d-11ea-8d08-333445793454 <=< ACCEPT -->
        Command representing the keeping of one object present in both sequences.
        <p>
        When one object of the first sequence <code>equals</code> another objects in
        the second sequence at the right place, the {@link EditScript edit script}
        transforming the first sequence into the second sequence uses an instance of
        this class to represent the keeping of this object. The objects embedded in
        these type of commands always come from the first sequence.
        @see SequencesComparator
        @see EditScript
        @since 4.0
        @version $Id$
        <!-- ACCEPT >=> 685366c9-9f1d-11ea-8d08-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.sequence.KeepCommand` / `public KeepCommand(final T object)`


        <!-- 685366ca-9f1d-11ea-8d09-333445793454 <=< ACCEPT -->
        Simple constructor. Creates a new instance of KeepCommand
        @param object  the object belonging to both sequences (the object is a
        reference to the instance in the first sequence which is known
        to be equal to an instance in the second sequence)
        <!-- ACCEPT >=> 685366ca-9f1d-11ea-8d09-333445793454 -->



## Method: `java.org.apache.commons.collections4.sequence.KeepCommand` / `public void accept(final CommandVisitor<T> visitor)`


        <!-- 685366cb-9f1d-11ea-8d0a-333445793454 <=< ACCEPT -->
        Accept a visitor. When a <code>KeepCommand</code> accepts a visitor, it
        calls its {@link CommandVisitor#visitKeepCommand visitKeepCommand} method.
        @param visitor  the visitor to be accepted
        <!-- ACCEPT >=> 685366cb-9f1d-11ea-8d0a-333445793454 -->



# File: `java.org.apache.commons.collections4.sequence.ReplacementsFinder`

## Class: `java.org.apache.commons.collections4.sequence.ReplacementsFinder` / `public class ReplacementsFinder<T> implements CommandVisitor<T>`


        <!-- 685366cc-9f1d-11ea-8d0b-333445793454 <=< ACCEPT -->
        This class handles sequences of replacements resulting from a comparison.
        <p>
        The comparison of two objects sequences leads to the identification of common
        parts and parts which only belong to the first or to the second sequence. The
        common parts appear in the edit script in the form of <em>keep</em> commands,
        they can be considered as synchronization objects between the two sequences.
        These synchronization objects split the two sequences in synchronized
        sub-sequences. The first sequence can be transformed into the second one by
        replacing each synchronized sub-sequence of the first sequence by the
        corresponding sub-sequence of the second sequence. This is a synthetic way to
        see an {@link EditScript edit script}, replacing individual
        {@link DeleteCommand delete}, {@link KeepCommand keep} and
        {@link InsertCommand insert} commands by fewer replacements acting on
        complete sub-sequences.
        <p>
        This class is devoted to perform this interpretation. It visits an
        {@link EditScript edit script} (because it implements the
        {@link CommandVisitor CommandVisitor} interface) and calls a user-supplied
        handler implementing the {@link ReplacementsHandler ReplacementsHandler}
        interface to process the sub-sequences.
        @see ReplacementsHandler
        @see EditScript
        @see SequencesComparator
        @since 4.0
        @version $Id$
        <!-- ACCEPT >=> 685366cc-9f1d-11ea-8d0b-333445793454 -->



## Field: `java.org.apache.commons.collections4.sequence.ReplacementsFinder` / `private final ReplacementsHandler<T> handler`


        <!-- 685366cd-9f1d-11ea-8d0c-333445793454 <=< ACCEPT -->
        Handler to call when synchronized sequences are found.
        <!-- ACCEPT >=> 685366cd-9f1d-11ea-8d0c-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.sequence.ReplacementsFinder` / `public ReplacementsFinder(final ReplacementsHandler<T> handler)`


        <!-- 685366ce-9f1d-11ea-8d0d-333445793454 <=< ACCEPT -->
        Simple constructor. Creates a new instance of {@link ReplacementsFinder}.
        @param handler  handler to call when synchronized sequences are found
        <!-- ACCEPT >=> 685366ce-9f1d-11ea-8d0d-333445793454 -->



## Method: `java.org.apache.commons.collections4.sequence.ReplacementsFinder` / `public void visitInsertCommand(final T object)`


        <!-- 685366cf-9f1d-11ea-8d0e-333445793454 <=< ACCEPT -->
        Add an object to the pending insertions set.
        @param object  object to insert
        <!-- ACCEPT >=> 685366cf-9f1d-11ea-8d0e-333445793454 -->



## Method: `java.org.apache.commons.collections4.sequence.ReplacementsFinder` / `public void visitKeepCommand(final T object)`


        <!-- 685366d0-9f1d-11ea-8d0f-333445793454 <=< ACCEPT -->
        Handle a synchronization object.
        <p>
        When a synchronization object is identified, the pending insertions and
        pending deletions sets are provided to the user handler as subsequences.
        @param object  synchronization object detected
        <!-- ACCEPT >=> 685366d0-9f1d-11ea-8d0f-333445793454 -->



## Method: `java.org.apache.commons.collections4.sequence.ReplacementsFinder` / `public void visitDeleteCommand(final T object)`


        <!-- 685366d1-9f1d-11ea-8d10-333445793454 <=< ACCEPT -->
        Add an object to the pending deletions set.
        @param object  object to delete
        <!-- ACCEPT >=> 685366d1-9f1d-11ea-8d10-333445793454 -->



# File: `java.org.apache.commons.collections4.sequence.ReplacementsHandler`

## Interface: `java.org.apache.commons.collections4.sequence.ReplacementsHandler` / `public interface ReplacementsHandler<T>`


        <!-- 685366d2-9f1d-11ea-8d11-333445793454 <=< ACCEPT -->
        This interface is devoted to handle synchronized replacement sequences.
        @see ReplacementsFinder
        @since 4.0
        @version $Id$
        <!-- ACCEPT >=> 685366d2-9f1d-11ea-8d11-333445793454 -->



## Method: `java.org.apache.commons.collections4.sequence.ReplacementsHandler` / `void handleReplacement(int skipped, List<T> from, List<T> to)`


        <!-- 685366d3-9f1d-11ea-8d12-333445793454 <=< ACCEPT -->
        Handle two synchronized sequences.
        <p>
        This method is called by a {@link ReplacementsFinder ReplacementsFinder}
        instance when it has synchronized two sub-sequences of object arrays
        being compared, and at least one of the sequences is non-empty. Since the
        sequences are synchronized, the objects before the two sub-sequences are
        equals (if they exist). This property also holds for the objects after
        the two sub-sequences.
        <p>
        The replacement is defined as replacing the <code>from</code>
        sub-sequence into the <code>to</code> sub-sequence.
        @param skipped  number of tokens skipped since the last call (i.e. number of
        tokens that were in both sequences), this number should be strictly positive
        except on the very first call where it can be zero (if the first object of
        the two sequences are different)
        @param from  sub-sequence of objects coming from the first sequence
        @param to  sub-sequence of objects coming from the second sequence
        <!-- ACCEPT >=> 685366d3-9f1d-11ea-8d12-333445793454 -->



# File: `java.org.apache.commons.collections4.sequence.SequencesComparator`

## Class: `java.org.apache.commons.collections4.sequence.SequencesComparator` / `public class SequencesComparator<T>`


        <!-- 68538dcc-9f1d-11ea-8d13-333445793454 <=< ACCEPT -->
        This class allows to compare two objects sequences.
        <p>
        The two sequences can hold any object type, as only the <code>equals</code>
        method is used to compare the elements of the sequences. It is guaranteed
        that the comparisons will always be done as <code>o1.equals(o2)</code> where
        <code>o1</code> belongs to the first sequence and <code>o2</code> belongs to
        the second sequence. This can be important if subclassing is used for some
        elements in the first sequence and the <code>equals</code> method is
        specialized.
        <p>
        Comparison can be seen from two points of view: either as giving the smallest
        modification allowing to transform the first sequence into the second one, or
        as giving the longest sequence which is a subsequence of both initial
        sequences. The <code>equals</code> method is used to compare objects, so any
        object can be put into sequences. Modifications include deleting, inserting
        or keeping one object, starting from the beginning of the first sequence.
        <p>
        This class implements the comparison algorithm, which is the very efficient
        algorithm from Eugene W. Myers
        <a href="http://www.cis.upenn.edu/~bcpierce/courses/dd/papers/diff.ps">
        An O(ND) Difference Algorithm and Its Variations</a>. This algorithm produces
        the shortest possible
        {@link EditScript edit script}
        containing all the
        {@link EditCommand commands}
        needed to transform the first sequence into the second one.
        @see EditScript
        @see EditCommand
        @see CommandVisitor
        @since 4.0
        @version $Id$
        <!-- ACCEPT >=> 68538dcc-9f1d-11ea-8d13-333445793454 -->



## Field: `java.org.apache.commons.collections4.sequence.SequencesComparator` / `private final List<T> sequence1`


        <!-- 68538dcd-9f1d-11ea-8d14-333445793454 <=< ACCEPT -->
        First sequence.
        <!-- ACCEPT >=> 68538dcd-9f1d-11ea-8d14-333445793454 -->



## Field: `java.org.apache.commons.collections4.sequence.SequencesComparator` / `private final List<T> sequence2`


        <!-- 68538dce-9f1d-11ea-8d15-333445793454 <=< ACCEPT -->
        Second sequence.
        <!-- ACCEPT >=> 68538dce-9f1d-11ea-8d15-333445793454 -->



## Field: `java.org.apache.commons.collections4.sequence.SequencesComparator` / `private final Equator<? super T> equator`


        <!-- 68538dcf-9f1d-11ea-8d16-333445793454 <=< ACCEPT -->
        The equator used for testing object equality.
        <!-- ACCEPT >=> 68538dcf-9f1d-11ea-8d16-333445793454 -->



## Field: `java.org.apache.commons.collections4.sequence.SequencesComparator` / `private final int[] vDown`


        <!-- 68538dd0-9f1d-11ea-8d17-333445793454 <=< ACCEPT -->
        Temporary variables.
        <!-- ACCEPT >=> 68538dd0-9f1d-11ea-8d17-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.sequence.SequencesComparator` / `public SequencesComparator(final List<T> sequence1, final List<T> sequence2)`


        <!-- 68538dd1-9f1d-11ea-8d18-333445793454 <=< ACCEPT -->
        Simple constructor.
        <p>
        Creates a new instance of SequencesComparator using a {@link DefaultEquator}.
        <p>
        It is <em>guaranteed</em> that the comparisons will always be done as
        <code>o1.equals(o2)</code> where <code>o1</code> belongs to the first
        sequence and <code>o2</code> belongs to the second sequence. This can be
        important if subclassing is used for some elements in the first sequence
        and the <code>equals</code> method is specialized.
        @param sequence1  first sequence to be compared
        @param sequence2  second sequence to be compared
        <!-- ACCEPT >=> 68538dd1-9f1d-11ea-8d18-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.sequence.SequencesComparator` / `public SequencesComparator(final List<T> sequence1, final List<T> sequence2, final Equator<? super T> equator)`


        <!-- 68538dd2-9f1d-11ea-8d19-333445793454 <=< ACCEPT -->
        Simple constructor.
        <p>
        Creates a new instance of SequencesComparator with a custom {@link Equator}.
        <p>
        It is <em>guaranteed</em> that the comparisons will always be done as
        <code>Equator.equate(o1, o2)</code> where <code>o1</code> belongs to the first
        sequence and <code>o2</code> belongs to the second sequence.
        @param sequence1  first sequence to be compared
        @param sequence2  second sequence to be compared
        @param equator  the equator to use for testing object equality
        <!-- ACCEPT >=> 68538dd2-9f1d-11ea-8d19-333445793454 -->



## Method: `java.org.apache.commons.collections4.sequence.SequencesComparator` / `public EditScript<T> getScript()`


        <!-- 68538dd3-9f1d-11ea-8d1a-333445793454 <=< ACCEPT -->
        Get the {@link EditScript} object.
        <p>
        It is guaranteed that the objects embedded in the {@link InsertCommand
        insert commands} come from the second sequence and that the objects
        embedded in either the {@link DeleteCommand delete commands} or
        {@link KeepCommand keep commands} come from the first sequence. This can
        be important if subclassing is used for some elements in the first
        sequence and the <code>equals</code> method is specialized.
        @return the edit script resulting from the comparison of the two
        sequences
        <!-- ACCEPT >=> 68538dd3-9f1d-11ea-8d1a-333445793454 -->



## Method: `java.org.apache.commons.collections4.sequence.SequencesComparator` / `private Snake buildSnake(final int start, final int diag, final int end1, final int end2)`


        <!-- 68538dd4-9f1d-11ea-8d1b-333445793454 <=< ACCEPT -->
        Build a snake.
        @param start  the value of the start of the snake
        @param diag  the value of the diagonal of the snake
        @param end1  the value of the end of the first sequence to be compared
        @param end2  the value of the end of the second sequence to be compared
        @return the snake built
        <!-- ACCEPT >=> 68538dd4-9f1d-11ea-8d1b-333445793454 -->



## Method: `java.org.apache.commons.collections4.sequence.SequencesComparator` / `private Snake getMiddleSnake(final int start1, final int end1, final int start2, final int end2)`


        <!-- 68538dd5-9f1d-11ea-8d1c-333445793454 <=< ACCEPT -->
        Get the middle snake corresponding to two subsequences of the
        main sequences.
        <p>
        The snake is found using the MYERS Algorithm (this algorithms has
        also been implemented in the GNU diff program). This algorithm is
        explained in Eugene Myers article:
        <a href="http://www.cs.arizona.edu/people/gene/PAPERS/diff.ps">
        An O(ND) Difference Algorithm and Its Variations</a>.
        @param start1  the begin of the first sequence to be compared
        @param end1  the end of the first sequence to be compared
        @param start2  the begin of the second sequence to be compared
        @param end2  the end of the second sequence to be compared
        @return the middle snake
        <!-- ACCEPT >=> 68538dd5-9f1d-11ea-8d1c-333445793454 -->



## Method: `java.org.apache.commons.collections4.sequence.SequencesComparator` / `final EditScript<T> script)`


        <!-- 68538dd6-9f1d-11ea-8d1d-333445793454 <=< ACCEPT -->
        Build an edit script.
        @param start1  the begin of the first sequence to be compared
        @param end1  the end of the first sequence to be compared
        @param start2  the begin of the second sequence to be compared
        @param end2  the end of the second sequence to be compared
        @param script the edited script
        <!-- ACCEPT >=> 68538dd6-9f1d-11ea-8d1d-333445793454 -->



## Class: `java.org.apache.commons.collections4.sequence.SequencesComparator` / `private static class Snake`


        <!-- 68538dd7-9f1d-11ea-8d1e-333445793454 <=< ACCEPT -->
        This class is a simple placeholder to hold the end part of a path
        under construction in a {@link SequencesComparator SequencesComparator}.
        <!-- ACCEPT >=> 68538dd7-9f1d-11ea-8d1e-333445793454 -->



## Field: `java.org.apache.commons.collections4.sequence.SequencesComparator` / `private final int start`


        <!-- 68538dd8-9f1d-11ea-8d1f-333445793454 <=< ACCEPT -->
        Start index.
        <!-- ACCEPT >=> 68538dd8-9f1d-11ea-8d1f-333445793454 -->



## Field: `java.org.apache.commons.collections4.sequence.SequencesComparator` / `private final int end`


        <!-- 68538dd9-9f1d-11ea-8d20-333445793454 <=< ACCEPT -->
        End index.
        <!-- ACCEPT >=> 68538dd9-9f1d-11ea-8d20-333445793454 -->



## Field: `java.org.apache.commons.collections4.sequence.SequencesComparator` / `private final int diag`


        <!-- 68538dda-9f1d-11ea-8d21-333445793454 <=< ACCEPT -->
        Diagonal number.
        <!-- ACCEPT >=> 68538dda-9f1d-11ea-8d21-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.sequence.SequencesComparator` / `public Snake(final int start, final int end, final int diag)`


        <!-- 68538ddb-9f1d-11ea-8d22-333445793454 <=< ACCEPT -->
        Simple constructor. Creates a new instance of Snake with specified indices.
        @param start  start index of the snake
        @param end  end index of the snake
        @param diag  diagonal number
        <!-- ACCEPT >=> 68538ddb-9f1d-11ea-8d22-333445793454 -->



## Method: `java.org.apache.commons.collections4.sequence.SequencesComparator` / `public int getStart()`


        <!-- 68538ddc-9f1d-11ea-8d23-333445793454 <=< ACCEPT -->
        Get the start index of the snake.
        @return start index of the snake
        <!-- ACCEPT >=> 68538ddc-9f1d-11ea-8d23-333445793454 -->



## Method: `java.org.apache.commons.collections4.sequence.SequencesComparator` / `public int getEnd()`


        <!-- 68538ddd-9f1d-11ea-8d24-333445793454 <=< ACCEPT -->
        Get the end index of the snake.
        @return end index of the snake
        <!-- ACCEPT >=> 68538ddd-9f1d-11ea-8d24-333445793454 -->



## Method: `java.org.apache.commons.collections4.sequence.SequencesComparator` / `public int getDiag()`


        <!-- 68538dde-9f1d-11ea-8d25-333445793454 <=< ACCEPT -->
        Get the diagonal number of the snake.
        @return diagonal number of the snake
        <!-- ACCEPT >=> 68538dde-9f1d-11ea-8d25-333445793454 -->



# File: `java.org.apache.commons.collections4.sequence.package-info`

## Package: `java.org.apache.commons.collections4.sequence.package-info` / `package org.apache.commons.collections4.sequence`


        <!-- 6853b4d6-9f1d-11ea-8d26-333445793454 <=< ACCEPT -->
        This package provides classes to compare two sequences of objects.
        <p>
        The two sequences can hold any object type, as only the
        <code>equals</code> method is used to compare the elements of the
        sequences. It is guaranteed that the comparisons will always be done
        as <code>o1.equals(o2)</code> where <code>o1</code> belongs to the
        first sequence and <code>o2</code> belongs to the second
        sequence. This can be important if subclassing is used for some
        elements in the first sequence and the <code>equals</code> method is
        specialized.
        <p>
        Comparison can be seen from two points of view: either as giving the
        smallest modification allowing to transform the first sequence into
        the second one, or as giving the longest sequence which is a
        subsequence of both initial sequences. The <code>equals</code> method
        is used to compare objects, so any object can be put into
        sequences. Modifications include deleting, inserting or keeping one
        object, starting from the beginning of the first sequence. Like most
        algorithms of the same type, objects transpositions are not
        supported. This means that if a sequence <code>(A, B)</code> is
        compared to <code>(B, A)</code>, the result will be either the
        sequence of three commands <code>delete A</code>, <code>keep B</code>,
        <code>insert A</code> or the sequence  <code>insert B</code>,
        <code>keep A</code>, <code>delete B</code>.
        <p>
        The package uses a very efficient comparison algorithm designed by
        Eugene W. Myers and described in his paper: <a
        href="http://www.cis.upenn.edu/~bcpierce/courses/dd/papers/diff.ps">An O(ND)
        Difference Algorithm and Its Variations</a>. This algorithm produces
        the shortest possible
        {@link org.apache.commons.collections4.sequence.EditScript edit script} containing
        all the {@link org.apache.commons.collections4.sequence.EditCommand commands}
        needed to transform the first sequence into the second one.
        The entry point for the user to this algorithm is the
        {@link org.apache.commons.collections4.sequence.SequencesComparator} class.
        <p>
        As explained in Gene Myers paper, the edit script is equivalent to all
        other representations and contains all the needed information either
        to perform the transformation, of course, or to retrieve the longest
        common subsequence for example.
        <p>
        If the user needs a very fine grained access to the comparison result,
        he needs to go through this script by providing a visitor implementing
        the {@link org.apache.commons.collections4.sequence.CommandVisitor} interface.
        <p>
        Sometimes however, a more synthetic approach is needed. If the user
        prefers to see the differences between the two sequences as global
        <code>replacement</code> operations acting on complete subsequences of
        the original sequences, he will provide an object implementing the
        simple {@link org.apache.commons.collections4.sequence.ReplacementsHandler} interface,
        using an instance of the {@link org.apache.commons.collections4.sequence.ReplacementsFinder}
        class as a command converting layer between his object and the edit script. The number of
        objects which are common to both initial arrays and hence are skipped between each call to the user
        {@link org.apache.commons.collections4.sequence.ReplacementsHandler#handleReplacement handleReplacement}
        method is also provided. This allows the user to keep track of the current index in
        both arrays if he needs so.
        @version $Id$
        <!-- ACCEPT >=> 6853b4d6-9f1d-11ea-8d26-333445793454 -->



# File: `java.org.apache.commons.collections4.set.AbstractNavigableSetDecorator`

## Class: `java.org.apache.commons.collections4.set.AbstractNavigableSetDecorator` / `implements NavigableSet<E>`


        <!-- 6853b4d7-9f1d-11ea-8d27-333445793454 <=< ACCEPT -->
        Decorates another <code>NavigableSet</code> to provide additional behaviour.
        <p>
        Methods are forwarded directly to the decorated set.
        @param <E> the type of the elements in the navigable set
        @since 4.1
        @version $Id$
        <!-- ACCEPT >=> 6853b4d7-9f1d-11ea-8d27-333445793454 -->



## Field: `java.org.apache.commons.collections4.set.AbstractNavigableSetDecorator` / `private static final long serialVersionUID`


        <!-- 6853b4d8-9f1d-11ea-8d28-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 6853b4d8-9f1d-11ea-8d28-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.set.AbstractNavigableSetDecorator` / `protected AbstractNavigableSetDecorator()`


        <!-- 6853b4d9-9f1d-11ea-8d29-333445793454 <=< ACCEPT -->
        Constructor only used in deserialization, do not use otherwise.
        <!-- ACCEPT >=> 6853b4d9-9f1d-11ea-8d29-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.set.AbstractNavigableSetDecorator` / `protected AbstractNavigableSetDecorator(final NavigableSet<E> set)`


        <!-- 6853b4da-9f1d-11ea-8d2a-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param set  the set to decorate, must not be null
        @throws NullPointerException if set is null
        <!-- ACCEPT >=> 6853b4da-9f1d-11ea-8d2a-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.AbstractNavigableSetDecorator` / `protected NavigableSet<E> decorated()`


        <!-- 6853b4db-9f1d-11ea-8d2b-333445793454 <=< ACCEPT -->
        Gets the set being decorated.
        @return the decorated set
        <!-- ACCEPT >=> 6853b4db-9f1d-11ea-8d2b-333445793454 -->



# File: `java.org.apache.commons.collections4.set.AbstractSerializableSetDecorator`

## Class: `java.org.apache.commons.collections4.set.AbstractSerializableSetDecorator` / `extends AbstractSetDecorator<E>`


        <!-- 6853b4dc-9f1d-11ea-8d2c-333445793454 <=< ACCEPT -->
        Serializable subclass of AbstractSetDecorator.
        @since 3.1
        @version $Id$
        <!-- ACCEPT >=> 6853b4dc-9f1d-11ea-8d2c-333445793454 -->



## Field: `java.org.apache.commons.collections4.set.AbstractSerializableSetDecorator` / `private static final long serialVersionUID`


        <!-- 6853b4dd-9f1d-11ea-8d2d-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 6853b4dd-9f1d-11ea-8d2d-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.set.AbstractSerializableSetDecorator` / `protected AbstractSerializableSetDecorator(final Set<E> set)`


        <!-- 6853b4de-9f1d-11ea-8d2e-333445793454 <=< ACCEPT -->
        Constructor.
        @param set  the list to decorate, must not be null
        @throws NullPointerException if set is null
        <!-- ACCEPT >=> 6853b4de-9f1d-11ea-8d2e-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.AbstractSerializableSetDecorator` / `private void writeObject(final ObjectOutputStream out) throws IOException`


        <!-- 6853b4df-9f1d-11ea-8d2f-333445793454 <=< ACCEPT -->
        Write the set out using a custom routine.
        @param out  the output stream
        @throws IOException
        <!-- ACCEPT >=> 6853b4df-9f1d-11ea-8d2f-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.AbstractSerializableSetDecorator` / `private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException`


        <!-- 6853b4e0-9f1d-11ea-8d30-333445793454 <=< ACCEPT -->
        Read the set in using a custom routine.
        @param in  the input stream
        @throws IOException
        @throws ClassNotFoundException
        <!-- ACCEPT >=> 6853b4e0-9f1d-11ea-8d30-333445793454 -->



# File: `java.org.apache.commons.collections4.set.AbstractSetDecorator`

## Class: `java.org.apache.commons.collections4.set.AbstractSetDecorator` / `Set<E>`


        <!-- 6853b4e1-9f1d-11ea-8d31-333445793454 <=< ACCEPT -->
        Decorates another <code>Set</code> to provide additional behaviour.
        <p>
        Methods are forwarded directly to the decorated set.
        @param <E> the type of the elements in the set
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 6853b4e1-9f1d-11ea-8d31-333445793454 -->



## Field: `java.org.apache.commons.collections4.set.AbstractSetDecorator` / `private static final long serialVersionUID`


        <!-- 6853b4e2-9f1d-11ea-8d32-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 6853b4e2-9f1d-11ea-8d32-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.set.AbstractSetDecorator` / `protected AbstractSetDecorator()`


        <!-- 6853b4e3-9f1d-11ea-8d33-333445793454 <=< ACCEPT -->
        Constructor only used in deserialization, do not use otherwise.
        @since 3.1
        <!-- ACCEPT >=> 6853b4e3-9f1d-11ea-8d33-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.set.AbstractSetDecorator` / `protected AbstractSetDecorator(final Set<E> set)`


        <!-- 6853b4e4-9f1d-11ea-8d34-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param set  the set to decorate, must not be null
        @throws NullPointerException if set is null
        <!-- ACCEPT >=> 6853b4e4-9f1d-11ea-8d34-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.AbstractSetDecorator` / `protected Set<E> decorated()`


        <!-- 6853b4e5-9f1d-11ea-8d35-333445793454 <=< ACCEPT -->
        Gets the set being decorated.
        @return the decorated set
        <!-- ACCEPT >=> 6853b4e5-9f1d-11ea-8d35-333445793454 -->



# File: `java.org.apache.commons.collections4.set.AbstractSortedSetDecorator`

## Class: `java.org.apache.commons.collections4.set.AbstractSortedSetDecorator` / `implements SortedSet<E>`


        <!-- 6853b4e6-9f1d-11ea-8d36-333445793454 <=< ACCEPT -->
        Decorates another <code>SortedSet</code> to provide additional behaviour.
        <p>
        Methods are forwarded directly to the decorated set.
        @param <E> the type of the elements in the sorted set
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 6853b4e6-9f1d-11ea-8d36-333445793454 -->



## Field: `java.org.apache.commons.collections4.set.AbstractSortedSetDecorator` / `private static final long serialVersionUID`


        <!-- 6853b4e7-9f1d-11ea-8d37-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 6853b4e7-9f1d-11ea-8d37-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.set.AbstractSortedSetDecorator` / `protected AbstractSortedSetDecorator()`


        <!-- 6853b4e8-9f1d-11ea-8d38-333445793454 <=< ACCEPT -->
        Constructor only used in deserialization, do not use otherwise.
        @since 3.1
        <!-- ACCEPT >=> 6853b4e8-9f1d-11ea-8d38-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.set.AbstractSortedSetDecorator` / `protected AbstractSortedSetDecorator(final Set<E> set)`


        <!-- 6853b4e9-9f1d-11ea-8d39-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param set  the set to decorate, must not be null
        @throws NullPointerException if set is null
        <!-- ACCEPT >=> 6853b4e9-9f1d-11ea-8d39-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.AbstractSortedSetDecorator` / `protected SortedSet<E> decorated()`


        <!-- 6853b4ea-9f1d-11ea-8d3a-333445793454 <=< ACCEPT -->
        Gets the set being decorated.
        @return the decorated set
        <!-- ACCEPT >=> 6853b4ea-9f1d-11ea-8d3a-333445793454 -->



# File: `java.org.apache.commons.collections4.set.CompositeSet`

## Class: `java.org.apache.commons.collections4.set.CompositeSet` / `public class CompositeSet<E> implements Set<E>, Serializable`


        <!-- 6853dbe0-9f1d-11ea-8d3b-333445793454 <=< ACCEPT -->
        Decorates a set of other sets to provide a single unified view.
        <p>
        Changes made to this set will actually be made on the decorated set.
        Add operations require the use of a pluggable strategy.
        If no strategy is provided then add is unsupported.
        <p>
        From version 4.0, this class does not extend
        {@link org.apache.commons.collections4.collection.CompositeCollection CompositeCollection}
        anymore due to its input restrictions (only accepts Sets).
        See <a href="https://issues.apache.org/jira/browse/COLLECTIONS-424">COLLECTIONS-424</a>
        for more details.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 6853dbe0-9f1d-11ea-8d3b-333445793454 -->



## Field: `java.org.apache.commons.collections4.set.CompositeSet` / `private static final long serialVersionUID`


        <!-- 6853dbe1-9f1d-11ea-8d3c-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 6853dbe1-9f1d-11ea-8d3c-333445793454 -->



## Field: `java.org.apache.commons.collections4.set.CompositeSet` / `private SetMutator<E> mutator`


        <!-- 6853dbe2-9f1d-11ea-8d3d-333445793454 <=< ACCEPT -->
        SetMutator to handle changes to the collection
        <!-- ACCEPT >=> 6853dbe2-9f1d-11ea-8d3d-333445793454 -->



## Field: `java.org.apache.commons.collections4.set.CompositeSet` / `private final List<Set<E>> all`


        <!-- 6853dbe3-9f1d-11ea-8d3e-333445793454 <=< ACCEPT -->
        Sets in the composite
        <!-- ACCEPT >=> 6853dbe3-9f1d-11ea-8d3e-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.set.CompositeSet` / `public CompositeSet()`


        <!-- 6853dbe4-9f1d-11ea-8d3f-333445793454 <=< ACCEPT -->
        Create an empty CompositeSet.
        <!-- ACCEPT >=> 6853dbe4-9f1d-11ea-8d3f-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.set.CompositeSet` / `public CompositeSet(final Set<E> set)`


        <!-- 6853dbe5-9f1d-11ea-8d40-333445793454 <=< ACCEPT -->
        Create a CompositeSet with just <code>set</code> composited.
        @param set  the initial set in the composite
        <!-- ACCEPT >=> 6853dbe5-9f1d-11ea-8d40-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.set.CompositeSet` / `public CompositeSet(final Set<E>... sets)`


        <!-- 6853dbe6-9f1d-11ea-8d41-333445793454 <=< ACCEPT -->
        Create a composite set with sets as the initial set of composited Sets.
        @param sets  the initial sets in the composite
        <!-- ACCEPT >=> 6853dbe6-9f1d-11ea-8d41-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.CompositeSet` / `public int size()`


        <!-- 6853dbe7-9f1d-11ea-8d42-333445793454 <=< ACCEPT -->
        Gets the size of this composite set.
        <p>
        This implementation calls <code>size()</code> on each set.
        @return total number of elements in all contained containers
        <!-- ACCEPT >=> 6853dbe7-9f1d-11ea-8d42-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.CompositeSet` / `public boolean isEmpty()`


        <!-- 6853dbe8-9f1d-11ea-8d43-333445793454 <=< ACCEPT -->
        Checks whether this composite set is empty.
        <p>
        This implementation calls <code>isEmpty()</code> on each set.
        @return true if all of the contained sets are empty
        <!-- ACCEPT >=> 6853dbe8-9f1d-11ea-8d43-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.CompositeSet` / `public boolean contains(final Object obj)`


        <!-- 6853dbe9-9f1d-11ea-8d44-333445793454 <=< ACCEPT -->
        Checks whether this composite set contains the object.
        <p>
        This implementation calls <code>contains()</code> on each set.
        @param obj  the object to search for
        @return true if obj is contained in any of the contained sets
        <!-- ACCEPT >=> 6853dbe9-9f1d-11ea-8d44-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.CompositeSet` / `public Iterator<E> iterator()`


        <!-- 6853dbea-9f1d-11ea-8d45-333445793454 <=< ACCEPT -->
        Gets an iterator over all the sets in this composite.
        <p>
        This implementation uses an <code>IteratorChain</code>.
        @return an <code>IteratorChain</code> instance which supports
        <code>remove()</code>. Iteration occurs over contained collections in
        the order they were added, but this behavior should not be relied upon.
        @see IteratorChain
        <!-- ACCEPT >=> 6853dbea-9f1d-11ea-8d45-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.CompositeSet` / `public Object[] toArray()`


        <!-- 6853dbeb-9f1d-11ea-8d46-333445793454 <=< ACCEPT -->
        Returns an array containing all of the elements in this composite.
        @return an object array of all the elements in the collection
        <!-- ACCEPT >=> 6853dbeb-9f1d-11ea-8d46-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.CompositeSet` / `public <T> T[] toArray(final T[] array)`


        <!-- 6853dbec-9f1d-11ea-8d47-333445793454 <=< ACCEPT -->
        Returns an object array, populating the supplied array if possible.
        See <code>Collection</code> interface for full details.
        @param <T>  the type of the elements in the collection
        @param array  the array to use, populating if possible
        @return an array of all the elements in the collection
        <!-- ACCEPT >=> 6853dbec-9f1d-11ea-8d47-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.CompositeSet` / `public boolean add(final E obj)`


        <!-- 6853dbed-9f1d-11ea-8d48-333445793454 <=< ACCEPT -->
        Adds an object to the collection, throwing UnsupportedOperationException
        unless a SetMutator strategy is specified.
        @param obj  the object to add
        @return {@code true} if the collection was modified
        @throws UnsupportedOperationException if SetMutator hasn't been set or add is unsupported
        @throws ClassCastException if the object cannot be added due to its type
        @throws NullPointerException if the object cannot be added because its null
        @throws IllegalArgumentException if the object cannot be added
        <!-- ACCEPT >=> 6853dbed-9f1d-11ea-8d48-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.CompositeSet` / `public boolean remove(final Object obj)`


        <!-- 6853dbee-9f1d-11ea-8d49-333445793454 <=< ACCEPT -->
        If a <code>CollectionMutator</code> is defined for this CompositeSet then this
        method will be called anyway.
        @param obj  object to be removed
        @return true if the object is removed, false otherwise
        <!-- ACCEPT >=> 6853dbee-9f1d-11ea-8d49-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.CompositeSet` / `public boolean containsAll(final Collection<?> coll)`


        <!-- 6853dbef-9f1d-11ea-8d4a-333445793454 <=< ACCEPT -->
        Checks whether this composite contains all the elements in the specified collection.
        <p>
        This implementation calls <code>contains()</code> for each element in the
        specified collection.
        @param coll  the collection to check for
        @return true if all elements contained
        <!-- ACCEPT >=> 6853dbef-9f1d-11ea-8d4a-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.CompositeSet` / `public boolean addAll(final Collection<? extends E> coll)`


        <!-- 6853dbf0-9f1d-11ea-8d4b-333445793454 <=< ACCEPT -->
        Adds a collection of elements to this composite, throwing
        UnsupportedOperationException unless a SetMutator strategy is specified.
        @param coll  the collection to add
        @return true if the composite was modified
        @throws UnsupportedOperationException if SetMutator hasn't been set or add is unsupported
        @throws ClassCastException if the object cannot be added due to its type
        @throws NullPointerException if the object cannot be added because its null
        @throws IllegalArgumentException if the object cannot be added
        <!-- ACCEPT >=> 6853dbf0-9f1d-11ea-8d4b-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.CompositeSet` / `public boolean removeAll(final Collection<?> coll)`


        <!-- 6853dbf1-9f1d-11ea-8d4c-333445793454 <=< ACCEPT -->
        Removes the elements in the specified collection from this composite set.
        <p>
        This implementation calls <code>removeAll</code> on each collection.
        @param coll  the collection to remove
        @return true if the composite was modified
        @throws UnsupportedOperationException if removeAll is unsupported
        <!-- ACCEPT >=> 6853dbf1-9f1d-11ea-8d4c-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.CompositeSet` / `public boolean retainAll(final Collection<?> coll)`


        <!-- 6853dbf2-9f1d-11ea-8d4d-333445793454 <=< ACCEPT -->
        Retains all the elements in the specified collection in this composite set,
        removing all others.
        <p>
        This implementation calls <code>retainAll()</code> on each collection.
        @param coll  the collection to remove
        @return true if the composite was modified
        @throws UnsupportedOperationException if retainAll is unsupported
        <!-- ACCEPT >=> 6853dbf2-9f1d-11ea-8d4d-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.CompositeSet` / `public void clear()`


        <!-- 6853dbf3-9f1d-11ea-8d4e-333445793454 <=< ACCEPT -->
        Removes all of the elements from this composite set.
        <p>
        This implementation calls <code>clear()</code> on each set.
        @throws UnsupportedOperationException if clear is unsupported
        <!-- ACCEPT >=> 6853dbf3-9f1d-11ea-8d4e-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.CompositeSet` / `public void setMutator(final SetMutator<E> mutator)`


        <!-- 6853dbf4-9f1d-11ea-8d4f-333445793454 <=< ACCEPT -->
        Specify a SetMutator strategy instance to handle changes.
        @param mutator  the mutator to use
        <!-- ACCEPT >=> 6853dbf4-9f1d-11ea-8d4f-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.CompositeSet` / `public synchronized void addComposited(final Set<E> set)`


        <!-- 6853dbf5-9f1d-11ea-8d50-333445793454 <=< ACCEPT -->
        Add a Set to this composite.
        @param set  the set to add
        @throws IllegalArgumentException if a SetMutator is set, but fails to resolve a collision
        @throws UnsupportedOperationException if there is no SetMutator set
        @throws NullPointerException if {@code set} is null
        @see SetMutator
        <!-- ACCEPT >=> 6853dbf5-9f1d-11ea-8d50-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.CompositeSet` / `public void addComposited(final Set<E> set1, final Set<E> set2)`


        <!-- 685402ea-9f1d-11ea-8d51-333445793454 <=< ACCEPT -->
        Add these Sets to the list of sets in this composite.
        @param set1  the first Set to be appended to the composite
        @param set2  the second Set to be appended to the composite
        <!-- ACCEPT >=> 685402ea-9f1d-11ea-8d51-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.CompositeSet` / `public void addComposited(final Set<E>... sets)`


        <!-- 685402eb-9f1d-11ea-8d52-333445793454 <=< ACCEPT -->
        Add these Sets to the list of sets in this composite
        @param sets  the Sets to be appended to the composite
        <!-- ACCEPT >=> 685402eb-9f1d-11ea-8d52-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.CompositeSet` / `public void removeComposited(final Set<E> set)`


        <!-- 685402ec-9f1d-11ea-8d53-333445793454 <=< ACCEPT -->
        Removes a set from those being decorated in this composite.
        @param set  set to be removed
        <!-- ACCEPT >=> 685402ec-9f1d-11ea-8d53-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.CompositeSet` / `public Set<E> toSet()`


        <!-- 685402ed-9f1d-11ea-8d54-333445793454 <=< ACCEPT -->
        Returns a new Set containing all of the elements.
        @return A new HashSet containing all of the elements in this composite.
        The new collection is <i>not</i> backed by this composite.
        <!-- ACCEPT >=> 685402ed-9f1d-11ea-8d54-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.CompositeSet` / `public List<Set<E>> getSets()`


        <!-- 685402ee-9f1d-11ea-8d55-333445793454 <=< ACCEPT -->
        Gets the sets being decorated.
        @return Unmodifiable list of all sets in this composite.
        <!-- ACCEPT >=> 685402ee-9f1d-11ea-8d55-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.CompositeSet` / `protected SetMutator<E> getMutator()`


        <!-- 685402ef-9f1d-11ea-8d56-333445793454 <=< ACCEPT -->
        Get the set mutator to be used for this CompositeSet.
        @return the set mutator
        <!-- ACCEPT >=> 685402ef-9f1d-11ea-8d56-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.CompositeSet` / `public boolean equals(final Object obj)`


        <!-- 685402f0-9f1d-11ea-8d57-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        @see java.util.Set#equals
        <!-- ACCEPT >=> 685402f0-9f1d-11ea-8d57-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.CompositeSet` / `public int hashCode()`


        <!-- 685402f1-9f1d-11ea-8d58-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        @see java.util.Set#hashCode
        <!-- ACCEPT >=> 685402f1-9f1d-11ea-8d58-333445793454 -->



## Interface: `java.org.apache.commons.collections4.set.CompositeSet` / `public static interface SetMutator<E> extends Serializable`


        <!-- 685402f2-9f1d-11ea-8d59-333445793454 <=< ACCEPT -->
        Define callbacks for mutation operations.
        <!-- ACCEPT >=> 685402f2-9f1d-11ea-8d59-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.CompositeSet` / `boolean add(CompositeSet<E> composite, List<Set<E>> sets, E obj)`


        <!-- 685402f3-9f1d-11ea-8d5a-333445793454 <=< ACCEPT -->
        Called when an object is to be added to the composite.
        @param composite  the CompositeSet being changed
        @param sets  all of the Set instances in this CompositeSet
        @param obj  the object being added
        @return true if the collection is changed
        @throws UnsupportedOperationException if add is unsupported
        @throws ClassCastException if the object cannot be added due to its type
        @throws NullPointerException if the object cannot be added because its null
        @throws IllegalArgumentException if the object cannot be added
        <!-- ACCEPT >=> 685402f3-9f1d-11ea-8d5a-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.CompositeSet` / `Collection<? extends E> coll)`


        <!-- 685402f4-9f1d-11ea-8d5b-333445793454 <=< ACCEPT -->
        Called when a collection is to be added to the composite.
        @param composite  the CompositeSet being changed
        @param sets  all of the Set instances in this CompositeSet
        @param coll  the collection being added
        @return true if the collection is changed
        @throws UnsupportedOperationException if add is unsupported
        @throws ClassCastException if the object cannot be added due to its type
        @throws NullPointerException if the object cannot be added because its null
        @throws IllegalArgumentException if the object cannot be added
        <!-- ACCEPT >=> 685402f4-9f1d-11ea-8d5b-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.CompositeSet` / `Collection<E> intersects)`


        <!-- 685402f5-9f1d-11ea-8d5c-333445793454 <=< ACCEPT -->
        Called when a Set is added to the CompositeSet and there is a
        collision between existing and added sets.
        <p>
        If <code>added</code> and <code>existing</code> still have any intersects
        after this method returns an IllegalArgumentException will be thrown.
        @param comp  the CompositeSet being modified
        @param existing  the Set already existing in the composite
        @param added  the Set being added to the composite
        @param intersects  the intersection of the existing and added sets
        <!-- ACCEPT >=> 685402f5-9f1d-11ea-8d5c-333445793454 -->



# File: `java.org.apache.commons.collections4.set.ListOrderedSet`

## Class: `java.org.apache.commons.collections4.set.ListOrderedSet` / `extends AbstractSerializableSetDecorator<E>`


        <!-- 685402f6-9f1d-11ea-8d5d-333445793454 <=< ACCEPT -->
        Decorates another <code>Set</code> to ensure that the order of addition is
        retained and used by the iterator.
        <p>
        If an object is added to the set for a second time, it will remain in the
        original position in the iteration. The order can be observed from the set
        via the iterator or toArray methods.
        <p>
        The ListOrderedSet also has various useful direct methods. These include many
        from <code>List</code>, such as <code>get(int)</code>,
        <code>remove(int)</code> and <code>indexOf(int)</code>. An unmodifiable
        <code>List</code> view of the set can be obtained via <code>asList()</code>.
        <p>
        This class cannot implement the <code>List</code> interface directly as
        various interface methods (notably equals/hashCode) are incompatible with a
        set.
        <p>
        This class is Serializable from Commons Collections 3.1.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 685402f6-9f1d-11ea-8d5d-333445793454 -->



## Field: `java.org.apache.commons.collections4.set.ListOrderedSet` / `private static final long serialVersionUID`


        <!-- 685402f7-9f1d-11ea-8d5e-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 685402f7-9f1d-11ea-8d5e-333445793454 -->



## Field: `java.org.apache.commons.collections4.set.ListOrderedSet` / `private final List<E> setOrder`


        <!-- 685402f8-9f1d-11ea-8d5f-333445793454 <=< ACCEPT -->
        Internal list to hold the sequence of objects
        <!-- ACCEPT >=> 685402f8-9f1d-11ea-8d5f-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.ListOrderedSet` / `public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set, final List<E> list)`


        <!-- 685429ed-9f1d-11ea-8d60-333445793454 <=< ACCEPT -->
        Factory method to create an ordered set specifying the list and set to use.
        <p>
        The list and set must both be empty.
        @param <E> the element type
        @param set the set to decorate, must be empty and not null
        @param list the list to decorate, must be empty and not null
        @return a new ordered set
        @throws NullPointerException if set or list is null
        @throws IllegalArgumentException if either the set or list is not empty
        @since 4.0
        <!-- ACCEPT >=> 685429ed-9f1d-11ea-8d60-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.ListOrderedSet` / `public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set)`


        <!-- 685429ee-9f1d-11ea-8d61-333445793454 <=< ACCEPT -->
        Factory method to create an ordered set.
        <p>
        An <code>ArrayList</code> is used to retain order.
        @param <E> the element type
        @param set the set to decorate, must not be null
        @return a new ordered set
        @throws NullPointerException if set is null
        @since 4.0
        <!-- ACCEPT >=> 685429ee-9f1d-11ea-8d61-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.ListOrderedSet` / `public static <E> ListOrderedSet<E> listOrderedSet(final List<E> list)`


        <!-- 685429ef-9f1d-11ea-8d62-333445793454 <=< ACCEPT -->
        Factory method to create an ordered set using the supplied list to retain order.
        <p>
        A <code>HashSet</code> is used for the set behaviour.
        <p>
        NOTE: If the list contains duplicates, the duplicates are removed,
        altering the specified list.
        @param <E> the element type
        @param list the list to decorate, must not be null
        @return a new ordered set
        @throws NullPointerException if list is null
        @since 4.0
        <!-- ACCEPT >=> 685429ef-9f1d-11ea-8d62-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.set.ListOrderedSet` / `public ListOrderedSet()`


        <!-- 685429f0-9f1d-11ea-8d63-333445793454 <=< ACCEPT -->
        Constructs a new empty <code>ListOrderedSet</code> using a
        <code>HashSet</code> and an <code>ArrayList</code> internally.
        @since 3.1
        <!-- ACCEPT >=> 685429f0-9f1d-11ea-8d63-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.set.ListOrderedSet` / `protected ListOrderedSet(final Set<E> set)`


        <!-- 685429f1-9f1d-11ea-8d64-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param set the set to decorate, must not be null
        @throws IllegalArgumentException if set is null
        <!-- ACCEPT >=> 685429f1-9f1d-11ea-8d64-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.set.ListOrderedSet` / `protected ListOrderedSet(final Set<E> set, final List<E> list)`


        <!-- 685429f2-9f1d-11ea-8d65-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies) the Set and specifies the list to
        use.
        <p>
        The set and list must both be correctly initialised to the same elements.
        @param set the set to decorate, must not be null
        @param list the list to decorate, must not be null
        @throws NullPointerException if set or list is null
        <!-- ACCEPT >=> 685429f2-9f1d-11ea-8d65-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.ListOrderedSet` / `public List<E> asList()`


        <!-- 685429f3-9f1d-11ea-8d66-333445793454 <=< ACCEPT -->
        Gets an unmodifiable view of the order of the Set.
        @return an unmodifiable list view
        <!-- ACCEPT >=> 685429f3-9f1d-11ea-8d66-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.ListOrderedSet` / `public boolean retainAll(final Collection<?> coll)`


        <!-- 685429f4-9f1d-11ea-8d67-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        <p>
        This implementation iterates over the elements of this set, checking
        each element in turn to see if it's contained in <code>coll</code>.
        If it's not contained, it's removed from this set. As a consequence,
        it is advised to use a collection type for <code>coll</code> that provides
        a fast (e.g. O(1)) implementation of {@link Collection#contains(Object)}.
        <!-- ACCEPT >=> 685429f4-9f1d-11ea-8d67-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.ListOrderedSet` / `public E get(final int index)`


        <!-- 685429f5-9f1d-11ea-8d68-333445793454 <=< ACCEPT -->
        Returns the element at the specified position in this ordered set.
        @param index the position of the element in the ordered {@link Set}.
        @return the element at position {@code index}
        @see List#get(int)
        <!-- ACCEPT >=> 685429f5-9f1d-11ea-8d68-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.ListOrderedSet` / `public int indexOf(final Object object)`


        <!-- 685429f6-9f1d-11ea-8d69-333445793454 <=< ACCEPT -->
        Returns the index of the first occurrence of the specified element in
        ordered set.
        @param object the element to search for
        @return the index of the first occurrence of the object, or {@code -1} if
        this ordered set does not contain this object
        @see List#indexOf(Object)
        <!-- ACCEPT >=> 685429f6-9f1d-11ea-8d69-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.ListOrderedSet` / `public void add(final int index, final E object)`


        <!-- 685429f7-9f1d-11ea-8d6a-333445793454 <=< ACCEPT -->
        Inserts the specified element at the specified position if it is not yet
        contained in this ordered set (optional operation). Shifts the element
        currently at this position and any subsequent elements to the right.
        @param index the index at which the element is to be inserted
        @param object the element to be inserted
        @see List#add(int, Object)
        <!-- ACCEPT >=> 685429f7-9f1d-11ea-8d6a-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.ListOrderedSet` / `public boolean addAll(final int index, final Collection<? extends E> coll)`


        <!-- 685429f8-9f1d-11ea-8d6b-333445793454 <=< ACCEPT -->
        Inserts all elements in the specified collection not yet contained in the
        ordered set at the specified position (optional operation). Shifts the
        element currently at the position and all subsequent elements to the
        right.
        @param index the position to insert the elements
        @param coll the collection containing the elements to be inserted
        @return {@code true} if this ordered set changed as a result of the call
        @see List#addAll(int, Collection)
        <!-- ACCEPT >=> 685429f8-9f1d-11ea-8d6b-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.ListOrderedSet` / `public E remove(final int index)`


        <!-- 685429f9-9f1d-11ea-8d6c-333445793454 <=< ACCEPT -->
        Removes the element at the specified position from the ordered set.
        Shifts any subsequent elements to the left.
        @param index the index of the element to be removed
        @return the element that has been remove from the ordered set
        @see List#remove(int)
        <!-- ACCEPT >=> 685429f9-9f1d-11ea-8d6c-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.ListOrderedSet` / `public String toString()`


        <!-- 685429fa-9f1d-11ea-8d6d-333445793454 <=< ACCEPT -->
        Uses the underlying List's toString so that order is achieved. This means
        that the decorated Set's toString is not used, so any custom toStrings
        will be ignored.
        @return a string representation of the ordered set
        <!-- ACCEPT >=> 685429fa-9f1d-11ea-8d6d-333445793454 -->



## Class: `java.org.apache.commons.collections4.set.ListOrderedSet` / `implements OrderedIterator<E>`


        <!-- 685429fb-9f1d-11ea-8d6e-333445793454 <=< ACCEPT -->
        Internal iterator handle remove.
        <!-- ACCEPT >=> 685429fb-9f1d-11ea-8d6e-333445793454 -->



## Field: `java.org.apache.commons.collections4.set.ListOrderedSet` / `private final Collection<E> set`


        <!-- 685429fc-9f1d-11ea-8d6f-333445793454 <=< ACCEPT -->
        Object we iterate on
        <!-- ACCEPT >=> 685429fc-9f1d-11ea-8d6f-333445793454 -->



## Field: `java.org.apache.commons.collections4.set.ListOrderedSet` / `private E last`


        <!-- 685429fd-9f1d-11ea-8d70-333445793454 <=< ACCEPT -->
        Last object retrieved
        <!-- ACCEPT >=> 685429fd-9f1d-11ea-8d70-333445793454 -->



# File: `java.org.apache.commons.collections4.set.MapBackedSet`

## Class: `java.org.apache.commons.collections4.set.MapBackedSet` / `public final class MapBackedSet<E, V> implements Set<E>, Serializable`


        <!-- 685450f4-9f1d-11ea-8d71-333445793454 <=< ACCEPT -->
        Decorates a <code>Map</code> to obtain <code>Set</code> behaviour.
        <p>
        This class is used to create a <code>Set</code> with the same properties as
        the key set of any map. Thus, a ReferenceSet can be created by wrapping a
        <code>ReferenceMap</code> in an instance of this class.
        <p>
        Most map implementation can be used to create a set by passing in dummy values.
        Exceptions include <code>BidiMap</code> implementations, as they require unique values.
        @since 3.1
        @version $Id$
        <!-- ACCEPT >=> 685450f4-9f1d-11ea-8d71-333445793454 -->



## Field: `java.org.apache.commons.collections4.set.MapBackedSet` / `private static final long serialVersionUID`


        <!-- 685450f5-9f1d-11ea-8d72-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 685450f5-9f1d-11ea-8d72-333445793454 -->



## Field: `java.org.apache.commons.collections4.set.MapBackedSet` / `private final Map<E, ? super V> map`


        <!-- 685450f6-9f1d-11ea-8d73-333445793454 <=< ACCEPT -->
        The map being used as the backing store
        <!-- ACCEPT >=> 685450f6-9f1d-11ea-8d73-333445793454 -->



## Field: `java.org.apache.commons.collections4.set.MapBackedSet` / `private final V dummyValue`


        <!-- 685450f7-9f1d-11ea-8d74-333445793454 <=< ACCEPT -->
        The dummyValue to use
        <!-- ACCEPT >=> 685450f7-9f1d-11ea-8d74-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.MapBackedSet` / `public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map)`


        <!-- 685450f8-9f1d-11ea-8d75-333445793454 <=< ACCEPT -->
        Factory method to create a set from a map.
        @param <E> the element type
        @param <V> the dummy value type in the map
        @param map  the map to decorate, must not be null
        @return a new map backed set
        @throws NullPointerException if map is null
        @since 4.0
        <!-- ACCEPT >=> 685450f8-9f1d-11ea-8d75-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.MapBackedSet` / `public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map, final V dummyValue)`


        <!-- 685450f9-9f1d-11ea-8d76-333445793454 <=< ACCEPT -->
        Factory method to create a set from a map.
        @param <E> the element type
        @param <V> the dummy value type in the map
        @param map  the map to decorate, must not be null
        @param dummyValue  the dummy value to use
        @return a new map backed set
        @throws NullPointerException if map is null
        @since 4.0
        <!-- ACCEPT >=> 685450f9-9f1d-11ea-8d76-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.set.MapBackedSet` / `private MapBackedSet(final Map<E, ? super V> map, final V dummyValue)`


        <!-- 685450fa-9f1d-11ea-8d77-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param map  the map to decorate, must not be null
        @param dummyValue  the dummy value to use
        @throws NullPointerException if map is null
        <!-- ACCEPT >=> 685450fa-9f1d-11ea-8d77-333445793454 -->



# File: `java.org.apache.commons.collections4.set.PredicatedNavigableSet`

## Class: `java.org.apache.commons.collections4.set.PredicatedNavigableSet` / `public class PredicatedNavigableSet<E> extends PredicatedSortedSet<E> implements NavigableSet<E>`


        <!-- 685450fb-9f1d-11ea-8d78-333445793454 <=< ACCEPT -->
        Decorates another <code>NavigableSet</code> to validate that all additions
        match a specified predicate.
        <p>
        This set exists to provide validation for the decorated set.
        It is normally created to decorate an empty set.
        If an object cannot be added to the set, an IllegalArgumentException is thrown.
        <p>
        One usage would be to ensure that no null entries are added to the set.
        <pre>
        NavigableSet set =
        PredicatedSortedSet.predicatedNavigableSet(new TreeSet(),
        NotNullPredicate.notNullPredicate());
        </pre>
        @since 4.1
        @version $Id$
        <!-- ACCEPT >=> 685450fb-9f1d-11ea-8d78-333445793454 -->



## Field: `java.org.apache.commons.collections4.set.PredicatedNavigableSet` / `private static final long serialVersionUID`


        <!-- 685450fc-9f1d-11ea-8d79-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 685450fc-9f1d-11ea-8d79-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.PredicatedNavigableSet` / `final Predicate<? super E> predicate)`


        <!-- 685450fd-9f1d-11ea-8d7a-333445793454 <=< ACCEPT -->
        Factory method to create a predicated (validating) navigable set.
        <p>
        If there are any elements already in the set being decorated, they
        are validated.
        @param <E> the element type
        @param set  the set to decorate, must not be null
        @param predicate  the predicate to use for validation, must not be null
        @return a new predicated navigable set.
        @throws NullPointerException if set or predicate is null
        @throws IllegalArgumentException if the set contains invalid elements
        @since 4.0
        <!-- ACCEPT >=> 685450fd-9f1d-11ea-8d7a-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.set.PredicatedNavigableSet` / `protected PredicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)`


        <!-- 685450fe-9f1d-11ea-8d7b-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        <p>
        If there are any elements already in the set being decorated, they
        are validated.
        @param set  the set to decorate, must not be null
        @param predicate  the predicate to use for validation, must not be null
        @throws NullPointerException if set or predicate is null
        @throws IllegalArgumentException if the set contains invalid elements
        <!-- ACCEPT >=> 685450fe-9f1d-11ea-8d7b-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.PredicatedNavigableSet` / `protected NavigableSet<E> decorated()`


        <!-- 685450ff-9f1d-11ea-8d7c-333445793454 <=< ACCEPT -->
        Gets the navigable set being decorated.
        @return the decorated navigable set
        <!-- ACCEPT >=> 685450ff-9f1d-11ea-8d7c-333445793454 -->



# File: `java.org.apache.commons.collections4.set.PredicatedSet`

## Class: `java.org.apache.commons.collections4.set.PredicatedSet` / `public class PredicatedSet<E> extends PredicatedCollection<E> implements Set<E>`


        <!-- 68545100-9f1d-11ea-8d7d-333445793454 <=< ACCEPT -->
        Decorates another <code>Set</code> to validate that all additions
        match a specified predicate.
        <p>
        This set exists to provide validation for the decorated set.
        It is normally created to decorate an empty set.
        If an object cannot be added to the set, an IllegalArgumentException is thrown.
        <p>
        One usage would be to ensure that no null entries are added to the set.
        <pre>Set set = PredicatedSet.decorate(new HashSet(), NotNullPredicate.INSTANCE);</pre>
        <p>
        This class is Serializable from Commons Collections 3.1.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 68545100-9f1d-11ea-8d7d-333445793454 -->



## Field: `java.org.apache.commons.collections4.set.PredicatedSet` / `private static final long serialVersionUID`


        <!-- 68545101-9f1d-11ea-8d7e-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 68545101-9f1d-11ea-8d7e-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.PredicatedSet` / `public static <E> PredicatedSet<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)`


        <!-- 68545102-9f1d-11ea-8d7f-333445793454 <=< ACCEPT -->
        Factory method to create a predicated (validating) set.
        <p>
        If there are any elements already in the set being decorated, they
        are validated.
        @param <E> the element type
        @param set  the set to decorate, must not be null
        @param predicate  the predicate to use for validation, must not be null
        @return a decorated set
        @throws NullPointerException if set or predicate is null
        @throws IllegalArgumentException if the set contains invalid elements
        @since 4.0
        <!-- ACCEPT >=> 68545102-9f1d-11ea-8d7f-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.set.PredicatedSet` / `protected PredicatedSet(final Set<E> set, final Predicate<? super E> predicate)`


        <!-- 68545103-9f1d-11ea-8d80-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        <p>
        If there are any elements already in the set being decorated, they
        are validated.
        @param set  the set to decorate, must not be null
        @param predicate  the predicate to use for validation, must not be null
        @throws NullPointerException if set or predicate is null
        @throws IllegalArgumentException if the set contains invalid elements
        <!-- ACCEPT >=> 68545103-9f1d-11ea-8d80-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.PredicatedSet` / `protected Set<E> decorated()`


        <!-- 68545104-9f1d-11ea-8d81-333445793454 <=< ACCEPT -->
        Gets the set being decorated.
        @return the decorated set
        <!-- ACCEPT >=> 68545104-9f1d-11ea-8d81-333445793454 -->



# File: `java.org.apache.commons.collections4.set.PredicatedSortedSet`

## Class: `java.org.apache.commons.collections4.set.PredicatedSortedSet` / `public class PredicatedSortedSet<E> extends PredicatedSet<E> implements SortedSet<E>`


        <!-- 685477fe-9f1d-11ea-8d82-333445793454 <=< ACCEPT -->
        Decorates another <code>SortedSet</code> to validate that all additions
        match a specified predicate.
        <p>
        This set exists to provide validation for the decorated set.
        It is normally created to decorate an empty set.
        If an object cannot be added to the set, an IllegalArgumentException is thrown.
        <p>
        One usage would be to ensure that no null entries are added to the set.
        <pre>
        SortedSet set =
        PredicatedSortedSet.predicatedSortedSet(new TreeSet(),
        NotNullPredicate.notNullPredicate());
        </pre>
        <p>
        This class is Serializable from Commons Collections 3.1.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 685477fe-9f1d-11ea-8d82-333445793454 -->



## Field: `java.org.apache.commons.collections4.set.PredicatedSortedSet` / `private static final long serialVersionUID`


        <!-- 685477ff-9f1d-11ea-8d83-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 685477ff-9f1d-11ea-8d83-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.PredicatedSortedSet` / `final Predicate<? super E> predicate)`


        <!-- 68547800-9f1d-11ea-8d84-333445793454 <=< ACCEPT -->
        Factory method to create a predicated (validating) sorted set.
        <p>
        If there are any elements already in the set being decorated, they
        are validated.
        @param <E> the element type
        @param set  the set to decorate, must not be null
        @param predicate  the predicate to use for validation, must not be null
        @return a new predicated sorted set.
        @throws NullPointerException if set or predicate is null
        @throws IllegalArgumentException if the set contains invalid elements
        @since 4.0
        <!-- ACCEPT >=> 68547800-9f1d-11ea-8d84-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.set.PredicatedSortedSet` / `protected PredicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)`


        <!-- 68547801-9f1d-11ea-8d85-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        <p>
        If there are any elements already in the set being decorated, they
        are validated.
        @param set  the set to decorate, must not be null
        @param predicate  the predicate to use for validation, must not be null
        @throws NullPointerException if set or predicate is null
        @throws IllegalArgumentException if the set contains invalid elements
        <!-- ACCEPT >=> 68547801-9f1d-11ea-8d85-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.PredicatedSortedSet` / `protected SortedSet<E> decorated()`


        <!-- 68547802-9f1d-11ea-8d86-333445793454 <=< ACCEPT -->
        Gets the sorted set being decorated.
        @return the decorated sorted set
        <!-- ACCEPT >=> 68547802-9f1d-11ea-8d86-333445793454 -->



# File: `java.org.apache.commons.collections4.set.TransformedNavigableSet`

## Class: `java.org.apache.commons.collections4.set.TransformedNavigableSet` / `public class TransformedNavigableSet<E> extends TransformedSortedSet<E> implements NavigableSet<E>`


        <!-- 68547803-9f1d-11ea-8d87-333445793454 <=< ACCEPT -->
        Decorates another <code>NavigableSet</code> to transform objects that are added.
        <p>
        The add methods are affected by this class.
        Thus objects must be removed or searched for using their transformed form.
        For example, if the transformation converts Strings to Integers, you must
        use the Integer form to remove objects.
        @since 4.1
        @version $Id$
        <!-- ACCEPT >=> 68547803-9f1d-11ea-8d87-333445793454 -->



## Field: `java.org.apache.commons.collections4.set.TransformedNavigableSet` / `private static final long serialVersionUID`


        <!-- 68547804-9f1d-11ea-8d88-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 68547804-9f1d-11ea-8d88-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.TransformedNavigableSet` / `final Transformer<? super E, ? extends E> transformer)`


        <!-- 68547805-9f1d-11ea-8d89-333445793454 <=< ACCEPT -->
        Factory method to create a transforming navigable set.
        <p>
        If there are any elements already in the set being decorated, they
        are NOT transformed.
        Contrast this with {@link #transformedNavigableSet(NavigableSet, Transformer)}.
        @param <E> the element type
        @param set  the set to decorate, must not be null
        @param transformer  the transformer to use for conversion, must not be null
        @return a new transformed {@link NavigableSet}
        @throws NullPointerException if set or transformer is null
        <!-- ACCEPT >=> 68547805-9f1d-11ea-8d89-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.TransformedNavigableSet` / `final Transformer<? super E, ? extends E> transformer)`


        <!-- 68547806-9f1d-11ea-8d8a-333445793454 <=< ACCEPT -->
        Factory method to create a transforming navigable set that will transform
        existing contents of the specified navigable set.
        <p>
        If there are any elements already in the set being decorated, they
        will be transformed by this method.
        Contrast this with {@link #transformingNavigableSet(NavigableSet, Transformer)}.
        @param <E> the element type
        @param set  the set to decorate, must not be null
        @param transformer  the transformer to use for conversion, must not be null
        @return a new transformed {@link NavigableSet}
        @throws NullPointerException if set or transformer is null
        <!-- ACCEPT >=> 68547806-9f1d-11ea-8d8a-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.set.TransformedNavigableSet` / `final Transformer<? super E, ? extends E> transformer)`


        <!-- 68547807-9f1d-11ea-8d8b-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        <p>
        If there are any elements already in the set being decorated, they
        are NOT transformed.
        @param set  the set to decorate, must not be null
        @param transformer  the transformer to use for conversion, must not be null
        @throws NullPointerException if set or transformer is null
        <!-- ACCEPT >=> 68547807-9f1d-11ea-8d8b-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.TransformedNavigableSet` / `protected NavigableSet<E> decorated()`


        <!-- 68547808-9f1d-11ea-8d8c-333445793454 <=< ACCEPT -->
        Gets the decorated navigable set.
        @return the decorated navigable set
        <!-- ACCEPT >=> 68547808-9f1d-11ea-8d8c-333445793454 -->



# File: `java.org.apache.commons.collections4.set.TransformedSet`

## Class: `java.org.apache.commons.collections4.set.TransformedSet` / `public class TransformedSet<E> extends TransformedCollection<E> implements Set<E>`


        <!-- 68547809-9f1d-11ea-8d8d-333445793454 <=< ACCEPT -->
        Decorates another <code>Set</code> to transform objects that are added.
        <p>
        The add methods are affected by this class.
        Thus objects must be removed or searched for using their transformed form.
        For example, if the transformation converts Strings to Integers, you must
        use the Integer form to remove objects.
        <p>
        This class is Serializable from Commons Collections 3.1.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 68547809-9f1d-11ea-8d8d-333445793454 -->



## Field: `java.org.apache.commons.collections4.set.TransformedSet` / `private static final long serialVersionUID`


        <!-- 6854780a-9f1d-11ea-8d8e-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 6854780a-9f1d-11ea-8d8e-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.TransformedSet` / `final Transformer<? super E, ? extends E> transformer)`


        <!-- 6854780b-9f1d-11ea-8d8f-333445793454 <=< ACCEPT -->
        Factory method to create a transforming set.
        <p>
        If there are any elements already in the set being decorated, they
        are NOT transformed.
        Contrast this with {@link #transformedSet(Set, Transformer)}.
        @param <E> the element type
        @param set  the set to decorate, must not be null
        @param transformer  the transformer to use for conversion, must not be null
        @return a new transformed set
        @throws NullPointerException if set or transformer is null
        @since 4.0
        <!-- ACCEPT >=> 6854780b-9f1d-11ea-8d8f-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.TransformedSet` / `public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)`


        <!-- 6854780c-9f1d-11ea-8d90-333445793454 <=< ACCEPT -->
        Factory method to create a transforming set that will transform
        existing contents of the specified set.
        <p>
        If there are any elements already in the set being decorated, they
        will be transformed by this method.
        Contrast this with {@link #transformingSet(Set, Transformer)}.
        @param <E> the element type
        @param set  the set to decorate, must not be null
        @param transformer  the transformer to use for conversion, must not be null
        @return a new transformed set
        @throws NullPointerException if set or transformer is null
        @since 4.0
        <!-- ACCEPT >=> 6854780c-9f1d-11ea-8d90-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.set.TransformedSet` / `protected TransformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)`


        <!-- 68549f0a-9f1d-11ea-8d91-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        <p>
        If there are any elements already in the set being decorated, they
        are NOT transformed.
        @param set  the set to decorate, must not be null
        @param transformer  the transformer to use for conversion, must not be null
        @throws NullPointerException if set or transformer is null
        <!-- ACCEPT >=> 68549f0a-9f1d-11ea-8d91-333445793454 -->



# File: `java.org.apache.commons.collections4.set.TransformedSortedSet`

## Class: `java.org.apache.commons.collections4.set.TransformedSortedSet` / `public class TransformedSortedSet<E> extends TransformedSet<E> implements SortedSet<E>`


        <!-- 68549f0b-9f1d-11ea-8d92-333445793454 <=< ACCEPT -->
        Decorates another <code>SortedSet</code> to transform objects that are added.
        <p>
        The add methods are affected by this class.
        Thus objects must be removed or searched for using their transformed form.
        For example, if the transformation converts Strings to Integers, you must
        use the Integer form to remove objects.
        <p>
        This class is Serializable from Commons Collections 3.1.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 68549f0b-9f1d-11ea-8d92-333445793454 -->



## Field: `java.org.apache.commons.collections4.set.TransformedSortedSet` / `private static final long serialVersionUID`


        <!-- 68549f0c-9f1d-11ea-8d93-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 68549f0c-9f1d-11ea-8d93-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.TransformedSortedSet` / `final Transformer<? super E, ? extends E> transformer)`


        <!-- 68549f0d-9f1d-11ea-8d94-333445793454 <=< ACCEPT -->
        Factory method to create a transforming sorted set.
        <p>
        If there are any elements already in the set being decorated, they
        are NOT transformed.
        Contrast this with {@link #transformedSortedSet(SortedSet, Transformer)}.
        @param <E> the element type
        @param set  the set to decorate, must not be null
        @param transformer  the transformer to use for conversion, must not be null
        @return a new transformed {@link SortedSet}
        @throws NullPointerException if set or transformer is null
        @since 4.0
        <!-- ACCEPT >=> 68549f0d-9f1d-11ea-8d94-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.TransformedSortedSet` / `final Transformer<? super E, ? extends E> transformer)`


        <!-- 68549f0e-9f1d-11ea-8d95-333445793454 <=< ACCEPT -->
        Factory method to create a transforming sorted set that will transform
        existing contents of the specified sorted set.
        <p>
        If there are any elements already in the set being decorated, they
        will be transformed by this method.
        Contrast this with {@link #transformingSortedSet(SortedSet, Transformer)}.
        @param <E> the element type
        @param set  the set to decorate, must not be null
        @param transformer  the transformer to use for conversion, must not be null
        @return a new transformed {@link SortedSet}
        @throws NullPointerException if set or transformer is null
        @since 4.0
        <!-- ACCEPT >=> 68549f0e-9f1d-11ea-8d95-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.set.TransformedSortedSet` / `protected TransformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)`


        <!-- 68549f0f-9f1d-11ea-8d96-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        <p>
        If there are any elements already in the set being decorated, they
        are NOT transformed.
        @param set  the set to decorate, must not be null
        @param transformer  the transformer to use for conversion, must not be null
        @throws NullPointerException if set or transformer is null
        <!-- ACCEPT >=> 68549f0f-9f1d-11ea-8d96-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.TransformedSortedSet` / `protected SortedSet<E> getSortedSet()`


        <!-- 68549f10-9f1d-11ea-8d97-333445793454 <=< ACCEPT -->
        Gets the decorated set.
        @return the decorated set
        <!-- ACCEPT >=> 68549f10-9f1d-11ea-8d97-333445793454 -->



# File: `java.org.apache.commons.collections4.set.UnmodifiableNavigableSet`

## Class: `java.org.apache.commons.collections4.set.UnmodifiableNavigableSet` / `implements Unmodifiable`


        <!-- 68549f11-9f1d-11ea-8d98-333445793454 <=< ACCEPT -->
        Decorates another <code>NavigableSet</code> to ensure it can't be altered.
        <p>
        Attempts to modify it will result in an UnsupportedOperationException.
        @since 4.1
        @version $Id$
        <!-- ACCEPT >=> 68549f11-9f1d-11ea-8d98-333445793454 -->



## Field: `java.org.apache.commons.collections4.set.UnmodifiableNavigableSet` / `private static final long serialVersionUID`


        <!-- 68549f12-9f1d-11ea-8d99-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 68549f12-9f1d-11ea-8d99-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.UnmodifiableNavigableSet` / `public static <E> NavigableSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)`


        <!-- 68549f13-9f1d-11ea-8d9a-333445793454 <=< ACCEPT -->
        Factory method to create an unmodifiable set.
        @param <E> the element type
        @param set  the set to decorate, must not be null
        @return a new unmodifiable {@link NavigableSet}
        @throws NullPointerException if set is null
        <!-- ACCEPT >=> 68549f13-9f1d-11ea-8d9a-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.set.UnmodifiableNavigableSet` / `private UnmodifiableNavigableSet(final NavigableSet<E> set)`


        <!-- 68549f14-9f1d-11ea-8d9b-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param set  the set to decorate, must not be null
        @throws NullPointerException if set is null
        <!-- ACCEPT >=> 68549f14-9f1d-11ea-8d9b-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.UnmodifiableNavigableSet` / `private void writeObject(final ObjectOutputStream out) throws IOException`


        <!-- 68549f15-9f1d-11ea-8d9c-333445793454 <=< ACCEPT -->
        Write the collection out using a custom routine.
        @param out  the output stream
        @throws IOException
        <!-- ACCEPT >=> 68549f15-9f1d-11ea-8d9c-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.UnmodifiableNavigableSet` / `private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException`


        <!-- 68549f16-9f1d-11ea-8d9d-333445793454 <=< ACCEPT -->
        Read the collection in using a custom routine.
        @param in  the input stream
        @throws IOException
        @throws ClassNotFoundException
        <!-- ACCEPT >=> 68549f16-9f1d-11ea-8d9d-333445793454 -->



# File: `java.org.apache.commons.collections4.set.UnmodifiableSet`

## Class: `java.org.apache.commons.collections4.set.UnmodifiableSet` / `implements Unmodifiable`


        <!-- 68549f17-9f1d-11ea-8d9e-333445793454 <=< ACCEPT -->
        Decorates another <code>Set</code> to ensure it can't be altered.
        <p>
        This class is Serializable from Commons Collections 3.1.
        <p>
        Attempts to modify it will result in an UnsupportedOperationException.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 68549f17-9f1d-11ea-8d9e-333445793454 -->



## Field: `java.org.apache.commons.collections4.set.UnmodifiableSet` / `private static final long serialVersionUID`


        <!-- 68549f18-9f1d-11ea-8d9f-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 68549f18-9f1d-11ea-8d9f-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.UnmodifiableSet` / `public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)`


        <!-- 68549f19-9f1d-11ea-8da0-333445793454 <=< ACCEPT -->
        Factory method to create an unmodifiable set.
        @param <E> the element type
        @param set  the set to decorate, must not be null
        @return a new unmodifiable set
        @throws NullPointerException if set is null
        @since 4.0
        <!-- ACCEPT >=> 68549f19-9f1d-11ea-8da0-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.set.UnmodifiableSet` / `private UnmodifiableSet(final Set<? extends E> set)`


        <!-- 68549f1a-9f1d-11ea-8da1-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param set  the set to decorate, must not be null
        @throws NullPointerException if set is null
        <!-- ACCEPT >=> 68549f1a-9f1d-11ea-8da1-333445793454 -->



# File: `java.org.apache.commons.collections4.set.UnmodifiableSortedSet`

## Class: `java.org.apache.commons.collections4.set.UnmodifiableSortedSet` / `implements Unmodifiable`


        <!-- 68549f1b-9f1d-11ea-8da2-333445793454 <=< ACCEPT -->
        Decorates another <code>SortedSet</code> to ensure it can't be altered.
        <p>
        This class is Serializable from Commons Collections 3.1.
        <p>
        Attempts to modify it will result in an UnsupportedOperationException.
        @since 3.0
        @version $Id$
        <!-- ACCEPT >=> 68549f1b-9f1d-11ea-8da2-333445793454 -->



## Field: `java.org.apache.commons.collections4.set.UnmodifiableSortedSet` / `private static final long serialVersionUID`


        <!-- 68549f1c-9f1d-11ea-8da3-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 68549f1c-9f1d-11ea-8da3-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.UnmodifiableSortedSet` / `public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)`


        <!-- 68549f1d-9f1d-11ea-8da4-333445793454 <=< ACCEPT -->
        Factory method to create an unmodifiable set.
        @param <E> the element type
        @param set  the set to decorate, must not be null
        @return a new unmodifiable {@link SortedSet}
        @throws NullPointerException if set is null
        @since 4.0
        <!-- ACCEPT >=> 68549f1d-9f1d-11ea-8da4-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.set.UnmodifiableSortedSet` / `private UnmodifiableSortedSet(final SortedSet<E> set)`


        <!-- 6854c612-9f1d-11ea-8da5-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param set  the set to decorate, must not be null
        @throws NullPointerException if set is null
        <!-- ACCEPT >=> 6854c612-9f1d-11ea-8da5-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.UnmodifiableSortedSet` / `private void writeObject(final ObjectOutputStream out) throws IOException`


        <!-- 6854c613-9f1d-11ea-8da6-333445793454 <=< ACCEPT -->
        Write the collection out using a custom routine.
        @param out  the output stream
        @throws IOException
        <!-- ACCEPT >=> 6854c613-9f1d-11ea-8da6-333445793454 -->



## Method: `java.org.apache.commons.collections4.set.UnmodifiableSortedSet` / `private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException`


        <!-- 6854c614-9f1d-11ea-8da7-333445793454 <=< ACCEPT -->
        Read the collection in using a custom routine.
        @param in  the input stream
        @throws IOException
        @throws ClassNotFoundException
        <!-- ACCEPT >=> 6854c614-9f1d-11ea-8da7-333445793454 -->



# File: `java.org.apache.commons.collections4.set.package-info`

## Package: `java.org.apache.commons.collections4.set.package-info` / `package org.apache.commons.collections4.set`


        <!-- 6854c615-9f1d-11ea-8da8-333445793454 <=< ACCEPT -->
        This package contains implementations of the {@link java.util.Set Set},
        {@link java.util.SortedSet SortedSet} and
        {@link java.util.NavigableSet NavigableSet} interfaces.
        <p>
        The implementations are in the form of direct implementations and decorators.
        A decorator wraps another implementation of the interface to add some
        specific additional functionality.
        <p>
        The following implementations are provided in the package:
        <ul>
        <li>CompositeSet - a set that combines multiple sets into one
        </ul>
        The following decorators are provided in the package:
        <ul>
        <li>Unmodifiable - ensures the collection cannot be altered
        <li>Predicated - ensures that only elements that are valid according to a predicate can be added
        <li>Transformed - transforms each element added
        <li>ListOrdered - ensures that insertion order is retained
        <li>MapBackedSet - a set formed by decorating a Map
        </ul>
        @version $Id$
        <!-- ACCEPT >=> 6854c615-9f1d-11ea-8da8-333445793454 -->



# File: `java.org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator`

## Class: `java.org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator` / `public class AbstractIterableGetMapDecorator<K, V> implements IterableGet<K, V>`


        <!-- 6854c616-9f1d-11ea-8da9-333445793454 <=< ACCEPT -->
        {@link IterableGet} that uses a {@link Map}<K, V> for the
        {@link org.apache.commons.collections4.Get Get}<K, V> implementation.
        @since 4.0
        @version $Id$
        <!-- ACCEPT >=> 6854c616-9f1d-11ea-8da9-333445793454 -->



## Field: `java.org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator` / `transient Map<K, V> map`


        <!-- 6854c617-9f1d-11ea-8daa-333445793454 <=< ACCEPT -->
        The map to decorate
        <!-- ACCEPT >=> 6854c617-9f1d-11ea-8daa-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator` / `public AbstractIterableGetMapDecorator(final Map<K, V> map)`


        <!-- 6854c618-9f1d-11ea-8dab-333445793454 <=< ACCEPT -->
        Create a new AbstractSplitMapDecorator.
        @param map the map to decorate, must not be null
        @throws NullPointerException if map is null
        <!-- ACCEPT >=> 6854c618-9f1d-11ea-8dab-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator` / `protected AbstractIterableGetMapDecorator()`


        <!-- 6854c619-9f1d-11ea-8dac-333445793454 <=< ACCEPT -->
        Constructor only used in deserialization, do not use otherwise.
        <!-- ACCEPT >=> 6854c619-9f1d-11ea-8dac-333445793454 -->



## Method: `java.org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator` / `protected Map<K, V> decorated()`


        <!-- 6854c61a-9f1d-11ea-8dad-333445793454 <=< ACCEPT -->
        Gets the map being decorated.
        @return the decorated map
        <!-- ACCEPT >=> 6854c61a-9f1d-11ea-8dad-333445793454 -->



## Method: `java.org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator` / `public MapIterator<K, V> mapIterator()`


        <!-- 6854c61b-9f1d-11ea-8dae-333445793454 <=< ACCEPT -->
        Get a MapIterator over this Get.
        @return MapIterator<K, V>
        <!-- ACCEPT >=> 6854c61b-9f1d-11ea-8dae-333445793454 -->



# File: `java.org.apache.commons.collections4.splitmap.TransformedSplitMap`

## Class: `java.org.apache.commons.collections4.splitmap.TransformedSplitMap` / `implements Put<J, U>, Serializable`


        <!-- 6854c61c-9f1d-11ea-8daf-333445793454 <=< ACCEPT -->
        Decorates another {@link Map} to transform objects that are added.
        <p>
        The Map put methods and Map.Entry setValue method are affected by this class.
        Thus objects must be removed or searched for using their transformed form.
        For example, if the transformation converts Strings to Integers, you must use
        the Integer form to remove objects.
        <p>
        <strong>Note that TransformedMap is not synchronized and is not
        thread-safe.</strong> If you wish to use this map from multiple threads
        concurrently, you must use appropriate synchronization. The simplest approach
        is to wrap this map using {@link java.util.Collections#synchronizedMap(Map)}.
        This class may throw exceptions when accessed by concurrent threads without
        synchronization.
        <p>
        The "put" and "get" type constraints of this class are mutually independent;
        contrast with {@link org.apache.commons.collections4.map.TransformedMap} which,
        by virtue of its implementing {@link Map}&lt;K, V&gt;, must be constructed in such
        a way that its read and write parameters are generalized to a common (super-)type.
        In practice this would often mean <code>&gt;Object, Object&gt;</code>, defeating
        much of the usefulness of having parameterized types.
        <p>
        On the downside, this class is not drop-in compatible with {@link java.util.Map}
        but is intended to be worked with either directly or by {@link Put} and
        {@link org.apache.commons.collections4.Get Get} generalizations.
        @since 4.0
        @version $Id$
        @see org.apache.commons.collections4.SplitMapUtils#readableMap(org.apache.commons.collections4.Get)
        @see org.apache.commons.collections4.SplitMapUtils#writableMap(Put)
        <!-- ACCEPT >=> 6854c61c-9f1d-11ea-8daf-333445793454 -->



## Field: `java.org.apache.commons.collections4.splitmap.TransformedSplitMap` / `private static final long serialVersionUID`


        <!-- 6854c61d-9f1d-11ea-8db0-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 6854c61d-9f1d-11ea-8db0-333445793454 -->



## Field: `java.org.apache.commons.collections4.splitmap.TransformedSplitMap` / `private final Transformer<? super J, ? extends K> keyTransformer`


        <!-- 6854c61e-9f1d-11ea-8db1-333445793454 <=< ACCEPT -->
        The transformer to use for the key
        <!-- ACCEPT >=> 6854c61e-9f1d-11ea-8db1-333445793454 -->



## Field: `java.org.apache.commons.collections4.splitmap.TransformedSplitMap` / `private final Transformer<? super U, ? extends V> valueTransformer`


        <!-- 6854c61f-9f1d-11ea-8db2-333445793454 <=< ACCEPT -->
        The transformer to use for the value
        <!-- ACCEPT >=> 6854c61f-9f1d-11ea-8db2-333445793454 -->



## Method: `java.org.apache.commons.collections4.splitmap.TransformedSplitMap` / `final Transformer<? super U, ? extends V> valueTransformer)`


        <!-- 6854c620-9f1d-11ea-8db3-333445793454 <=< ACCEPT -->
        Factory method to create a transforming map.
        <p>
        If there are any elements already in the map being decorated, they are
        NOT transformed.
        @param <J>  the input key type
        @param <K>  the output key type
        @param <U>  the input value type
        @param <V>  the output value type
        @param map the map to decorate, must not be null
        @param keyTransformer the transformer to use for key conversion, must not be null
        @param valueTransformer the transformer to use for value conversion, must not be null
        @return a new transformed map
        @throws NullPointerException if map or either of the transformers is null
        <!-- ACCEPT >=> 6854c620-9f1d-11ea-8db3-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.splitmap.TransformedSplitMap` / `final Transformer<? super U, ? extends V> valueTransformer)`


        <!-- 6854c621-9f1d-11ea-8db4-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        <p>
        If there are any elements already in the collection being decorated, they
        are NOT transformed.
        @param map the map to decorate, must not be null
        @param keyTransformer the transformer to use for key conversion, must not be null
        @param valueTransformer the transformer to use for value conversion, must not be null
        @throws NullPointerException if map or either of the transformers is null
        <!-- ACCEPT >=> 6854c621-9f1d-11ea-8db4-333445793454 -->



## Method: `java.org.apache.commons.collections4.splitmap.TransformedSplitMap` / `private void writeObject(final ObjectOutputStream out) throws IOException`


        <!-- 6854c622-9f1d-11ea-8db5-333445793454 <=< ACCEPT -->
        Write the map out using a custom routine.
        @param out the output stream
        @throws IOException
        <!-- ACCEPT >=> 6854c622-9f1d-11ea-8db5-333445793454 -->



## Method: `java.org.apache.commons.collections4.splitmap.TransformedSplitMap` / `private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException`


        <!-- 6854c623-9f1d-11ea-8db6-333445793454 <=< ACCEPT -->
        Read the map in using a custom routine.
        @param in the input stream
        @throws IOException
        @throws ClassNotFoundException
        @since 3.1
        <!-- ACCEPT >=> 6854c623-9f1d-11ea-8db6-333445793454 -->



## Method: `java.org.apache.commons.collections4.splitmap.TransformedSplitMap` / `protected K transformKey(final J object)`


        <!-- 6854c624-9f1d-11ea-8db7-333445793454 <=< ACCEPT -->
        Transforms a key.
        <p>
        The transformer itself may throw an exception if necessary.
        @param object the object to transform
        @return the transformed object
        <!-- ACCEPT >=> 6854c624-9f1d-11ea-8db7-333445793454 -->



## Method: `java.org.apache.commons.collections4.splitmap.TransformedSplitMap` / `protected V transformValue(final U object)`


        <!-- 6854ed1c-9f1d-11ea-8db8-333445793454 <=< ACCEPT -->
        Transforms a value.
        <p>
        The transformer itself may throw an exception if necessary.
        @param object the object to transform
        @return the transformed object
        <!-- ACCEPT >=> 6854ed1c-9f1d-11ea-8db8-333445793454 -->



## Method: `java.org.apache.commons.collections4.splitmap.TransformedSplitMap` / `protected Map<K, V> transformMap(final Map<? extends J, ? extends U> map)`


        <!-- 6854ed1d-9f1d-11ea-8db9-333445793454 <=< ACCEPT -->
        Transforms a map.
        <p>
        The transformer itself may throw an exception if necessary.
        @param map the map to transform
        @return the transformed object
        <!-- ACCEPT >=> 6854ed1d-9f1d-11ea-8db9-333445793454 -->



## Method: `java.org.apache.commons.collections4.splitmap.TransformedSplitMap` / `protected V checkSetValue(final U value)`


        <!-- 6854ed1e-9f1d-11ea-8dba-333445793454 <=< ACCEPT -->
        Override to transform the value when using <code>setValue</code>.
        @param value the value to transform
        @return the transformed value
        <!-- ACCEPT >=> 6854ed1e-9f1d-11ea-8dba-333445793454 -->



# File: `java.org.apache.commons.collections4.splitmap.package-info`

## Package: `java.org.apache.commons.collections4.splitmap.package-info` / `package org.apache.commons.collections4.splitmap`


        <!-- 6854ed1f-9f1d-11ea-8dbb-333445793454 <=< ACCEPT -->
        The "split map" concept is that of an object that implements
        the {@link org.apache.commons.collections4.Put Put} and
        {@link org.apache.commons.collections4.Get Get} interfaces,
        with <i>differing</i> generic types. This is like a pre-generics
        {@link java.util.Map Map} whose input key/value constraints are
        different than its output key/value constraints.  While it would
        be possible to declare a "split map" with matching input/output
        key/value constraints, this would be a {@link java.util.Map Map}
        and would therefore make little sense (any Commons Collections
        {@link java.util.Map Map} implementation will also implement
        {@link org.apache.commons.collections4.Put Put} and
        {@link org.apache.commons.collections4.Get Get} with matching
        generic parameters).
        <p>
        The following decorators are provided:
        <ul>
        <li>Transformed - transforms each element added
        </ul>
        @version $Id$
        <!-- ACCEPT >=> 6854ed1f-9f1d-11ea-8dbb-333445793454 -->



# File: `java.org.apache.commons.collections4.trie.AbstractBitwiseTrie`

## Class: `java.org.apache.commons.collections4.trie.AbstractBitwiseTrie` / `implements Trie<K, V>, Serializable`


        <!-- 6854ed20-9f1d-11ea-8dbc-333445793454 <=< ACCEPT -->
        This class provides some basic {@link Trie} functionality and
        utility methods for actual bitwise {@link Trie} implementations.
        @since 4.0
        @version $Id$
        <!-- ACCEPT >=> 6854ed20-9f1d-11ea-8dbc-333445793454 -->



## Field: `java.org.apache.commons.collections4.trie.AbstractBitwiseTrie` / `private final KeyAnalyzer<? super K> keyAnalyzer`


        <!-- 6854ed21-9f1d-11ea-8dbd-333445793454 <=< ACCEPT -->
        The {@link KeyAnalyzer} that's being used to build the PATRICIA {@link Trie}.
        <!-- ACCEPT >=> 6854ed21-9f1d-11ea-8dbd-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.trie.AbstractBitwiseTrie` / `protected AbstractBitwiseTrie(final KeyAnalyzer<? super K> keyAnalyzer)`


        <!-- 6854ed22-9f1d-11ea-8dbe-333445793454 <=< ACCEPT -->
        Constructs a new {@link Trie} using the given {@link KeyAnalyzer}.
        @param keyAnalyzer  the {@link KeyAnalyzer} to use
        <!-- ACCEPT >=> 6854ed22-9f1d-11ea-8dbe-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractBitwiseTrie` / `protected KeyAnalyzer<? super K> getKeyAnalyzer()`


        <!-- 6854ed23-9f1d-11ea-8dbf-333445793454 <=< ACCEPT -->
        Returns the {@link KeyAnalyzer} that constructed the {@link Trie}.
        @return the {@link KeyAnalyzer} used by this {@link Trie}
        <!-- ACCEPT >=> 6854ed23-9f1d-11ea-8dbf-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractBitwiseTrie` / `final K castKey(final Object key)`


        <!-- 6854ed24-9f1d-11ea-8dc0-333445793454 <=< ACCEPT -->
        A utility method to cast keys. It actually doesn't cast anything. It's just fooling the compiler!
        <!-- ACCEPT >=> 6854ed24-9f1d-11ea-8dc0-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractBitwiseTrie` / `final int lengthInBits(final K key)`


        <!-- 6854ed25-9f1d-11ea-8dc1-333445793454 <=< ACCEPT -->
        Returns the length of the given key in bits
        @see KeyAnalyzer#lengthInBits(Object)
        <!-- ACCEPT >=> 6854ed25-9f1d-11ea-8dc1-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractBitwiseTrie` / `final int bitsPerElement()`


        <!-- 6854ed26-9f1d-11ea-8dc2-333445793454 <=< ACCEPT -->
        Returns the number of bits per element in the key
        @see KeyAnalyzer#bitsPerElement()
        <!-- ACCEPT >=> 6854ed26-9f1d-11ea-8dc2-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractBitwiseTrie` / `final boolean isBitSet(final K key, final int bitIndex, final int lengthInBits)`


        <!-- 6854ed27-9f1d-11ea-8dc3-333445793454 <=< ACCEPT -->
        Returns whether or not the given bit on the key is set or false if the key is null.
        @see KeyAnalyzer#isBitSet(Object, int, int)
        <!-- ACCEPT >=> 6854ed27-9f1d-11ea-8dc3-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractBitwiseTrie` / `final int bitIndex(final K key, final K foundKey)`


        <!-- 6854ed28-9f1d-11ea-8dc4-333445793454 <=< ACCEPT -->
        Utility method for calling {@link KeyAnalyzer#bitIndex(Object, int, int, Object, int, int)}.
        <!-- ACCEPT >=> 6854ed28-9f1d-11ea-8dc4-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractBitwiseTrie` / `final boolean compareKeys(final K key, final K other)`


        <!-- 6854ed29-9f1d-11ea-8dc5-333445793454 <=< ACCEPT -->
        An utility method for calling {@link KeyAnalyzer#compare(Object, Object)}
        <!-- ACCEPT >=> 6854ed29-9f1d-11ea-8dc5-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractBitwiseTrie` / `static boolean compare(final Object a, final Object b)`


        <!-- 6854ed2a-9f1d-11ea-8dc6-333445793454 <=< ACCEPT -->
        Returns true if both values are either null or equal.
        <!-- ACCEPT >=> 6854ed2a-9f1d-11ea-8dc6-333445793454 -->



## Class: `java.org.apache.commons.collections4.trie.AbstractBitwiseTrie` / `abstract static class BasicEntry<K, V> implements Map.Entry<K, V>, Serializable`


        <!-- 6854ed2b-9f1d-11ea-8dc7-333445793454 <=< ACCEPT -->
        A basic implementation of {@link Entry}.
        <!-- ACCEPT >=> 6854ed2b-9f1d-11ea-8dc7-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractBitwiseTrie` / `public V setKeyValue(final K key, final V value)`


        <!-- 6854ed2c-9f1d-11ea-8dc8-333445793454 <=< ACCEPT -->
        Replaces the current key and value with the provided key &amp; value.
        <!-- ACCEPT >=> 6854ed2c-9f1d-11ea-8dc8-333445793454 -->



# File: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie`

## Class: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `abstract class AbstractPatriciaTrie<K, V> extends AbstractBitwiseTrie<K, V>`


        <!-- 6854ed2d-9f1d-11ea-8dc9-333445793454 <=< ACCEPT -->
        This class implements the base PATRICIA algorithm and everything that
        is related to the {@link Map} interface.
        @since 4.0
        @version $Id$
        <!-- ACCEPT >=> 6854ed2d-9f1d-11ea-8dc9-333445793454 -->



## Field: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `private transient TrieEntry<K, V> root`


        <!-- 6854ed2e-9f1d-11ea-8dca-333445793454 <=< ACCEPT -->
        The root node of the {@link Trie}.
        <!-- ACCEPT >=> 6854ed2e-9f1d-11ea-8dca-333445793454 -->



## Field: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `private transient volatile Set<K> keySet`


        <!-- 6854ed2f-9f1d-11ea-8dcb-333445793454 <=< ACCEPT -->
        Each of these fields are initialized to contain an instance of the
        appropriate view the first time this view is requested. The views are
        stateless, so there's no reason to create more than one of each.
        <!-- ACCEPT >=> 6854ed2f-9f1d-11ea-8dcb-333445793454 -->



## Field: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `private transient int size`


        <!-- 68551425-9f1d-11ea-8dcc-333445793454 <=< ACCEPT -->
        The current size of the {@link Trie}.
        <!-- ACCEPT >=> 68551425-9f1d-11ea-8dcc-333445793454 -->



## Field: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `protected transient int modCount`


        <!-- 68551426-9f1d-11ea-8dcd-333445793454 <=< ACCEPT -->
        The number of times this {@link Trie} has been modified.
        It's used to detect concurrent modifications and fail-fast the {@link Iterator}s.
        <!-- ACCEPT >=> 68551426-9f1d-11ea-8dcd-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `final Map<? extends K, ? extends V> map)`


        <!-- 68551427-9f1d-11ea-8dce-333445793454 <=< ACCEPT -->
        Constructs a new {@link org.apache.commons.collections4.Trie Trie} using the given
        {@link KeyAnalyzer} and initializes the {@link org.apache.commons.collections4.Trie Trie}
        with the values from the provided {@link Map}.
        <!-- ACCEPT >=> 68551427-9f1d-11ea-8dce-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `void incrementSize()`


        <!-- 68551428-9f1d-11ea-8dcf-333445793454 <=< ACCEPT -->
        A helper method to increment the {@link Trie} size and the modification counter.
        <!-- ACCEPT >=> 68551428-9f1d-11ea-8dcf-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `void decrementSize()`


        <!-- 68551429-9f1d-11ea-8dd0-333445793454 <=< ACCEPT -->
        A helper method to decrement the {@link Trie} size and increment the modification counter.
        <!-- ACCEPT >=> 68551429-9f1d-11ea-8dd0-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `private void incrementModCount()`


        <!-- 6855142a-9f1d-11ea-8dd1-333445793454 <=< ACCEPT -->
        A helper method to increment the modification counter.
        <!-- ACCEPT >=> 6855142a-9f1d-11ea-8dd1-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `TrieEntry<K, V> addEntry(final TrieEntry<K, V> entry, final int lengthInBits)`


        <!-- 6855142b-9f1d-11ea-8dd2-333445793454 <=< ACCEPT -->
        Adds the given {@link TrieEntry} to the {@link Trie}.
        <!-- ACCEPT >=> 6855142b-9f1d-11ea-8dd2-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `TrieEntry<K,V> getEntry(final Object k)`


        <!-- 6855142c-9f1d-11ea-8dd3-333445793454 <=< ACCEPT -->
        Returns the entry associated with the specified key in the
        PatriciaTrieBase.  Returns null if the map contains no mapping
        for this key.
        <p>
        This may throw ClassCastException if the object is not of type K.
        <!-- ACCEPT >=> 6855142c-9f1d-11ea-8dd3-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `public Map.Entry<K, V> select(final K key)`


        <!-- 6855142d-9f1d-11ea-8dd4-333445793454 <=< ACCEPT -->
        Returns the {@link Entry} whose key is closest in a bitwise XOR
        metric to the given key. This is NOT lexicographic closeness.
        For example, given the keys:
        <ol>
        <li>D = 1000100
        <li>H = 1001000
        <li>L = 1001100
        </ol>
        If the {@link Trie} contained 'H' and 'L', a lookup of 'D' would
        return 'L', because the XOR distance between D &amp; L is smaller
        than the XOR distance between D &amp; H.
        @param key  the key to use in the search
        @return the {@link Entry} whose key is closest in a bitwise XOR metric
        to the provided key
        <!-- ACCEPT >=> 6855142d-9f1d-11ea-8dd4-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `public K selectKey(final K key)`


        <!-- 6855142e-9f1d-11ea-8dd5-333445793454 <=< ACCEPT -->
        Returns the key that is closest in a bitwise XOR metric to the
        provided key. This is NOT lexicographic closeness!
        For example, given the keys:
        <ol>
        <li>D = 1000100
        <li>H = 1001000
        <li>L = 1001100
        </ol>
        If the {@link Trie} contained 'H' and 'L', a lookup of 'D' would
        return 'L', because the XOR distance between D &amp; L is smaller
        than the XOR distance between D &amp; H.
        @param key  the key to use in the search
        @return the key that is closest in a bitwise XOR metric to the provided key
        <!-- ACCEPT >=> 6855142e-9f1d-11ea-8dd5-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `public V selectValue(final K key)`


        <!-- 6855142f-9f1d-11ea-8dd6-333445793454 <=< ACCEPT -->
        Returns the value whose key is closest in a bitwise XOR metric to
        the provided key. This is NOT lexicographic closeness!
        For example, given the keys:
        <ol>
        <li>D = 1000100
        <li>H = 1001000
        <li>L = 1001100
        </ol>
        If the {@link Trie} contained 'H' and 'L', a lookup of 'D' would
        return 'L', because the XOR distance between D &amp; L is smaller
        than the XOR distance between D &amp; H.
        @param key  the key to use in the search
        @return the value whose key is closest in a bitwise XOR metric
        to the provided key
        <!-- ACCEPT >=> 6855142f-9f1d-11ea-8dd6-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `final Reference<Map.Entry<K, V>> reference)`


        <!-- 68551430-9f1d-11ea-8dd7-333445793454 <=< ACCEPT -->
        This is equivalent to the other {@link #selectR(TrieEntry, int, Object, int, Cursor, Reference)}
        method but without its overhead because we're selecting only one best matching Entry from the {@link Trie}.
        <!-- ACCEPT >=> 68551430-9f1d-11ea-8dd7-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `public V remove(final Object k)`


        <!-- 68551431-9f1d-11ea-8dd8-333445793454 <=< ACCEPT -->
        {@inheritDoc}
        @throws ClassCastException if provided key is of an incompatible type
        <!-- ACCEPT >=> 68551431-9f1d-11ea-8dd8-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `TrieEntry<K, V> getNearestEntryForKey(final K key, final int lengthInBits)`


        <!-- 68551432-9f1d-11ea-8dd9-333445793454 <=< ACCEPT -->
        Returns the nearest entry for a given key.  This is useful
        for finding knowing if a given key exists (and finding the value
        for it), or for inserting the key.
        The actual get implementation. This is very similar to
        selectR but with the exception that it might return the
        root Entry even if it's empty.
        <!-- ACCEPT >=> 68551432-9f1d-11ea-8dd9-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `V removeEntry(final TrieEntry<K, V> h)`


        <!-- 68551433-9f1d-11ea-8dda-333445793454 <=< ACCEPT -->
        Removes a single entry from the {@link Trie}.
        If we found a Key (Entry h) then figure out if it's
        an internal (hard to remove) or external Entry (easy
        to remove)
        <!-- ACCEPT >=> 68551433-9f1d-11ea-8dda-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `private void removeExternalEntry(final TrieEntry<K, V> h)`


        <!-- 68551434-9f1d-11ea-8ddb-333445793454 <=< ACCEPT -->
        Removes an external entry from the {@link Trie}.
        If it's an external Entry then just remove it.
        This is very easy and straight forward.
        <!-- ACCEPT >=> 68551434-9f1d-11ea-8ddb-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `private void removeInternalEntry(final TrieEntry<K, V> h)`


        <!-- 68551435-9f1d-11ea-8ddc-333445793454 <=< ACCEPT -->
        Removes an internal entry from the {@link Trie}.
        If it's an internal Entry then "good luck" with understanding
        this code. The Idea is essentially that Entry p takes Entry h's
        place in the trie which requires some re-wiring.
        <!-- ACCEPT >=> 68551435-9f1d-11ea-8ddc-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `TrieEntry<K, V> nextEntry(final TrieEntry<K, V> node)`


        <!-- 68551436-9f1d-11ea-8ddd-333445793454 <=< ACCEPT -->
        Returns the entry lexicographically after the given entry.
        If the given entry is null, returns the first node.
        <!-- ACCEPT >=> 68551436-9f1d-11ea-8ddd-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `final TrieEntry<K, V> previous, final TrieEntry<K, V> tree)`


        <!-- 68553b2d-9f1d-11ea-8dde-333445793454 <=< ACCEPT -->
        Scans for the next node, starting at the specified point, and using 'previous'
        as a hint that the last node we returned was 'previous' (so we know not to return
        it again).  If 'tree' is non-null, this will limit the search to the given tree.
        The basic premise is that each iteration can follow the following steps:
        1) Scan all the way to the left.
        a) If we already started from this node last time, proceed to Step 2.
        b) If a valid uplink is found, use it.
        c) If the result is an empty node (root not set), break the scan.
        d) If we already returned the left node, break the scan.
        2) Check the right.
        a) If we already returned the right node, proceed to Step 3.
        b) If it is a valid uplink, use it.
        c) Do Step 1 from the right node.
        3) Back up through the parents until we encounter find a parent
        that we're not the right child of.
        4) If there's no right child of that parent, the iteration is finished.
        Otherwise continue to Step 5.
        5) Check to see if the right child is a valid uplink.
        a) If we already returned that child, proceed to Step 6.
        Otherwise, use it.
        6) If the right child of the parent is the parent itself, we've
        already found & returned the end of the Trie, so exit.
        7) Do Step 1 on the parent's right child.
        <!-- ACCEPT >=> 68553b2d-9f1d-11ea-8dde-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `TrieEntry<K, V> firstEntry()`


        <!-- 68553b2e-9f1d-11ea-8ddf-333445793454 <=< ACCEPT -->
        Returns the first entry the {@link Trie} is storing.
        <p>
        This is implemented by going always to the left until
        we encounter a valid uplink. That uplink is the first key.
        <!-- ACCEPT >=> 68553b2e-9f1d-11ea-8ddf-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `TrieEntry<K, V> followLeft(TrieEntry<K, V> node)`


        <!-- 68553b2f-9f1d-11ea-8de0-333445793454 <=< ACCEPT -->
        Goes left through the tree until it finds a valid node.
        <!-- ACCEPT >=> 68553b2f-9f1d-11ea-8de0-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `private SortedMap<K, V> getPrefixMapByBits(final K key, final int offsetInBits, final int lengthInBits)`


        <!-- 68553b30-9f1d-11ea-8de1-333445793454 <=< ACCEPT -->
        Returns a view of this {@link Trie} of all elements that are prefixed
        by the number of bits in the given Key.
        <p>
        The view that this returns is optimized to have a very efficient
        {@link Iterator}. The {@link SortedMap#firstKey()},
        {@link SortedMap#lastKey()} &amp; {@link Map#size()} methods must
        iterate over all possible values in order to determine the results.
        This information is cached until the PATRICIA {@link Trie} changes.
        All other methods (except {@link Iterator}) must compare the given
        key to the prefix to ensure that it is within the range of the view.
        The {@link Iterator}'s remove method must also relocate the subtree
        that contains the prefixes if the entry holding the subtree is
        removed or changes. Changing the subtree takes O(K) time.
        @param key  the key to use in the search
        @param offsetInBits  the prefix offset
        @param lengthInBits  the number of significant prefix bits
        @return a {@link SortedMap} view of this {@link Trie} with all elements whose
        key is prefixed by the search key
        <!-- ACCEPT >=> 68553b30-9f1d-11ea-8de1-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `TrieEntry<K,V> higherEntry(final K key)`


        <!-- 68553b31-9f1d-11ea-8de2-333445793454 <=< ACCEPT -->
        Returns an entry strictly higher than the given key,
        or null if no such entry exists.
        <!-- ACCEPT >=> 68553b31-9f1d-11ea-8de2-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `TrieEntry<K,V> ceilingEntry(final K key)`


        <!-- 68553b32-9f1d-11ea-8de3-333445793454 <=< ACCEPT -->
        Returns a key-value mapping associated with the least key greater
        than or equal to the given key, or null if there is no such key.
        <!-- ACCEPT >=> 68553b32-9f1d-11ea-8de3-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `TrieEntry<K,V> lowerEntry(final K key)`


        <!-- 68553b33-9f1d-11ea-8de4-333445793454 <=< ACCEPT -->
        Returns a key-value mapping associated with the greatest key
        strictly less than the given key, or null if there is no such key.
        <!-- ACCEPT >=> 68553b33-9f1d-11ea-8de4-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `TrieEntry<K,V> floorEntry(final K key)`


        <!-- 68553b34-9f1d-11ea-8de5-333445793454 <=< ACCEPT -->
        Returns a key-value mapping associated with the greatest key
        less than or equal to the given key, or null if there is no such key.
        <!-- ACCEPT >=> 68553b34-9f1d-11ea-8de5-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `TrieEntry<K, V> subtree(final K prefix, final int offsetInBits, final int lengthInBits)`


        <!-- 68553b35-9f1d-11ea-8de6-333445793454 <=< ACCEPT -->
        Finds the subtree that contains the prefix.
        This is very similar to getR but with the difference that
        we stop the lookup if h.bitIndex > lengthInBits.
        <!-- ACCEPT >=> 68553b35-9f1d-11ea-8de6-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `TrieEntry<K, V> lastEntry()`


        <!-- 68553b36-9f1d-11ea-8de7-333445793454 <=< ACCEPT -->
        Returns the last entry the {@link Trie} is storing.
        <p>This is implemented by going always to the right until
        we encounter a valid uplink. That uplink is the last key.
        <!-- ACCEPT >=> 68553b36-9f1d-11ea-8de7-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `TrieEntry<K, V> followRight(TrieEntry<K, V> node)`


        <!-- 68553b37-9f1d-11ea-8de8-333445793454 <=< ACCEPT -->
        Traverses down the right path until it finds an uplink.
        <!-- ACCEPT >=> 68553b37-9f1d-11ea-8de8-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `TrieEntry<K, V> previousEntry(final TrieEntry<K, V> start)`


        <!-- 68553b38-9f1d-11ea-8de9-333445793454 <=< ACCEPT -->
        Returns the node lexicographically before the given node (or null if none).
        This follows four simple branches:
        - If the uplink that returned us was a right uplink:
        - If predecessor's left is a valid uplink from predecessor, return it.
        - Else, follow the right path from the predecessor's left.
        - If the uplink that returned us was a left uplink:
        - Loop back through parents until we encounter a node where
        node != node.parent.left.
        - If node.parent.left is uplink from node.parent:
        - If node.parent.left is not root, return it.
        - If it is root & root isEmpty, return null.
        - If it is root & root !isEmpty, return root.
        - If node.parent.left is not uplink from node.parent:
        - Follow right path for first right child from node.parent.left
        @param start  the start entry
        <!-- ACCEPT >=> 68553b38-9f1d-11ea-8de9-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `final TrieEntry<K, V> parentOfSubtree)`


        <!-- 68553b39-9f1d-11ea-8dea-333445793454 <=< ACCEPT -->
        Returns the entry lexicographically after the given entry.
        If the given entry is null, returns the first node.
        This will traverse only within the subtree.  If the given node
        is not within the subtree, this will have undefined results.
        <!-- ACCEPT >=> 68553b39-9f1d-11ea-8dea-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `static boolean isValidUplink(final TrieEntry<?, ?> next, final TrieEntry<?, ?> from)`


        <!-- 68553b3a-9f1d-11ea-8deb-333445793454 <=< ACCEPT -->
        Returns true if 'next' is a valid uplink coming from 'from'.
        <!-- ACCEPT >=> 68553b3a-9f1d-11ea-8deb-333445793454 -->



## Class: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `private static class Reference<E>`


        <!-- 68553b3b-9f1d-11ea-8dec-333445793454 <=< ACCEPT -->
        A {@link Reference} allows us to return something through a Method's
        argument list. An alternative would be to an Array with a length of
        one (1) but that leads to compiler warnings. Computationally and memory
        wise there's no difference (except for the need to load the
        {@link Reference} Class but that happens only once).
        <!-- ACCEPT >=> 68553b3b-9f1d-11ea-8dec-333445793454 -->



## Class: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `protected static class TrieEntry<K,V> extends BasicEntry<K, V>`


        <!-- 68553b3c-9f1d-11ea-8ded-333445793454 <=< ACCEPT -->
        A {@link Trie} is a set of {@link TrieEntry} nodes.
        <!-- ACCEPT >=> 68553b3c-9f1d-11ea-8ded-333445793454 -->



## Field: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `protected int bitIndex`


        <!-- 68553b3d-9f1d-11ea-8dee-333445793454 <=< ACCEPT -->
        The index this entry is comparing.
        <!-- ACCEPT >=> 68553b3d-9f1d-11ea-8dee-333445793454 -->



## Field: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `protected TrieEntry<K,V> parent`


        <!-- 68553b3e-9f1d-11ea-8def-333445793454 <=< ACCEPT -->
        The parent of this entry.
        <!-- ACCEPT >=> 68553b3e-9f1d-11ea-8def-333445793454 -->



## Field: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `protected TrieEntry<K,V> left`


        <!-- 68553b3f-9f1d-11ea-8df0-333445793454 <=< ACCEPT -->
        The left child of this entry.
        <!-- ACCEPT >=> 68553b3f-9f1d-11ea-8df0-333445793454 -->



## Field: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `protected TrieEntry<K,V> right`


        <!-- 68553b40-9f1d-11ea-8df1-333445793454 <=< ACCEPT -->
        The right child of this entry.
        <!-- ACCEPT >=> 68553b40-9f1d-11ea-8df1-333445793454 -->



## Field: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `protected TrieEntry<K,V> predecessor`


        <!-- 6855623a-9f1d-11ea-8df2-333445793454 <=< ACCEPT -->
        The entry who uplinks to this entry.
        <!-- ACCEPT >=> 6855623a-9f1d-11ea-8df2-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `public boolean isEmpty()`


        <!-- 6855623b-9f1d-11ea-8df3-333445793454 <=< ACCEPT -->
        Whether or not the entry is storing a key.
        Only the root can potentially be empty, all other
        nodes must have a key.
        <!-- ACCEPT >=> 6855623b-9f1d-11ea-8df3-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `public boolean isInternalNode()`


        <!-- 6855623c-9f1d-11ea-8df4-333445793454 <=< ACCEPT -->
        Neither the left nor right child is a loopback.
        <!-- ACCEPT >=> 6855623c-9f1d-11ea-8df4-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `public boolean isExternalNode()`


        <!-- 6855623d-9f1d-11ea-8df5-333445793454 <=< ACCEPT -->
        Either the left or right child is a loopback.
        <!-- ACCEPT >=> 6855623d-9f1d-11ea-8df5-333445793454 -->



## Class: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `private class EntrySet extends AbstractSet<Map.Entry<K,V>>`


        <!-- 6855623e-9f1d-11ea-8df6-333445793454 <=< ACCEPT -->
        This is a entry set view of the {@link Trie} as returned by {@link Map#entrySet()}.
        <!-- ACCEPT >=> 6855623e-9f1d-11ea-8df6-333445793454 -->



## Class: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `private class EntryIterator extends TrieIterator<Map.Entry<K,V>>`


        <!-- 6855623f-9f1d-11ea-8df7-333445793454 <=< ACCEPT -->
        An {@link Iterator} that returns {@link Entry} Objects.
        <!-- ACCEPT >=> 6855623f-9f1d-11ea-8df7-333445793454 -->



## Class: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `private class KeySet extends AbstractSet<K>`


        <!-- 68556240-9f1d-11ea-8df8-333445793454 <=< ACCEPT -->
        This is a key set view of the {@link Trie} as returned by {@link Map#keySet()}.
        <!-- ACCEPT >=> 68556240-9f1d-11ea-8df8-333445793454 -->



## Class: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `private class KeyIterator extends TrieIterator<K>`


        <!-- 68556241-9f1d-11ea-8df9-333445793454 <=< ACCEPT -->
        An {@link Iterator} that returns Key Objects.
        <!-- ACCEPT >=> 68556241-9f1d-11ea-8df9-333445793454 -->



## Class: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `private class Values extends AbstractCollection<V>`


        <!-- 68556242-9f1d-11ea-8dfa-333445793454 <=< ACCEPT -->
        This is a value view of the {@link Trie} as returned by {@link Map#values()}.
        <!-- ACCEPT >=> 68556242-9f1d-11ea-8dfa-333445793454 -->



## Class: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `private class ValueIterator extends TrieIterator<V>`


        <!-- 68556243-9f1d-11ea-8dfb-333445793454 <=< ACCEPT -->
        An {@link Iterator} that returns Value Objects.
        <!-- ACCEPT >=> 68556243-9f1d-11ea-8dfb-333445793454 -->



## Class: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `abstract class TrieIterator<E> implements Iterator<E>`


        <!-- 68556244-9f1d-11ea-8dfc-333445793454 <=< ACCEPT -->
        An iterator for the entries.
        <!-- ACCEPT >=> 68556244-9f1d-11ea-8dfc-333445793454 -->



## Field: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `protected int expectedModCount`


        <!-- 68556245-9f1d-11ea-8dfd-333445793454 <=< ACCEPT -->
        For fast-fail.
        <!-- ACCEPT >=> 68556245-9f1d-11ea-8dfd-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `protected TrieIterator()`


        <!-- 68556246-9f1d-11ea-8dfe-333445793454 <=< ACCEPT -->
        Starts iteration from the root.
        <!-- ACCEPT >=> 68556246-9f1d-11ea-8dfe-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `protected TrieIterator(final TrieEntry<K, V> firstEntry)`


        <!-- 68556247-9f1d-11ea-8dff-333445793454 <=< ACCEPT -->
        Starts iteration at the given entry.
        <!-- ACCEPT >=> 68556247-9f1d-11ea-8dff-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `protected TrieEntry<K,V> nextEntry()`


        <!-- 68556248-9f1d-11ea-8e00-333445793454 <=< ACCEPT -->
        Returns the next {@link TrieEntry}.
        <!-- ACCEPT >=> 68556248-9f1d-11ea-8e00-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `protected TrieEntry<K, V> findNext(final TrieEntry<K, V> prior)`


        <!-- 68556249-9f1d-11ea-8e01-333445793454 <=< ACCEPT -->
        @see PatriciaTrie#nextEntry(TrieEntry)
        <!-- ACCEPT >=> 68556249-9f1d-11ea-8e01-333445793454 -->



## Class: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `private class TrieMapIterator extends TrieIterator<K> implements OrderedMapIterator<K, V>`


        <!-- 6855624a-9f1d-11ea-8e02-333445793454 <=< ACCEPT -->
        An {@link OrderedMapIterator} for a {@link Trie}.
        <!-- ACCEPT >=> 6855624a-9f1d-11ea-8e02-333445793454 -->



## Class: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `implements SortedMap<K, V>`


        <!-- 6855624b-9f1d-11ea-8e03-333445793454 <=< ACCEPT -->
        A range view of the {@link Trie}.
        <!-- ACCEPT >=> 6855624b-9f1d-11ea-8e03-333445793454 -->



## Field: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `private transient volatile Set<Map.Entry<K, V>> entrySet`


        <!-- 6855624c-9f1d-11ea-8e04-333445793454 <=< ACCEPT -->
        The {@link #entrySet()} view.
        <!-- ACCEPT >=> 6855624c-9f1d-11ea-8e04-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `protected abstract Set<Map.Entry<K, V>> createEntrySet()`


        <!-- 6855624d-9f1d-11ea-8e05-333445793454 <=< ACCEPT -->
        Creates and returns an {@link #entrySet()} view of the {@link RangeMap}.
        <!-- ACCEPT >=> 6855624d-9f1d-11ea-8e05-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `protected abstract K getFromKey()`


        <!-- 6855624e-9f1d-11ea-8e06-333445793454 <=< ACCEPT -->
        Returns the FROM Key.
        <!-- ACCEPT >=> 6855624e-9f1d-11ea-8e06-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `protected abstract boolean isFromInclusive()`


        <!-- 6855624f-9f1d-11ea-8e07-333445793454 <=< ACCEPT -->
        Whether or not the {@link #getFromKey()} is in the range.
        <!-- ACCEPT >=> 6855624f-9f1d-11ea-8e07-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `protected abstract K getToKey()`


        <!-- 68556250-9f1d-11ea-8e08-333445793454 <=< ACCEPT -->
        Returns the TO Key.
        <!-- ACCEPT >=> 68556250-9f1d-11ea-8e08-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `protected abstract boolean isToInclusive()`


        <!-- 68556251-9f1d-11ea-8e09-333445793454 <=< ACCEPT -->
        Whether or not the {@link #getToKey()} is in the range.
        <!-- ACCEPT >=> 68556251-9f1d-11ea-8e09-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `protected boolean inRange(final K key)`


        <!-- 68556252-9f1d-11ea-8e0a-333445793454 <=< ACCEPT -->
        Returns true if the provided key is greater than TO and less than FROM.
        <!-- ACCEPT >=> 68556252-9f1d-11ea-8e0a-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `protected boolean inRange2(final K key)`


        <!-- 68556253-9f1d-11ea-8e0b-333445793454 <=< ACCEPT -->
        This form allows the high endpoint (as well as all legit keys).
        <!-- ACCEPT >=> 68556253-9f1d-11ea-8e0b-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `protected boolean inFromRange(final K key, final boolean forceInclusive)`


        <!-- 68556254-9f1d-11ea-8e0c-333445793454 <=< ACCEPT -->
        Returns true if the provided key is in the FROM range of the {@link RangeMap}.
        <!-- ACCEPT >=> 68556254-9f1d-11ea-8e0c-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `protected boolean inToRange(final K key, final boolean forceInclusive)`


        <!-- 68558944-9f1d-11ea-8e0d-333445793454 <=< ACCEPT -->
        Returns true if the provided key is in the TO range of the {@link RangeMap}.
        <!-- ACCEPT >=> 68558944-9f1d-11ea-8e0d-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `K toKey, boolean toInclusive)`


        <!-- 68558945-9f1d-11ea-8e0e-333445793454 <=< ACCEPT -->
        Creates and returns a sub-range view of the current {@link RangeMap}.
        <!-- ACCEPT >=> 68558945-9f1d-11ea-8e0e-333445793454 -->



## Class: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `private class RangeEntryMap extends RangeMap`


        <!-- 68558946-9f1d-11ea-8e0f-333445793454 <=< ACCEPT -->
        A {@link RangeMap} that deals with {@link Entry}s.
        <!-- ACCEPT >=> 68558946-9f1d-11ea-8e0f-333445793454 -->



## Field: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `private final K fromKey`


        <!-- 68558947-9f1d-11ea-8e10-333445793454 <=< ACCEPT -->
        The key to start from, null if the beginning.
        <!-- ACCEPT >=> 68558947-9f1d-11ea-8e10-333445793454 -->



## Field: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `private final K toKey`


        <!-- 68558948-9f1d-11ea-8e11-333445793454 <=< ACCEPT -->
        The key to end at, null if till the end.
        <!-- ACCEPT >=> 68558948-9f1d-11ea-8e11-333445793454 -->



## Field: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `private final boolean fromInclusive`


        <!-- 68558949-9f1d-11ea-8e12-333445793454 <=< ACCEPT -->
        Whether or not the 'from' is inclusive.
        <!-- ACCEPT >=> 68558949-9f1d-11ea-8e12-333445793454 -->



## Field: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `private final boolean toInclusive`


        <!-- 6855894a-9f1d-11ea-8e13-333445793454 <=< ACCEPT -->
        Whether or not the 'to' is inclusive.
        <!-- ACCEPT >=> 6855894a-9f1d-11ea-8e13-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `protected RangeEntryMap(final K fromKey, final K toKey)`


        <!-- 6855894b-9f1d-11ea-8e14-333445793454 <=< ACCEPT -->
        Creates a {@link RangeEntryMap} with the fromKey included and
        the toKey excluded from the range.
        <!-- ACCEPT >=> 6855894b-9f1d-11ea-8e14-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `final K toKey, final boolean toInclusive)`


        <!-- 6855894c-9f1d-11ea-8e15-333445793454 <=< ACCEPT -->
        Creates a {@link RangeEntryMap}.
        <!-- ACCEPT >=> 6855894c-9f1d-11ea-8e15-333445793454 -->



## Class: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `private class RangeEntrySet extends AbstractSet<Map.Entry<K, V>>`


        <!-- 6855894d-9f1d-11ea-8e16-333445793454 <=< ACCEPT -->
        A {@link Set} view of a {@link RangeMap}.
        <!-- ACCEPT >=> 6855894d-9f1d-11ea-8e16-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `public RangeEntrySet(final RangeMap delegate)`


        <!-- 6855894e-9f1d-11ea-8e17-333445793454 <=< ACCEPT -->
        Creates a {@link RangeEntrySet}.
        <!-- ACCEPT >=> 6855894e-9f1d-11ea-8e17-333445793454 -->



## Class: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `private final class EntryIterator extends TrieIterator<Map.Entry<K,V>>`


        <!-- 6855894f-9f1d-11ea-8e18-333445793454 <=< ACCEPT -->
        An {@link Iterator} for {@link RangeEntrySet}s.
        <!-- ACCEPT >=> 6855894f-9f1d-11ea-8e18-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `private EntryIterator(final TrieEntry<K,V> first, final TrieEntry<K,V> last)`


        <!-- 68558950-9f1d-11ea-8e19-333445793454 <=< ACCEPT -->
        Creates a {@link EntryIterator}.
        <!-- ACCEPT >=> 68558950-9f1d-11ea-8e19-333445793454 -->



## Class: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `private class PrefixRangeMap extends RangeMap`


        <!-- 68558951-9f1d-11ea-8e1a-333445793454 <=< ACCEPT -->
        A submap used for prefix views over the {@link Trie}.
        <!-- ACCEPT >=> 68558951-9f1d-11ea-8e1a-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `private PrefixRangeMap(final K prefix, final int offsetInBits, final int lengthInBits)`


        <!-- 68558952-9f1d-11ea-8e1b-333445793454 <=< ACCEPT -->
        Creates a {@link PrefixRangeMap}.
        <!-- ACCEPT >=> 68558952-9f1d-11ea-8e1b-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `private int fixup()`


        <!-- 68558953-9f1d-11ea-8e1c-333445793454 <=< ACCEPT -->
        This method does two things. It determines the FROM
        and TO range of the {@link PrefixRangeMap} and the number
        of elements in the range. This method must be called every
        time the {@link Trie} has changed.
        <!-- ACCEPT >=> 68558953-9f1d-11ea-8e1c-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `protected boolean inRange(final K key)`


        <!-- 68558954-9f1d-11ea-8e1d-333445793454 <=< ACCEPT -->
        Returns true if this {@link PrefixRangeMap}'s key is a prefix of the provided key.
        <!-- ACCEPT >=> 68558954-9f1d-11ea-8e1d-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `protected boolean inRange2(final K key)`


        <!-- 68558955-9f1d-11ea-8e1e-333445793454 <=< ACCEPT -->
        Same as {@link #inRange(Object)}.
        <!-- ACCEPT >=> 68558955-9f1d-11ea-8e1e-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `protected boolean inFromRange(final K key, final boolean forceInclusive)`


        <!-- 68558956-9f1d-11ea-8e1f-333445793454 <=< ACCEPT -->
        Returns true if the provided Key is in the FROM range of the {@link PrefixRangeMap}.
        <!-- ACCEPT >=> 68558956-9f1d-11ea-8e1f-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `protected boolean inToRange(final K key, final boolean forceInclusive)`


        <!-- 68558957-9f1d-11ea-8e20-333445793454 <=< ACCEPT -->
        Returns true if the provided Key is in the TO range of the {@link PrefixRangeMap}.
        <!-- ACCEPT >=> 68558957-9f1d-11ea-8e20-333445793454 -->



## Class: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `private final class PrefixRangeEntrySet extends RangeEntrySet`


        <!-- 68558958-9f1d-11ea-8e21-333445793454 <=< ACCEPT -->
        A prefix {@link RangeEntrySet} view of the {@link Trie}.
        <!-- ACCEPT >=> 68558958-9f1d-11ea-8e21-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `public PrefixRangeEntrySet(final PrefixRangeMap delegate)`


        <!-- 68558959-9f1d-11ea-8e22-333445793454 <=< ACCEPT -->
        Creates a {@link PrefixRangeEntrySet}.
        <!-- ACCEPT >=> 68558959-9f1d-11ea-8e22-333445793454 -->



## Class: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `private final class SingletonIterator implements Iterator<Map.Entry<K, V>>`


        <!-- 6855895a-9f1d-11ea-8e23-333445793454 <=< ACCEPT -->
        An {@link Iterator} that holds a single {@link TrieEntry}.
        <!-- ACCEPT >=> 6855895a-9f1d-11ea-8e23-333445793454 -->



## Class: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `private final class EntryIterator extends TrieIterator<Map.Entry<K, V>>`


        <!-- 6855895b-9f1d-11ea-8e24-333445793454 <=< ACCEPT -->
        An {@link Iterator} for iterating over a prefix search.
        <!-- ACCEPT >=> 6855895b-9f1d-11ea-8e24-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `final int offset, final int lengthInBits)`


        <!-- 6855895c-9f1d-11ea-8e25-333445793454 <=< ACCEPT -->
        Starts iteration at the given entry & search only
        within the given subtree.
        <!-- ACCEPT >=> 6855895c-9f1d-11ea-8e25-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `private void readObject(final ObjectInputStream stream) throws IOException, ClassNotFoundException`


        <!-- 6855895d-9f1d-11ea-8e26-333445793454 <=< ACCEPT -->
        Reads the content of the stream.
        <!-- ACCEPT >=> 6855895d-9f1d-11ea-8e26-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.AbstractPatriciaTrie` / `private void writeObject(final ObjectOutputStream stream) throws IOException`


        <!-- 6855895e-9f1d-11ea-8e27-333445793454 <=< ACCEPT -->
        Writes the content to the stream for serialization.
        <!-- ACCEPT >=> 6855895e-9f1d-11ea-8e27-333445793454 -->



# File: `java.org.apache.commons.collections4.trie.KeyAnalyzer`

## Class: `java.org.apache.commons.collections4.trie.KeyAnalyzer` / `public abstract class KeyAnalyzer<K> implements Comparator<K>, Serializable`


        <!-- 6855b04b-9f1d-11ea-8e28-333445793454 <=< ACCEPT -->
        Defines the interface to analyze {@link org.apache.commons.collections4.Trie Trie} keys on a bit level.
        {@link KeyAnalyzer}'s methods return the length of the key in bits, whether or not a bit is set,
        and bits per element in the key.
        <p>
        Additionally, a method determines if a key is a prefix of another
        key and returns the bit index where one key is different from another
        key (if the key and found key are equal than the return value is
        {@link #EQUAL_BIT_KEY}).
        @since 4.0
        @version $Id$
        <!-- ACCEPT >=> 6855b04b-9f1d-11ea-8e28-333445793454 -->



## Field: `java.org.apache.commons.collections4.trie.KeyAnalyzer` / `private static final long serialVersionUID`


        <!-- 6855b04c-9f1d-11ea-8e29-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 6855b04c-9f1d-11ea-8e29-333445793454 -->



## Field: `java.org.apache.commons.collections4.trie.KeyAnalyzer` / `public static final int NULL_BIT_KEY`


        <!-- 6855b04d-9f1d-11ea-8e2a-333445793454 <=< ACCEPT -->
        Returned by {@link #bitIndex(Object, int, int, Object, int, int)}
        if key's bits are all 0.
        <!-- ACCEPT >=> 6855b04d-9f1d-11ea-8e2a-333445793454 -->



## Field: `java.org.apache.commons.collections4.trie.KeyAnalyzer` / `public static final int EQUAL_BIT_KEY`


        <!-- 6855b04e-9f1d-11ea-8e2b-333445793454 <=< ACCEPT -->
        Returned by {@link #bitIndex(Object, int, int, Object, int, int)} if key and found key are equal.
        This is a very very specific case and shouldn't happen on a regular basis.
        <!-- ACCEPT >=> 6855b04e-9f1d-11ea-8e2b-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.KeyAnalyzer` / `static boolean isOutOfBoundsIndex(final int bitIndex)`


        <!-- 6855b04f-9f1d-11ea-8e2c-333445793454 <=< ACCEPT -->
        Returns true if bitIndex is a {@link KeyAnalyzer#OUT_OF_BOUNDS_BIT_KEY}.
        <!-- ACCEPT >=> 6855b04f-9f1d-11ea-8e2c-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.KeyAnalyzer` / `static boolean isEqualBitKey(final int bitIndex)`


        <!-- 6855b050-9f1d-11ea-8e2d-333445793454 <=< ACCEPT -->
        Returns true if bitIndex is a {@link KeyAnalyzer#EQUAL_BIT_KEY}.
        <!-- ACCEPT >=> 6855b050-9f1d-11ea-8e2d-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.KeyAnalyzer` / `static boolean isNullBitKey(final int bitIndex)`


        <!-- 6855b051-9f1d-11ea-8e2e-333445793454 <=< ACCEPT -->
        Returns true if bitIndex is a {@link KeyAnalyzer#NULL_BIT_KEY}.
        <!-- ACCEPT >=> 6855b051-9f1d-11ea-8e2e-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.KeyAnalyzer` / `static boolean isValidBitIndex(final int bitIndex)`


        <!-- 6855b052-9f1d-11ea-8e2f-333445793454 <=< ACCEPT -->
        Returns true if the given bitIndex is valid.
        Indices are considered valid if they're between 0 and {@link Integer#MAX_VALUE}
        <!-- ACCEPT >=> 6855b052-9f1d-11ea-8e2f-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.KeyAnalyzer` / `public abstract int bitsPerElement()`


        <!-- 6855b053-9f1d-11ea-8e30-333445793454 <=< ACCEPT -->
        Returns the number of bits per element in the key.
        This is only useful for variable-length keys, such as Strings.
        @return the number of bits per element
        <!-- ACCEPT >=> 6855b053-9f1d-11ea-8e30-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.KeyAnalyzer` / `public abstract int lengthInBits(K key)`


        <!-- 6855b054-9f1d-11ea-8e31-333445793454 <=< ACCEPT -->
        Returns the length of the Key in bits.
        @param key  the key
        @return the bit length of the key
        <!-- ACCEPT >=> 6855b054-9f1d-11ea-8e31-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.KeyAnalyzer` / `public abstract boolean isBitSet(K key, int bitIndex, int lengthInBits)`


        <!-- 6855b055-9f1d-11ea-8e32-333445793454 <=< ACCEPT -->
        Returns whether or not a bit is set.
        @param key  the key to check, may not be null
        @param bitIndex  the bit index to check
        @param lengthInBits  the maximum key length in bits to check
        @return {@code true} if the bit is set in the given key and
        {@code bitIndex} &lt; {@code lengthInBits}, {@code false} otherwise.
        <!-- ACCEPT >=> 6855b055-9f1d-11ea-8e32-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.KeyAnalyzer` / `K other, int otherOffsetInBits, int otherLengthInBits)`


        <!-- 6855b056-9f1d-11ea-8e33-333445793454 <=< ACCEPT -->
        Returns the n-th different bit between key and other. This starts the comparison in
        key at 'offsetInBits' and goes for 'lengthInBits' bits, and compares to the other key starting
        at 'otherOffsetInBits' and going for 'otherLengthInBits' bits.
        @param key  the key to use
        @param offsetInBits  the bit offset in the key
        @param lengthInBits  the maximum key length in bits to use
        @param other  the other key to use
        @param otherOffsetInBits  the bit offset in the other key
        @param otherLengthInBits  the maximum key length in bits for the other key
        @return the bit index where the key and other first differ
        <!-- ACCEPT >=> 6855b056-9f1d-11ea-8e33-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.KeyAnalyzer` / `public abstract boolean isPrefix(K prefix, int offsetInBits, int lengthInBits, K key)`


        <!-- 6855b057-9f1d-11ea-8e34-333445793454 <=< ACCEPT -->
        Determines whether or not the given prefix (from offset to length) is a prefix of the given key.
        @param prefix  the prefix to check
        @param offsetInBits  the bit offset in the key
        @param lengthInBits  the maximum key length in bits to use
        @param key  the key to check
        @return {@code true} if this is a valid prefix for the given key
        <!-- ACCEPT >=> 6855b057-9f1d-11ea-8e34-333445793454 -->



# File: `java.org.apache.commons.collections4.trie.PatriciaTrie`

## Class: `java.org.apache.commons.collections4.trie.PatriciaTrie` / `public class PatriciaTrie<E> extends AbstractPatriciaTrie<String, E>`


        <!-- 6855b058-9f1d-11ea-8e35-333445793454 <=< ACCEPT -->
        Implementation of a PATRICIA Trie (Practical Algorithm to Retrieve Information
        Coded in Alphanumeric).
        <p>
        A PATRICIA {@link Trie} is a compressed {@link Trie}. Instead of storing
        all data at the edges of the {@link Trie} (and having empty internal nodes),
        PATRICIA stores data in every node. This allows for very efficient traversal,
        insert, delete, predecessor, successor, prefix, range, and {@link #select(Object)}
        operations. All operations are performed at worst in O(K) time, where K
        is the number of bits in the largest item in the tree. In practice,
        operations actually take O(A(K)) time, where A(K) is the average number of
        bits of all items in the tree.
        <p>
        Most importantly, PATRICIA requires very few comparisons to keys while
        doing any operation. While performing a lookup, each comparison (at most
        K of them, described above) will perform a single bit comparison against
        the given key, instead of comparing the entire key to another key.
        <p>
        The {@link Trie} can return operations in lexicographical order using the
        'prefixMap', 'submap', or 'iterator' methods. The {@link Trie} can also
        scan for items that are 'bitwise' (using an XOR metric) by the 'select' method.
        Bitwise closeness is determined by the {@link KeyAnalyzer} returning true or
        false for a bit being set or not in a given key.
        <p>
        This PATRICIA {@link Trie} supports both variable length & fixed length
        keys. Some methods, such as {@link #prefixMap(Object)} are suited only
        to variable length keys.
        @see <a href="http://en.wikipedia.org/wiki/Radix_tree">Radix Tree</a>
        @see <a href="http://www.csse.monash.edu.au/~lloyd/tildeAlgDS/Tree/PATRICIA">PATRICIA</a>
        @see <a href="http://www.imperialviolet.org/binary/critbit.pdf">Crit-Bit Tree</a>
        @since 4.0
        @version $Id$
        <!-- ACCEPT >=> 6855b058-9f1d-11ea-8e35-333445793454 -->



# File: `java.org.apache.commons.collections4.trie.UnmodifiableTrie`

## Class: `java.org.apache.commons.collections4.trie.UnmodifiableTrie` / `public class UnmodifiableTrie<K, V> implements Trie<K, V>, Serializable, Unmodifiable`


        <!-- 6855b059-9f1d-11ea-8e36-333445793454 <=< ACCEPT -->
        An unmodifiable {@link Trie}.
        @since 4.0
        @version $Id$
        <!-- ACCEPT >=> 6855b059-9f1d-11ea-8e36-333445793454 -->



## Field: `java.org.apache.commons.collections4.trie.UnmodifiableTrie` / `private static final long serialVersionUID`


        <!-- 6855b05a-9f1d-11ea-8e37-333445793454 <=< ACCEPT -->
        Serialization version
        <!-- ACCEPT >=> 6855b05a-9f1d-11ea-8e37-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.UnmodifiableTrie` / `public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)`


        <!-- 6855b05b-9f1d-11ea-8e38-333445793454 <=< ACCEPT -->
        Factory method to create a unmodifiable trie.
        @param <K>  the key type
        @param <V>  the value type
        @param trie  the trie to decorate, must not be null
        @return a new unmodifiable trie
        @throws NullPointerException if trie is null
        <!-- ACCEPT >=> 6855b05b-9f1d-11ea-8e38-333445793454 -->



## Constructor: `java.org.apache.commons.collections4.trie.UnmodifiableTrie` / `public UnmodifiableTrie(final Trie<K, ? extends V> trie)`


        <!-- 6855b05c-9f1d-11ea-8e39-333445793454 <=< ACCEPT -->
        Constructor that wraps (not copies).
        @param trie  the trie to decorate, must not be null
        @throws NullPointerException if trie is null
        <!-- ACCEPT >=> 6855b05c-9f1d-11ea-8e39-333445793454 -->



# File: `java.org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer`

## Class: `java.org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer` / `public class StringKeyAnalyzer extends KeyAnalyzer<String>`


        <!-- 6855b05d-9f1d-11ea-8e3a-333445793454 <=< ACCEPT -->
        An {@link KeyAnalyzer} for {@link String}s.
        @since 4.0
        @version $Id$
        <!-- ACCEPT >=> 6855b05d-9f1d-11ea-8e3a-333445793454 -->



## Field: `java.org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer` / `public static final StringKeyAnalyzer INSTANCE`


        <!-- 6855b05e-9f1d-11ea-8e3b-333445793454 <=< ACCEPT -->
        A singleton instance of {@link StringKeyAnalyzer}.
        <!-- ACCEPT >=> 6855b05e-9f1d-11ea-8e3b-333445793454 -->



## Field: `java.org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer` / `public static final int LENGTH`


        <!-- 6855d755-9f1d-11ea-8e3c-333445793454 <=< ACCEPT -->
        The number of bits per {@link Character}.
        <!-- ACCEPT >=> 6855d755-9f1d-11ea-8e3c-333445793454 -->



## Field: `java.org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer` / `private static final int MSB`


        <!-- 6855d756-9f1d-11ea-8e3d-333445793454 <=< ACCEPT -->
        A bit mask where the first bit is 1 and the others are zero.
        <!-- ACCEPT >=> 6855d756-9f1d-11ea-8e3d-333445793454 -->



## Method: `java.org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer` / `private static int mask(final int bit)`


        <!-- 6855d757-9f1d-11ea-8e3e-333445793454 <=< ACCEPT -->
        Returns a bit mask where the given bit is set.
        <!-- ACCEPT >=> 6855d757-9f1d-11ea-8e3e-333445793454 -->



# File: `java.org.apache.commons.collections4.trie.analyzer.package-info`

## Package: `java.org.apache.commons.collections4.trie.analyzer.package-info` / `package org.apache.commons.collections4.trie.analyzer`


        <!-- 6855d758-9f1d-11ea-8e3f-333445793454 <=< ACCEPT -->
        This package contains various {@link org.apache.commons.collections4.trie.KeyAnalyzer} implementations.
        @version $Id$
        <!-- ACCEPT >=> 6855d758-9f1d-11ea-8e3f-333445793454 -->



# File: `java.org.apache.commons.collections4.trie.package-info`

## Package: `java.org.apache.commons.collections4.trie.package-info` / `package org.apache.commons.collections4.trie`


        <!-- 6855d759-9f1d-11ea-8e40-333445793454 <=< ACCEPT -->
        This package contains implementations of the
        {@link org.apache.commons.collections4.Trie Trie} interface.
        <p>
        The implementations are in the form of direct implementations and decorators.
        A decorator wraps another implementation of the interface to add some
        specific additional functionality.
        <p>
        The following implementations are provided in the package:
        <ul>
        <li>PatriciaTrie - an implementation of a PATRICIA trie
        </ul>
        <p>
        The following decorators are provided:
        <ul>
        <li>Unmodifiable - ensures the collection cannot be altered
        </ul>
        @version $Id$
        <!-- ACCEPT >=> 6855d759-9f1d-11ea-8e40-333445793454 -->



